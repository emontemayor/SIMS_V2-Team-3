
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b10  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  2000000c  00001b1c  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000118  00001c28  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f857  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c57  00000000  00000000  0004f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ade  00000000  00000000  0005353b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005a8  00000000  00000000  00059019  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b88  00000000  00000000  000595c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000060d6  00000000  00000000  0005a149  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000653d  00000000  00000000  0006021f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ec4  00000000  00000000  0006675c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 d5 16 00 00 d1 16 00 00 d1 16 00 00     .!. ............
	...
      2c:	d1 16 00 00 00 00 00 00 00 00 00 00 d1 16 00 00     ................
      3c:	d1 16 00 00 d1 16 00 00 d1 16 00 00 d1 16 00 00     ................
      4c:	d1 16 00 00 d1 16 00 00 d1 16 00 00 d1 16 00 00     ................
      5c:	d1 16 00 00 d1 16 00 00 c1 10 00 00 d1 10 00 00     ................
      6c:	e1 10 00 00 f1 10 00 00 01 11 00 00 11 11 00 00     ................
      7c:	d1 16 00 00 d1 16 00 00 d1 16 00 00 d1 16 00 00     ................
      8c:	d1 16 00 00 d1 16 00 00 d1 16 00 00 d1 16 00 00     ................
      9c:	d1 16 00 00 d1 16 00 00 d1 16 00 00 d1 16 00 00     ................
      ac:	d1 16 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001b10 	.word	0x00001b10

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001b10 	.word	0x00001b10
     10c:	00001b10 	.word	0x00001b10
     110:	00000000 	.word	0x00000000

00000114 <spi169_init>:
    spi169_wr8(AX5043_TIMEGAIN0, 0xAD);
    spi169_wr8(AX5043_DRGAIN0, 0xA7);
    spi169_wr8(AX5043_PHASEGAIN0, 0xC3);
    spi169_wr8(AX5043_FREQGAINA0, 0x0F);
    spi169_wr8(AX5043_FREQGAINB0, 0x1F);
    spi169_wr8(AX5043_FREQGAINC0, 0x0A);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
    spi169_wr8(AX5043_FREQGAIND0, 0x0A);
     116:	4e2c      	ldr	r6, [pc, #176]	; (1c8 <spi169_init+0xb4>)
     118:	b091      	sub	sp, #68	; 0x44
     11a:	7831      	ldrb	r1, [r6, #0]
     11c:	2900      	cmp	r1, #0
    spi169_wr8(AX5043_AMPLGAIN0, 0x06);
     11e:	d14f      	bne.n	1c0 <spi169_init+0xac>
     120:	230d      	movs	r3, #13
     122:	2501      	movs	r5, #1
     124:	446b      	add	r3, sp
    spi169_wr8(AX5043_FREQDEV10, 0x00);
     126:	ac02      	add	r4, sp, #8
     128:	77d9      	strb	r1, [r3, #31]
     12a:	220c      	movs	r2, #12
     12c:	4b27      	ldr	r3, [pc, #156]	; (1cc <spi169_init+0xb8>)
    spi169_wr8(AX5043_FREQDEV00, 0x00);
     12e:	a808      	add	r0, sp, #32
     130:	7025      	strb	r5, [r4, #0]
     132:	7421      	strb	r1, [r4, #16]
     134:	7461      	strb	r1, [r4, #17]
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
     136:	74a5      	strb	r5, [r4, #18]
     138:	74e5      	strb	r5, [r4, #19]
     13a:	7521      	strb	r1, [r4, #20]
     13c:	9103      	str	r1, [sp, #12]
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
     13e:	9104      	str	r1, [sp, #16]
     140:	4798      	blx	r3
     142:	2398      	movs	r3, #152	; 0x98
     144:	035b      	lsls	r3, r3, #13
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
     146:	60e3      	str	r3, [r4, #12]
     148:	4b21      	ldr	r3, [pc, #132]	; (1d0 <spi169_init+0xbc>)
     14a:	4f22      	ldr	r7, [pc, #136]	; (1d4 <spi169_init+0xc0>)
     14c:	62a3      	str	r3, [r4, #40]	; 0x28
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     14e:	4b22      	ldr	r3, [pc, #136]	; (1d8 <spi169_init+0xc4>)
     150:	0022      	movs	r2, r4
     152:	62e3      	str	r3, [r4, #44]	; 0x2c
     154:	2301      	movs	r3, #1
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     156:	425b      	negs	r3, r3
     158:	6323      	str	r3, [r4, #48]	; 0x30
     15a:	4b20      	ldr	r3, [pc, #128]	; (1dc <spi169_init+0xc8>)
     15c:	4920      	ldr	r1, [pc, #128]	; (1e0 <spi169_init+0xcc>)
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     15e:	6363      	str	r3, [r4, #52]	; 0x34
     160:	4b20      	ldr	r3, [pc, #128]	; (1e4 <spi169_init+0xd0>)
     162:	0038      	movs	r0, r7
     164:	61a3      	str	r3, [r4, #24]
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     166:	4b20      	ldr	r3, [pc, #128]	; (1e8 <spi169_init+0xd4>)
     168:	4798      	blx	r3
     16a:	683c      	ldr	r4, [r7, #0]
     16c:	4b1f      	ldr	r3, [pc, #124]	; (1ec <spi169_init+0xd8>)
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     16e:	0020      	movs	r0, r4
     170:	4798      	blx	r3
     172:	231f      	movs	r3, #31
     174:	4018      	ands	r0, r3
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     176:	4085      	lsls	r5, r0
     178:	4b1d      	ldr	r3, [pc, #116]	; (1f0 <spi169_init+0xdc>)
     17a:	601d      	str	r5, [r3, #0]
     17c:	683b      	ldr	r3, [r7, #0]
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     17e:	69dd      	ldr	r5, [r3, #28]
     180:	2d00      	cmp	r5, #0
     182:	d1fc      	bne.n	17e <spi169_init+0x6a>
     184:	2302      	movs	r3, #2
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     186:	6822      	ldr	r2, [r4, #0]
     188:	2011      	movs	r0, #17
     18a:	4313      	orrs	r3, r2
     18c:	6023      	str	r3, [r4, #0]
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     18e:	2401      	movs	r4, #1
     190:	4f18      	ldr	r7, [pc, #96]	; (1f4 <spi169_init+0xe0>)
     192:	a901      	add	r1, sp, #4
     194:	4b18      	ldr	r3, [pc, #96]	; (1f8 <spi169_init+0xe4>)
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     196:	704c      	strb	r4, [r1, #1]
     198:	708d      	strb	r5, [r1, #2]
     19a:	700c      	strb	r4, [r1, #0]
     19c:	7038      	strb	r0, [r7, #0]
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     19e:	707d      	strb	r5, [r7, #1]
     1a0:	70bd      	strb	r5, [r7, #2]
     1a2:	4798      	blx	r3
     1a4:	783a      	ldrb	r2, [r7, #0]
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     1a6:	0953      	lsrs	r3, r2, #5
     1a8:	09d1      	lsrs	r1, r2, #7
     1aa:	d10b      	bne.n	1c4 <spi169_init+0xb0>
     1ac:	311f      	adds	r1, #31
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     1ae:	400a      	ands	r2, r1
     1b0:	0021      	movs	r1, r4
     1b2:	4091      	lsls	r1, r2
     1b4:	000a      	movs	r2, r1
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     1b6:	4911      	ldr	r1, [pc, #68]	; (1fc <spi169_init+0xe8>)
     1b8:	01db      	lsls	r3, r3, #7
     1ba:	185b      	adds	r3, r3, r1
     1bc:	619a      	str	r2, [r3, #24]
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     1be:	7034      	strb	r4, [r6, #0]
     1c0:	b011      	add	sp, #68	; 0x44
     1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1c4:	61ad      	str	r5, [r5, #24]
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     1c6:	deff      	udf	#255	; 0xff
     1c8:	20000028 	.word	0x20000028
     1cc:	00001ac9 	.word	0x00001ac9
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     1d0:	00100002 	.word	0x00100002
     1d4:	200000bc 	.word	0x200000bc
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     1d8:	00130002 	.word	0x00130002
     1dc:	00120002 	.word	0x00120002
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     1e0:	42000c00 	.word	0x42000c00
     1e4:	000f4240 	.word	0x000f4240
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     1e8:	00000c55 	.word	0x00000c55
     1ec:	00001095 	.word	0x00001095
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     1f0:	e000e100 	.word	0xe000e100
     1f4:	200000f8 	.word	0x200000f8
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     1f8:	000003e5 	.word	0x000003e5
     1fc:	41004400 	.word	0x41004400

00000200 <uart245_init>:
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for communicating with the
 *  RC2500HP.
 */
void uart245_init(void)
{
     200:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     202:	2380      	movs	r3, #128	; 0x80
     204:	b091      	sub	sp, #68	; 0x44
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     206:	4669      	mov	r1, sp
     208:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     20a:	05db      	lsls	r3, r3, #23
     20c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     20e:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
     210:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     212:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
     214:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     216:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     218:	3105      	adds	r1, #5
     21a:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     21c:	4669      	mov	r1, sp
     21e:	3106      	adds	r1, #6
     220:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
     222:	466a      	mov	r2, sp
     224:	3207      	adds	r2, #7
     226:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
     228:	aa02      	add	r2, sp, #8
     22a:	77d3      	strb	r3, [r2, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     22c:	aa0b      	add	r2, sp, #44	; 0x2c
     22e:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
     230:	222d      	movs	r2, #45	; 0x2d
     232:	446a      	add	r2, sp
     234:	7013      	strb	r3, [r2, #0]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     236:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     238:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     23a:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     23c:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
     23e:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
     240:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
     242:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
     244:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
     246:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     248:	9305      	str	r3, [sp, #20]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     24a:	774b      	strb	r3, [r1, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART245_BAUD;
     24c:	2396      	movs	r3, #150	; 0x96
     24e:	01db      	lsls	r3, r3, #7
     250:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     252:	2390      	movs	r3, #144	; 0x90
     254:	035b      	lsls	r3, r3, #13
     256:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     258:	4b12      	ldr	r3, [pc, #72]	; (2a4 <uart245_init+0xa4>)
	config->receive_pulse_length                    = 19;
     25a:	2213      	movs	r2, #19
     25c:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     25e:	4b12      	ldr	r3, [pc, #72]	; (2a8 <uart245_init+0xa8>)
     260:	768a      	strb	r2, [r1, #26]
     262:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     264:	2301      	movs	r3, #1
     266:	425b      	negs	r3, r3
     268:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     26a:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     26c:	4d0f      	ldr	r5, [pc, #60]	; (2ac <uart245_init+0xac>)
     26e:	466a      	mov	r2, sp
     270:	490f      	ldr	r1, [pc, #60]	; (2b0 <uart245_init+0xb0>)
     272:	0028      	movs	r0, r5
     274:	4b0f      	ldr	r3, [pc, #60]	; (2b4 <uart245_init+0xb4>)
     276:	4798      	blx	r3
     278:	2800      	cmp	r0, #0
     27a:	d1f7      	bne.n	26c <uart245_init+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     27c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     27e:	4b0e      	ldr	r3, [pc, #56]	; (2b8 <uart245_init+0xb8>)
     280:	0020      	movs	r0, r4
     282:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     284:	231f      	movs	r3, #31
     286:	4018      	ands	r0, r3
     288:	3b1e      	subs	r3, #30
     28a:	4083      	lsls	r3, r0
     28c:	4a0b      	ldr	r2, [pc, #44]	; (2bc <uart245_init+0xbc>)
     28e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     290:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     292:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     294:	2b00      	cmp	r3, #0
     296:	d1fc      	bne.n	292 <uart245_init+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     298:	6822      	ldr	r2, [r4, #0]
     29a:	3302      	adds	r3, #2
     29c:	4313      	orrs	r3, r2
     29e:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     2a0:	b011      	add	sp, #68	; 0x44
     2a2:	bd30      	pop	{r4, r5, pc}
     2a4:	00080002 	.word	0x00080002
     2a8:	00090002 	.word	0x00090002
     2ac:	2000002c 	.word	0x2000002c
     2b0:	42000800 	.word	0x42000800
     2b4:	0000070d 	.word	0x0000070d
     2b8:	00001095 	.word	0x00001095
     2bc:	e000e100 	.word	0xe000e100

000002c0 <uart245_wait_prompt>:
 * Description      : Waits for the prompt character from the RC2500HP,
 *  the '>' character. Returns a ASF status code based on the result of UART
 *  functions.
 */
status_code_genare_t uart245_wait_prompt(void)
{
     2c0:	b570      	push	{r4, r5, r6, lr}
    uint8_t wait_time = 100;
    
    do 
    {
        // set the first value of the buffer to a known value that isn't '>'
        uart245_rx_buff[0] = 0xFF;
     2c2:	25ff      	movs	r5, #255	; 0xff
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <uart245_wait_prompt+0x34>)
        
        // wait for the prompt '>' character
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     2c6:	2201      	movs	r2, #1
     2c8:	0021      	movs	r1, r4
     2ca:	480b      	ldr	r0, [pc, #44]	; (2f8 <uart245_wait_prompt+0x38>)
     2cc:	4b0b      	ldr	r3, [pc, #44]	; (2fc <uart245_wait_prompt+0x3c>)
        uart245_rx_buff[0] = 0xFF;
     2ce:	7025      	strb	r5, [r4, #0]
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     2d0:	4798      	blx	r3
    
        /* if a character wasn't received before the uart's time out or another
         * error occurred, return that error */
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
     2d2:	2800      	cmp	r0, #0
     2d4:	d001      	beq.n	2da <uart245_wait_prompt+0x1a>
     2d6:	2812      	cmp	r0, #18
     2d8:	d109      	bne.n	2ee <uart245_wait_prompt+0x2e>
            return stat_val;
        
        /* if the received character is not the module's prompt character, 
         * wait some more */
        if(uart245_rx_buff[0] != '>')
     2da:	7823      	ldrb	r3, [r4, #0]
     2dc:	2b3e      	cmp	r3, #62	; 0x3e
     2de:	d007      	beq.n	2f0 <uart245_wait_prompt+0x30>
            wait_time--;
        else
            return STATUS_OK;
        
        // delay a millisecond
        delay_ms(1);
     2e0:	4b07      	ldr	r3, [pc, #28]	; (300 <uart245_wait_prompt+0x40>)
     2e2:	2001      	movs	r0, #1
     2e4:	4798      	blx	r3
        
    }while (uart245_rx_buff[0] != '>');
     2e6:	7823      	ldrb	r3, [r4, #0]
     2e8:	2b3e      	cmp	r3, #62	; 0x3e
     2ea:	d1eb      	bne.n	2c4 <uart245_wait_prompt+0x4>
    
    return STATUS_ABORTED;
     2ec:	2004      	movs	r0, #4
}
     2ee:	bd70      	pop	{r4, r5, r6, pc}
            return STATUS_OK;
     2f0:	2000      	movs	r0, #0
     2f2:	e7fc      	b.n	2ee <uart245_wait_prompt+0x2e>
     2f4:	20000060 	.word	0x20000060
     2f8:	2000002c 	.word	0x2000002c
     2fc:	00000a75 	.word	0x00000a75
     300:	000003b9 	.word	0x000003b9

00000304 <uart245_enter_config>:
 * Description      : Enters the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF 
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_enter_config(void)
{
     304:	b570      	push	{r4, r5, r6, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     306:	2540      	movs	r5, #64	; 0x40
     308:	4c06      	ldr	r4, [pc, #24]	; (324 <uart245_enter_config+0x20>)
    
    // pull the CONFIG pin low to begin configuration mode
    port_pin_set_output_level(CONFIG245, false);
    
    // wait for the module to return a prompt '>' character
    stat_val = uart245_wait_prompt();
     30a:	4b07      	ldr	r3, [pc, #28]	; (328 <uart245_enter_config+0x24>)
     30c:	6165      	str	r5, [r4, #20]
     30e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     310:	61a5      	str	r5, [r4, #24]
    // set the CONFIG pin back high
    port_pin_set_output_level(CONFIG245, true);
    
    /* if a character wasn't received before the uart's time out or another
     * error occurred, return that error */
    if(stat_val != STATUS_OK)
     312:	2800      	cmp	r0, #0
     314:	d104      	bne.n	320 <uart245_enter_config+0x1c>
        return stat_val;
        
    /* if the received character is not the module's prompt character, 
     * return an error */
    if(uart245_rx_buff[0] != '>')
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <uart245_enter_config+0x28>)
     318:	781b      	ldrb	r3, [r3, #0]
     31a:	2b3e      	cmp	r3, #62	; 0x3e
     31c:	d000      	beq.n	320 <uart245_enter_config+0x1c>
        return STATUS_ABORTED;
     31e:	3004      	adds	r0, #4
        
    // else return the stat_val if everything was OK
    return stat_val;
}
     320:	bd70      	pop	{r4, r5, r6, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	41004400 	.word	0x41004400
     328:	000002c1 	.word	0x000002c1
     32c:	20000060 	.word	0x20000060

00000330 <uart245_exit_config>:
 * Description      : Exits the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_exit_config(void)
{
     330:	b510      	push	{r4, lr}
    status_code_genare_t stat_val;
    
    // send an 'X' to indicate end of CONFIG mode
    do 
    {
        stat_val = usart_write_wait(&uart245_inst, 'X');
     332:	2158      	movs	r1, #88	; 0x58
     334:	4805      	ldr	r0, [pc, #20]	; (34c <uart245_exit_config+0x1c>)
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <uart245_exit_config+0x20>)
     338:	4798      	blx	r3
     33a:	0004      	movs	r4, r0
    } while (stat_val == STATUS_BUSY);
     33c:	2805      	cmp	r0, #5
     33e:	d0f8      	beq.n	332 <uart245_exit_config+0x2>
    
    /* wait one millisecond so the module can return to IDLE state
     * refer to page 44 of RC2500HP-TM datasheet for timing info */
    delay_ms(1);
     340:	2001      	movs	r0, #1
     342:	4b04      	ldr	r3, [pc, #16]	; (354 <uart245_exit_config+0x24>)
     344:	4798      	blx	r3
    
    return stat_val;
}
     346:	0020      	movs	r0, r4
     348:	bd10      	pop	{r4, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	2000002c 	.word	0x2000002c
     350:	000009d1 	.word	0x000009d1
     354:	000003b9 	.word	0x000003b9

00000358 <uart245_config_test1>:
 * Description      : RC2500HP configuration command to put the module in test
 *  mode 1. This mode continuously transmits a carrier until another
 *  config command is received.
 */
void uart245_config_test1(void)
{
     358:	b510      	push	{r4, lr}
    /* send a '1' to set test mode 1, wait until the uart is successful.
     * Test Mode 1 turns on the TX carrier */
    while(usart_write_wait(&uart245_inst, '1') == STATUS_BUSY);
     35a:	2131      	movs	r1, #49	; 0x31
     35c:	4803      	ldr	r0, [pc, #12]	; (36c <uart245_config_test1+0x14>)
     35e:	4b04      	ldr	r3, [pc, #16]	; (370 <uart245_config_test1+0x18>)
     360:	4798      	blx	r3
     362:	2805      	cmp	r0, #5
     364:	d0f9      	beq.n	35a <uart245_config_test1+0x2>
    
    // wait for the module to return a prompt '>' character
    uart245_wait_prompt();
     366:	4b03      	ldr	r3, [pc, #12]	; (374 <uart245_config_test1+0x1c>)
     368:	4798      	blx	r3
}
     36a:	bd10      	pop	{r4, pc}
     36c:	2000002c 	.word	0x2000002c
     370:	000009d1 	.word	0x000009d1
     374:	000002c1 	.word	0x000002c1

00000378 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     378:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     37a:	4b09      	ldr	r3, [pc, #36]	; (3a0 <delay_init+0x28>)
     37c:	2000      	movs	r0, #0
     37e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     380:	21fa      	movs	r1, #250	; 0xfa
     382:	4c08      	ldr	r4, [pc, #32]	; (3a4 <delay_init+0x2c>)
     384:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     386:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     388:	47a0      	blx	r4
     38a:	4b07      	ldr	r3, [pc, #28]	; (3a8 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     38c:	4907      	ldr	r1, [pc, #28]	; (3ac <delay_init+0x34>)
	cycles_per_ms /= 1000;
     38e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     390:	0028      	movs	r0, r5
     392:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     394:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     396:	4b06      	ldr	r3, [pc, #24]	; (3b0 <delay_init+0x38>)
     398:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     39a:	4b06      	ldr	r3, [pc, #24]	; (3b4 <delay_init+0x3c>)
     39c:	601a      	str	r2, [r3, #0]
}
     39e:	bd70      	pop	{r4, r5, r6, pc}
     3a0:	00001491 	.word	0x00001491
     3a4:	000018fd 	.word	0x000018fd
     3a8:	20000000 	.word	0x20000000
     3ac:	000f4240 	.word	0x000f4240
     3b0:	20000004 	.word	0x20000004
     3b4:	e000e010 	.word	0xe000e010

000003b8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     3b8:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3ba:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     3bc:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     3be:	4b07      	ldr	r3, [pc, #28]	; (3dc <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3c0:	0264      	lsls	r4, r4, #9
     3c2:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     3c4:	4b06      	ldr	r3, [pc, #24]	; (3e0 <delay_cycles_ms+0x28>)
	while (n--) {
     3c6:	3801      	subs	r0, #1
     3c8:	d200      	bcs.n	3cc <delay_cycles_ms+0x14>
	}
}
     3ca:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     3cc:	2a00      	cmp	r2, #0
     3ce:	d0fa      	beq.n	3c6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     3d0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     3d2:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3d4:	681d      	ldr	r5, [r3, #0]
     3d6:	4225      	tst	r5, r4
     3d8:	d0fc      	beq.n	3d4 <delay_cycles_ms+0x1c>
     3da:	e7f4      	b.n	3c6 <delay_cycles_ms+0xe>
     3dc:	20000000 	.word	0x20000000
     3e0:	e000e010 	.word	0xe000e010

000003e4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3e4:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3e6:	2280      	movs	r2, #128	; 0x80
     3e8:	ab01      	add	r3, sp, #4
     3ea:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3ec:	780a      	ldrb	r2, [r1, #0]
     3ee:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3f0:	784a      	ldrb	r2, [r1, #1]
     3f2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3f4:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3f6:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     3f8:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3fa:	4b01      	ldr	r3, [pc, #4]	; (400 <port_pin_set_config+0x1c>)
     3fc:	4798      	blx	r3
}
     3fe:	bd07      	pop	{r0, r1, r2, pc}
     400:	00001675 	.word	0x00001675

00000404 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     404:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     406:	2400      	movs	r4, #0
{
     408:	b089      	sub	sp, #36	; 0x24
     40a:	9200      	str	r2, [sp, #0]
     40c:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
     40e:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
     410:	2600      	movs	r6, #0
     412:	2700      	movs	r7, #0
     414:	0025      	movs	r5, r4
{
     416:	9006      	str	r0, [sp, #24]
     418:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
     41a:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
     41c:	9a03      	ldr	r2, [sp, #12]
     41e:	4b13      	ldr	r3, [pc, #76]	; (46c <long_division+0x68>)
     420:	2001      	movs	r0, #1
     422:	2100      	movs	r1, #0
     424:	4798      	blx	r3

		r = r << 1;
     426:	19b6      	adds	r6, r6, r6
     428:	417f      	adcs	r7, r7

		if (n & bit_shift) {
     42a:	9b06      	ldr	r3, [sp, #24]
     42c:	9a07      	ldr	r2, [sp, #28]
     42e:	4003      	ands	r3, r0
     430:	400a      	ands	r2, r1
		r = r << 1;
     432:	9604      	str	r6, [sp, #16]
     434:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
     436:	4313      	orrs	r3, r2
     438:	d003      	beq.n	442 <long_division+0x3e>
			r |= 0x01;
     43a:	2301      	movs	r3, #1
     43c:	4333      	orrs	r3, r6
     43e:	001e      	movs	r6, r3
     440:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
     442:	9b01      	ldr	r3, [sp, #4]
     444:	42bb      	cmp	r3, r7
     446:	d809      	bhi.n	45c <long_division+0x58>
     448:	d102      	bne.n	450 <long_division+0x4c>
     44a:	9b00      	ldr	r3, [sp, #0]
     44c:	42b3      	cmp	r3, r6
     44e:	d805      	bhi.n	45c <long_division+0x58>
			r = r - d;
     450:	9a00      	ldr	r2, [sp, #0]
     452:	9b01      	ldr	r3, [sp, #4]
     454:	1ab6      	subs	r6, r6, r2
     456:	419f      	sbcs	r7, r3
			q |= bit_shift;
     458:	4304      	orrs	r4, r0
     45a:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
     45c:	9b03      	ldr	r3, [sp, #12]
     45e:	1e5a      	subs	r2, r3, #1
     460:	9203      	str	r2, [sp, #12]
     462:	d2db      	bcs.n	41c <long_division+0x18>
		}
	}

	return q;
}
     464:	0020      	movs	r0, r4
     466:	0029      	movs	r1, r5
     468:	b009      	add	sp, #36	; 0x24
     46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     46c:	00001a15 	.word	0x00001a15

00000470 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     470:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     472:	0849      	lsrs	r1, r1, #1
{
     474:	0004      	movs	r4, r0
     476:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     478:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     47a:	42a1      	cmp	r1, r4
     47c:	d201      	bcs.n	482 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     47e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     480:	0003      	movs	r3, r0
     482:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     484:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     486:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     488:	428c      	cmp	r4, r1
     48a:	d9f9      	bls.n	480 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     48c:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     48e:	2bff      	cmp	r3, #255	; 0xff
     490:	d8f5      	bhi.n	47e <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     492:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     494:	2000      	movs	r0, #0
     496:	e7f2      	b.n	47e <_sercom_get_sync_baud_val+0xe>

00000498 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     498:	b5f0      	push	{r4, r5, r6, r7, lr}
     49a:	b085      	sub	sp, #20
     49c:	001e      	movs	r6, r3
     49e:	ab0a      	add	r3, sp, #40	; 0x28
     4a0:	000d      	movs	r5, r1
     4a2:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4a4:	0003      	movs	r3, r0
     4a6:	434b      	muls	r3, r1
{
     4a8:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4aa:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     4ac:	42ab      	cmp	r3, r5
     4ae:	d817      	bhi.n	4e0 <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     4b0:	2e00      	cmp	r6, #0
     4b2:	d118      	bne.n	4e6 <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     4b4:	0002      	movs	r2, r0
     4b6:	0033      	movs	r3, r6
     4b8:	0008      	movs	r0, r1
     4ba:	4c1b      	ldr	r4, [pc, #108]	; (528 <_sercom_get_async_baud_val+0x90>)
     4bc:	0031      	movs	r1, r6
     4be:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
     4c0:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     4c2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     4c4:	0033      	movs	r3, r6
     4c6:	4c19      	ldr	r4, [pc, #100]	; (52c <_sercom_get_async_baud_val+0x94>)
     4c8:	0030      	movs	r0, r6
     4ca:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4cc:	2200      	movs	r2, #0
     4ce:	2301      	movs	r3, #1
     4d0:	1a12      	subs	r2, r2, r0
     4d2:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     4d4:	0c14      	lsrs	r4, r2, #16
     4d6:	0418      	lsls	r0, r3, #16
     4d8:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
     4da:	2700      	movs	r7, #0
	*baudval = baud_calculated;
     4dc:	9b03      	ldr	r3, [sp, #12]
     4de:	801c      	strh	r4, [r3, #0]
}
     4e0:	0038      	movs	r0, r7
     4e2:	b005      	add	sp, #20
     4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
     4e6:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4e8:	2e01      	cmp	r6, #1
     4ea:	d1f6      	bne.n	4da <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     4ec:	000a      	movs	r2, r1
     4ee:	0023      	movs	r3, r4
     4f0:	0021      	movs	r1, r4
     4f2:	4e0d      	ldr	r6, [pc, #52]	; (528 <_sercom_get_async_baud_val+0x90>)
     4f4:	47b0      	blx	r6
     4f6:	9000      	str	r0, [sp, #0]
     4f8:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     4fa:	000b      	movs	r3, r1
     4fc:	0002      	movs	r2, r0
     4fe:	0021      	movs	r1, r4
     500:	0028      	movs	r0, r5
     502:	4c0a      	ldr	r4, [pc, #40]	; (52c <_sercom_get_async_baud_val+0x94>)
     504:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
     506:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
     508:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     50a:	019b      	lsls	r3, r3, #6
     50c:	4298      	cmp	r0, r3
     50e:	d8e7      	bhi.n	4e0 <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     510:	9a00      	ldr	r2, [sp, #0]
     512:	9b01      	ldr	r3, [sp, #4]
     514:	0f69      	lsrs	r1, r5, #29
     516:	00e8      	lsls	r0, r5, #3
     518:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     51a:	00f4      	lsls	r4, r6, #3
     51c:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
     51e:	b2e4      	uxtb	r4, r4
     520:	0364      	lsls	r4, r4, #13
     522:	4334      	orrs	r4, r6
     524:	e7d9      	b.n	4da <_sercom_get_async_baud_val+0x42>
     526:	46c0      	nop			; (mov r8, r8)
     528:	00001a2d 	.word	0x00001a2d
     52c:	00000405 	.word	0x00000405

00000530 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     530:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     532:	4c0d      	ldr	r4, [pc, #52]	; (568 <sercom_set_gclk_generator+0x38>)
{
     534:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     536:	7823      	ldrb	r3, [r4, #0]
     538:	2b00      	cmp	r3, #0
     53a:	d001      	beq.n	540 <sercom_set_gclk_generator+0x10>
     53c:	2900      	cmp	r1, #0
     53e:	d00c      	beq.n	55a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     540:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     542:	2013      	movs	r0, #19
     544:	4b09      	ldr	r3, [pc, #36]	; (56c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     546:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     548:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     54a:	2013      	movs	r0, #19
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <sercom_set_gclk_generator+0x40>)
     54e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     550:	2301      	movs	r3, #1

		return STATUS_OK;
     552:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     554:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     556:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     558:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     55a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     55c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     55e:	42ab      	cmp	r3, r5
     560:	d0fa      	beq.n	558 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     562:	201d      	movs	r0, #29
     564:	e7f8      	b.n	558 <sercom_set_gclk_generator+0x28>
     566:	46c0      	nop			; (mov r8, r8)
     568:	20000080 	.word	0x20000080
     56c:	000015a1 	.word	0x000015a1
     570:	00001519 	.word	0x00001519

00000574 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     574:	4a39      	ldr	r2, [pc, #228]	; (65c <_sercom_get_default_pad+0xe8>)
{
     576:	0003      	movs	r3, r0
     578:	b500      	push	{lr}
     57a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     57c:	4293      	cmp	r3, r2
     57e:	d033      	beq.n	5e8 <_sercom_get_default_pad+0x74>
     580:	d807      	bhi.n	592 <_sercom_get_default_pad+0x1e>
     582:	4a37      	ldr	r2, [pc, #220]	; (660 <_sercom_get_default_pad+0xec>)
     584:	4293      	cmp	r3, r2
     586:	d014      	beq.n	5b2 <_sercom_get_default_pad+0x3e>
     588:	4a36      	ldr	r2, [pc, #216]	; (664 <_sercom_get_default_pad+0xf0>)
     58a:	4293      	cmp	r3, r2
     58c:	d01f      	beq.n	5ce <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     58e:	2300      	movs	r3, #0
     590:	e017      	b.n	5c2 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     592:	4a35      	ldr	r2, [pc, #212]	; (668 <_sercom_get_default_pad+0xf4>)
     594:	4293      	cmp	r3, r2
     596:	d03a      	beq.n	60e <_sercom_get_default_pad+0x9a>
     598:	4a34      	ldr	r2, [pc, #208]	; (66c <_sercom_get_default_pad+0xf8>)
     59a:	4293      	cmp	r3, r2
     59c:	d044      	beq.n	628 <_sercom_get_default_pad+0xb4>
     59e:	4a34      	ldr	r2, [pc, #208]	; (670 <_sercom_get_default_pad+0xfc>)
     5a0:	4293      	cmp	r3, r2
     5a2:	d1f4      	bne.n	58e <_sercom_get_default_pad+0x1a>
	return 0;
     5a4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5a6:	2903      	cmp	r1, #3
     5a8:	d80b      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     5aa:	f001 f99d 	bl	18e8 <__gnu_thumb1_case_uqi>
     5ae:	2a50      	.short	0x2a50
     5b0:	2e2c      	.short	0x2e2c
	return 0;
     5b2:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b4:	2903      	cmp	r1, #3
     5b6:	d804      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     5b8:	f001 f996 	bl	18e8 <__gnu_thumb1_case_uqi>
     5bc:	07050243 	.word	0x07050243
     5c0:	4b2c      	ldr	r3, [pc, #176]	; (674 <_sercom_get_default_pad+0x100>)
}
     5c2:	0018      	movs	r0, r3
     5c4:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5c6:	4b2c      	ldr	r3, [pc, #176]	; (678 <_sercom_get_default_pad+0x104>)
     5c8:	e7fb      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     5ca:	4b2c      	ldr	r3, [pc, #176]	; (67c <_sercom_get_default_pad+0x108>)
     5cc:	e7f9      	b.n	5c2 <_sercom_get_default_pad+0x4e>
	return 0;
     5ce:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d0:	2903      	cmp	r1, #3
     5d2:	d8f6      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     5d4:	f001 f988 	bl	18e8 <__gnu_thumb1_case_uqi>
     5d8:	06040237 	.word	0x06040237
     5dc:	4b28      	ldr	r3, [pc, #160]	; (680 <_sercom_get_default_pad+0x10c>)
     5de:	e7f0      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     5e0:	4b28      	ldr	r3, [pc, #160]	; (684 <_sercom_get_default_pad+0x110>)
     5e2:	e7ee      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     5e4:	4b28      	ldr	r3, [pc, #160]	; (688 <_sercom_get_default_pad+0x114>)
     5e6:	e7ec      	b.n	5c2 <_sercom_get_default_pad+0x4e>
	return 0;
     5e8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ea:	2903      	cmp	r1, #3
     5ec:	d8e9      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     5ee:	f001 f97b 	bl	18e8 <__gnu_thumb1_case_uqi>
     5f2:	022c      	.short	0x022c
     5f4:	0604      	.short	0x0604
     5f6:	4b25      	ldr	r3, [pc, #148]	; (68c <_sercom_get_default_pad+0x118>)
     5f8:	e7e3      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     5fa:	4b25      	ldr	r3, [pc, #148]	; (690 <_sercom_get_default_pad+0x11c>)
     5fc:	e7e1      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     5fe:	4b25      	ldr	r3, [pc, #148]	; (694 <_sercom_get_default_pad+0x120>)
     600:	e7df      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     602:	4b25      	ldr	r3, [pc, #148]	; (698 <_sercom_get_default_pad+0x124>)
     604:	e7dd      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     606:	4b25      	ldr	r3, [pc, #148]	; (69c <_sercom_get_default_pad+0x128>)
     608:	e7db      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     60a:	4b25      	ldr	r3, [pc, #148]	; (6a0 <_sercom_get_default_pad+0x12c>)
     60c:	e7d9      	b.n	5c2 <_sercom_get_default_pad+0x4e>
	return 0;
     60e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     610:	2903      	cmp	r1, #3
     612:	d8d6      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     614:	f001 f968 	bl	18e8 <__gnu_thumb1_case_uqi>
     618:	0604021d 	.word	0x0604021d
     61c:	4b21      	ldr	r3, [pc, #132]	; (6a4 <_sercom_get_default_pad+0x130>)
     61e:	e7d0      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     620:	4b21      	ldr	r3, [pc, #132]	; (6a8 <_sercom_get_default_pad+0x134>)
     622:	e7ce      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     624:	4b21      	ldr	r3, [pc, #132]	; (6ac <_sercom_get_default_pad+0x138>)
     626:	e7cc      	b.n	5c2 <_sercom_get_default_pad+0x4e>
	return 0;
     628:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     62a:	2903      	cmp	r1, #3
     62c:	d8c9      	bhi.n	5c2 <_sercom_get_default_pad+0x4e>
     62e:	f001 f95b 	bl	18e8 <__gnu_thumb1_case_uqi>
     632:	0212      	.short	0x0212
     634:	0604      	.short	0x0604
     636:	4b1e      	ldr	r3, [pc, #120]	; (6b0 <_sercom_get_default_pad+0x13c>)
     638:	e7c3      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     63a:	4b1e      	ldr	r3, [pc, #120]	; (6b4 <_sercom_get_default_pad+0x140>)
     63c:	e7c1      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     63e:	4b1e      	ldr	r3, [pc, #120]	; (6b8 <_sercom_get_default_pad+0x144>)
     640:	e7bf      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     642:	4b1e      	ldr	r3, [pc, #120]	; (6bc <_sercom_get_default_pad+0x148>)
     644:	e7bd      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     646:	2303      	movs	r3, #3
     648:	e7bb      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     64a:	4b1d      	ldr	r3, [pc, #116]	; (6c0 <_sercom_get_default_pad+0x14c>)
     64c:	e7b9      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     64e:	4b1d      	ldr	r3, [pc, #116]	; (6c4 <_sercom_get_default_pad+0x150>)
     650:	e7b7      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     652:	4b1d      	ldr	r3, [pc, #116]	; (6c8 <_sercom_get_default_pad+0x154>)
     654:	e7b5      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     656:	4b1d      	ldr	r3, [pc, #116]	; (6cc <_sercom_get_default_pad+0x158>)
     658:	e7b3      	b.n	5c2 <_sercom_get_default_pad+0x4e>
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	42001000 	.word	0x42001000
     660:	42000800 	.word	0x42000800
     664:	42000c00 	.word	0x42000c00
     668:	42001800 	.word	0x42001800
     66c:	42001c00 	.word	0x42001c00
     670:	42001400 	.word	0x42001400
     674:	00050003 	.word	0x00050003
     678:	00060003 	.word	0x00060003
     67c:	00070003 	.word	0x00070003
     680:	00010003 	.word	0x00010003
     684:	001e0003 	.word	0x001e0003
     688:	001f0003 	.word	0x001f0003
     68c:	00090003 	.word	0x00090003
     690:	000a0003 	.word	0x000a0003
     694:	000b0003 	.word	0x000b0003
     698:	00110003 	.word	0x00110003
     69c:	00120003 	.word	0x00120003
     6a0:	00130003 	.word	0x00130003
     6a4:	000d0003 	.word	0x000d0003
     6a8:	000e0003 	.word	0x000e0003
     6ac:	000f0003 	.word	0x000f0003
     6b0:	00170003 	.word	0x00170003
     6b4:	00180003 	.word	0x00180003
     6b8:	00190003 	.word	0x00190003
     6bc:	00040003 	.word	0x00040003
     6c0:	00080003 	.word	0x00080003
     6c4:	00100003 	.word	0x00100003
     6c8:	000c0003 	.word	0x000c0003
     6cc:	00160003 	.word	0x00160003

000006d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6d4:	4669      	mov	r1, sp
     6d6:	4b09      	ldr	r3, [pc, #36]	; (6fc <_sercom_get_sercom_inst_index+0x2c>)
     6d8:	466a      	mov	r2, sp
     6da:	cb70      	ldmia	r3!, {r4, r5, r6}
     6dc:	c170      	stmia	r1!, {r4, r5, r6}
     6de:	cb70      	ldmia	r3!, {r4, r5, r6}
     6e0:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6e2:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6e4:	0099      	lsls	r1, r3, #2
     6e6:	5851      	ldr	r1, [r2, r1]
     6e8:	4281      	cmp	r1, r0
     6ea:	d102      	bne.n	6f2 <_sercom_get_sercom_inst_index+0x22>
			return i;
     6ec:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     6ee:	b006      	add	sp, #24
     6f0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6f2:	3301      	adds	r3, #1
     6f4:	2b06      	cmp	r3, #6
     6f6:	d1f5      	bne.n	6e4 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     6f8:	2000      	movs	r0, #0
     6fa:	e7f8      	b.n	6ee <_sercom_get_sercom_inst_index+0x1e>
     6fc:	00001ad8 	.word	0x00001ad8

00000700 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
     700:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     702:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     704:	2b00      	cmp	r3, #0
     706:	d1fc      	bne.n	702 <_usart_wait_for_sync+0x2>
}
     708:	4770      	bx	lr
	...

0000070c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     70c:	b5f0      	push	{r4, r5, r6, r7, lr}
     70e:	0007      	movs	r7, r0
     710:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     712:	4ba0      	ldr	r3, [pc, #640]	; (994 <usart_init+0x288>)
	module->hw = hw;
     714:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     716:	0008      	movs	r0, r1
{
     718:	0016      	movs	r6, r2
     71a:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     71c:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     71e:	2201      	movs	r2, #1
     720:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     722:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     724:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     726:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     728:	4213      	tst	r3, r2
     72a:	d000      	beq.n	72e <usart_init+0x22>
     72c:	e10f      	b.n	94e <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     72e:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     730:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     732:	681c      	ldr	r4, [r3, #0]
     734:	2302      	movs	r3, #2
     736:	401c      	ands	r4, r3
     738:	d000      	beq.n	73c <usart_init+0x30>
     73a:	e108      	b.n	94e <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     73c:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     73e:	381b      	subs	r0, #27
     740:	4098      	lsls	r0, r3
     742:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     744:	4a94      	ldr	r2, [pc, #592]	; (998 <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     746:	3514      	adds	r5, #20
     748:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     74a:	b2ed      	uxtb	r5, r5
     74c:	430b      	orrs	r3, r1
     74e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     750:	0033      	movs	r3, r6
     752:	332d      	adds	r3, #45	; 0x2d
     754:	9302      	str	r3, [sp, #8]
     756:	781b      	ldrb	r3, [r3, #0]
     758:	a90c      	add	r1, sp, #48	; 0x30
     75a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     75c:	0028      	movs	r0, r5
     75e:	4b8f      	ldr	r3, [pc, #572]	; (99c <usart_init+0x290>)
     760:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     762:	0028      	movs	r0, r5
     764:	4b8e      	ldr	r3, [pc, #568]	; (9a0 <usart_init+0x294>)
     766:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     768:	9b02      	ldr	r3, [sp, #8]
     76a:	0021      	movs	r1, r4
     76c:	7818      	ldrb	r0, [r3, #0]
     76e:	4b8d      	ldr	r3, [pc, #564]	; (9a4 <usart_init+0x298>)
     770:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     772:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     774:	2508      	movs	r5, #8
	module->character_size = config->character_size;
     776:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     778:	1d73      	adds	r3, r6, #5
     77a:	7fdb      	ldrb	r3, [r3, #31]
     77c:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
     77e:	1db3      	adds	r3, r6, #6
     780:	7fdb      	ldrb	r3, [r3, #31]
     782:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     784:	7ef3      	ldrb	r3, [r6, #27]
     786:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     788:	7f33      	ldrb	r3, [r6, #28]
     78a:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     78c:	683b      	ldr	r3, [r7, #0]
     78e:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     790:	0018      	movs	r0, r3
     792:	4b80      	ldr	r3, [pc, #512]	; (994 <usart_init+0x288>)
     794:	4798      	blx	r3
	uint16_t baud  = 0;
     796:	ab0e      	add	r3, sp, #56	; 0x38
     798:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
     79a:	8a33      	ldrh	r3, [r6, #16]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     79c:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     79e:	9302      	str	r3, [sp, #8]
     7a0:	2380      	movs	r3, #128	; 0x80
     7a2:	9a02      	ldr	r2, [sp, #8]
     7a4:	01db      	lsls	r3, r3, #7
     7a6:	429a      	cmp	r2, r3
     7a8:	d014      	beq.n	7d4 <usart_init+0xc8>
     7aa:	d808      	bhi.n	7be <usart_init+0xb2>
     7ac:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     7ae:	2510      	movs	r5, #16
	switch (config->sample_rate) {
     7b0:	019b      	lsls	r3, r3, #6
     7b2:	429a      	cmp	r2, r3
     7b4:	d100      	bne.n	7b8 <usart_init+0xac>
     7b6:	e0cd      	b.n	954 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     7b8:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7ba:	2400      	movs	r4, #0
     7bc:	e00a      	b.n	7d4 <usart_init+0xc8>
	switch (config->sample_rate) {
     7be:	23c0      	movs	r3, #192	; 0xc0
     7c0:	9a02      	ldr	r2, [sp, #8]
     7c2:	01db      	lsls	r3, r3, #7
     7c4:	429a      	cmp	r2, r3
     7c6:	d100      	bne.n	7ca <usart_init+0xbe>
     7c8:	e0c3      	b.n	952 <usart_init+0x246>
     7ca:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     7cc:	2503      	movs	r5, #3
	switch (config->sample_rate) {
     7ce:	021b      	lsls	r3, r3, #8
     7d0:	429a      	cmp	r2, r3
     7d2:	d1f1      	bne.n	7b8 <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
     7d4:	6833      	ldr	r3, [r6, #0]
     7d6:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
     7d8:	68f3      	ldr	r3, [r6, #12]
     7da:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
     7dc:	6973      	ldr	r3, [r6, #20]
     7de:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7e0:	7e33      	ldrb	r3, [r6, #24]
     7e2:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7e4:	1df3      	adds	r3, r6, #7
     7e6:	7fdb      	ldrb	r3, [r3, #31]
     7e8:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
     7ea:	6873      	ldr	r3, [r6, #4]
     7ec:	9305      	str	r3, [sp, #20]
     7ee:	0033      	movs	r3, r6
	switch (transfer_mode)
     7f0:	9a05      	ldr	r2, [sp, #20]
     7f2:	3308      	adds	r3, #8
     7f4:	2a00      	cmp	r2, #0
     7f6:	d100      	bne.n	7fa <usart_init+0xee>
     7f8:	e0ae      	b.n	958 <usart_init+0x24c>
     7fa:	2280      	movs	r2, #128	; 0x80
     7fc:	9905      	ldr	r1, [sp, #20]
     7fe:	0552      	lsls	r2, r2, #21
     800:	4291      	cmp	r1, r2
     802:	d10e      	bne.n	822 <usart_init+0x116>
			if (!config->use_external_clock) {
     804:	7fdb      	ldrb	r3, [r3, #31]
     806:	2b00      	cmp	r3, #0
     808:	d10b      	bne.n	822 <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     80a:	4b67      	ldr	r3, [pc, #412]	; (9a8 <usart_init+0x29c>)
     80c:	b2c0      	uxtb	r0, r0
     80e:	6a34      	ldr	r4, [r6, #32]
     810:	4798      	blx	r3
     812:	aa0e      	add	r2, sp, #56	; 0x38
     814:	0001      	movs	r1, r0
     816:	4b65      	ldr	r3, [pc, #404]	; (9ac <usart_init+0x2a0>)
     818:	0020      	movs	r0, r4
     81a:	4798      	blx	r3
	if (status_code != STATUS_OK) {
     81c:	2800      	cmp	r0, #0
     81e:	d000      	beq.n	822 <usart_init+0x116>
     820:	e095      	b.n	94e <usart_init+0x242>
	if(config->encoding_format_enable) {
     822:	7e73      	ldrb	r3, [r6, #25]
     824:	2b00      	cmp	r3, #0
     826:	d002      	beq.n	82e <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     828:	7eb3      	ldrb	r3, [r6, #26]
     82a:	9a03      	ldr	r2, [sp, #12]
     82c:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
     82e:	4b60      	ldr	r3, [pc, #384]	; (9b0 <usart_init+0x2a4>)
     830:	0038      	movs	r0, r7
     832:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
     834:	ab0a      	add	r3, sp, #40	; 0x28
     836:	8a1b      	ldrh	r3, [r3, #16]
     838:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
     83a:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
     83c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     83e:	9b07      	ldr	r3, [sp, #28]
     840:	431c      	orrs	r4, r3
     842:	9b08      	ldr	r3, [sp, #32]
     844:	431c      	orrs	r4, r3
     846:	9b05      	ldr	r3, [sp, #20]
     848:	431c      	orrs	r4, r3
     84a:	9b02      	ldr	r3, [sp, #8]
     84c:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     850:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     852:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     856:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     858:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
     85a:	0033      	movs	r3, r6
     85c:	3308      	adds	r3, #8
     85e:	7fdb      	ldrb	r3, [r3, #31]
     860:	2b00      	cmp	r3, #0
     862:	d101      	bne.n	868 <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     864:	3304      	adds	r3, #4
     866:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     868:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     86a:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     86c:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     86e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     870:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     872:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
     874:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     876:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     878:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     87a:	1d73      	adds	r3, r6, #5
     87c:	7fdb      	ldrb	r3, [r3, #31]
     87e:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     880:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     882:	1db3      	adds	r3, r6, #6
     884:	7fdb      	ldrb	r3, [r3, #31]
     886:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     888:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
     88a:	7ab5      	ldrb	r5, [r6, #10]
     88c:	4315      	orrs	r5, r2
     88e:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
     890:	8933      	ldrh	r3, [r6, #8]
     892:	2bff      	cmp	r3, #255	; 0xff
     894:	d100      	bne.n	898 <usart_init+0x18c>
     896:	e075      	b.n	984 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     898:	2280      	movs	r2, #128	; 0x80
     89a:	0452      	lsls	r2, r2, #17
     89c:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
     89e:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8a0:	0033      	movs	r3, r6
     8a2:	332c      	adds	r3, #44	; 0x2c
     8a4:	781b      	ldrb	r3, [r3, #0]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d103      	bne.n	8b2 <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8aa:	4b42      	ldr	r3, [pc, #264]	; (9b4 <usart_init+0x2a8>)
     8ac:	789b      	ldrb	r3, [r3, #2]
     8ae:	079b      	lsls	r3, r3, #30
     8b0:	d501      	bpl.n	8b6 <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     8b2:	2380      	movs	r3, #128	; 0x80
     8b4:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
     8b6:	0038      	movs	r0, r7
     8b8:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x2a4>)
     8ba:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
     8bc:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
     8be:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
     8c0:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
     8c2:	4b3b      	ldr	r3, [pc, #236]	; (9b0 <usart_init+0x2a4>)
     8c4:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
     8c6:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8c8:	2500      	movs	r5, #0
     8ca:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8cc:	2380      	movs	r3, #128	; 0x80
     8ce:	ac0d      	add	r4, sp, #52	; 0x34
     8d0:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     8d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8d4:	7065      	strb	r5, [r4, #1]
     8d6:	930e      	str	r3, [sp, #56]	; 0x38
     8d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     8da:	70e5      	strb	r5, [r4, #3]
     8dc:	930f      	str	r3, [sp, #60]	; 0x3c
     8de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8e0:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
     8e2:	9310      	str	r3, [sp, #64]	; 0x40
     8e4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     8e6:	9302      	str	r3, [sp, #8]
     8e8:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     8ea:	2010      	movs	r0, #16
     8ec:	aa0a      	add	r2, sp, #40	; 0x28
     8ee:	00ab      	lsls	r3, r5, #2
     8f0:	1812      	adds	r2, r2, r0
     8f2:	58d0      	ldr	r0, [r2, r3]
     8f4:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
     8f6:	2800      	cmp	r0, #0
     8f8:	d102      	bne.n	900 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8fa:	9804      	ldr	r0, [sp, #16]
     8fc:	4b2e      	ldr	r3, [pc, #184]	; (9b8 <usart_init+0x2ac>)
     8fe:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     900:	1c43      	adds	r3, r0, #1
     902:	d005      	beq.n	910 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     904:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     906:	0c00      	lsrs	r0, r0, #16
     908:	b2c0      	uxtb	r0, r0
     90a:	0021      	movs	r1, r4
     90c:	4b2b      	ldr	r3, [pc, #172]	; (9bc <usart_init+0x2b0>)
     90e:	4798      	blx	r3
     910:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     912:	2d04      	cmp	r5, #4
     914:	d1e9      	bne.n	8ea <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
     916:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
     918:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
     91a:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
     91c:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
     91e:	60fc      	str	r4, [r7, #12]
     920:	613c      	str	r4, [r7, #16]
     922:	617c      	str	r4, [r7, #20]
     924:	61bc      	str	r4, [r7, #24]
     926:	61fc      	str	r4, [r7, #28]
     928:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
     92a:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     92c:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     92e:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
     930:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
     932:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
     934:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
     936:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     938:	6838      	ldr	r0, [r7, #0]
     93a:	4b16      	ldr	r3, [pc, #88]	; (994 <usart_init+0x288>)
     93c:	4798      	blx	r3
     93e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     940:	4b1f      	ldr	r3, [pc, #124]	; (9c0 <usart_init+0x2b4>)
     942:	4920      	ldr	r1, [pc, #128]	; (9c4 <usart_init+0x2b8>)
     944:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     946:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
     948:	4b1f      	ldr	r3, [pc, #124]	; (9c8 <usart_init+0x2bc>)
     94a:	00ad      	lsls	r5, r5, #2
     94c:	50ef      	str	r7, [r5, r3]
}
     94e:	b013      	add	sp, #76	; 0x4c
     950:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     952:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     954:	2401      	movs	r4, #1
     956:	e73d      	b.n	7d4 <usart_init+0xc8>
			if (config->use_external_clock) {
     958:	7fdb      	ldrb	r3, [r3, #31]
     95a:	2b00      	cmp	r3, #0
     95c:	d007      	beq.n	96e <usart_init+0x262>
				status_code =
     95e:	0023      	movs	r3, r4
     960:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     962:	6a30      	ldr	r0, [r6, #32]
     964:	9500      	str	r5, [sp, #0]
     966:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
     968:	4c18      	ldr	r4, [pc, #96]	; (9cc <usart_init+0x2c0>)
     96a:	47a0      	blx	r4
     96c:	e756      	b.n	81c <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
     96e:	6a33      	ldr	r3, [r6, #32]
     970:	b2c0      	uxtb	r0, r0
     972:	930b      	str	r3, [sp, #44]	; 0x2c
     974:	4b0c      	ldr	r3, [pc, #48]	; (9a8 <usart_init+0x29c>)
     976:	4798      	blx	r3
				status_code =
     978:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
     97a:	0001      	movs	r1, r0
				status_code =
     97c:	0023      	movs	r3, r4
     97e:	aa0e      	add	r2, sp, #56	; 0x38
     980:	980b      	ldr	r0, [sp, #44]	; 0x2c
     982:	e7f1      	b.n	968 <usart_init+0x25c>
		if(config->lin_slave_enable) {
     984:	7ef3      	ldrb	r3, [r6, #27]
     986:	2b00      	cmp	r3, #0
     988:	d100      	bne.n	98c <usart_init+0x280>
     98a:	e789      	b.n	8a0 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     98c:	2380      	movs	r3, #128	; 0x80
     98e:	04db      	lsls	r3, r3, #19
     990:	431c      	orrs	r4, r3
     992:	e785      	b.n	8a0 <usart_init+0x194>
     994:	000006d1 	.word	0x000006d1
     998:	40000400 	.word	0x40000400
     99c:	000015a1 	.word	0x000015a1
     9a0:	00001519 	.word	0x00001519
     9a4:	00000531 	.word	0x00000531
     9a8:	000015bd 	.word	0x000015bd
     9ac:	00000471 	.word	0x00000471
     9b0:	00000701 	.word	0x00000701
     9b4:	41002000 	.word	0x41002000
     9b8:	00000575 	.word	0x00000575
     9bc:	00001675 	.word	0x00001675
     9c0:	0000105d 	.word	0x0000105d
     9c4:	00000aed 	.word	0x00000aed
     9c8:	20000100 	.word	0x20000100
     9cc:	00000499 	.word	0x00000499

000009d0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     9d0:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9d2:	79c2      	ldrb	r2, [r0, #7]
{
     9d4:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
     9d6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9d8:	2a00      	cmp	r2, #0
     9da:	d00c      	beq.n	9f6 <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     9dc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
     9de:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9e0:	2a00      	cmp	r2, #0
     9e2:	d108      	bne.n	9f6 <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e6:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
     9e8:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9ea:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
     9ec:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9ee:	7e22      	ldrb	r2, [r4, #24]
     9f0:	421a      	tst	r2, r3
     9f2:	d0fc      	beq.n	9ee <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     9f4:	2300      	movs	r3, #0
}
     9f6:	0018      	movs	r0, r3
     9f8:	bd70      	pop	{r4, r5, r6, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00000701 	.word	0x00000701

00000a00 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     a00:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a02:	7982      	ldrb	r2, [r0, #6]
{
     a04:	000e      	movs	r6, r1
		return STATUS_ERR_DENIED;
     a06:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     a08:	2a00      	cmp	r2, #0
     a0a:	d013      	beq.n	a34 <usart_read_wait+0x34>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     a0c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
		return STATUS_BUSY;
     a0e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a10:	2a00      	cmp	r2, #0
     a12:	d10f      	bne.n	a34 <usart_read_wait+0x34>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a14:	2504      	movs	r5, #4
	SercomUsart *const usart_hw = &(module->hw->USART);
     a16:	6804      	ldr	r4, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a18:	7e22      	ldrb	r2, [r4, #24]
     a1a:	422a      	tst	r2, r5
     a1c:	d00a      	beq.n	a34 <usart_read_wait+0x34>
		/* Return error code */
		return STATUS_BUSY;
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     a1e:	4b14      	ldr	r3, [pc, #80]	; (a70 <usart_read_wait+0x70>)
     a20:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a22:	8b63      	ldrh	r3, [r4, #26]
     a24:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     a26:	069a      	lsls	r2, r3, #26
     a28:	d01d      	beq.n	a66 <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a2a:	2202      	movs	r2, #2
     a2c:	4213      	tst	r3, r2
     a2e:	d003      	beq.n	a38 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;

			return STATUS_ERR_BAD_FORMAT;
     a30:	231a      	movs	r3, #26
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a32:	8362      	strh	r2, [r4, #26]

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     a34:	0018      	movs	r0, r3
     a36:	bd70      	pop	{r4, r5, r6, pc}
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a38:	422b      	tst	r3, r5
     a3a:	d002      	beq.n	a42 <usart_read_wait+0x42>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a3c:	8365      	strh	r5, [r4, #26]
			return STATUS_ERR_OVERFLOW;
     a3e:	231e      	movs	r3, #30
     a40:	e7f8      	b.n	a34 <usart_read_wait+0x34>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a42:	2201      	movs	r2, #1
     a44:	4213      	tst	r3, r2
     a46:	d002      	beq.n	a4e <usart_read_wait+0x4e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a48:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_BAD_DATA;
     a4a:	2313      	movs	r3, #19
     a4c:	e7f2      	b.n	a34 <usart_read_wait+0x34>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a4e:	2210      	movs	r2, #16
     a50:	4213      	tst	r3, r2
     a52:	d002      	beq.n	a5a <usart_read_wait+0x5a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a54:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_PROTOCOL;
     a56:	2342      	movs	r3, #66	; 0x42
     a58:	e7ec      	b.n	a34 <usart_read_wait+0x34>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a5a:	2220      	movs	r2, #32
     a5c:	4213      	tst	r3, r2
     a5e:	d002      	beq.n	a66 <usart_read_wait+0x66>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a60:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_PACKET_COLLISION;
     a62:	2341      	movs	r3, #65	; 0x41
     a64:	e7e6      	b.n	a34 <usart_read_wait+0x34>
	*rx_data = usart_hw->DATA.reg;
     a66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a68:	8033      	strh	r3, [r6, #0]
	return STATUS_OK;
     a6a:	2300      	movs	r3, #0
     a6c:	e7e2      	b.n	a34 <usart_read_wait+0x34>
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	00000701 	.word	0x00000701

00000a74 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a74:	b5f0      	push	{r4, r5, r6, r7, lr}
     a76:	b085      	sub	sp, #20
     a78:	0006      	movs	r6, r0
     a7a:	9100      	str	r1, [sp, #0]
     a7c:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     a7e:	2017      	movs	r0, #23
	if (length == 0) {
     a80:	2a00      	cmp	r2, #0
     a82:	d028      	beq.n	ad6 <usart_read_buffer_wait+0x62>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a84:	79b3      	ldrb	r3, [r6, #6]
		return STATUS_ERR_DENIED;
     a86:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     a88:	2b00      	cmp	r3, #0
     a8a:	d024      	beq.n	ad6 <usart_read_buffer_wait+0x62>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;
     a8c:	2400      	movs	r4, #0
	SercomUsart *const usart_hw = &(module->hw->USART);
     a8e:	6833      	ldr	r3, [r6, #0]
     a90:	9301      	str	r3, [sp, #4]
	uint16_t rx_pos = 0;
     a92:	2380      	movs	r3, #128	; 0x80
     a94:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     a96:	2104      	movs	r1, #4
     a98:	9a01      	ldr	r2, [sp, #4]
     a9a:	7e12      	ldrb	r2, [r2, #24]
     a9c:	420a      	tst	r2, r1
     a9e:	d01c      	beq.n	ada <usart_read_buffer_wait+0x66>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     aa0:	ab02      	add	r3, sp, #8
     aa2:	1d9f      	adds	r7, r3, #6
     aa4:	2300      	movs	r3, #0

		retval = usart_read_wait(module, &received_data);
     aa6:	0039      	movs	r1, r7
		uint16_t received_data = 0;
     aa8:	803b      	strh	r3, [r7, #0]
		retval = usart_read_wait(module, &received_data);
     aaa:	0030      	movs	r0, r6
     aac:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <usart_read_buffer_wait+0x74>)
     aae:	4798      	blx	r3

		if (retval != STATUS_OK) {
     ab0:	2800      	cmp	r0, #0
     ab2:	d110      	bne.n	ad6 <usart_read_buffer_wait+0x62>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     ab4:	9900      	ldr	r1, [sp, #0]
     ab6:	883a      	ldrh	r2, [r7, #0]
     ab8:	1c63      	adds	r3, r4, #1
     aba:	550a      	strb	r2, [r1, r4]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     abc:	7971      	ldrb	r1, [r6, #5]
		rx_data[rx_pos++] = received_data;
     abe:	b29b      	uxth	r3, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ac0:	2901      	cmp	r1, #1
     ac2:	d10f      	bne.n	ae4 <usart_read_buffer_wait+0x70>
			rx_data[rx_pos++] = (received_data >> 8);
     ac4:	9900      	ldr	r1, [sp, #0]
     ac6:	3402      	adds	r4, #2
     ac8:	0a12      	lsrs	r2, r2, #8
     aca:	b2a4      	uxth	r4, r4
     acc:	54ca      	strb	r2, [r1, r3]
     ace:	3d01      	subs	r5, #1
     ad0:	b2ad      	uxth	r5, r5
	while (length--) {
     ad2:	2d00      	cmp	r5, #0
     ad4:	d1dd      	bne.n	a92 <usart_read_buffer_wait+0x1e>
		}
	}

	return STATUS_OK;
}
     ad6:	b005      	add	sp, #20
     ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ada:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     adc:	2b00      	cmp	r3, #0
     ade:	d1da      	bne.n	a96 <usart_read_buffer_wait+0x22>
				return STATUS_ERR_TIMEOUT;
     ae0:	2012      	movs	r0, #18
     ae2:	e7f8      	b.n	ad6 <usart_read_buffer_wait+0x62>
		rx_data[rx_pos++] = received_data;
     ae4:	001c      	movs	r4, r3
     ae6:	e7f2      	b.n	ace <usart_read_buffer_wait+0x5a>
     ae8:	00000a01 	.word	0x00000a01

00000aec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     aee:	4b58      	ldr	r3, [pc, #352]	; (c50 <_usart_interrupt_handler+0x164>)
     af0:	0080      	lsls	r0, r0, #2
     af2:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     af4:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     af6:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
     af8:	2b00      	cmp	r3, #0
     afa:	d1fc      	bne.n	af6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     afc:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     afe:	7daf      	ldrb	r7, [r5, #22]
     b00:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
     b02:	0023      	movs	r3, r4
     b04:	3330      	adds	r3, #48	; 0x30
     b06:	781a      	ldrb	r2, [r3, #0]
     b08:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b0a:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
     b0c:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b0e:	421f      	tst	r7, r3
     b10:	d019      	beq.n	b46 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     b12:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     b14:	2a00      	cmp	r2, #0
     b16:	d100      	bne.n	b1a <_usart_interrupt_handler+0x2e>
     b18:	e072      	b.n	c00 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b1c:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b1e:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     b20:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b22:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b24:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b26:	2901      	cmp	r1, #1
     b28:	d064      	beq.n	bf4 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b2a:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b2c:	05db      	lsls	r3, r3, #23
     b2e:	0ddb      	lsrs	r3, r3, #23
     b30:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b32:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     b34:	3b01      	subs	r3, #1
     b36:	b29b      	uxth	r3, r3
     b38:	85e3      	strh	r3, [r4, #46]	; 0x2e
     b3a:	2b00      	cmp	r3, #0
     b3c:	d103      	bne.n	b46 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b3e:	3301      	adds	r3, #1
     b40:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b42:	3301      	adds	r3, #1
     b44:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b46:	2302      	movs	r3, #2
     b48:	421f      	tst	r7, r3
     b4a:	d009      	beq.n	b60 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b4c:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
     b4e:	0023      	movs	r3, r4
     b50:	2200      	movs	r2, #0
     b52:	3333      	adds	r3, #51	; 0x33
     b54:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b56:	07f3      	lsls	r3, r6, #31
     b58:	d502      	bpl.n	b60 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b5a:	0020      	movs	r0, r4
     b5c:	68e3      	ldr	r3, [r4, #12]
     b5e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b60:	2304      	movs	r3, #4
     b62:	421f      	tst	r7, r3
     b64:	d027      	beq.n	bb6 <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
     b66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     b68:	2a00      	cmp	r2, #0
     b6a:	d100      	bne.n	b6e <_usart_interrupt_handler+0x82>
     b6c:	e06d      	b.n	c4a <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b6e:	8b6b      	ldrh	r3, [r5, #26]
     b70:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     b72:	071a      	lsls	r2, r3, #28
     b74:	d446      	bmi.n	c04 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b76:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b78:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b7a:	d045      	beq.n	c08 <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b7c:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     b7e:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
     b80:	4213      	tst	r3, r2
     b82:	d10f      	bne.n	ba4 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b84:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     b86:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b88:	4213      	tst	r3, r2
     b8a:	d10b      	bne.n	ba4 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b8c:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     b8e:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b90:	4213      	tst	r3, r2
     b92:	d107      	bne.n	ba4 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b94:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     b96:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b98:	4213      	tst	r3, r2
     b9a:	d103      	bne.n	ba4 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b9c:	2220      	movs	r2, #32
     b9e:	4213      	tst	r3, r2
     ba0:	d004      	beq.n	bac <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ba2:	2141      	movs	r1, #65	; 0x41
     ba4:	0023      	movs	r3, r4
     ba6:	3332      	adds	r3, #50	; 0x32
     ba8:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     baa:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     bac:	0773      	lsls	r3, r6, #29
     bae:	d502      	bpl.n	bb6 <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     bb0:	0020      	movs	r0, r4
     bb2:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     bb4:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     bb6:	2310      	movs	r3, #16
     bb8:	421f      	tst	r7, r3
     bba:	d006      	beq.n	bca <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     bbc:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     bbe:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     bc0:	421e      	tst	r6, r3
     bc2:	d002      	beq.n	bca <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     bc4:	0020      	movs	r0, r4
     bc6:	69e3      	ldr	r3, [r4, #28]
     bc8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     bca:	2320      	movs	r3, #32
     bcc:	421f      	tst	r7, r3
     bce:	d006      	beq.n	bde <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     bd0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     bd2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     bd4:	0733      	lsls	r3, r6, #28
     bd6:	d502      	bpl.n	bde <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     bd8:	0020      	movs	r0, r4
     bda:	69a3      	ldr	r3, [r4, #24]
     bdc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     bde:	2308      	movs	r3, #8
     be0:	421f      	tst	r7, r3
     be2:	d006      	beq.n	bf2 <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     be4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     be6:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     be8:	06b3      	lsls	r3, r6, #26
     bea:	d502      	bpl.n	bf2 <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     bec:	6a23      	ldr	r3, [r4, #32]
     bee:	0020      	movs	r0, r4
     bf0:	4798      	blx	r3
		}
	}
#endif
}
     bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bf4:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     bf6:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bf8:	0209      	lsls	r1, r1, #8
     bfa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     bfc:	62a2      	str	r2, [r4, #40]	; 0x28
     bfe:	e795      	b.n	b2c <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c00:	752b      	strb	r3, [r5, #20]
     c02:	e7a0      	b.n	b46 <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c04:	2237      	movs	r2, #55	; 0x37
     c06:	e7b7      	b.n	b78 <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c08:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     c0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c0c:	05db      	lsls	r3, r3, #23
     c0e:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     c10:	b2da      	uxtb	r2, r3
     c12:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     c14:	6a62      	ldr	r2, [r4, #36]	; 0x24
     c16:	1c51      	adds	r1, r2, #1
     c18:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c1a:	7961      	ldrb	r1, [r4, #5]
     c1c:	2901      	cmp	r1, #1
     c1e:	d104      	bne.n	c2a <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c20:	0a1b      	lsrs	r3, r3, #8
     c22:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c26:	3301      	adds	r3, #1
     c28:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
     c2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     c2c:	3b01      	subs	r3, #1
     c2e:	b29b      	uxth	r3, r3
     c30:	85a3      	strh	r3, [r4, #44]	; 0x2c
     c32:	2b00      	cmp	r3, #0
     c34:	d1bf      	bne.n	bb6 <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c36:	2204      	movs	r2, #4
     c38:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
     c3a:	0022      	movs	r2, r4
     c3c:	3232      	adds	r2, #50	; 0x32
     c3e:	7013      	strb	r3, [r2, #0]
					if (callback_status
     c40:	07b3      	lsls	r3, r6, #30
     c42:	d5b8      	bpl.n	bb6 <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c44:	0020      	movs	r0, r4
     c46:	6923      	ldr	r3, [r4, #16]
     c48:	e7b4      	b.n	bb4 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c4a:	752b      	strb	r3, [r5, #20]
     c4c:	e7b3      	b.n	bb6 <_usart_interrupt_handler+0xca>
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	20000100 	.word	0x20000100

00000c54 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c54:	b5f0      	push	{r4, r5, r6, r7, lr}
     c56:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c58:	6029      	str	r1, [r5, #0]
{
     c5a:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c5c:	680a      	ldr	r2, [r1, #0]
{
     c5e:	b089      	sub	sp, #36	; 0x24
     c60:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     c62:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c64:	0792      	lsls	r2, r2, #30
     c66:	d500      	bpl.n	c6a <spi_init+0x16>
     c68:	e0d4      	b.n	e14 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c6a:	2701      	movs	r7, #1
     c6c:	680b      	ldr	r3, [r1, #0]
     c6e:	403b      	ands	r3, r7
     c70:	9301      	str	r3, [sp, #4]
     c72:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     c74:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c76:	2a00      	cmp	r2, #0
     c78:	d000      	beq.n	c7c <spi_init+0x28>
     c7a:	e0cb      	b.n	e14 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c7c:	0008      	movs	r0, r1
     c7e:	4b6a      	ldr	r3, [pc, #424]	; (e28 <spi_init+0x1d4>)
     c80:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c82:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c84:	408f      	lsls	r7, r1
     c86:	4b69      	ldr	r3, [pc, #420]	; (e2c <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c88:	3014      	adds	r0, #20
     c8a:	6a1a      	ldr	r2, [r3, #32]
     c8c:	4317      	orrs	r7, r2
     c8e:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     c90:	1d63      	adds	r3, r4, #5
     c92:	7fdb      	ldrb	r3, [r3, #31]
     c94:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c96:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
     c98:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c9a:	0011      	movs	r1, r2
     c9c:	0038      	movs	r0, r7
     c9e:	4b64      	ldr	r3, [pc, #400]	; (e30 <spi_init+0x1dc>)
     ca0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ca2:	0038      	movs	r0, r7
     ca4:	4b63      	ldr	r3, [pc, #396]	; (e34 <spi_init+0x1e0>)
     ca6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ca8:	1d63      	adds	r3, r4, #5
     caa:	7fd8      	ldrb	r0, [r3, #31]
     cac:	9901      	ldr	r1, [sp, #4]
     cae:	4b62      	ldr	r3, [pc, #392]	; (e38 <spi_init+0x1e4>)
     cb0:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     cb2:	7823      	ldrb	r3, [r4, #0]
     cb4:	2b01      	cmp	r3, #1
     cb6:	d103      	bne.n	cc0 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     cb8:	6832      	ldr	r2, [r6, #0]
     cba:	330b      	adds	r3, #11
     cbc:	4313      	orrs	r3, r2
     cbe:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     cc0:	7823      	ldrb	r3, [r4, #0]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d103      	bne.n	cce <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     cc6:	6832      	ldr	r2, [r6, #0]
     cc8:	3308      	adds	r3, #8
     cca:	4313      	orrs	r3, r2
     ccc:	6033      	str	r3, [r6, #0]
     cce:	002b      	movs	r3, r5
     cd0:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     cd2:	2600      	movs	r6, #0
     cd4:	330c      	adds	r3, #12
     cd6:	3228      	adds	r2, #40	; 0x28
     cd8:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     cda:	429a      	cmp	r2, r3
     cdc:	d1fc      	bne.n	cd8 <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     cde:	002b      	movs	r3, r5
     ce0:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
     ce2:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
     ce4:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     ce6:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
     ce8:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
     cea:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
     cec:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
     cee:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
     cf0:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cf2:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
     cf4:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cf6:	4b4c      	ldr	r3, [pc, #304]	; (e28 <spi_init+0x1d4>)
	module->locked                     = false;
     cf8:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cfa:	4798      	blx	r3
     cfc:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     cfe:	4b4f      	ldr	r3, [pc, #316]	; (e3c <spi_init+0x1e8>)
     d00:	494f      	ldr	r1, [pc, #316]	; (e40 <spi_init+0x1ec>)
     d02:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d04:	4b4f      	ldr	r3, [pc, #316]	; (e44 <spi_init+0x1f0>)
     d06:	00bf      	lsls	r7, r7, #2
     d08:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d0a:	2380      	movs	r3, #128	; 0x80
     d0c:	aa02      	add	r2, sp, #8
     d0e:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d10:	2301      	movs	r3, #1
     d12:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
     d14:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d16:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d18:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
     d1a:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
     d1c:	2b00      	cmp	r3, #0
     d1e:	d100      	bne.n	d22 <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d20:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
     d22:	2600      	movs	r6, #0
     d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d26:	9304      	str	r3, [sp, #16]
     d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d2a:	9305      	str	r3, [sp, #20]
     d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
     d2e:	9306      	str	r3, [sp, #24]
     d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
     d32:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d34:	00b3      	lsls	r3, r6, #2
     d36:	aa04      	add	r2, sp, #16
     d38:	5898      	ldr	r0, [r3, r2]
     d3a:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
     d3c:	2800      	cmp	r0, #0
     d3e:	d102      	bne.n	d46 <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d40:	0038      	movs	r0, r7
     d42:	4b41      	ldr	r3, [pc, #260]	; (e48 <spi_init+0x1f4>)
     d44:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
     d46:	1c43      	adds	r3, r0, #1
     d48:	d006      	beq.n	d58 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d4a:	ab02      	add	r3, sp, #8
     d4c:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d4e:	0c00      	lsrs	r0, r0, #16
     d50:	b2c0      	uxtb	r0, r0
     d52:	a903      	add	r1, sp, #12
     d54:	4b3d      	ldr	r3, [pc, #244]	; (e4c <spi_init+0x1f8>)
     d56:	4798      	blx	r3
     d58:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d5a:	2e04      	cmp	r6, #4
     d5c:	d1ea      	bne.n	d34 <spi_init+0xe0>
	module->mode             = config->mode;
     d5e:	7823      	ldrb	r3, [r4, #0]
     d60:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     d62:	7c23      	ldrb	r3, [r4, #16]
     d64:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     d66:	7ca3      	ldrb	r3, [r4, #18]
     d68:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     d6a:	7d23      	ldrb	r3, [r4, #20]
     d6c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     d6e:	ab02      	add	r3, sp, #8
     d70:	1c9e      	adds	r6, r3, #2
     d72:	2300      	movs	r3, #0
     d74:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
     d76:	7823      	ldrb	r3, [r4, #0]
     d78:	2b01      	cmp	r3, #1
     d7a:	d110      	bne.n	d9e <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d7c:	4b2a      	ldr	r3, [pc, #168]	; (e28 <spi_init+0x1d4>)
     d7e:	6828      	ldr	r0, [r5, #0]
     d80:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d82:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d84:	4b32      	ldr	r3, [pc, #200]	; (e50 <spi_init+0x1fc>)
     d86:	b2c0      	uxtb	r0, r0
     d88:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
     d8a:	4b32      	ldr	r3, [pc, #200]	; (e54 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d8c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     d8e:	0032      	movs	r2, r6
     d90:	69a0      	ldr	r0, [r4, #24]
     d92:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
     d94:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
     d96:	2800      	cmp	r0, #0
     d98:	d13c      	bne.n	e14 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
     d9a:	7833      	ldrb	r3, [r6, #0]
     d9c:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
     d9e:	7823      	ldrb	r3, [r4, #0]
     da0:	2b00      	cmp	r3, #0
     da2:	d13d      	bne.n	e20 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     da4:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     da6:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
     da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     daa:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     dac:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     dae:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
     db0:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     db2:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     db4:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
     db6:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     db8:	7fdb      	ldrb	r3, [r3, #31]
     dba:	2b00      	cmp	r3, #0
     dbc:	d12d      	bne.n	e1a <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
     dbe:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
     dc0:	68a1      	ldr	r1, [r4, #8]
     dc2:	6862      	ldr	r2, [r4, #4]
     dc4:	430a      	orrs	r2, r1
     dc6:	68e1      	ldr	r1, [r4, #12]
     dc8:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
     dca:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
     dcc:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
     dce:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     dd0:	7c61      	ldrb	r1, [r4, #17]
     dd2:	2900      	cmp	r1, #0
     dd4:	d103      	bne.n	dde <spi_init+0x18a>
     dd6:	4920      	ldr	r1, [pc, #128]	; (e58 <spi_init+0x204>)
     dd8:	7889      	ldrb	r1, [r1, #2]
     dda:	0789      	lsls	r1, r1, #30
     ddc:	d501      	bpl.n	de2 <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     dde:	2180      	movs	r1, #128	; 0x80
     de0:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
     de2:	7ca1      	ldrb	r1, [r4, #18]
     de4:	2900      	cmp	r1, #0
     de6:	d002      	beq.n	dee <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     de8:	2180      	movs	r1, #128	; 0x80
     dea:	0289      	lsls	r1, r1, #10
     dec:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
     dee:	7ce1      	ldrb	r1, [r4, #19]
     df0:	2900      	cmp	r1, #0
     df2:	d002      	beq.n	dfa <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     df4:	2180      	movs	r1, #128	; 0x80
     df6:	0089      	lsls	r1, r1, #2
     df8:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
     dfa:	7d21      	ldrb	r1, [r4, #20]
     dfc:	2900      	cmp	r1, #0
     dfe:	d002      	beq.n	e06 <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     e00:	2180      	movs	r1, #128	; 0x80
     e02:	0189      	lsls	r1, r1, #6
     e04:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
     e06:	6839      	ldr	r1, [r7, #0]
     e08:	430a      	orrs	r2, r1
     e0a:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     e0c:	687a      	ldr	r2, [r7, #4]
     e0e:	4313      	orrs	r3, r2
     e10:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     e12:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     e14:	0018      	movs	r0, r3
     e16:	b009      	add	sp, #36	; 0x24
     e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     e1a:	2340      	movs	r3, #64	; 0x40
     e1c:	4313      	orrs	r3, r2
     e1e:	e7cf      	b.n	dc0 <spi_init+0x16c>
	uint32_t ctrlb = 0;
     e20:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
     e22:	0018      	movs	r0, r3
     e24:	e7cc      	b.n	dc0 <spi_init+0x16c>
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	000006d1 	.word	0x000006d1
     e2c:	40000400 	.word	0x40000400
     e30:	000015a1 	.word	0x000015a1
     e34:	00001519 	.word	0x00001519
     e38:	00000531 	.word	0x00000531
     e3c:	0000105d 	.word	0x0000105d
     e40:	00000e5d 	.word	0x00000e5d
     e44:	20000100 	.word	0x20000100
     e48:	00000575 	.word	0x00000575
     e4c:	00001675 	.word	0x00001675
     e50:	000015bd 	.word	0x000015bd
     e54:	00000471 	.word	0x00000471
     e58:	41002000 	.word	0x41002000

00000e5c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     e5e:	4b7c      	ldr	r3, [pc, #496]	; (1050 <_spi_interrupt_handler+0x1f4>)
     e60:	0080      	lsls	r0, r0, #2
     e62:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     e64:	0023      	movs	r3, r4
     e66:	0022      	movs	r2, r4
     e68:	3337      	adds	r3, #55	; 0x37
     e6a:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e6c:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
     e6e:	781b      	ldrb	r3, [r3, #0]
     e70:	7816      	ldrb	r6, [r2, #0]
     e72:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     e74:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     e76:	7daf      	ldrb	r7, [r5, #22]
     e78:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     e7a:	07fb      	lsls	r3, r7, #31
     e7c:	d539      	bpl.n	ef2 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     e7e:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     e80:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
     e82:	2a01      	cmp	r2, #1
     e84:	d133      	bne.n	eee <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
     e86:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     e88:	2b00      	cmp	r3, #0
     e8a:	d10d      	bne.n	ea8 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
     e8c:	4b71      	ldr	r3, [pc, #452]	; (1054 <_spi_interrupt_handler+0x1f8>)
     e8e:	881b      	ldrh	r3, [r3, #0]
     e90:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     e92:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     e94:	3b01      	subs	r3, #1
     e96:	b29b      	uxth	r3, r3
     e98:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     e9a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     e9c:	2b00      	cmp	r3, #0
     e9e:	d100      	bne.n	ea2 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     ea0:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     ea2:	7963      	ldrb	r3, [r4, #5]
		if (0
     ea4:	2b01      	cmp	r3, #1
     ea6:	d122      	bne.n	eee <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
     ea8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     eaa:	2b00      	cmp	r3, #0
     eac:	d021      	beq.n	ef2 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     eae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
     eb0:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
     eb2:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     eb4:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
     eb6:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb8:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     eba:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ebc:	2801      	cmp	r0, #1
     ebe:	d100      	bne.n	ec2 <_spi_interrupt_handler+0x66>
     ec0:	e074      	b.n	fac <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     ec2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     ec4:	05db      	lsls	r3, r3, #23
     ec6:	0ddb      	lsrs	r3, r3, #23
     ec8:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     eca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     ecc:	3b01      	subs	r3, #1
     ece:	b29b      	uxth	r3, r3
     ed0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     ed2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     ed4:	2b00      	cmp	r3, #0
     ed6:	d10c      	bne.n	ef2 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     ed8:	3301      	adds	r3, #1
     eda:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     edc:	7a63      	ldrb	r3, [r4, #9]
     ede:	2b01      	cmp	r3, #1
     ee0:	d107      	bne.n	ef2 <_spi_interrupt_handler+0x96>
     ee2:	79e3      	ldrb	r3, [r4, #7]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d104      	bne.n	ef2 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ee8:	3302      	adds	r3, #2
     eea:	75ab      	strb	r3, [r5, #22]
     eec:	e001      	b.n	ef2 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
     eee:	2b00      	cmp	r3, #0
     ef0:	d0da      	beq.n	ea8 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     ef2:	2104      	movs	r1, #4
     ef4:	420f      	tst	r7, r1
     ef6:	d015      	beq.n	f24 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ef8:	8b6b      	ldrh	r3, [r5, #26]
     efa:	420b      	tst	r3, r1
     efc:	d05c      	beq.n	fb8 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
     efe:	7a63      	ldrb	r3, [r4, #9]
     f00:	2b01      	cmp	r3, #1
     f02:	d00c      	beq.n	f1e <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     f04:	0023      	movs	r3, r4
     f06:	221e      	movs	r2, #30
     f08:	3338      	adds	r3, #56	; 0x38
     f0a:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     f0c:	2303      	movs	r3, #3
     f0e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     f10:	3302      	adds	r3, #2
     f12:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     f14:	0733      	lsls	r3, r6, #28
     f16:	d502      	bpl.n	f1e <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     f18:	0020      	movs	r0, r4
     f1a:	69a3      	ldr	r3, [r4, #24]
     f1c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     f1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f20:	2304      	movs	r3, #4
     f22:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     f24:	2202      	movs	r2, #2
     f26:	4217      	tst	r7, r2
     f28:	d027      	beq.n	f7a <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     f2a:	7963      	ldrb	r3, [r4, #5]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d10e      	bne.n	f4e <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     f30:	2107      	movs	r1, #7
     f32:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f34:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     f36:	3201      	adds	r2, #1
     f38:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
     f3a:	0022      	movs	r2, r4
     f3c:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
     f3e:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     f40:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     f42:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
     f44:	06f3      	lsls	r3, r6, #27
     f46:	d502      	bpl.n	f4e <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     f48:	0020      	movs	r0, r4
     f4a:	69e3      	ldr	r3, [r4, #28]
     f4c:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f4e:	7963      	ldrb	r3, [r4, #5]
     f50:	2b01      	cmp	r3, #1
     f52:	d112      	bne.n	f7a <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     f54:	7a63      	ldrb	r3, [r4, #9]
     f56:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
     f58:	2b01      	cmp	r3, #1
     f5a:	d10e      	bne.n	f7a <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     f5c:	79e2      	ldrb	r2, [r4, #7]
     f5e:	2a00      	cmp	r2, #0
     f60:	d10b      	bne.n	f7a <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f62:	2102      	movs	r1, #2
     f64:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     f66:	3101      	adds	r1, #1
     f68:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
     f6a:	0021      	movs	r1, r4
     f6c:	3138      	adds	r1, #56	; 0x38
     f6e:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     f70:	421e      	tst	r6, r3
     f72:	d002      	beq.n	f7a <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     f74:	0020      	movs	r0, r4
     f76:	68e3      	ldr	r3, [r4, #12]
     f78:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     f7a:	2308      	movs	r3, #8
     f7c:	421f      	tst	r7, r3
     f7e:	d009      	beq.n	f94 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
     f80:	7962      	ldrb	r2, [r4, #5]
     f82:	2a00      	cmp	r2, #0
     f84:	d106      	bne.n	f94 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f86:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     f88:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     f8a:	06b3      	lsls	r3, r6, #26
     f8c:	d502      	bpl.n	f94 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     f8e:	0020      	movs	r0, r4
     f90:	6a23      	ldr	r3, [r4, #32]
     f92:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     f94:	b27f      	sxtb	r7, r7
     f96:	2f00      	cmp	r7, #0
     f98:	da07      	bge.n	faa <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     f9a:	2380      	movs	r3, #128	; 0x80
     f9c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     f9e:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     fa0:	0673      	lsls	r3, r6, #25
     fa2:	d502      	bpl.n	faa <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
     fa6:	0020      	movs	r0, r4
     fa8:	4798      	blx	r3
		}
	}
#  endif
}
     faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     fac:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
     fae:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     fb0:	0200      	lsls	r0, r0, #8
     fb2:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     fb4:	62e1      	str	r1, [r4, #44]	; 0x2c
     fb6:	e785      	b.n	ec4 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
     fb8:	7a62      	ldrb	r2, [r4, #9]
     fba:	6823      	ldr	r3, [r4, #0]
     fbc:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
     fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
     fc0:	2a01      	cmp	r2, #1
     fc2:	d113      	bne.n	fec <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
     fc4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fc6:	3b01      	subs	r3, #1
     fc8:	b29b      	uxth	r3, r3
     fca:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     fcc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fce:	b29b      	uxth	r3, r3
     fd0:	2b00      	cmp	r3, #0
     fd2:	d1a7      	bne.n	f24 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     fd4:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
     fd6:	0021      	movs	r1, r4
     fd8:	3138      	adds	r1, #56	; 0x38
     fda:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
     fdc:	3303      	adds	r3, #3
     fde:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     fe0:	4216      	tst	r6, r2
     fe2:	d09f      	beq.n	f24 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     fe4:	0020      	movs	r0, r4
     fe6:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     fe8:	4798      	blx	r3
     fea:	e79b      	b.n	f24 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     fec:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     fee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     ff0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     ff2:	b2da      	uxtb	r2, r3
     ff4:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     ff8:	1c51      	adds	r1, r2, #1
     ffa:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ffc:	79a1      	ldrb	r1, [r4, #6]
     ffe:	2901      	cmp	r1, #1
    1000:	d104      	bne.n	100c <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1002:	0a1b      	lsrs	r3, r3, #8
    1004:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1008:	3301      	adds	r3, #1
    100a:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    100c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    100e:	3b01      	subs	r3, #1
    1010:	b29b      	uxth	r3, r3
    1012:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1014:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1016:	b29b      	uxth	r3, r3
    1018:	2b00      	cmp	r3, #0
    101a:	d000      	beq.n	101e <_spi_interrupt_handler+0x1c2>
    101c:	e782      	b.n	f24 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    101e:	0022      	movs	r2, r4
    1020:	3238      	adds	r2, #56	; 0x38
    1022:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1024:	3304      	adds	r3, #4
    1026:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1028:	7a62      	ldrb	r2, [r4, #9]
    102a:	2a02      	cmp	r2, #2
    102c:	d105      	bne.n	103a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    102e:	421e      	tst	r6, r3
    1030:	d100      	bne.n	1034 <_spi_interrupt_handler+0x1d8>
    1032:	e777      	b.n	f24 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1034:	0020      	movs	r0, r4
    1036:	6963      	ldr	r3, [r4, #20]
    1038:	e7d6      	b.n	fe8 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    103a:	7a63      	ldrb	r3, [r4, #9]
    103c:	2b00      	cmp	r3, #0
    103e:	d000      	beq.n	1042 <_spi_interrupt_handler+0x1e6>
    1040:	e770      	b.n	f24 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1042:	07b3      	lsls	r3, r6, #30
    1044:	d400      	bmi.n	1048 <_spi_interrupt_handler+0x1ec>
    1046:	e76d      	b.n	f24 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1048:	0020      	movs	r0, r4
    104a:	6923      	ldr	r3, [r4, #16]
    104c:	e7cc      	b.n	fe8 <_spi_interrupt_handler+0x18c>
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	20000100 	.word	0x20000100
    1054:	200000fc 	.word	0x200000fc

00001058 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1058:	4770      	bx	lr
	...

0000105c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    105e:	4c09      	ldr	r4, [pc, #36]	; (1084 <_sercom_set_handler+0x28>)
    1060:	4a09      	ldr	r2, [pc, #36]	; (1088 <_sercom_set_handler+0x2c>)
    1062:	7823      	ldrb	r3, [r4, #0]
    1064:	2b00      	cmp	r3, #0
    1066:	d109      	bne.n	107c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1068:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    106a:	4f08      	ldr	r7, [pc, #32]	; (108c <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    106c:	4d08      	ldr	r5, [pc, #32]	; (1090 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    106e:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    1070:	50ee      	str	r6, [r5, r3]
    1072:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1074:	2b18      	cmp	r3, #24
    1076:	d1fa      	bne.n	106e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1078:	3b17      	subs	r3, #23
    107a:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    107c:	0080      	lsls	r0, r0, #2
    107e:	5011      	str	r1, [r2, r0]
}
    1080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	20000082 	.word	0x20000082
    1088:	20000084 	.word	0x20000084
    108c:	00001059 	.word	0x00001059
    1090:	20000100 	.word	0x20000100

00001094 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1094:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1096:	2309      	movs	r3, #9
    1098:	466a      	mov	r2, sp
    109a:	7013      	strb	r3, [r2, #0]
    109c:	3301      	adds	r3, #1
    109e:	7053      	strb	r3, [r2, #1]
    10a0:	3301      	adds	r3, #1
    10a2:	7093      	strb	r3, [r2, #2]
    10a4:	3301      	adds	r3, #1
    10a6:	70d3      	strb	r3, [r2, #3]
    10a8:	3301      	adds	r3, #1
    10aa:	7113      	strb	r3, [r2, #4]
    10ac:	3301      	adds	r3, #1
    10ae:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    10b0:	4b02      	ldr	r3, [pc, #8]	; (10bc <_sercom_get_interrupt_vector+0x28>)
    10b2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    10b4:	466b      	mov	r3, sp
    10b6:	5618      	ldrsb	r0, [r3, r0]
}
    10b8:	bd0e      	pop	{r1, r2, r3, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	000006d1 	.word	0x000006d1

000010c0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    10c0:	b510      	push	{r4, lr}
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <SERCOM0_Handler+0xc>)
    10c4:	2000      	movs	r0, #0
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	4798      	blx	r3
    10ca:	bd10      	pop	{r4, pc}
    10cc:	20000084 	.word	0x20000084

000010d0 <SERCOM1_Handler>:
    10d0:	b510      	push	{r4, lr}
    10d2:	4b02      	ldr	r3, [pc, #8]	; (10dc <SERCOM1_Handler+0xc>)
    10d4:	2001      	movs	r0, #1
    10d6:	685b      	ldr	r3, [r3, #4]
    10d8:	4798      	blx	r3
    10da:	bd10      	pop	{r4, pc}
    10dc:	20000084 	.word	0x20000084

000010e0 <SERCOM2_Handler>:
    10e0:	b510      	push	{r4, lr}
    10e2:	4b02      	ldr	r3, [pc, #8]	; (10ec <SERCOM2_Handler+0xc>)
    10e4:	2002      	movs	r0, #2
    10e6:	689b      	ldr	r3, [r3, #8]
    10e8:	4798      	blx	r3
    10ea:	bd10      	pop	{r4, pc}
    10ec:	20000084 	.word	0x20000084

000010f0 <SERCOM3_Handler>:
    10f0:	b510      	push	{r4, lr}
    10f2:	4b02      	ldr	r3, [pc, #8]	; (10fc <SERCOM3_Handler+0xc>)
    10f4:	2003      	movs	r0, #3
    10f6:	68db      	ldr	r3, [r3, #12]
    10f8:	4798      	blx	r3
    10fa:	bd10      	pop	{r4, pc}
    10fc:	20000084 	.word	0x20000084

00001100 <SERCOM4_Handler>:
    1100:	b510      	push	{r4, lr}
    1102:	4b02      	ldr	r3, [pc, #8]	; (110c <SERCOM4_Handler+0xc>)
    1104:	2004      	movs	r0, #4
    1106:	691b      	ldr	r3, [r3, #16]
    1108:	4798      	blx	r3
    110a:	bd10      	pop	{r4, pc}
    110c:	20000084 	.word	0x20000084

00001110 <SERCOM5_Handler>:
    1110:	b510      	push	{r4, lr}
    1112:	4b02      	ldr	r3, [pc, #8]	; (111c <SERCOM5_Handler+0xc>)
    1114:	2005      	movs	r0, #5
    1116:	695b      	ldr	r3, [r3, #20]
    1118:	4798      	blx	r3
    111a:	bd10      	pop	{r4, pc}
    111c:	20000084 	.word	0x20000084

00001120 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1120:	4770      	bx	lr
	...

00001124 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1124:	4b09      	ldr	r3, [pc, #36]	; (114c <cpu_irq_enter_critical+0x28>)
    1126:	6819      	ldr	r1, [r3, #0]
    1128:	2900      	cmp	r1, #0
    112a:	d10b      	bne.n	1144 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    112c:	f3ef 8010 	mrs	r0, PRIMASK
    1130:	4a07      	ldr	r2, [pc, #28]	; (1150 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    1132:	2800      	cmp	r0, #0
    1134:	d105      	bne.n	1142 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    1136:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1138:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    113c:	4905      	ldr	r1, [pc, #20]	; (1154 <cpu_irq_enter_critical+0x30>)
    113e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1140:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1142:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1144:	681a      	ldr	r2, [r3, #0]
    1146:	3201      	adds	r2, #1
    1148:	601a      	str	r2, [r3, #0]
}
    114a:	4770      	bx	lr
    114c:	2000009c 	.word	0x2000009c
    1150:	200000a0 	.word	0x200000a0
    1154:	20000008 	.word	0x20000008

00001158 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1158:	4b08      	ldr	r3, [pc, #32]	; (117c <cpu_irq_leave_critical+0x24>)
    115a:	681a      	ldr	r2, [r3, #0]
    115c:	3a01      	subs	r2, #1
    115e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	2b00      	cmp	r3, #0
    1164:	d109      	bne.n	117a <cpu_irq_leave_critical+0x22>
    1166:	4b06      	ldr	r3, [pc, #24]	; (1180 <cpu_irq_leave_critical+0x28>)
    1168:	781b      	ldrb	r3, [r3, #0]
    116a:	2b00      	cmp	r3, #0
    116c:	d005      	beq.n	117a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    116e:	2201      	movs	r2, #1
    1170:	4b04      	ldr	r3, [pc, #16]	; (1184 <cpu_irq_leave_critical+0x2c>)
    1172:	701a      	strb	r2, [r3, #0]
    1174:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1178:	b662      	cpsie	i
	}
}
    117a:	4770      	bx	lr
    117c:	2000009c 	.word	0x2000009c
    1180:	200000a0 	.word	0x200000a0
    1184:	20000008 	.word	0x20000008

00001188 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1188:	2310      	movs	r3, #16
    118a:	4902      	ldr	r1, [pc, #8]	; (1194 <_system_dfll_wait_for_sync+0xc>)
    118c:	68ca      	ldr	r2, [r1, #12]
    118e:	421a      	tst	r2, r3
    1190:	d0fc      	beq.n	118c <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1192:	4770      	bx	lr
    1194:	40000800 	.word	0x40000800

00001198 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1198:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    119a:	2808      	cmp	r0, #8
    119c:	d806      	bhi.n	11ac <system_clock_source_get_hz+0x14>
    119e:	f000 fba3 	bl	18e8 <__gnu_thumb1_case_uqi>
    11a2:	0508      	.short	0x0508
    11a4:	122e2e05 	.word	0x122e2e05
    11a8:	150b      	.short	0x150b
    11aa:	26          	.byte	0x26
    11ab:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    11ac:	2400      	movs	r4, #0
	}
}
    11ae:	0020      	movs	r0, r4
    11b0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    11b2:	4b15      	ldr	r3, [pc, #84]	; (1208 <system_clock_source_get_hz+0x70>)
    11b4:	691c      	ldr	r4, [r3, #16]
    11b6:	e7fa      	b.n	11ae <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    11b8:	4b14      	ldr	r3, [pc, #80]	; (120c <system_clock_source_get_hz+0x74>)
    11ba:	4c15      	ldr	r4, [pc, #84]	; (1210 <system_clock_source_get_hz+0x78>)
    11bc:	6a1b      	ldr	r3, [r3, #32]
    11be:	059b      	lsls	r3, r3, #22
    11c0:	0f9b      	lsrs	r3, r3, #30
    11c2:	40dc      	lsrs	r4, r3
    11c4:	e7f3      	b.n	11ae <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    11c6:	4b10      	ldr	r3, [pc, #64]	; (1208 <system_clock_source_get_hz+0x70>)
    11c8:	695c      	ldr	r4, [r3, #20]
    11ca:	e7f0      	b.n	11ae <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11cc:	4d0e      	ldr	r5, [pc, #56]	; (1208 <system_clock_source_get_hz+0x70>)
			return 0;
    11ce:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    11d0:	682b      	ldr	r3, [r5, #0]
    11d2:	079b      	lsls	r3, r3, #30
    11d4:	d5eb      	bpl.n	11ae <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    11d6:	4b0f      	ldr	r3, [pc, #60]	; (1214 <system_clock_source_get_hz+0x7c>)
    11d8:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    11da:	682b      	ldr	r3, [r5, #0]
    11dc:	075b      	lsls	r3, r3, #29
    11de:	d511      	bpl.n	1204 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11e0:	0020      	movs	r0, r4
    11e2:	4b0d      	ldr	r3, [pc, #52]	; (1218 <system_clock_source_get_hz+0x80>)
    11e4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    11e6:	68ac      	ldr	r4, [r5, #8]
    11e8:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    11ea:	4344      	muls	r4, r0
    11ec:	e7df      	b.n	11ae <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11ee:	4b0b      	ldr	r3, [pc, #44]	; (121c <system_clock_source_get_hz+0x84>)
			return 0;
    11f0:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	075b      	lsls	r3, r3, #29
    11f6:	d5da      	bpl.n	11ae <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    11f8:	4b03      	ldr	r3, [pc, #12]	; (1208 <system_clock_source_get_hz+0x70>)
    11fa:	68dc      	ldr	r4, [r3, #12]
    11fc:	e7d7      	b.n	11ae <system_clock_source_get_hz+0x16>
		return 32768UL;
    11fe:	2480      	movs	r4, #128	; 0x80
    1200:	0224      	lsls	r4, r4, #8
    1202:	e7d4      	b.n	11ae <system_clock_source_get_hz+0x16>
		return 48000000UL;
    1204:	4c06      	ldr	r4, [pc, #24]	; (1220 <system_clock_source_get_hz+0x88>)
    1206:	e7d2      	b.n	11ae <system_clock_source_get_hz+0x16>
    1208:	200000a4 	.word	0x200000a4
    120c:	40000800 	.word	0x40000800
    1210:	007a1200 	.word	0x007a1200
    1214:	00001189 	.word	0x00001189
    1218:	000015bd 	.word	0x000015bd
    121c:	40000850 	.word	0x40000850
    1220:	02dc6c00 	.word	0x02dc6c00

00001224 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1224:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    1226:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1228:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    122a:	7845      	ldrb	r5, [r0, #1]
    122c:	2001      	movs	r0, #1
    122e:	2640      	movs	r6, #64	; 0x40
    1230:	4005      	ands	r5, r0
    1232:	4020      	ands	r0, r4
    1234:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1236:	4908      	ldr	r1, [pc, #32]	; (1258 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1238:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    123a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    123c:	01c0      	lsls	r0, r0, #7
    123e:	43b3      	bics	r3, r6
    1240:	432b      	orrs	r3, r5
    1242:	43a3      	bics	r3, r4
    1244:	4303      	orrs	r3, r0
    1246:	2003      	movs	r0, #3
    1248:	4002      	ands	r2, r0
    124a:	4804      	ldr	r0, [pc, #16]	; (125c <system_clock_source_osc8m_set_config+0x38>)
    124c:	0212      	lsls	r2, r2, #8
    124e:	4003      	ands	r3, r0
    1250:	4313      	orrs	r3, r2
    1252:	620b      	str	r3, [r1, #32]
}
    1254:	bd70      	pop	{r4, r5, r6, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	40000800 	.word	0x40000800
    125c:	fffffcff 	.word	0xfffffcff

00001260 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    1262:	2808      	cmp	r0, #8
    1264:	d806      	bhi.n	1274 <system_clock_source_enable+0x14>
    1266:	f000 fb3f 	bl	18e8 <__gnu_thumb1_case_uqi>
    126a:	0514      	.short	0x0514
    126c:	1a0e0c05 	.word	0x1a0e0c05
    1270:	2007      	.short	0x2007
    1272:	34          	.byte	0x34
    1273:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1274:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1278:	2302      	movs	r3, #2
    127a:	4a19      	ldr	r2, [pc, #100]	; (12e0 <system_clock_source_enable+0x80>)
    127c:	6a11      	ldr	r1, [r2, #32]
    127e:	430b      	orrs	r3, r1
    1280:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1282:	2000      	movs	r0, #0
    1284:	e7f7      	b.n	1276 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1286:	2302      	movs	r3, #2
    1288:	4a15      	ldr	r2, [pc, #84]	; (12e0 <system_clock_source_enable+0x80>)
    128a:	6991      	ldr	r1, [r2, #24]
    128c:	430b      	orrs	r3, r1
    128e:	6193      	str	r3, [r2, #24]
    1290:	e7f7      	b.n	1282 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1292:	2302      	movs	r3, #2
    1294:	4a12      	ldr	r2, [pc, #72]	; (12e0 <system_clock_source_enable+0x80>)
    1296:	8a11      	ldrh	r1, [r2, #16]
    1298:	430b      	orrs	r3, r1
    129a:	8213      	strh	r3, [r2, #16]
    129c:	e7f1      	b.n	1282 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    129e:	2302      	movs	r3, #2
    12a0:	4a0f      	ldr	r2, [pc, #60]	; (12e0 <system_clock_source_enable+0x80>)
    12a2:	8a91      	ldrh	r1, [r2, #20]
    12a4:	430b      	orrs	r3, r1
    12a6:	8293      	strh	r3, [r2, #20]
    12a8:	e7eb      	b.n	1282 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12aa:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    12ac:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12ae:	4e0d      	ldr	r6, [pc, #52]	; (12e4 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    12b0:	4d0b      	ldr	r5, [pc, #44]	; (12e0 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12b2:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    12b4:	4f0c      	ldr	r7, [pc, #48]	; (12e8 <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12b6:	4313      	orrs	r3, r2
    12b8:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    12ba:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    12bc:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    12be:	68b3      	ldr	r3, [r6, #8]
    12c0:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    12c2:	6873      	ldr	r3, [r6, #4]
    12c4:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    12c6:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    12c8:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12ca:	6833      	ldr	r3, [r6, #0]
    12cc:	b29b      	uxth	r3, r3
    12ce:	84ab      	strh	r3, [r5, #36]	; 0x24
    12d0:	e7d7      	b.n	1282 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    12d2:	2302      	movs	r3, #2
    12d4:	4a05      	ldr	r2, [pc, #20]	; (12ec <system_clock_source_enable+0x8c>)
    12d6:	7811      	ldrb	r1, [r2, #0]
    12d8:	430b      	orrs	r3, r1
    12da:	7013      	strb	r3, [r2, #0]
    12dc:	e7d1      	b.n	1282 <system_clock_source_enable+0x22>
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	40000800 	.word	0x40000800
    12e4:	200000a4 	.word	0x200000a4
    12e8:	00001189 	.word	0x00001189
    12ec:	40000844 	.word	0x40000844

000012f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    12f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    12f2:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12f4:	211e      	movs	r1, #30
    12f6:	4b19      	ldr	r3, [pc, #100]	; (135c <system_clock_init+0x6c>)
    12f8:	00d2      	lsls	r2, r2, #3
    12fa:	609a      	str	r2, [r3, #8]
    12fc:	4a18      	ldr	r2, [pc, #96]	; (1360 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12fe:	2400      	movs	r4, #0
    1300:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1302:	ad01      	add	r5, sp, #4
    1304:	438b      	bics	r3, r1
    1306:	6053      	str	r3, [r2, #4]
    1308:	2301      	movs	r3, #1
    130a:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    130c:	b2e0      	uxtb	r0, r4
    130e:	0029      	movs	r1, r5
    1310:	4b14      	ldr	r3, [pc, #80]	; (1364 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1312:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1314:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1316:	2c25      	cmp	r4, #37	; 0x25
    1318:	d1f8      	bne.n	130c <system_clock_init+0x1c>
	config->run_in_standby  = false;
    131a:	2400      	movs	r4, #0
    131c:	466b      	mov	r3, sp
	config->on_demand       = true;
    131e:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    1320:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    1322:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1324:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1326:	4668      	mov	r0, sp
    1328:	4b0f      	ldr	r3, [pc, #60]	; (1368 <system_clock_init+0x78>)
    132a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    132c:	4b0f      	ldr	r3, [pc, #60]	; (136c <system_clock_init+0x7c>)
    132e:	2006      	movs	r0, #6
    1330:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1332:	4b0f      	ldr	r3, [pc, #60]	; (1370 <system_clock_init+0x80>)
    1334:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1336:	4b0f      	ldr	r3, [pc, #60]	; (1374 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1338:	0029      	movs	r1, r5
    133a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    133c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    133e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1340:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1342:	2306      	movs	r3, #6
    1344:	0020      	movs	r0, r4
    1346:	702b      	strb	r3, [r5, #0]
    1348:	4b0b      	ldr	r3, [pc, #44]	; (1378 <system_clock_init+0x88>)
	config->division_factor    = 1;
    134a:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    134c:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    134e:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1350:	726c      	strb	r4, [r5, #9]
    1352:	4798      	blx	r3
    1354:	0020      	movs	r0, r4
    1356:	4b09      	ldr	r3, [pc, #36]	; (137c <system_clock_init+0x8c>)
    1358:	4798      	blx	r3
#endif
}
    135a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    135c:	40000800 	.word	0x40000800
    1360:	41004000 	.word	0x41004000
    1364:	000015a1 	.word	0x000015a1
    1368:	00001225 	.word	0x00001225
    136c:	00001261 	.word	0x00001261
    1370:	0000138d 	.word	0x0000138d
    1374:	40000400 	.word	0x40000400
    1378:	000013ad 	.word	0x000013ad
    137c:	00001451 	.word	0x00001451

00001380 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1380:	4b01      	ldr	r3, [pc, #4]	; (1388 <system_gclk_is_syncing+0x8>)
    1382:	7858      	ldrb	r0, [r3, #1]
    1384:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    1386:	4770      	bx	lr
    1388:	40000c00 	.word	0x40000c00

0000138c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    138c:	2308      	movs	r3, #8
    138e:	4a05      	ldr	r2, [pc, #20]	; (13a4 <system_gclk_init+0x18>)
    1390:	6991      	ldr	r1, [r2, #24]
    1392:	430b      	orrs	r3, r1
    1394:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1396:	2301      	movs	r3, #1
    1398:	4a03      	ldr	r2, [pc, #12]	; (13a8 <system_gclk_init+0x1c>)
    139a:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    139c:	7811      	ldrb	r1, [r2, #0]
    139e:	4219      	tst	r1, r3
    13a0:	d1fc      	bne.n	139c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    13a2:	4770      	bx	lr
    13a4:	40000400 	.word	0x40000400
    13a8:	40000c00 	.word	0x40000c00

000013ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    13ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13ae:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    13b0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13b2:	0224      	lsls	r4, r4, #8
{
    13b4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    13b6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    13b8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    13ba:	2b00      	cmp	r3, #0
    13bc:	d002      	beq.n	13c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    13be:	2380      	movs	r3, #128	; 0x80
    13c0:	02db      	lsls	r3, r3, #11
    13c2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    13c4:	7a4b      	ldrb	r3, [r1, #9]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d002      	beq.n	13d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    13ca:	2380      	movs	r3, #128	; 0x80
    13cc:	031b      	lsls	r3, r3, #12
    13ce:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    13d0:	684b      	ldr	r3, [r1, #4]
    13d2:	2b01      	cmp	r3, #1
    13d4:	d912      	bls.n	13fc <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    13d6:	1e5d      	subs	r5, r3, #1
    13d8:	401d      	ands	r5, r3
    13da:	2202      	movs	r2, #2
    13dc:	2d00      	cmp	r5, #0
    13de:	d006      	beq.n	13ee <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    13e0:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13e2:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    13e4:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13e6:	029b      	lsls	r3, r3, #10
    13e8:	e007      	b.n	13fa <system_gclk_gen_set_config+0x4e>
				div2_count++;
    13ea:	3501      	adds	r5, #1
						mask <<= 1) {
    13ec:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    13ee:	429a      	cmp	r2, r3
    13f0:	d3fb      	bcc.n	13ea <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13f2:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    13f4:	022d      	lsls	r5, r5, #8
    13f6:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13f8:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    13fa:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13fc:	7a0b      	ldrb	r3, [r1, #8]
    13fe:	2b00      	cmp	r3, #0
    1400:	d002      	beq.n	1408 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1402:	2380      	movs	r3, #128	; 0x80
    1404:	039b      	lsls	r3, r3, #14
    1406:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1408:	4f0c      	ldr	r7, [pc, #48]	; (143c <system_gclk_gen_set_config+0x90>)
    140a:	47b8      	blx	r7
    140c:	2800      	cmp	r0, #0
    140e:	d1fb      	bne.n	1408 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1410:	4b0b      	ldr	r3, [pc, #44]	; (1440 <system_gclk_gen_set_config+0x94>)
    1412:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1414:	4b0b      	ldr	r3, [pc, #44]	; (1444 <system_gclk_gen_set_config+0x98>)
    1416:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1418:	47b8      	blx	r7
    141a:	2800      	cmp	r0, #0
    141c:	d1fc      	bne.n	1418 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    141e:	4b0a      	ldr	r3, [pc, #40]	; (1448 <system_gclk_gen_set_config+0x9c>)
    1420:	609d      	str	r5, [r3, #8]
    1422:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    1424:	47b8      	blx	r7
    1426:	2800      	cmp	r0, #0
    1428:	d1fc      	bne.n	1424 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    142a:	2280      	movs	r2, #128	; 0x80
    142c:	686b      	ldr	r3, [r5, #4]
    142e:	0252      	lsls	r2, r2, #9
    1430:	4013      	ands	r3, r2
    1432:	431c      	orrs	r4, r3
    1434:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    1436:	4b05      	ldr	r3, [pc, #20]	; (144c <system_gclk_gen_set_config+0xa0>)
    1438:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    143c:	00001381 	.word	0x00001381
    1440:	00001125 	.word	0x00001125
    1444:	40000c08 	.word	0x40000c08
    1448:	40000c00 	.word	0x40000c00
    144c:	00001159 	.word	0x00001159

00001450 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    1454:	4c09      	ldr	r4, [pc, #36]	; (147c <system_gclk_gen_enable+0x2c>)
    1456:	47a0      	blx	r4
    1458:	2800      	cmp	r0, #0
    145a:	d1fb      	bne.n	1454 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <system_gclk_gen_enable+0x30>)
    145e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1460:	4b08      	ldr	r3, [pc, #32]	; (1484 <system_gclk_gen_enable+0x34>)
    1462:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    1464:	47a0      	blx	r4
    1466:	2800      	cmp	r0, #0
    1468:	d1fc      	bne.n	1464 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    146a:	2380      	movs	r3, #128	; 0x80
    146c:	4a06      	ldr	r2, [pc, #24]	; (1488 <system_gclk_gen_enable+0x38>)
    146e:	025b      	lsls	r3, r3, #9
    1470:	6851      	ldr	r1, [r2, #4]
    1472:	430b      	orrs	r3, r1
    1474:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1476:	4b05      	ldr	r3, [pc, #20]	; (148c <system_gclk_gen_enable+0x3c>)
    1478:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	00001381 	.word	0x00001381
    1480:	00001125 	.word	0x00001125
    1484:	40000c04 	.word	0x40000c04
    1488:	40000c00 	.word	0x40000c00
    148c:	00001159 	.word	0x00001159

00001490 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1492:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1494:	4e18      	ldr	r6, [pc, #96]	; (14f8 <system_gclk_gen_get_hz+0x68>)
    1496:	47b0      	blx	r6
    1498:	2800      	cmp	r0, #0
    149a:	d1fb      	bne.n	1494 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    149c:	4b17      	ldr	r3, [pc, #92]	; (14fc <system_gclk_gen_get_hz+0x6c>)
    149e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14a0:	4b17      	ldr	r3, [pc, #92]	; (1500 <system_gclk_gen_get_hz+0x70>)
    14a2:	701f      	strb	r7, [r3, #0]
    14a4:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    14a6:	47b0      	blx	r6
    14a8:	2800      	cmp	r0, #0
    14aa:	d1fc      	bne.n	14a6 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14ac:	4d15      	ldr	r5, [pc, #84]	; (1504 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14ae:	4b16      	ldr	r3, [pc, #88]	; (1508 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14b0:	6868      	ldr	r0, [r5, #4]
    14b2:	04c0      	lsls	r0, r0, #19
    14b4:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14b6:	4798      	blx	r3
    14b8:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14ba:	9b01      	ldr	r3, [sp, #4]
    14bc:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    14be:	686b      	ldr	r3, [r5, #4]
    14c0:	02db      	lsls	r3, r3, #11
    14c2:	0fdb      	lsrs	r3, r3, #31
    14c4:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14c6:	4b11      	ldr	r3, [pc, #68]	; (150c <system_gclk_gen_get_hz+0x7c>)
    14c8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    14ca:	47b0      	blx	r6
    14cc:	2800      	cmp	r0, #0
    14ce:	d1fc      	bne.n	14ca <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    14d0:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    14d2:	4b0f      	ldr	r3, [pc, #60]	; (1510 <system_gclk_gen_get_hz+0x80>)
    14d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14d6:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    14d8:	022d      	lsls	r5, r5, #8
    14da:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    14dc:	2b00      	cmp	r3, #0
    14de:	d108      	bne.n	14f2 <system_gclk_gen_get_hz+0x62>
    14e0:	2d01      	cmp	r5, #1
    14e2:	d904      	bls.n	14ee <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    14e4:	0020      	movs	r0, r4
    14e6:	0029      	movs	r1, r5
    14e8:	4b0a      	ldr	r3, [pc, #40]	; (1514 <system_gclk_gen_get_hz+0x84>)
    14ea:	4798      	blx	r3
    14ec:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    14ee:	0020      	movs	r0, r4
    14f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    14f2:	3501      	adds	r5, #1
    14f4:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    14f6:	e7fa      	b.n	14ee <system_gclk_gen_get_hz+0x5e>
    14f8:	00001381 	.word	0x00001381
    14fc:	00001125 	.word	0x00001125
    1500:	40000c04 	.word	0x40000c04
    1504:	40000c00 	.word	0x40000c00
    1508:	00001199 	.word	0x00001199
    150c:	40000c08 	.word	0x40000c08
    1510:	00001159 	.word	0x00001159
    1514:	000018fd 	.word	0x000018fd

00001518 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1518:	b510      	push	{r4, lr}
    151a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    151c:	4b06      	ldr	r3, [pc, #24]	; (1538 <system_gclk_chan_enable+0x20>)
    151e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1520:	4b06      	ldr	r3, [pc, #24]	; (153c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1522:	4a07      	ldr	r2, [pc, #28]	; (1540 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1524:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1526:	2380      	movs	r3, #128	; 0x80
    1528:	8851      	ldrh	r1, [r2, #2]
    152a:	01db      	lsls	r3, r3, #7
    152c:	430b      	orrs	r3, r1
    152e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <system_gclk_chan_enable+0x2c>)
    1532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1534:	bd10      	pop	{r4, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	00001125 	.word	0x00001125
    153c:	40000c02 	.word	0x40000c02
    1540:	40000c00 	.word	0x40000c00
    1544:	00001159 	.word	0x00001159

00001548 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1548:	b510      	push	{r4, lr}
    154a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    154c:	4b0e      	ldr	r3, [pc, #56]	; (1588 <system_gclk_chan_disable+0x40>)
    154e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1550:	4b0e      	ldr	r3, [pc, #56]	; (158c <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1552:	4a0f      	ldr	r2, [pc, #60]	; (1590 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1554:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1556:	4b0f      	ldr	r3, [pc, #60]	; (1594 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1558:	4c0f      	ldr	r4, [pc, #60]	; (1598 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    155a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    155c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    155e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1560:	4011      	ands	r1, r2
    1562:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1564:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1566:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1568:	4021      	ands	r1, r4
    156a:	8059      	strh	r1, [r3, #2]
    156c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    156e:	2280      	movs	r2, #128	; 0x80
    1570:	01d2      	lsls	r2, r2, #7
    1572:	885c      	ldrh	r4, [r3, #2]
    1574:	4214      	tst	r4, r2
    1576:	d1fc      	bne.n	1572 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1578:	885a      	ldrh	r2, [r3, #2]
    157a:	0200      	lsls	r0, r0, #8
    157c:	400a      	ands	r2, r1
    157e:	4302      	orrs	r2, r0
    1580:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1582:	4b06      	ldr	r3, [pc, #24]	; (159c <system_gclk_chan_disable+0x54>)
    1584:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1586:	bd10      	pop	{r4, pc}
    1588:	00001125 	.word	0x00001125
    158c:	40000c02 	.word	0x40000c02
    1590:	fffff0ff 	.word	0xfffff0ff
    1594:	40000c00 	.word	0x40000c00
    1598:	ffffbfff 	.word	0xffffbfff
    159c:	00001159 	.word	0x00001159

000015a0 <system_gclk_chan_set_config>:
{
    15a0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15a2:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    15a4:	4b03      	ldr	r3, [pc, #12]	; (15b4 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15a6:	0224      	lsls	r4, r4, #8
    15a8:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    15aa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15ac:	4b02      	ldr	r3, [pc, #8]	; (15b8 <system_gclk_chan_set_config+0x18>)
    15ae:	b2a4      	uxth	r4, r4
    15b0:	805c      	strh	r4, [r3, #2]
}
    15b2:	bd10      	pop	{r4, pc}
    15b4:	00001549 	.word	0x00001549
    15b8:	40000c00 	.word	0x40000c00

000015bc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    15bc:	b510      	push	{r4, lr}
    15be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15c0:	4b06      	ldr	r3, [pc, #24]	; (15dc <system_gclk_chan_get_hz+0x20>)
    15c2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <system_gclk_chan_get_hz+0x24>)
    15c6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <system_gclk_chan_get_hz+0x28>)
    15ca:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <system_gclk_chan_get_hz+0x2c>)
    15ce:	0524      	lsls	r4, r4, #20
    15d0:	0f24      	lsrs	r4, r4, #28
    15d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    15d4:	0020      	movs	r0, r4
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <system_gclk_chan_get_hz+0x30>)
    15d8:	4798      	blx	r3
}
    15da:	bd10      	pop	{r4, pc}
    15dc:	00001125 	.word	0x00001125
    15e0:	40000c02 	.word	0x40000c02
    15e4:	40000c00 	.word	0x40000c00
    15e8:	00001159 	.word	0x00001159
    15ec:	00001491 	.word	0x00001491

000015f0 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15f0:	78d3      	ldrb	r3, [r2, #3]
{
    15f2:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    15f4:	2b00      	cmp	r3, #0
    15f6:	d135      	bne.n	1664 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15f8:	7814      	ldrb	r4, [r2, #0]
    15fa:	2c80      	cmp	r4, #128	; 0x80
    15fc:	d003      	beq.n	1606 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    15fe:	2380      	movs	r3, #128	; 0x80
    1600:	0624      	lsls	r4, r4, #24
    1602:	025b      	lsls	r3, r3, #9
    1604:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1606:	2502      	movs	r5, #2
    1608:	7854      	ldrb	r4, [r2, #1]
    160a:	43ac      	bics	r4, r5
    160c:	d106      	bne.n	161c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    160e:	7894      	ldrb	r4, [r2, #2]
    1610:	2c00      	cmp	r4, #0
    1612:	d124      	bne.n	165e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1614:	2480      	movs	r4, #128	; 0x80
    1616:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1618:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    161a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    161c:	7854      	ldrb	r4, [r2, #1]
    161e:	3c01      	subs	r4, #1
    1620:	2c01      	cmp	r4, #1
    1622:	d801      	bhi.n	1628 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1624:	4c12      	ldr	r4, [pc, #72]	; (1670 <_system_pinmux_config+0x80>)
    1626:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1628:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    162a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    162c:	05e4      	lsls	r4, r4, #23
    162e:	432c      	orrs	r4, r5
    1630:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1632:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1634:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1636:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1638:	0624      	lsls	r4, r4, #24
    163a:	432c      	orrs	r4, r5
    163c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    163e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1640:	78d4      	ldrb	r4, [r2, #3]
    1642:	2c00      	cmp	r4, #0
    1644:	d10a      	bne.n	165c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1646:	035b      	lsls	r3, r3, #13
    1648:	d503      	bpl.n	1652 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    164a:	7893      	ldrb	r3, [r2, #2]
    164c:	2b01      	cmp	r3, #1
    164e:	d10c      	bne.n	166a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1650:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1652:	7853      	ldrb	r3, [r2, #1]
    1654:	3b01      	subs	r3, #1
    1656:	2b01      	cmp	r3, #1
    1658:	d800      	bhi.n	165c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    165a:	6081      	str	r1, [r0, #8]
		}
	}
}
    165c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    165e:	24c0      	movs	r4, #192	; 0xc0
    1660:	02e4      	lsls	r4, r4, #11
    1662:	e7d9      	b.n	1618 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1664:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1666:	2300      	movs	r3, #0
    1668:	e7de      	b.n	1628 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    166a:	6141      	str	r1, [r0, #20]
    166c:	e7f1      	b.n	1652 <_system_pinmux_config+0x62>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	fffbffff 	.word	0xfffbffff

00001674 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1674:	b510      	push	{r4, lr}
    1676:	0003      	movs	r3, r0
    1678:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    167a:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    167c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    167e:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1680:	4281      	cmp	r1, r0
    1682:	d102      	bne.n	168a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1684:	4904      	ldr	r1, [pc, #16]	; (1698 <system_pinmux_pin_set_config+0x24>)
    1686:	01e0      	lsls	r0, r4, #7
    1688:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    168a:	211f      	movs	r1, #31
    168c:	400b      	ands	r3, r1
    168e:	391e      	subs	r1, #30
    1690:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1692:	4b02      	ldr	r3, [pc, #8]	; (169c <system_pinmux_pin_set_config+0x28>)
    1694:	4798      	blx	r3
}
    1696:	bd10      	pop	{r4, pc}
    1698:	41004400 	.word	0x41004400
    169c:	000015f1 	.word	0x000015f1

000016a0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16a0:	4770      	bx	lr
	...

000016a4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16a4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16a6:	4b05      	ldr	r3, [pc, #20]	; (16bc <system_init+0x18>)
    16a8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    16aa:	4b05      	ldr	r3, [pc, #20]	; (16c0 <system_init+0x1c>)
    16ac:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    16ae:	4b05      	ldr	r3, [pc, #20]	; (16c4 <system_init+0x20>)
    16b0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    16b2:	4b05      	ldr	r3, [pc, #20]	; (16c8 <system_init+0x24>)
    16b4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    16b6:	4b05      	ldr	r3, [pc, #20]	; (16cc <system_init+0x28>)
    16b8:	4798      	blx	r3
}
    16ba:	bd10      	pop	{r4, pc}
    16bc:	000012f1 	.word	0x000012f1
    16c0:	00001121 	.word	0x00001121
    16c4:	000016a1 	.word	0x000016a1
    16c8:	000016a1 	.word	0x000016a1
    16cc:	000016a1 	.word	0x000016a1

000016d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    16d0:	e7fe      	b.n	16d0 <Dummy_Handler>
	...

000016d4 <Reset_Handler>:
        if (pSrc != pDest) {
    16d4:	4821      	ldr	r0, [pc, #132]	; (175c <Reset_Handler+0x88>)
    16d6:	4922      	ldr	r1, [pc, #136]	; (1760 <Reset_Handler+0x8c>)
{
    16d8:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    16da:	4288      	cmp	r0, r1
    16dc:	d004      	beq.n	16e8 <Reset_Handler+0x14>
    16de:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    16e0:	4c20      	ldr	r4, [pc, #128]	; (1764 <Reset_Handler+0x90>)
    16e2:	18ca      	adds	r2, r1, r3
    16e4:	42a2      	cmp	r2, r4
    16e6:	d332      	bcc.n	174e <Reset_Handler+0x7a>
                *pDest++ = 0;
    16e8:	2100      	movs	r1, #0
    16ea:	4b1f      	ldr	r3, [pc, #124]	; (1768 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    16ec:	4a1f      	ldr	r2, [pc, #124]	; (176c <Reset_Handler+0x98>)
    16ee:	4293      	cmp	r3, r2
    16f0:	d331      	bcc.n	1756 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16f2:	21ff      	movs	r1, #255	; 0xff
    16f4:	4b1e      	ldr	r3, [pc, #120]	; (1770 <Reset_Handler+0x9c>)
    16f6:	4a1f      	ldr	r2, [pc, #124]	; (1774 <Reset_Handler+0xa0>)
    16f8:	438b      	bics	r3, r1
    16fa:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    16fc:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    16fe:	250c      	movs	r5, #12
    1700:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1702:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1704:	4b1c      	ldr	r3, [pc, #112]	; (1778 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1706:	481d      	ldr	r0, [pc, #116]	; (177c <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1708:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    170a:	78c3      	ldrb	r3, [r0, #3]
    170c:	39fc      	subs	r1, #252	; 0xfc
    170e:	438b      	bics	r3, r1
    1710:	4313      	orrs	r3, r2
    1712:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1714:	78c3      	ldrb	r3, [r0, #3]
    1716:	43ab      	bics	r3, r5
    1718:	4323      	orrs	r3, r4
    171a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    171c:	4b18      	ldr	r3, [pc, #96]	; (1780 <Reset_Handler+0xac>)
    171e:	7b98      	ldrb	r0, [r3, #14]
    1720:	43b0      	bics	r0, r6
    1722:	0006      	movs	r6, r0
    1724:	2020      	movs	r0, #32
    1726:	4330      	orrs	r0, r6
    1728:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    172a:	7b98      	ldrb	r0, [r3, #14]
    172c:	43a8      	bics	r0, r5
    172e:	4304      	orrs	r4, r0
    1730:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1732:	7b98      	ldrb	r0, [r3, #14]
    1734:	4388      	bics	r0, r1
    1736:	4302      	orrs	r2, r0
    1738:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    173a:	2380      	movs	r3, #128	; 0x80
    173c:	4a11      	ldr	r2, [pc, #68]	; (1784 <Reset_Handler+0xb0>)
    173e:	6851      	ldr	r1, [r2, #4]
    1740:	430b      	orrs	r3, r1
    1742:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1744:	4b10      	ldr	r3, [pc, #64]	; (1788 <Reset_Handler+0xb4>)
    1746:	4798      	blx	r3
        main();
    1748:	4b10      	ldr	r3, [pc, #64]	; (178c <Reset_Handler+0xb8>)
    174a:	4798      	blx	r3
    174c:	e7fe      	b.n	174c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    174e:	58c5      	ldr	r5, [r0, r3]
    1750:	3304      	adds	r3, #4
    1752:	6015      	str	r5, [r2, #0]
    1754:	e7c5      	b.n	16e2 <Reset_Handler+0xe>
                *pDest++ = 0;
    1756:	c302      	stmia	r3!, {r1}
    1758:	e7c9      	b.n	16ee <Reset_Handler+0x1a>
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	00001b10 	.word	0x00001b10
    1760:	20000000 	.word	0x20000000
    1764:	2000000c 	.word	0x2000000c
    1768:	2000000c 	.word	0x2000000c
    176c:	20000118 	.word	0x20000118
    1770:	00000000 	.word	0x00000000
    1774:	e000ed00 	.word	0xe000ed00
    1778:	410070fc 	.word	0x410070fc
    177c:	41005000 	.word	0x41005000
    1780:	41004800 	.word	0x41004800
    1784:	41004000 	.word	0x41004000
    1788:	00001a81 	.word	0x00001a81
    178c:	000018c5 	.word	0x000018c5

00001790 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    1790:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1794:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    1796:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    1798:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    179a:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    179c:	4d20      	ldr	r5, [pc, #128]	; (1820 <conf_port_pin+0x90>)
    179e:	0021      	movs	r1, r4
    17a0:	200b      	movs	r0, #11
    17a2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    17a4:	7067      	strb	r7, [r4, #1]
    17a6:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    17a8:	0021      	movs	r1, r4
    17aa:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    17ac:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    17ae:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    17b0:	2380      	movs	r3, #128	; 0x80
    17b2:	4e1c      	ldr	r6, [pc, #112]	; (1824 <conf_port_pin+0x94>)
    17b4:	00db      	lsls	r3, r3, #3
    17b6:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    17b8:	0021      	movs	r1, r4
    17ba:	2005      	movs	r0, #5
    17bc:	47a8      	blx	r5
    17be:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    17c0:	0021      	movs	r1, r4
    17c2:	61b3      	str	r3, [r6, #24]
    17c4:	2006      	movs	r0, #6
    17c6:	47a8      	blx	r5
    17c8:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    17ca:	0021      	movs	r1, r4
    17cc:	61b3      	str	r3, [r6, #24]
    17ce:	2007      	movs	r0, #7
    17d0:	47a8      	blx	r5
    17d2:	2380      	movs	r3, #128	; 0x80
    17d4:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    17d6:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    17d8:	0021      	movs	r1, r4
    17da:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    17dc:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    17de:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    17e0:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    17e2:	0021      	movs	r1, r4
    17e4:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    17e6:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    17e8:	47a8      	blx	r5
    17ea:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    17ec:	0021      	movs	r1, r4
    17ee:	61b3      	str	r3, [r6, #24]
    17f0:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    17f2:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    17f4:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    17f6:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    17f8:	47a8      	blx	r5
    17fa:	0033      	movs	r3, r6
    17fc:	2280      	movs	r2, #128	; 0x80
    17fe:	3398      	adds	r3, #152	; 0x98
    1800:	0212      	lsls	r2, r2, #8
    1802:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    1804:	0021      	movs	r1, r4
    1806:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1808:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    180a:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    180c:	47a8      	blx	r5
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	029b      	lsls	r3, r3, #10
    1812:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1814:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    1816:	0021      	movs	r1, r4
    1818:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    181a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    181c:	47a8      	blx	r5
} // end conf_port_pin(void)
    181e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1820:	000003e5 	.word	0x000003e5
    1824:	41004400 	.word	0x41004400

00001828 <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1828:	2300      	movs	r3, #0
{
    182a:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    182c:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    182e:	a801      	add	r0, sp, #4
    1830:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1832:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1834:	4b01      	ldr	r3, [pc, #4]	; (183c <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    1836:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    1838:	4798      	blx	r3
}
    183a:	bd07      	pop	{r0, r1, r2, pc}
    183c:	00001225 	.word	0x00001225

00001840 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1842:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1844:	4b09      	ldr	r3, [pc, #36]	; (186c <clk_gclk0_init+0x2c>)
    1846:	4798      	blx	r3
    1848:	4b09      	ldr	r3, [pc, #36]	; (1870 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    184a:	a901      	add	r1, sp, #4
    184c:	721c      	strb	r4, [r3, #8]
    184e:	2306      	movs	r3, #6
    1850:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1852:	3b05      	subs	r3, #5
    1854:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1856:	0020      	movs	r0, r4
    1858:	4b06      	ldr	r3, [pc, #24]	; (1874 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    185a:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    185c:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    185e:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1860:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1862:	0020      	movs	r0, r4
    1864:	4b04      	ldr	r3, [pc, #16]	; (1878 <clk_gclk0_init+0x38>)
    1866:	4798      	blx	r3
}
    1868:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	0000138d 	.word	0x0000138d
    1870:	40000400 	.word	0x40000400
    1874:	000013ad 	.word	0x000013ad
    1878:	00001451 	.word	0x00001451

0000187c <sys_clk_init>:
{
    187c:	b510      	push	{r4, lr}
	clk_osc8m_init();
    187e:	4b03      	ldr	r3, [pc, #12]	; (188c <sys_clk_init+0x10>)
    1880:	4798      	blx	r3
	clk_gclk0_init();
    1882:	4b03      	ldr	r3, [pc, #12]	; (1890 <sys_clk_init+0x14>)
    1884:	4798      	blx	r3
    delay_init();
    1886:	4b03      	ldr	r3, [pc, #12]	; (1894 <sys_clk_init+0x18>)
    1888:	4798      	blx	r3
}
    188a:	bd10      	pop	{r4, pc}
    188c:	00001829 	.word	0x00001829
    1890:	00001841 	.word	0x00001841
    1894:	00000379 	.word	0x00000379

00001898 <simSysInit>:
{
    1898:	b510      	push	{r4, lr}
	system_init();
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <simSysInit+0x18>)
    189c:	4798      	blx	r3
	sys_clk_init();
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <simSysInit+0x1c>)
    18a0:	4798      	blx	r3
	conf_port_pin();
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <simSysInit+0x20>)
    18a4:	4798      	blx	r3
    spi169_init();
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <simSysInit+0x24>)
    18a8:	4798      	blx	r3
    uart245_init();
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <simSysInit+0x28>)
    18ac:	4798      	blx	r3
}
    18ae:	bd10      	pop	{r4, pc}
    18b0:	000016a5 	.word	0x000016a5
    18b4:	0000187d 	.word	0x0000187d
    18b8:	00001791 	.word	0x00001791
    18bc:	00000115 	.word	0x00000115
    18c0:	00000201 	.word	0x00000201

000018c4 <main>:
{
    18c4:	b510      	push	{r4, lr}
    simSysInit();
    18c6:	4b04      	ldr	r3, [pc, #16]	; (18d8 <main+0x14>)
    18c8:	4798      	blx	r3
        uart245_enter_config();
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <main+0x18>)
    18cc:	4798      	blx	r3
        uart245_config_test1();
    18ce:	4b04      	ldr	r3, [pc, #16]	; (18e0 <main+0x1c>)
    18d0:	4798      	blx	r3
        uart245_exit_config();
    18d2:	4b04      	ldr	r3, [pc, #16]	; (18e4 <main+0x20>)
    18d4:	4798      	blx	r3
    18d6:	e7f8      	b.n	18ca <main+0x6>
    18d8:	00001899 	.word	0x00001899
    18dc:	00000305 	.word	0x00000305
    18e0:	00000359 	.word	0x00000359
    18e4:	00000331 	.word	0x00000331

000018e8 <__gnu_thumb1_case_uqi>:
    18e8:	b402      	push	{r1}
    18ea:	4671      	mov	r1, lr
    18ec:	0849      	lsrs	r1, r1, #1
    18ee:	0049      	lsls	r1, r1, #1
    18f0:	5c09      	ldrb	r1, [r1, r0]
    18f2:	0049      	lsls	r1, r1, #1
    18f4:	448e      	add	lr, r1
    18f6:	bc02      	pop	{r1}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			; (mov r8, r8)

000018fc <__udivsi3>:
    18fc:	2200      	movs	r2, #0
    18fe:	0843      	lsrs	r3, r0, #1
    1900:	428b      	cmp	r3, r1
    1902:	d374      	bcc.n	19ee <__udivsi3+0xf2>
    1904:	0903      	lsrs	r3, r0, #4
    1906:	428b      	cmp	r3, r1
    1908:	d35f      	bcc.n	19ca <__udivsi3+0xce>
    190a:	0a03      	lsrs	r3, r0, #8
    190c:	428b      	cmp	r3, r1
    190e:	d344      	bcc.n	199a <__udivsi3+0x9e>
    1910:	0b03      	lsrs	r3, r0, #12
    1912:	428b      	cmp	r3, r1
    1914:	d328      	bcc.n	1968 <__udivsi3+0x6c>
    1916:	0c03      	lsrs	r3, r0, #16
    1918:	428b      	cmp	r3, r1
    191a:	d30d      	bcc.n	1938 <__udivsi3+0x3c>
    191c:	22ff      	movs	r2, #255	; 0xff
    191e:	0209      	lsls	r1, r1, #8
    1920:	ba12      	rev	r2, r2
    1922:	0c03      	lsrs	r3, r0, #16
    1924:	428b      	cmp	r3, r1
    1926:	d302      	bcc.n	192e <__udivsi3+0x32>
    1928:	1212      	asrs	r2, r2, #8
    192a:	0209      	lsls	r1, r1, #8
    192c:	d065      	beq.n	19fa <__udivsi3+0xfe>
    192e:	0b03      	lsrs	r3, r0, #12
    1930:	428b      	cmp	r3, r1
    1932:	d319      	bcc.n	1968 <__udivsi3+0x6c>
    1934:	e000      	b.n	1938 <__udivsi3+0x3c>
    1936:	0a09      	lsrs	r1, r1, #8
    1938:	0bc3      	lsrs	r3, r0, #15
    193a:	428b      	cmp	r3, r1
    193c:	d301      	bcc.n	1942 <__udivsi3+0x46>
    193e:	03cb      	lsls	r3, r1, #15
    1940:	1ac0      	subs	r0, r0, r3
    1942:	4152      	adcs	r2, r2
    1944:	0b83      	lsrs	r3, r0, #14
    1946:	428b      	cmp	r3, r1
    1948:	d301      	bcc.n	194e <__udivsi3+0x52>
    194a:	038b      	lsls	r3, r1, #14
    194c:	1ac0      	subs	r0, r0, r3
    194e:	4152      	adcs	r2, r2
    1950:	0b43      	lsrs	r3, r0, #13
    1952:	428b      	cmp	r3, r1
    1954:	d301      	bcc.n	195a <__udivsi3+0x5e>
    1956:	034b      	lsls	r3, r1, #13
    1958:	1ac0      	subs	r0, r0, r3
    195a:	4152      	adcs	r2, r2
    195c:	0b03      	lsrs	r3, r0, #12
    195e:	428b      	cmp	r3, r1
    1960:	d301      	bcc.n	1966 <__udivsi3+0x6a>
    1962:	030b      	lsls	r3, r1, #12
    1964:	1ac0      	subs	r0, r0, r3
    1966:	4152      	adcs	r2, r2
    1968:	0ac3      	lsrs	r3, r0, #11
    196a:	428b      	cmp	r3, r1
    196c:	d301      	bcc.n	1972 <__udivsi3+0x76>
    196e:	02cb      	lsls	r3, r1, #11
    1970:	1ac0      	subs	r0, r0, r3
    1972:	4152      	adcs	r2, r2
    1974:	0a83      	lsrs	r3, r0, #10
    1976:	428b      	cmp	r3, r1
    1978:	d301      	bcc.n	197e <__udivsi3+0x82>
    197a:	028b      	lsls	r3, r1, #10
    197c:	1ac0      	subs	r0, r0, r3
    197e:	4152      	adcs	r2, r2
    1980:	0a43      	lsrs	r3, r0, #9
    1982:	428b      	cmp	r3, r1
    1984:	d301      	bcc.n	198a <__udivsi3+0x8e>
    1986:	024b      	lsls	r3, r1, #9
    1988:	1ac0      	subs	r0, r0, r3
    198a:	4152      	adcs	r2, r2
    198c:	0a03      	lsrs	r3, r0, #8
    198e:	428b      	cmp	r3, r1
    1990:	d301      	bcc.n	1996 <__udivsi3+0x9a>
    1992:	020b      	lsls	r3, r1, #8
    1994:	1ac0      	subs	r0, r0, r3
    1996:	4152      	adcs	r2, r2
    1998:	d2cd      	bcs.n	1936 <__udivsi3+0x3a>
    199a:	09c3      	lsrs	r3, r0, #7
    199c:	428b      	cmp	r3, r1
    199e:	d301      	bcc.n	19a4 <__udivsi3+0xa8>
    19a0:	01cb      	lsls	r3, r1, #7
    19a2:	1ac0      	subs	r0, r0, r3
    19a4:	4152      	adcs	r2, r2
    19a6:	0983      	lsrs	r3, r0, #6
    19a8:	428b      	cmp	r3, r1
    19aa:	d301      	bcc.n	19b0 <__udivsi3+0xb4>
    19ac:	018b      	lsls	r3, r1, #6
    19ae:	1ac0      	subs	r0, r0, r3
    19b0:	4152      	adcs	r2, r2
    19b2:	0943      	lsrs	r3, r0, #5
    19b4:	428b      	cmp	r3, r1
    19b6:	d301      	bcc.n	19bc <__udivsi3+0xc0>
    19b8:	014b      	lsls	r3, r1, #5
    19ba:	1ac0      	subs	r0, r0, r3
    19bc:	4152      	adcs	r2, r2
    19be:	0903      	lsrs	r3, r0, #4
    19c0:	428b      	cmp	r3, r1
    19c2:	d301      	bcc.n	19c8 <__udivsi3+0xcc>
    19c4:	010b      	lsls	r3, r1, #4
    19c6:	1ac0      	subs	r0, r0, r3
    19c8:	4152      	adcs	r2, r2
    19ca:	08c3      	lsrs	r3, r0, #3
    19cc:	428b      	cmp	r3, r1
    19ce:	d301      	bcc.n	19d4 <__udivsi3+0xd8>
    19d0:	00cb      	lsls	r3, r1, #3
    19d2:	1ac0      	subs	r0, r0, r3
    19d4:	4152      	adcs	r2, r2
    19d6:	0883      	lsrs	r3, r0, #2
    19d8:	428b      	cmp	r3, r1
    19da:	d301      	bcc.n	19e0 <__udivsi3+0xe4>
    19dc:	008b      	lsls	r3, r1, #2
    19de:	1ac0      	subs	r0, r0, r3
    19e0:	4152      	adcs	r2, r2
    19e2:	0843      	lsrs	r3, r0, #1
    19e4:	428b      	cmp	r3, r1
    19e6:	d301      	bcc.n	19ec <__udivsi3+0xf0>
    19e8:	004b      	lsls	r3, r1, #1
    19ea:	1ac0      	subs	r0, r0, r3
    19ec:	4152      	adcs	r2, r2
    19ee:	1a41      	subs	r1, r0, r1
    19f0:	d200      	bcs.n	19f4 <__udivsi3+0xf8>
    19f2:	4601      	mov	r1, r0
    19f4:	4152      	adcs	r2, r2
    19f6:	4610      	mov	r0, r2
    19f8:	4770      	bx	lr
    19fa:	e7ff      	b.n	19fc <__udivsi3+0x100>
    19fc:	b501      	push	{r0, lr}
    19fe:	2000      	movs	r0, #0
    1a00:	f000 f806 	bl	1a10 <__aeabi_idiv0>
    1a04:	bd02      	pop	{r1, pc}
    1a06:	46c0      	nop			; (mov r8, r8)

00001a08 <__aeabi_uidivmod>:
    1a08:	2900      	cmp	r1, #0
    1a0a:	d0f7      	beq.n	19fc <__udivsi3+0x100>
    1a0c:	e776      	b.n	18fc <__udivsi3>
    1a0e:	4770      	bx	lr

00001a10 <__aeabi_idiv0>:
    1a10:	4770      	bx	lr
    1a12:	46c0      	nop			; (mov r8, r8)

00001a14 <__aeabi_llsl>:
    1a14:	4091      	lsls	r1, r2
    1a16:	1c03      	adds	r3, r0, #0
    1a18:	4090      	lsls	r0, r2
    1a1a:	469c      	mov	ip, r3
    1a1c:	3a20      	subs	r2, #32
    1a1e:	4093      	lsls	r3, r2
    1a20:	4319      	orrs	r1, r3
    1a22:	4252      	negs	r2, r2
    1a24:	4663      	mov	r3, ip
    1a26:	40d3      	lsrs	r3, r2
    1a28:	4319      	orrs	r1, r3
    1a2a:	4770      	bx	lr

00001a2c <__aeabi_lmul>:
    1a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a2e:	46ce      	mov	lr, r9
    1a30:	4647      	mov	r7, r8
    1a32:	0415      	lsls	r5, r2, #16
    1a34:	0c2d      	lsrs	r5, r5, #16
    1a36:	002e      	movs	r6, r5
    1a38:	b580      	push	{r7, lr}
    1a3a:	0407      	lsls	r7, r0, #16
    1a3c:	0c14      	lsrs	r4, r2, #16
    1a3e:	0c3f      	lsrs	r7, r7, #16
    1a40:	4699      	mov	r9, r3
    1a42:	0c03      	lsrs	r3, r0, #16
    1a44:	437e      	muls	r6, r7
    1a46:	435d      	muls	r5, r3
    1a48:	4367      	muls	r7, r4
    1a4a:	4363      	muls	r3, r4
    1a4c:	197f      	adds	r7, r7, r5
    1a4e:	0c34      	lsrs	r4, r6, #16
    1a50:	19e4      	adds	r4, r4, r7
    1a52:	469c      	mov	ip, r3
    1a54:	42a5      	cmp	r5, r4
    1a56:	d903      	bls.n	1a60 <__aeabi_lmul+0x34>
    1a58:	2380      	movs	r3, #128	; 0x80
    1a5a:	025b      	lsls	r3, r3, #9
    1a5c:	4698      	mov	r8, r3
    1a5e:	44c4      	add	ip, r8
    1a60:	464b      	mov	r3, r9
    1a62:	4351      	muls	r1, r2
    1a64:	4343      	muls	r3, r0
    1a66:	0436      	lsls	r6, r6, #16
    1a68:	0c36      	lsrs	r6, r6, #16
    1a6a:	0c25      	lsrs	r5, r4, #16
    1a6c:	0424      	lsls	r4, r4, #16
    1a6e:	4465      	add	r5, ip
    1a70:	19a4      	adds	r4, r4, r6
    1a72:	1859      	adds	r1, r3, r1
    1a74:	1949      	adds	r1, r1, r5
    1a76:	0020      	movs	r0, r4
    1a78:	bc0c      	pop	{r2, r3}
    1a7a:	4690      	mov	r8, r2
    1a7c:	4699      	mov	r9, r3
    1a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a80 <__libc_init_array>:
    1a80:	b570      	push	{r4, r5, r6, lr}
    1a82:	2600      	movs	r6, #0
    1a84:	4d0c      	ldr	r5, [pc, #48]	; (1ab8 <__libc_init_array+0x38>)
    1a86:	4c0d      	ldr	r4, [pc, #52]	; (1abc <__libc_init_array+0x3c>)
    1a88:	1b64      	subs	r4, r4, r5
    1a8a:	10a4      	asrs	r4, r4, #2
    1a8c:	42a6      	cmp	r6, r4
    1a8e:	d109      	bne.n	1aa4 <__libc_init_array+0x24>
    1a90:	2600      	movs	r6, #0
    1a92:	f000 f82d 	bl	1af0 <_init>
    1a96:	4d0a      	ldr	r5, [pc, #40]	; (1ac0 <__libc_init_array+0x40>)
    1a98:	4c0a      	ldr	r4, [pc, #40]	; (1ac4 <__libc_init_array+0x44>)
    1a9a:	1b64      	subs	r4, r4, r5
    1a9c:	10a4      	asrs	r4, r4, #2
    1a9e:	42a6      	cmp	r6, r4
    1aa0:	d105      	bne.n	1aae <__libc_init_array+0x2e>
    1aa2:	bd70      	pop	{r4, r5, r6, pc}
    1aa4:	00b3      	lsls	r3, r6, #2
    1aa6:	58eb      	ldr	r3, [r5, r3]
    1aa8:	4798      	blx	r3
    1aaa:	3601      	adds	r6, #1
    1aac:	e7ee      	b.n	1a8c <__libc_init_array+0xc>
    1aae:	00b3      	lsls	r3, r6, #2
    1ab0:	58eb      	ldr	r3, [r5, r3]
    1ab2:	4798      	blx	r3
    1ab4:	3601      	adds	r6, #1
    1ab6:	e7f2      	b.n	1a9e <__libc_init_array+0x1e>
    1ab8:	00001afc 	.word	0x00001afc
    1abc:	00001afc 	.word	0x00001afc
    1ac0:	00001afc 	.word	0x00001afc
    1ac4:	00001b00 	.word	0x00001b00

00001ac8 <memset>:
    1ac8:	0003      	movs	r3, r0
    1aca:	1882      	adds	r2, r0, r2
    1acc:	4293      	cmp	r3, r2
    1ace:	d100      	bne.n	1ad2 <memset+0xa>
    1ad0:	4770      	bx	lr
    1ad2:	7019      	strb	r1, [r3, #0]
    1ad4:	3301      	adds	r3, #1
    1ad6:	e7f9      	b.n	1acc <memset+0x4>
    1ad8:	42000800 	.word	0x42000800
    1adc:	42000c00 	.word	0x42000c00
    1ae0:	42001000 	.word	0x42001000
    1ae4:	42001400 	.word	0x42001400
    1ae8:	42001800 	.word	0x42001800
    1aec:	42001c00 	.word	0x42001c00

00001af0 <_init>:
    1af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1af6:	bc08      	pop	{r3}
    1af8:	469e      	mov	lr, r3
    1afa:	4770      	bx	lr

00001afc <__init_array_start>:
    1afc:	000000dd 	.word	0x000000dd

00001b00 <_fini>:
    1b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b06:	bc08      	pop	{r3}
    1b08:	469e      	mov	lr, r3
    1b0a:	4770      	bx	lr

00001b0c <__fini_array_start>:
    1b0c:	000000b5 	.word	0x000000b5
