
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001608  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  2000000c  00001614  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000d0  000016d8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   000217b8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ee4  00000000  00000000  00041845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000038e6  00000000  00000000  00044729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000448  00000000  00000000  0004800f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007a8  00000000  00000000  00048457  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000443e  00000000  00000000  00048bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005add  00000000  00000000  0004d03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ad8  00000000  00000000  00052b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 20 00 20 e5 11 00 00 e1 11 00 00 e1 11 00 00     . . ............
	...
      2c:	e1 11 00 00 00 00 00 00 00 00 00 00 e1 11 00 00     ................
      3c:	e1 11 00 00 e1 11 00 00 e1 11 00 00 e1 11 00 00     ................
      4c:	e1 11 00 00 e1 11 00 00 e1 11 00 00 e1 11 00 00     ................
      5c:	e1 11 00 00 e1 11 00 00 d1 0b 00 00 e1 0b 00 00     ................
      6c:	f1 0b 00 00 01 0c 00 00 11 0c 00 00 21 0c 00 00     ............!...
      7c:	e1 11 00 00 e1 11 00 00 e1 11 00 00 e1 11 00 00     ................
      8c:	e1 11 00 00 e1 11 00 00 e1 11 00 00 e1 11 00 00     ................
      9c:	e1 11 00 00 e1 11 00 00 e1 11 00 00 e1 11 00 00     ................
      ac:	e1 11 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001608 	.word	0x00001608

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001608 	.word	0x00001608
     10c:	00001608 	.word	0x00001608
     110:	00000000 	.word	0x00000000

00000114 <uart245_init>:
 * Return Values(s) : void
 * Description      : Initializes the UART SERCOM for communicating with the
 *  RC2500HP.
 */
void uart245_init(void)
{
     114:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     116:	2380      	movs	r3, #128	; 0x80
     118:	b091      	sub	sp, #68	; 0x44
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     11a:	4669      	mov	r1, sp
     11c:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     11e:	05db      	lsls	r3, r3, #23
     120:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     122:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
     124:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     126:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
     128:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     12a:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     12c:	3105      	adds	r1, #5
     12e:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     130:	4669      	mov	r1, sp
     132:	3106      	adds	r1, #6
     134:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
     136:	466a      	mov	r2, sp
     138:	3207      	adds	r2, #7
     13a:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
     13c:	aa02      	add	r2, sp, #8
     13e:	77d3      	strb	r3, [r2, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     140:	aa0b      	add	r2, sp, #44	; 0x2c
     142:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
     144:	222d      	movs	r2, #45	; 0x2d
     146:	446a      	add	r2, sp
     148:	7013      	strb	r3, [r2, #0]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     14a:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     14c:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     14e:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     150:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
     152:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
     154:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
     156:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
     158:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
     15a:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     15c:	9305      	str	r3, [sp, #20]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     15e:	774b      	strb	r3, [r1, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    
    config_usart.baudrate    = UART245_BAUD;
     160:	2396      	movs	r3, #150	; 0x96
     162:	01db      	lsls	r3, r3, #7
     164:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART245_PINMUX;
     166:	2390      	movs	r3, #144	; 0x90
     168:	035b      	lsls	r3, r3, #13
     16a:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX245;
     16c:	4b12      	ldr	r3, [pc, #72]	; (1b8 <uart245_init+0xa4>)
	config->receive_pulse_length                    = 19;
     16e:	2213      	movs	r2, #19
     170:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX245;
     172:	4b12      	ldr	r3, [pc, #72]	; (1bc <uart245_init+0xa8>)
     174:	768a      	strb	r2, [r1, #26]
     176:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     178:	2301      	movs	r3, #1
     17a:	425b      	negs	r3, r3
     17c:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     17e:	930f      	str	r3, [sp, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
    
    while (usart_init(&uart245_inst, UART245, &config_usart) != STATUS_OK);
     180:	4d0f      	ldr	r5, [pc, #60]	; (1c0 <uart245_init+0xac>)
     182:	466a      	mov	r2, sp
     184:	490f      	ldr	r1, [pc, #60]	; (1c4 <uart245_init+0xb0>)
     186:	0028      	movs	r0, r5
     188:	4b0f      	ldr	r3, [pc, #60]	; (1c8 <uart245_init+0xb4>)
     18a:	4798      	blx	r3
     18c:	2800      	cmp	r0, #0
     18e:	d1f7      	bne.n	180 <uart245_init+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     190:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     192:	4b0e      	ldr	r3, [pc, #56]	; (1cc <uart245_init+0xb8>)
     194:	0020      	movs	r0, r4
     196:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     198:	231f      	movs	r3, #31
     19a:	4018      	ands	r0, r3
     19c:	3b1e      	subs	r3, #30
     19e:	4083      	lsls	r3, r0
     1a0:	4a0b      	ldr	r2, [pc, #44]	; (1d0 <uart245_init+0xbc>)
     1a2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     1a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     1a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     1a8:	2b00      	cmp	r3, #0
     1aa:	d1fc      	bne.n	1a6 <uart245_init+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     1ac:	6822      	ldr	r2, [r4, #0]
     1ae:	3302      	adds	r3, #2
     1b0:	4313      	orrs	r3, r2
     1b2:	6023      	str	r3, [r4, #0]
    
    usart_enable(&uart245_inst);
}
     1b4:	b011      	add	sp, #68	; 0x44
     1b6:	bd30      	pop	{r4, r5, pc}
     1b8:	00080002 	.word	0x00080002
     1bc:	00090002 	.word	0x00090002
     1c0:	20000028 	.word	0x20000028
     1c4:	42000800 	.word	0x42000800
     1c8:	00000621 	.word	0x00000621
     1cc:	00000ba5 	.word	0x00000ba5
     1d0:	e000e100 	.word	0xe000e100

000001d4 <uart245_wait_prompt>:
 * Description      : Waits for the prompt character from the RC2500HP,
 *  the '>' character. Returns a ASF status code based on the result of UART
 *  functions.
 */
status_code_genare_t uart245_wait_prompt(void)
{
     1d4:	b570      	push	{r4, r5, r6, lr}
    uint8_t wait_time = 100;
    
    do 
    {
        // set the first value of the buffer to a known value that isn't '>'
        uart245_rx_buff[0] = 0xFF;
     1d6:	25ff      	movs	r5, #255	; 0xff
     1d8:	4c0b      	ldr	r4, [pc, #44]	; (208 <uart245_wait_prompt+0x34>)
        
        // wait for the prompt '>' character
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     1da:	2201      	movs	r2, #1
     1dc:	0021      	movs	r1, r4
     1de:	480b      	ldr	r0, [pc, #44]	; (20c <uart245_wait_prompt+0x38>)
     1e0:	4b0b      	ldr	r3, [pc, #44]	; (210 <uart245_wait_prompt+0x3c>)
        uart245_rx_buff[0] = 0xFF;
     1e2:	7025      	strb	r5, [r4, #0]
        stat_val = usart_read_buffer_wait(&uart245_inst, uart245_rx_buff, 1);
     1e4:	4798      	blx	r3
    
        /* if a character wasn't received before the uart's time out or another
         * error occurred, return that error */
        if((stat_val != STATUS_OK) && (stat_val != STATUS_ERR_TIMEOUT))
     1e6:	2800      	cmp	r0, #0
     1e8:	d001      	beq.n	1ee <uart245_wait_prompt+0x1a>
     1ea:	2812      	cmp	r0, #18
     1ec:	d109      	bne.n	202 <uart245_wait_prompt+0x2e>
            return stat_val;
        
        /* if the received character is not the module's prompt character, 
         * wait some more */
        if(uart245_rx_buff[0] != '>')
     1ee:	7823      	ldrb	r3, [r4, #0]
     1f0:	2b3e      	cmp	r3, #62	; 0x3e
     1f2:	d007      	beq.n	204 <uart245_wait_prompt+0x30>
            wait_time--;
        else
            return STATUS_OK;
        
        // delay a millisecond
        delay_ms(1);
     1f4:	4b07      	ldr	r3, [pc, #28]	; (214 <uart245_wait_prompt+0x40>)
     1f6:	2001      	movs	r0, #1
     1f8:	4798      	blx	r3
        
    }while (uart245_rx_buff[0] != '>');
     1fa:	7823      	ldrb	r3, [r4, #0]
     1fc:	2b3e      	cmp	r3, #62	; 0x3e
     1fe:	d1eb      	bne.n	1d8 <uart245_wait_prompt+0x4>
    
    return STATUS_ABORTED;
     200:	2004      	movs	r0, #4
}
     202:	bd70      	pop	{r4, r5, r6, pc}
            return STATUS_OK;
     204:	2000      	movs	r0, #0
     206:	e7fc      	b.n	202 <uart245_wait_prompt+0x2e>
     208:	2000005c 	.word	0x2000005c
     20c:	20000028 	.word	0x20000028
     210:	00000989 	.word	0x00000989
     214:	000002cd 	.word	0x000002cd

00000218 <uart245_enter_config>:
 * Description      : Enters the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF 
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_enter_config(void)
{
     218:	b570      	push	{r4, r5, r6, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     21a:	2540      	movs	r5, #64	; 0x40
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <uart245_enter_config+0x20>)
    
    // pull the CONFIG pin low to begin configuration mode
    port_pin_set_output_level(CONFIG245, false);
    
    // wait for the module to return a prompt '>' character
    stat_val = uart245_wait_prompt();
     21e:	4b07      	ldr	r3, [pc, #28]	; (23c <uart245_enter_config+0x24>)
     220:	6165      	str	r5, [r4, #20]
     222:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
     224:	61a5      	str	r5, [r4, #24]
    // set the CONFIG pin back high
    port_pin_set_output_level(CONFIG245, true);
    
    /* if a character wasn't received before the uart's time out or another
     * error occurred, return that error */
    if(stat_val != STATUS_OK)
     226:	2800      	cmp	r0, #0
     228:	d104      	bne.n	234 <uart245_enter_config+0x1c>
        return stat_val;
        
    /* if the received character is not the module's prompt character, 
     * return an error */
    if(uart245_rx_buff[0] != '>')
     22a:	4b05      	ldr	r3, [pc, #20]	; (240 <uart245_enter_config+0x28>)
     22c:	781b      	ldrb	r3, [r3, #0]
     22e:	2b3e      	cmp	r3, #62	; 0x3e
     230:	d000      	beq.n	234 <uart245_enter_config+0x1c>
        return STATUS_ABORTED;
     232:	3004      	adds	r0, #4
        
    // else return the stat_val if everything was OK
    return stat_val;
}
     234:	bd70      	pop	{r4, r5, r6, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	41004400 	.word	0x41004400
     23c:	000001d5 	.word	0x000001d5
     240:	2000005c 	.word	0x2000005c

00000244 <uart245_exit_config>:
 * Description      : Exits the config mode of the RC2500HP. Refer to pg44 of
 *  the RC2500HP datasheet for enter/exiting configuration mode. Returns a ASF
 *  status code based on the result of UART functions.
 */
status_code_genare_t uart245_exit_config(void)
{
     244:	b510      	push	{r4, lr}
    status_code_genare_t stat_val;
    
    // send an 'X' to indicate end of CONFIG mode
    do 
    {
        stat_val = usart_write_wait(&uart245_inst, 'X');
     246:	2158      	movs	r1, #88	; 0x58
     248:	4805      	ldr	r0, [pc, #20]	; (260 <uart245_exit_config+0x1c>)
     24a:	4b06      	ldr	r3, [pc, #24]	; (264 <uart245_exit_config+0x20>)
     24c:	4798      	blx	r3
     24e:	0004      	movs	r4, r0
    } while (stat_val == STATUS_BUSY);
     250:	2805      	cmp	r0, #5
     252:	d0f8      	beq.n	246 <uart245_exit_config+0x2>
    
    /* wait one millisecond so the module can return to IDLE state
     * refer to page 44 of RC2500HP-TM datasheet for timing info */
    delay_ms(1);
     254:	2001      	movs	r0, #1
     256:	4b04      	ldr	r3, [pc, #16]	; (268 <uart245_exit_config+0x24>)
     258:	4798      	blx	r3
    
    return stat_val;
}
     25a:	0020      	movs	r0, r4
     25c:	bd10      	pop	{r4, pc}
     25e:	46c0      	nop			; (mov r8, r8)
     260:	20000028 	.word	0x20000028
     264:	000008e5 	.word	0x000008e5
     268:	000002cd 	.word	0x000002cd

0000026c <uart245_config_test1>:
 * Description      : RC2500HP configuration command to put the module in test
 *  mode 1. This mode continuously transmits a carrier until another
 *  config command is received.
 */
void uart245_config_test1(void)
{
     26c:	b510      	push	{r4, lr}
    /* send a '1' to set test mode 1, wait until the uart is successful.
     * Test Mode 1 turns on the TX carrier */
    while(usart_write_wait(&uart245_inst, '1') == STATUS_BUSY);
     26e:	2131      	movs	r1, #49	; 0x31
     270:	4803      	ldr	r0, [pc, #12]	; (280 <uart245_config_test1+0x14>)
     272:	4b04      	ldr	r3, [pc, #16]	; (284 <uart245_config_test1+0x18>)
     274:	4798      	blx	r3
     276:	2805      	cmp	r0, #5
     278:	d0f9      	beq.n	26e <uart245_config_test1+0x2>
    
    // wait for the module to return a prompt '>' character
    uart245_wait_prompt();
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <uart245_config_test1+0x1c>)
     27c:	4798      	blx	r3
}
     27e:	bd10      	pop	{r4, pc}
     280:	20000028 	.word	0x20000028
     284:	000008e5 	.word	0x000008e5
     288:	000001d5 	.word	0x000001d5

0000028c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     28c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     28e:	4b09      	ldr	r3, [pc, #36]	; (2b4 <delay_init+0x28>)
     290:	2000      	movs	r0, #0
     292:	4798      	blx	r3
	cycles_per_ms /= 1000;
     294:	21fa      	movs	r1, #250	; 0xfa
     296:	4c08      	ldr	r4, [pc, #32]	; (2b8 <delay_init+0x2c>)
     298:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     29a:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     29c:	47a0      	blx	r4
     29e:	4b07      	ldr	r3, [pc, #28]	; (2bc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     2a0:	4907      	ldr	r1, [pc, #28]	; (2c0 <delay_init+0x34>)
	cycles_per_ms /= 1000;
     2a2:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     2a4:	0028      	movs	r0, r5
     2a6:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     2a8:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <delay_init+0x38>)
     2ac:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     2ae:	4b06      	ldr	r3, [pc, #24]	; (2c8 <delay_init+0x3c>)
     2b0:	601a      	str	r2, [r3, #0]
}
     2b2:	bd70      	pop	{r4, r5, r6, pc}
     2b4:	00000fa1 	.word	0x00000fa1
     2b8:	00001405 	.word	0x00001405
     2bc:	20000000 	.word	0x20000000
     2c0:	000f4240 	.word	0x000f4240
     2c4:	20000004 	.word	0x20000004
     2c8:	e000e010 	.word	0xe000e010

000002cc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     2cc:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2ce:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     2d0:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     2d2:	4b07      	ldr	r3, [pc, #28]	; (2f0 <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2d4:	0264      	lsls	r4, r4, #9
     2d6:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     2d8:	4b06      	ldr	r3, [pc, #24]	; (2f4 <delay_cycles_ms+0x28>)
	while (n--) {
     2da:	3801      	subs	r0, #1
     2dc:	d200      	bcs.n	2e0 <delay_cycles_ms+0x14>
	}
}
     2de:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     2e0:	2a00      	cmp	r2, #0
     2e2:	d0fa      	beq.n	2da <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     2e4:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     2e6:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2e8:	681d      	ldr	r5, [r3, #0]
     2ea:	4225      	tst	r5, r4
     2ec:	d0fc      	beq.n	2e8 <delay_cycles_ms+0x1c>
     2ee:	e7f4      	b.n	2da <delay_cycles_ms+0xe>
     2f0:	20000000 	.word	0x20000000
     2f4:	e000e010 	.word	0xe000e010

000002f8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     2f8:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2fa:	2280      	movs	r2, #128	; 0x80
     2fc:	ab01      	add	r3, sp, #4
     2fe:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     300:	780a      	ldrb	r2, [r1, #0]
     302:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     304:	784a      	ldrb	r2, [r1, #1]
     306:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     308:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     30a:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     30c:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     30e:	4b01      	ldr	r3, [pc, #4]	; (314 <port_pin_set_config+0x1c>)
     310:	4798      	blx	r3
}
     312:	bd07      	pop	{r0, r1, r2, pc}
     314:	00001185 	.word	0x00001185

00000318 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     31a:	2400      	movs	r4, #0
{
     31c:	b089      	sub	sp, #36	; 0x24
     31e:	9200      	str	r2, [sp, #0]
     320:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
     322:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
     324:	2600      	movs	r6, #0
     326:	2700      	movs	r7, #0
     328:	0025      	movs	r5, r4
{
     32a:	9006      	str	r0, [sp, #24]
     32c:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
     32e:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
     330:	9a03      	ldr	r2, [sp, #12]
     332:	4b13      	ldr	r3, [pc, #76]	; (380 <long_division+0x68>)
     334:	2001      	movs	r0, #1
     336:	2100      	movs	r1, #0
     338:	4798      	blx	r3

		r = r << 1;
     33a:	19b6      	adds	r6, r6, r6
     33c:	417f      	adcs	r7, r7

		if (n & bit_shift) {
     33e:	9b06      	ldr	r3, [sp, #24]
     340:	9a07      	ldr	r2, [sp, #28]
     342:	4003      	ands	r3, r0
     344:	400a      	ands	r2, r1
		r = r << 1;
     346:	9604      	str	r6, [sp, #16]
     348:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
     34a:	4313      	orrs	r3, r2
     34c:	d003      	beq.n	356 <long_division+0x3e>
			r |= 0x01;
     34e:	2301      	movs	r3, #1
     350:	4333      	orrs	r3, r6
     352:	001e      	movs	r6, r3
     354:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
     356:	9b01      	ldr	r3, [sp, #4]
     358:	42bb      	cmp	r3, r7
     35a:	d809      	bhi.n	370 <long_division+0x58>
     35c:	d102      	bne.n	364 <long_division+0x4c>
     35e:	9b00      	ldr	r3, [sp, #0]
     360:	42b3      	cmp	r3, r6
     362:	d805      	bhi.n	370 <long_division+0x58>
			r = r - d;
     364:	9a00      	ldr	r2, [sp, #0]
     366:	9b01      	ldr	r3, [sp, #4]
     368:	1ab6      	subs	r6, r6, r2
     36a:	419f      	sbcs	r7, r3
			q |= bit_shift;
     36c:	4304      	orrs	r4, r0
     36e:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
     370:	9b03      	ldr	r3, [sp, #12]
     372:	1e5a      	subs	r2, r3, #1
     374:	9203      	str	r2, [sp, #12]
     376:	d2db      	bcs.n	330 <long_division+0x18>
		}
	}

	return q;
}
     378:	0020      	movs	r0, r4
     37a:	0029      	movs	r1, r5
     37c:	b009      	add	sp, #36	; 0x24
     37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     380:	0000151d 	.word	0x0000151d

00000384 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     384:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     386:	0849      	lsrs	r1, r1, #1
{
     388:	0004      	movs	r4, r0
     38a:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     38c:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     38e:	42a1      	cmp	r1, r4
     390:	d201      	bcs.n	396 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     392:	bd10      	pop	{r4, pc}
		baud_calculated++;
     394:	0003      	movs	r3, r0
     396:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     398:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     39a:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     39c:	428c      	cmp	r4, r1
     39e:	d9f9      	bls.n	394 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3a0:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     3a2:	2bff      	cmp	r3, #255	; 0xff
     3a4:	d8f5      	bhi.n	392 <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     3a6:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     3a8:	2000      	movs	r0, #0
     3aa:	e7f2      	b.n	392 <_sercom_get_sync_baud_val+0xe>

000003ac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ae:	b085      	sub	sp, #20
     3b0:	001e      	movs	r6, r3
     3b2:	ab0a      	add	r3, sp, #40	; 0x28
     3b4:	000d      	movs	r5, r1
     3b6:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3b8:	0003      	movs	r3, r0
     3ba:	434b      	muls	r3, r1
{
     3bc:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3be:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     3c0:	42ab      	cmp	r3, r5
     3c2:	d817      	bhi.n	3f4 <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3c4:	2e00      	cmp	r6, #0
     3c6:	d118      	bne.n	3fa <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3c8:	0002      	movs	r2, r0
     3ca:	0033      	movs	r3, r6
     3cc:	0008      	movs	r0, r1
     3ce:	4c1b      	ldr	r4, [pc, #108]	; (43c <_sercom_get_async_baud_val+0x90>)
     3d0:	0031      	movs	r1, r6
     3d2:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
     3d4:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3d6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     3d8:	0033      	movs	r3, r6
     3da:	4c19      	ldr	r4, [pc, #100]	; (440 <_sercom_get_async_baud_val+0x94>)
     3dc:	0030      	movs	r0, r6
     3de:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3e0:	2200      	movs	r2, #0
     3e2:	2301      	movs	r3, #1
     3e4:	1a12      	subs	r2, r2, r0
     3e6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3e8:	0c14      	lsrs	r4, r2, #16
     3ea:	0418      	lsls	r0, r3, #16
     3ec:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
     3ee:	2700      	movs	r7, #0
	*baudval = baud_calculated;
     3f0:	9b03      	ldr	r3, [sp, #12]
     3f2:	801c      	strh	r4, [r3, #0]
}
     3f4:	0038      	movs	r0, r7
     3f6:	b005      	add	sp, #20
     3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
     3fa:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3fc:	2e01      	cmp	r6, #1
     3fe:	d1f6      	bne.n	3ee <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     400:	000a      	movs	r2, r1
     402:	0023      	movs	r3, r4
     404:	0021      	movs	r1, r4
     406:	4e0d      	ldr	r6, [pc, #52]	; (43c <_sercom_get_async_baud_val+0x90>)
     408:	47b0      	blx	r6
     40a:	9000      	str	r0, [sp, #0]
     40c:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     40e:	000b      	movs	r3, r1
     410:	0002      	movs	r2, r0
     412:	0021      	movs	r1, r4
     414:	0028      	movs	r0, r5
     416:	4c0a      	ldr	r4, [pc, #40]	; (440 <_sercom_get_async_baud_val+0x94>)
     418:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
     41a:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
     41c:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     41e:	019b      	lsls	r3, r3, #6
     420:	4298      	cmp	r0, r3
     422:	d8e7      	bhi.n	3f4 <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     424:	9a00      	ldr	r2, [sp, #0]
     426:	9b01      	ldr	r3, [sp, #4]
     428:	0f69      	lsrs	r1, r5, #29
     42a:	00e8      	lsls	r0, r5, #3
     42c:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     42e:	00f4      	lsls	r4, r6, #3
     430:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
     432:	b2e4      	uxtb	r4, r4
     434:	0364      	lsls	r4, r4, #13
     436:	4334      	orrs	r4, r6
     438:	e7d9      	b.n	3ee <_sercom_get_async_baud_val+0x42>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	00001535 	.word	0x00001535
     440:	00000319 	.word	0x00000319

00000444 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     446:	4c0d      	ldr	r4, [pc, #52]	; (47c <sercom_set_gclk_generator+0x38>)
{
     448:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     44a:	7823      	ldrb	r3, [r4, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d001      	beq.n	454 <sercom_set_gclk_generator+0x10>
     450:	2900      	cmp	r1, #0
     452:	d00c      	beq.n	46e <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     454:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     456:	2013      	movs	r0, #19
     458:	4b09      	ldr	r3, [pc, #36]	; (480 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     45a:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     45c:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     45e:	2013      	movs	r0, #19
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <sercom_set_gclk_generator+0x40>)
     462:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     464:	2301      	movs	r3, #1

		return STATUS_OK;
     466:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     468:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     46a:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     46c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     46e:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     470:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     472:	42ab      	cmp	r3, r5
     474:	d0fa      	beq.n	46c <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     476:	201d      	movs	r0, #29
     478:	e7f8      	b.n	46c <sercom_set_gclk_generator+0x28>
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	2000007c 	.word	0x2000007c
     480:	000010b1 	.word	0x000010b1
     484:	00001029 	.word	0x00001029

00000488 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     488:	4a39      	ldr	r2, [pc, #228]	; (570 <_sercom_get_default_pad+0xe8>)
{
     48a:	0003      	movs	r3, r0
     48c:	b500      	push	{lr}
     48e:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     490:	4293      	cmp	r3, r2
     492:	d033      	beq.n	4fc <_sercom_get_default_pad+0x74>
     494:	d807      	bhi.n	4a6 <_sercom_get_default_pad+0x1e>
     496:	4a37      	ldr	r2, [pc, #220]	; (574 <_sercom_get_default_pad+0xec>)
     498:	4293      	cmp	r3, r2
     49a:	d014      	beq.n	4c6 <_sercom_get_default_pad+0x3e>
     49c:	4a36      	ldr	r2, [pc, #216]	; (578 <_sercom_get_default_pad+0xf0>)
     49e:	4293      	cmp	r3, r2
     4a0:	d01f      	beq.n	4e2 <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     4a2:	2300      	movs	r3, #0
     4a4:	e017      	b.n	4d6 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     4a6:	4a35      	ldr	r2, [pc, #212]	; (57c <_sercom_get_default_pad+0xf4>)
     4a8:	4293      	cmp	r3, r2
     4aa:	d03a      	beq.n	522 <_sercom_get_default_pad+0x9a>
     4ac:	4a34      	ldr	r2, [pc, #208]	; (580 <_sercom_get_default_pad+0xf8>)
     4ae:	4293      	cmp	r3, r2
     4b0:	d044      	beq.n	53c <_sercom_get_default_pad+0xb4>
     4b2:	4a34      	ldr	r2, [pc, #208]	; (584 <_sercom_get_default_pad+0xfc>)
     4b4:	4293      	cmp	r3, r2
     4b6:	d1f4      	bne.n	4a2 <_sercom_get_default_pad+0x1a>
	return 0;
     4b8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ba:	2903      	cmp	r1, #3
     4bc:	d80b      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     4be:	f000 ff97 	bl	13f0 <__gnu_thumb1_case_uqi>
     4c2:	2a50      	.short	0x2a50
     4c4:	2e2c      	.short	0x2e2c
	return 0;
     4c6:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4c8:	2903      	cmp	r1, #3
     4ca:	d804      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     4cc:	f000 ff90 	bl	13f0 <__gnu_thumb1_case_uqi>
     4d0:	07050243 	.word	0x07050243
     4d4:	4b2c      	ldr	r3, [pc, #176]	; (588 <_sercom_get_default_pad+0x100>)
}
     4d6:	0018      	movs	r0, r3
     4d8:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4da:	4b2c      	ldr	r3, [pc, #176]	; (58c <_sercom_get_default_pad+0x104>)
     4dc:	e7fb      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     4de:	4b2c      	ldr	r3, [pc, #176]	; (590 <_sercom_get_default_pad+0x108>)
     4e0:	e7f9      	b.n	4d6 <_sercom_get_default_pad+0x4e>
	return 0;
     4e2:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e4:	2903      	cmp	r1, #3
     4e6:	d8f6      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     4e8:	f000 ff82 	bl	13f0 <__gnu_thumb1_case_uqi>
     4ec:	06040237 	.word	0x06040237
     4f0:	4b28      	ldr	r3, [pc, #160]	; (594 <_sercom_get_default_pad+0x10c>)
     4f2:	e7f0      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     4f4:	4b28      	ldr	r3, [pc, #160]	; (598 <_sercom_get_default_pad+0x110>)
     4f6:	e7ee      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     4f8:	4b28      	ldr	r3, [pc, #160]	; (59c <_sercom_get_default_pad+0x114>)
     4fa:	e7ec      	b.n	4d6 <_sercom_get_default_pad+0x4e>
	return 0;
     4fc:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fe:	2903      	cmp	r1, #3
     500:	d8e9      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     502:	f000 ff75 	bl	13f0 <__gnu_thumb1_case_uqi>
     506:	022c      	.short	0x022c
     508:	0604      	.short	0x0604
     50a:	4b25      	ldr	r3, [pc, #148]	; (5a0 <_sercom_get_default_pad+0x118>)
     50c:	e7e3      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     50e:	4b25      	ldr	r3, [pc, #148]	; (5a4 <_sercom_get_default_pad+0x11c>)
     510:	e7e1      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     512:	4b25      	ldr	r3, [pc, #148]	; (5a8 <_sercom_get_default_pad+0x120>)
     514:	e7df      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     516:	4b25      	ldr	r3, [pc, #148]	; (5ac <_sercom_get_default_pad+0x124>)
     518:	e7dd      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     51a:	4b25      	ldr	r3, [pc, #148]	; (5b0 <_sercom_get_default_pad+0x128>)
     51c:	e7db      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     51e:	4b25      	ldr	r3, [pc, #148]	; (5b4 <_sercom_get_default_pad+0x12c>)
     520:	e7d9      	b.n	4d6 <_sercom_get_default_pad+0x4e>
	return 0;
     522:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     524:	2903      	cmp	r1, #3
     526:	d8d6      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     528:	f000 ff62 	bl	13f0 <__gnu_thumb1_case_uqi>
     52c:	0604021d 	.word	0x0604021d
     530:	4b21      	ldr	r3, [pc, #132]	; (5b8 <_sercom_get_default_pad+0x130>)
     532:	e7d0      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     534:	4b21      	ldr	r3, [pc, #132]	; (5bc <_sercom_get_default_pad+0x134>)
     536:	e7ce      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     538:	4b21      	ldr	r3, [pc, #132]	; (5c0 <_sercom_get_default_pad+0x138>)
     53a:	e7cc      	b.n	4d6 <_sercom_get_default_pad+0x4e>
	return 0;
     53c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53e:	2903      	cmp	r1, #3
     540:	d8c9      	bhi.n	4d6 <_sercom_get_default_pad+0x4e>
     542:	f000 ff55 	bl	13f0 <__gnu_thumb1_case_uqi>
     546:	0212      	.short	0x0212
     548:	0604      	.short	0x0604
     54a:	4b1e      	ldr	r3, [pc, #120]	; (5c4 <_sercom_get_default_pad+0x13c>)
     54c:	e7c3      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     54e:	4b1e      	ldr	r3, [pc, #120]	; (5c8 <_sercom_get_default_pad+0x140>)
     550:	e7c1      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     552:	4b1e      	ldr	r3, [pc, #120]	; (5cc <_sercom_get_default_pad+0x144>)
     554:	e7bf      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     556:	4b1e      	ldr	r3, [pc, #120]	; (5d0 <_sercom_get_default_pad+0x148>)
     558:	e7bd      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     55a:	2303      	movs	r3, #3
     55c:	e7bb      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     55e:	4b1d      	ldr	r3, [pc, #116]	; (5d4 <_sercom_get_default_pad+0x14c>)
     560:	e7b9      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     562:	4b1d      	ldr	r3, [pc, #116]	; (5d8 <_sercom_get_default_pad+0x150>)
     564:	e7b7      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     566:	4b1d      	ldr	r3, [pc, #116]	; (5dc <_sercom_get_default_pad+0x154>)
     568:	e7b5      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     56a:	4b1d      	ldr	r3, [pc, #116]	; (5e0 <_sercom_get_default_pad+0x158>)
     56c:	e7b3      	b.n	4d6 <_sercom_get_default_pad+0x4e>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	42001000 	.word	0x42001000
     574:	42000800 	.word	0x42000800
     578:	42000c00 	.word	0x42000c00
     57c:	42001800 	.word	0x42001800
     580:	42001c00 	.word	0x42001c00
     584:	42001400 	.word	0x42001400
     588:	00050003 	.word	0x00050003
     58c:	00060003 	.word	0x00060003
     590:	00070003 	.word	0x00070003
     594:	00010003 	.word	0x00010003
     598:	001e0003 	.word	0x001e0003
     59c:	001f0003 	.word	0x001f0003
     5a0:	00090003 	.word	0x00090003
     5a4:	000a0003 	.word	0x000a0003
     5a8:	000b0003 	.word	0x000b0003
     5ac:	00110003 	.word	0x00110003
     5b0:	00120003 	.word	0x00120003
     5b4:	00130003 	.word	0x00130003
     5b8:	000d0003 	.word	0x000d0003
     5bc:	000e0003 	.word	0x000e0003
     5c0:	000f0003 	.word	0x000f0003
     5c4:	00170003 	.word	0x00170003
     5c8:	00180003 	.word	0x00180003
     5cc:	00190003 	.word	0x00190003
     5d0:	00040003 	.word	0x00040003
     5d4:	00080003 	.word	0x00080003
     5d8:	00100003 	.word	0x00100003
     5dc:	000c0003 	.word	0x000c0003
     5e0:	00160003 	.word	0x00160003

000005e4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5e4:	b570      	push	{r4, r5, r6, lr}
     5e6:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5e8:	4669      	mov	r1, sp
     5ea:	4b09      	ldr	r3, [pc, #36]	; (610 <_sercom_get_sercom_inst_index+0x2c>)
     5ec:	466a      	mov	r2, sp
     5ee:	cb70      	ldmia	r3!, {r4, r5, r6}
     5f0:	c170      	stmia	r1!, {r4, r5, r6}
     5f2:	cb70      	ldmia	r3!, {r4, r5, r6}
     5f4:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5f6:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5f8:	0099      	lsls	r1, r3, #2
     5fa:	5851      	ldr	r1, [r2, r1]
     5fc:	4281      	cmp	r1, r0
     5fe:	d102      	bne.n	606 <_sercom_get_sercom_inst_index+0x22>
			return i;
     600:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     602:	b006      	add	sp, #24
     604:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     606:	3301      	adds	r3, #1
     608:	2b06      	cmp	r3, #6
     60a:	d1f5      	bne.n	5f8 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     60c:	2000      	movs	r0, #0
     60e:	e7f8      	b.n	602 <_sercom_get_sercom_inst_index+0x1e>
     610:	000015d0 	.word	0x000015d0

00000614 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
     614:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     616:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     618:	2b00      	cmp	r3, #0
     61a:	d1fc      	bne.n	616 <_usart_wait_for_sync+0x2>
}
     61c:	4770      	bx	lr
	...

00000620 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     620:	b5f0      	push	{r4, r5, r6, r7, lr}
     622:	0007      	movs	r7, r0
     624:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     626:	4ba0      	ldr	r3, [pc, #640]	; (8a8 <usart_init+0x288>)
	module->hw = hw;
     628:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     62a:	0008      	movs	r0, r1
{
     62c:	0016      	movs	r6, r2
     62e:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     630:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     632:	2201      	movs	r2, #1
     634:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     636:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     638:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     63a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     63c:	4213      	tst	r3, r2
     63e:	d000      	beq.n	642 <usart_init+0x22>
     640:	e10f      	b.n	862 <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     642:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     644:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     646:	681c      	ldr	r4, [r3, #0]
     648:	2302      	movs	r3, #2
     64a:	401c      	ands	r4, r3
     64c:	d000      	beq.n	650 <usart_init+0x30>
     64e:	e108      	b.n	862 <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     650:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     652:	381b      	subs	r0, #27
     654:	4098      	lsls	r0, r3
     656:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     658:	4a94      	ldr	r2, [pc, #592]	; (8ac <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     65a:	3514      	adds	r5, #20
     65c:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     65e:	b2ed      	uxtb	r5, r5
     660:	430b      	orrs	r3, r1
     662:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     664:	0033      	movs	r3, r6
     666:	332d      	adds	r3, #45	; 0x2d
     668:	9302      	str	r3, [sp, #8]
     66a:	781b      	ldrb	r3, [r3, #0]
     66c:	a90c      	add	r1, sp, #48	; 0x30
     66e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     670:	0028      	movs	r0, r5
     672:	4b8f      	ldr	r3, [pc, #572]	; (8b0 <usart_init+0x290>)
     674:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     676:	0028      	movs	r0, r5
     678:	4b8e      	ldr	r3, [pc, #568]	; (8b4 <usart_init+0x294>)
     67a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     67c:	9b02      	ldr	r3, [sp, #8]
     67e:	0021      	movs	r1, r4
     680:	7818      	ldrb	r0, [r3, #0]
     682:	4b8d      	ldr	r3, [pc, #564]	; (8b8 <usart_init+0x298>)
     684:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     686:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     688:	2508      	movs	r5, #8
	module->character_size = config->character_size;
     68a:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     68c:	1d73      	adds	r3, r6, #5
     68e:	7fdb      	ldrb	r3, [r3, #31]
     690:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
     692:	1db3      	adds	r3, r6, #6
     694:	7fdb      	ldrb	r3, [r3, #31]
     696:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     698:	7ef3      	ldrb	r3, [r6, #27]
     69a:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     69c:	7f33      	ldrb	r3, [r6, #28]
     69e:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6a0:	683b      	ldr	r3, [r7, #0]
     6a2:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a4:	0018      	movs	r0, r3
     6a6:	4b80      	ldr	r3, [pc, #512]	; (8a8 <usart_init+0x288>)
     6a8:	4798      	blx	r3
	uint16_t baud  = 0;
     6aa:	ab0e      	add	r3, sp, #56	; 0x38
     6ac:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
     6ae:	8a33      	ldrh	r3, [r6, #16]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6b0:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     6b2:	9302      	str	r3, [sp, #8]
     6b4:	2380      	movs	r3, #128	; 0x80
     6b6:	9a02      	ldr	r2, [sp, #8]
     6b8:	01db      	lsls	r3, r3, #7
     6ba:	429a      	cmp	r2, r3
     6bc:	d014      	beq.n	6e8 <usart_init+0xc8>
     6be:	d808      	bhi.n	6d2 <usart_init+0xb2>
     6c0:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6c2:	2510      	movs	r5, #16
	switch (config->sample_rate) {
     6c4:	019b      	lsls	r3, r3, #6
     6c6:	429a      	cmp	r2, r3
     6c8:	d100      	bne.n	6cc <usart_init+0xac>
     6ca:	e0cd      	b.n	868 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6cc:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6ce:	2400      	movs	r4, #0
     6d0:	e00a      	b.n	6e8 <usart_init+0xc8>
	switch (config->sample_rate) {
     6d2:	23c0      	movs	r3, #192	; 0xc0
     6d4:	9a02      	ldr	r2, [sp, #8]
     6d6:	01db      	lsls	r3, r3, #7
     6d8:	429a      	cmp	r2, r3
     6da:	d100      	bne.n	6de <usart_init+0xbe>
     6dc:	e0c3      	b.n	866 <usart_init+0x246>
     6de:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     6e0:	2503      	movs	r5, #3
	switch (config->sample_rate) {
     6e2:	021b      	lsls	r3, r3, #8
     6e4:	429a      	cmp	r2, r3
     6e6:	d1f1      	bne.n	6cc <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
     6e8:	6833      	ldr	r3, [r6, #0]
     6ea:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
     6ec:	68f3      	ldr	r3, [r6, #12]
     6ee:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
     6f0:	6973      	ldr	r3, [r6, #20]
     6f2:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6f4:	7e33      	ldrb	r3, [r6, #24]
     6f6:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6f8:	1df3      	adds	r3, r6, #7
     6fa:	7fdb      	ldrb	r3, [r3, #31]
     6fc:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
     6fe:	6873      	ldr	r3, [r6, #4]
     700:	9305      	str	r3, [sp, #20]
     702:	0033      	movs	r3, r6
	switch (transfer_mode)
     704:	9a05      	ldr	r2, [sp, #20]
     706:	3308      	adds	r3, #8
     708:	2a00      	cmp	r2, #0
     70a:	d100      	bne.n	70e <usart_init+0xee>
     70c:	e0ae      	b.n	86c <usart_init+0x24c>
     70e:	2280      	movs	r2, #128	; 0x80
     710:	9905      	ldr	r1, [sp, #20]
     712:	0552      	lsls	r2, r2, #21
     714:	4291      	cmp	r1, r2
     716:	d10e      	bne.n	736 <usart_init+0x116>
			if (!config->use_external_clock) {
     718:	7fdb      	ldrb	r3, [r3, #31]
     71a:	2b00      	cmp	r3, #0
     71c:	d10b      	bne.n	736 <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     71e:	4b67      	ldr	r3, [pc, #412]	; (8bc <usart_init+0x29c>)
     720:	b2c0      	uxtb	r0, r0
     722:	6a34      	ldr	r4, [r6, #32]
     724:	4798      	blx	r3
     726:	aa0e      	add	r2, sp, #56	; 0x38
     728:	0001      	movs	r1, r0
     72a:	4b65      	ldr	r3, [pc, #404]	; (8c0 <usart_init+0x2a0>)
     72c:	0020      	movs	r0, r4
     72e:	4798      	blx	r3
	if (status_code != STATUS_OK) {
     730:	2800      	cmp	r0, #0
     732:	d000      	beq.n	736 <usart_init+0x116>
     734:	e095      	b.n	862 <usart_init+0x242>
	if(config->encoding_format_enable) {
     736:	7e73      	ldrb	r3, [r6, #25]
     738:	2b00      	cmp	r3, #0
     73a:	d002      	beq.n	742 <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     73c:	7eb3      	ldrb	r3, [r6, #26]
     73e:	9a03      	ldr	r2, [sp, #12]
     740:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
     742:	4b60      	ldr	r3, [pc, #384]	; (8c4 <usart_init+0x2a4>)
     744:	0038      	movs	r0, r7
     746:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
     748:	ab0a      	add	r3, sp, #40	; 0x28
     74a:	8a1b      	ldrh	r3, [r3, #16]
     74c:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
     74e:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
     750:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     752:	9b07      	ldr	r3, [sp, #28]
     754:	431c      	orrs	r4, r3
     756:	9b08      	ldr	r3, [sp, #32]
     758:	431c      	orrs	r4, r3
     75a:	9b05      	ldr	r3, [sp, #20]
     75c:	431c      	orrs	r4, r3
     75e:	9b02      	ldr	r3, [sp, #8]
     760:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     762:	9b09      	ldr	r3, [sp, #36]	; 0x24
     764:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     766:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     76a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     76c:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
     76e:	0033      	movs	r3, r6
     770:	3308      	adds	r3, #8
     772:	7fdb      	ldrb	r3, [r3, #31]
     774:	2b00      	cmp	r3, #0
     776:	d101      	bne.n	77c <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     778:	3304      	adds	r3, #4
     77a:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     77c:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     77e:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     780:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     782:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     784:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     786:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
     788:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     78a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     78c:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     78e:	1d73      	adds	r3, r6, #5
     790:	7fdb      	ldrb	r3, [r3, #31]
     792:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     794:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     796:	1db3      	adds	r3, r6, #6
     798:	7fdb      	ldrb	r3, [r3, #31]
     79a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     79c:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
     79e:	7ab5      	ldrb	r5, [r6, #10]
     7a0:	4315      	orrs	r5, r2
     7a2:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
     7a4:	8933      	ldrh	r3, [r6, #8]
     7a6:	2bff      	cmp	r3, #255	; 0xff
     7a8:	d100      	bne.n	7ac <usart_init+0x18c>
     7aa:	e075      	b.n	898 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7ac:	2280      	movs	r2, #128	; 0x80
     7ae:	0452      	lsls	r2, r2, #17
     7b0:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
     7b2:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     7b4:	0033      	movs	r3, r6
     7b6:	332c      	adds	r3, #44	; 0x2c
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d103      	bne.n	7c6 <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7be:	4b42      	ldr	r3, [pc, #264]	; (8c8 <usart_init+0x2a8>)
     7c0:	789b      	ldrb	r3, [r3, #2]
     7c2:	079b      	lsls	r3, r3, #30
     7c4:	d501      	bpl.n	7ca <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7c6:	2380      	movs	r3, #128	; 0x80
     7c8:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
     7ca:	0038      	movs	r0, r7
     7cc:	4b3d      	ldr	r3, [pc, #244]	; (8c4 <usart_init+0x2a4>)
     7ce:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
     7d0:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
     7d2:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
     7d4:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
     7d6:	4b3b      	ldr	r3, [pc, #236]	; (8c4 <usart_init+0x2a4>)
     7d8:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
     7da:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7dc:	2500      	movs	r5, #0
     7de:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7e0:	2380      	movs	r3, #128	; 0x80
     7e2:	ac0d      	add	r4, sp, #52	; 0x34
     7e4:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     7e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7e8:	7065      	strb	r5, [r4, #1]
     7ea:	930e      	str	r3, [sp, #56]	; 0x38
     7ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7ee:	70e5      	strb	r5, [r4, #3]
     7f0:	930f      	str	r3, [sp, #60]	; 0x3c
     7f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7f4:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
     7f6:	9310      	str	r3, [sp, #64]	; 0x40
     7f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     7fa:	9302      	str	r3, [sp, #8]
     7fc:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7fe:	2010      	movs	r0, #16
     800:	aa0a      	add	r2, sp, #40	; 0x28
     802:	00ab      	lsls	r3, r5, #2
     804:	1812      	adds	r2, r2, r0
     806:	58d0      	ldr	r0, [r2, r3]
     808:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
     80a:	2800      	cmp	r0, #0
     80c:	d102      	bne.n	814 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     80e:	9804      	ldr	r0, [sp, #16]
     810:	4b2e      	ldr	r3, [pc, #184]	; (8cc <usart_init+0x2ac>)
     812:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     814:	1c43      	adds	r3, r0, #1
     816:	d005      	beq.n	824 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     818:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     81a:	0c00      	lsrs	r0, r0, #16
     81c:	b2c0      	uxtb	r0, r0
     81e:	0021      	movs	r1, r4
     820:	4b2b      	ldr	r3, [pc, #172]	; (8d0 <usart_init+0x2b0>)
     822:	4798      	blx	r3
     824:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     826:	2d04      	cmp	r5, #4
     828:	d1e9      	bne.n	7fe <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
     82a:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
     82c:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
     82e:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
     830:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
     832:	60fc      	str	r4, [r7, #12]
     834:	613c      	str	r4, [r7, #16]
     836:	617c      	str	r4, [r7, #20]
     838:	61bc      	str	r4, [r7, #24]
     83a:	61fc      	str	r4, [r7, #28]
     83c:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
     83e:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     840:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     842:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
     844:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
     846:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
     848:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
     84a:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     84c:	6838      	ldr	r0, [r7, #0]
     84e:	4b16      	ldr	r3, [pc, #88]	; (8a8 <usart_init+0x288>)
     850:	4798      	blx	r3
     852:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     854:	4b1f      	ldr	r3, [pc, #124]	; (8d4 <usart_init+0x2b4>)
     856:	4920      	ldr	r1, [pc, #128]	; (8d8 <usart_init+0x2b8>)
     858:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     85a:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
     85c:	4b1f      	ldr	r3, [pc, #124]	; (8dc <usart_init+0x2bc>)
     85e:	00ad      	lsls	r5, r5, #2
     860:	50ef      	str	r7, [r5, r3]
}
     862:	b013      	add	sp, #76	; 0x4c
     864:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     868:	2401      	movs	r4, #1
     86a:	e73d      	b.n	6e8 <usart_init+0xc8>
			if (config->use_external_clock) {
     86c:	7fdb      	ldrb	r3, [r3, #31]
     86e:	2b00      	cmp	r3, #0
     870:	d007      	beq.n	882 <usart_init+0x262>
				status_code =
     872:	0023      	movs	r3, r4
     874:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     876:	6a30      	ldr	r0, [r6, #32]
     878:	9500      	str	r5, [sp, #0]
     87a:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
     87c:	4c18      	ldr	r4, [pc, #96]	; (8e0 <usart_init+0x2c0>)
     87e:	47a0      	blx	r4
     880:	e756      	b.n	730 <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
     882:	6a33      	ldr	r3, [r6, #32]
     884:	b2c0      	uxtb	r0, r0
     886:	930b      	str	r3, [sp, #44]	; 0x2c
     888:	4b0c      	ldr	r3, [pc, #48]	; (8bc <usart_init+0x29c>)
     88a:	4798      	blx	r3
				status_code =
     88c:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
     88e:	0001      	movs	r1, r0
				status_code =
     890:	0023      	movs	r3, r4
     892:	aa0e      	add	r2, sp, #56	; 0x38
     894:	980b      	ldr	r0, [sp, #44]	; 0x2c
     896:	e7f1      	b.n	87c <usart_init+0x25c>
		if(config->lin_slave_enable) {
     898:	7ef3      	ldrb	r3, [r6, #27]
     89a:	2b00      	cmp	r3, #0
     89c:	d100      	bne.n	8a0 <usart_init+0x280>
     89e:	e789      	b.n	7b4 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     8a0:	2380      	movs	r3, #128	; 0x80
     8a2:	04db      	lsls	r3, r3, #19
     8a4:	431c      	orrs	r4, r3
     8a6:	e785      	b.n	7b4 <usart_init+0x194>
     8a8:	000005e5 	.word	0x000005e5
     8ac:	40000400 	.word	0x40000400
     8b0:	000010b1 	.word	0x000010b1
     8b4:	00001029 	.word	0x00001029
     8b8:	00000445 	.word	0x00000445
     8bc:	000010cd 	.word	0x000010cd
     8c0:	00000385 	.word	0x00000385
     8c4:	00000615 	.word	0x00000615
     8c8:	41002000 	.word	0x41002000
     8cc:	00000489 	.word	0x00000489
     8d0:	00001185 	.word	0x00001185
     8d4:	00000b6d 	.word	0x00000b6d
     8d8:	00000a01 	.word	0x00000a01
     8dc:	200000b8 	.word	0x200000b8
     8e0:	000003ad 	.word	0x000003ad

000008e4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     8e4:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8e6:	79c2      	ldrb	r2, [r0, #7]
{
     8e8:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
     8ea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     8ec:	2a00      	cmp	r2, #0
     8ee:	d00c      	beq.n	90a <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8f0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
     8f2:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     8f4:	2a00      	cmp	r2, #0
     8f6:	d108      	bne.n	90a <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     8f8:	4b05      	ldr	r3, [pc, #20]	; (910 <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
     8fa:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
     8fc:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8fe:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
     900:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     902:	7e22      	ldrb	r2, [r4, #24]
     904:	421a      	tst	r2, r3
     906:	d0fc      	beq.n	902 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     908:	2300      	movs	r3, #0
}
     90a:	0018      	movs	r0, r3
     90c:	bd70      	pop	{r4, r5, r6, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00000615 	.word	0x00000615

00000914 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     914:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     916:	7982      	ldrb	r2, [r0, #6]
{
     918:	000e      	movs	r6, r1
		return STATUS_ERR_DENIED;
     91a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     91c:	2a00      	cmp	r2, #0
     91e:	d013      	beq.n	948 <usart_read_wait+0x34>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     920:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
		return STATUS_BUSY;
     922:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     924:	2a00      	cmp	r2, #0
     926:	d10f      	bne.n	948 <usart_read_wait+0x34>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     928:	2504      	movs	r5, #4
	SercomUsart *const usart_hw = &(module->hw->USART);
     92a:	6804      	ldr	r4, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     92c:	7e22      	ldrb	r2, [r4, #24]
     92e:	422a      	tst	r2, r5
     930:	d00a      	beq.n	948 <usart_read_wait+0x34>
		/* Return error code */
		return STATUS_BUSY;
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     932:	4b14      	ldr	r3, [pc, #80]	; (984 <usart_read_wait+0x70>)
     934:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     936:	8b63      	ldrh	r3, [r4, #26]
     938:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     93a:	069a      	lsls	r2, r3, #26
     93c:	d01d      	beq.n	97a <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     93e:	2202      	movs	r2, #2
     940:	4213      	tst	r3, r2
     942:	d003      	beq.n	94c <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;

			return STATUS_ERR_BAD_FORMAT;
     944:	231a      	movs	r3, #26
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     946:	8362      	strh	r2, [r4, #26]

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     948:	0018      	movs	r0, r3
     94a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     94c:	422b      	tst	r3, r5
     94e:	d002      	beq.n	956 <usart_read_wait+0x42>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     950:	8365      	strh	r5, [r4, #26]
			return STATUS_ERR_OVERFLOW;
     952:	231e      	movs	r3, #30
     954:	e7f8      	b.n	948 <usart_read_wait+0x34>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     956:	2201      	movs	r2, #1
     958:	4213      	tst	r3, r2
     95a:	d002      	beq.n	962 <usart_read_wait+0x4e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     95c:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_BAD_DATA;
     95e:	2313      	movs	r3, #19
     960:	e7f2      	b.n	948 <usart_read_wait+0x34>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     962:	2210      	movs	r2, #16
     964:	4213      	tst	r3, r2
     966:	d002      	beq.n	96e <usart_read_wait+0x5a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     968:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_PROTOCOL;
     96a:	2342      	movs	r3, #66	; 0x42
     96c:	e7ec      	b.n	948 <usart_read_wait+0x34>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     96e:	2220      	movs	r2, #32
     970:	4213      	tst	r3, r2
     972:	d002      	beq.n	97a <usart_read_wait+0x66>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     974:	8362      	strh	r2, [r4, #26]
			return STATUS_ERR_PACKET_COLLISION;
     976:	2341      	movs	r3, #65	; 0x41
     978:	e7e6      	b.n	948 <usart_read_wait+0x34>
	*rx_data = usart_hw->DATA.reg;
     97a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     97c:	8033      	strh	r3, [r6, #0]
	return STATUS_OK;
     97e:	2300      	movs	r3, #0
     980:	e7e2      	b.n	948 <usart_read_wait+0x34>
     982:	46c0      	nop			; (mov r8, r8)
     984:	00000615 	.word	0x00000615

00000988 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	b085      	sub	sp, #20
     98c:	0006      	movs	r6, r0
     98e:	9100      	str	r1, [sp, #0]
     990:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     992:	2017      	movs	r0, #23
	if (length == 0) {
     994:	2a00      	cmp	r2, #0
     996:	d028      	beq.n	9ea <usart_read_buffer_wait+0x62>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     998:	79b3      	ldrb	r3, [r6, #6]
		return STATUS_ERR_DENIED;
     99a:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     99c:	2b00      	cmp	r3, #0
     99e:	d024      	beq.n	9ea <usart_read_buffer_wait+0x62>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;
     9a0:	2400      	movs	r4, #0
	SercomUsart *const usart_hw = &(module->hw->USART);
     9a2:	6833      	ldr	r3, [r6, #0]
     9a4:	9301      	str	r3, [sp, #4]
	uint16_t rx_pos = 0;
     9a6:	2380      	movs	r3, #128	; 0x80
     9a8:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     9aa:	2104      	movs	r1, #4
     9ac:	9a01      	ldr	r2, [sp, #4]
     9ae:	7e12      	ldrb	r2, [r2, #24]
     9b0:	420a      	tst	r2, r1
     9b2:	d01c      	beq.n	9ee <usart_read_buffer_wait+0x66>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     9b4:	ab02      	add	r3, sp, #8
     9b6:	1d9f      	adds	r7, r3, #6
     9b8:	2300      	movs	r3, #0

		retval = usart_read_wait(module, &received_data);
     9ba:	0039      	movs	r1, r7
		uint16_t received_data = 0;
     9bc:	803b      	strh	r3, [r7, #0]
		retval = usart_read_wait(module, &received_data);
     9be:	0030      	movs	r0, r6
     9c0:	4b0e      	ldr	r3, [pc, #56]	; (9fc <usart_read_buffer_wait+0x74>)
     9c2:	4798      	blx	r3

		if (retval != STATUS_OK) {
     9c4:	2800      	cmp	r0, #0
     9c6:	d110      	bne.n	9ea <usart_read_buffer_wait+0x62>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     9c8:	9900      	ldr	r1, [sp, #0]
     9ca:	883a      	ldrh	r2, [r7, #0]
     9cc:	1c63      	adds	r3, r4, #1
     9ce:	550a      	strb	r2, [r1, r4]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9d0:	7971      	ldrb	r1, [r6, #5]
		rx_data[rx_pos++] = received_data;
     9d2:	b29b      	uxth	r3, r3
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9d4:	2901      	cmp	r1, #1
     9d6:	d10f      	bne.n	9f8 <usart_read_buffer_wait+0x70>
			rx_data[rx_pos++] = (received_data >> 8);
     9d8:	9900      	ldr	r1, [sp, #0]
     9da:	3402      	adds	r4, #2
     9dc:	0a12      	lsrs	r2, r2, #8
     9de:	b2a4      	uxth	r4, r4
     9e0:	54ca      	strb	r2, [r1, r3]
     9e2:	3d01      	subs	r5, #1
     9e4:	b2ad      	uxth	r5, r5
	while (length--) {
     9e6:	2d00      	cmp	r5, #0
     9e8:	d1dd      	bne.n	9a6 <usart_read_buffer_wait+0x1e>
		}
	}

	return STATUS_OK;
}
     9ea:	b005      	add	sp, #20
     9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ee:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     9f0:	2b00      	cmp	r3, #0
     9f2:	d1da      	bne.n	9aa <usart_read_buffer_wait+0x22>
				return STATUS_ERR_TIMEOUT;
     9f4:	2012      	movs	r0, #18
     9f6:	e7f8      	b.n	9ea <usart_read_buffer_wait+0x62>
		rx_data[rx_pos++] = received_data;
     9f8:	001c      	movs	r4, r3
     9fa:	e7f2      	b.n	9e2 <usart_read_buffer_wait+0x5a>
     9fc:	00000915 	.word	0x00000915

00000a00 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a02:	4b58      	ldr	r3, [pc, #352]	; (b64 <_usart_interrupt_handler+0x164>)
     a04:	0080      	lsls	r0, r0, #2
     a06:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a08:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     a0a:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
     a0c:	2b00      	cmp	r3, #0
     a0e:	d1fc      	bne.n	a0a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a10:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a12:	7daf      	ldrb	r7, [r5, #22]
     a14:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
     a16:	0023      	movs	r3, r4
     a18:	3330      	adds	r3, #48	; 0x30
     a1a:	781a      	ldrb	r2, [r3, #0]
     a1c:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a1e:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
     a20:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a22:	421f      	tst	r7, r3
     a24:	d019      	beq.n	a5a <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     a26:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     a28:	2a00      	cmp	r2, #0
     a2a:	d100      	bne.n	a2e <_usart_interrupt_handler+0x2e>
     a2c:	e072      	b.n	b14 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a30:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a32:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     a34:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a36:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a38:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a3a:	2901      	cmp	r1, #1
     a3c:	d064      	beq.n	b08 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a3e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a40:	05db      	lsls	r3, r3, #23
     a42:	0ddb      	lsrs	r3, r3, #23
     a44:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a46:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     a48:	3b01      	subs	r3, #1
     a4a:	b29b      	uxth	r3, r3
     a4c:	85e3      	strh	r3, [r4, #46]	; 0x2e
     a4e:	2b00      	cmp	r3, #0
     a50:	d103      	bne.n	a5a <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a52:	3301      	adds	r3, #1
     a54:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a56:	3301      	adds	r3, #1
     a58:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a5a:	2302      	movs	r3, #2
     a5c:	421f      	tst	r7, r3
     a5e:	d009      	beq.n	a74 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a60:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
     a62:	0023      	movs	r3, r4
     a64:	2200      	movs	r2, #0
     a66:	3333      	adds	r3, #51	; 0x33
     a68:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a6a:	07f3      	lsls	r3, r6, #31
     a6c:	d502      	bpl.n	a74 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a6e:	0020      	movs	r0, r4
     a70:	68e3      	ldr	r3, [r4, #12]
     a72:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a74:	2304      	movs	r3, #4
     a76:	421f      	tst	r7, r3
     a78:	d027      	beq.n	aca <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
     a7a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     a7c:	2a00      	cmp	r2, #0
     a7e:	d100      	bne.n	a82 <_usart_interrupt_handler+0x82>
     a80:	e06d      	b.n	b5e <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a82:	8b6b      	ldrh	r3, [r5, #26]
     a84:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a86:	071a      	lsls	r2, r3, #28
     a88:	d446      	bmi.n	b18 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a8a:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a8c:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a8e:	d045      	beq.n	b1c <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a90:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a92:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a94:	4213      	tst	r3, r2
     a96:	d10f      	bne.n	ab8 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a98:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     a9a:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a9c:	4213      	tst	r3, r2
     a9e:	d10b      	bne.n	ab8 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     aa0:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     aa2:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     aa4:	4213      	tst	r3, r2
     aa6:	d107      	bne.n	ab8 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     aa8:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     aaa:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     aac:	4213      	tst	r3, r2
     aae:	d103      	bne.n	ab8 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ab0:	2220      	movs	r2, #32
     ab2:	4213      	tst	r3, r2
     ab4:	d004      	beq.n	ac0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ab6:	2141      	movs	r1, #65	; 0x41
     ab8:	0023      	movs	r3, r4
     aba:	3332      	adds	r3, #50	; 0x32
     abc:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     abe:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ac0:	0773      	lsls	r3, r6, #29
     ac2:	d502      	bpl.n	aca <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ac4:	0020      	movs	r0, r4
     ac6:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ac8:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     aca:	2310      	movs	r3, #16
     acc:	421f      	tst	r7, r3
     ace:	d006      	beq.n	ade <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ad0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ad2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     ad4:	421e      	tst	r6, r3
     ad6:	d002      	beq.n	ade <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     ad8:	0020      	movs	r0, r4
     ada:	69e3      	ldr	r3, [r4, #28]
     adc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ade:	2320      	movs	r3, #32
     ae0:	421f      	tst	r7, r3
     ae2:	d006      	beq.n	af2 <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ae4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ae6:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ae8:	0733      	lsls	r3, r6, #28
     aea:	d502      	bpl.n	af2 <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     aec:	0020      	movs	r0, r4
     aee:	69a3      	ldr	r3, [r4, #24]
     af0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     af2:	2308      	movs	r3, #8
     af4:	421f      	tst	r7, r3
     af6:	d006      	beq.n	b06 <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     af8:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     afa:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     afc:	06b3      	lsls	r3, r6, #26
     afe:	d502      	bpl.n	b06 <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b00:	6a23      	ldr	r3, [r4, #32]
     b02:	0020      	movs	r0, r4
     b04:	4798      	blx	r3
		}
	}
#endif
}
     b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b08:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     b0a:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b0c:	0209      	lsls	r1, r1, #8
     b0e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b10:	62a2      	str	r2, [r4, #40]	; 0x28
     b12:	e795      	b.n	a40 <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b14:	752b      	strb	r3, [r5, #20]
     b16:	e7a0      	b.n	a5a <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b18:	2237      	movs	r2, #55	; 0x37
     b1a:	e7b7      	b.n	a8c <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b1c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b20:	05db      	lsls	r3, r3, #23
     b22:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     b24:	b2da      	uxtb	r2, r3
     b26:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     b28:	6a62      	ldr	r2, [r4, #36]	; 0x24
     b2a:	1c51      	adds	r1, r2, #1
     b2c:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b2e:	7961      	ldrb	r1, [r4, #5]
     b30:	2901      	cmp	r1, #1
     b32:	d104      	bne.n	b3e <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b34:	0a1b      	lsrs	r3, r3, #8
     b36:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b3a:	3301      	adds	r3, #1
     b3c:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
     b3e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     b40:	3b01      	subs	r3, #1
     b42:	b29b      	uxth	r3, r3
     b44:	85a3      	strh	r3, [r4, #44]	; 0x2c
     b46:	2b00      	cmp	r3, #0
     b48:	d1bf      	bne.n	aca <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b4a:	2204      	movs	r2, #4
     b4c:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
     b4e:	0022      	movs	r2, r4
     b50:	3232      	adds	r2, #50	; 0x32
     b52:	7013      	strb	r3, [r2, #0]
					if (callback_status
     b54:	07b3      	lsls	r3, r6, #30
     b56:	d5b8      	bpl.n	aca <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b58:	0020      	movs	r0, r4
     b5a:	6923      	ldr	r3, [r4, #16]
     b5c:	e7b4      	b.n	ac8 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b5e:	752b      	strb	r3, [r5, #20]
     b60:	e7b3      	b.n	aca <_usart_interrupt_handler+0xca>
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	200000b8 	.word	0x200000b8

00000b68 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b68:	4770      	bx	lr
	...

00000b6c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b6e:	4c09      	ldr	r4, [pc, #36]	; (b94 <_sercom_set_handler+0x28>)
     b70:	4a09      	ldr	r2, [pc, #36]	; (b98 <_sercom_set_handler+0x2c>)
     b72:	7823      	ldrb	r3, [r4, #0]
     b74:	2b00      	cmp	r3, #0
     b76:	d109      	bne.n	b8c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     b78:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b7a:	4f08      	ldr	r7, [pc, #32]	; (b9c <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
     b7c:	4d08      	ldr	r5, [pc, #32]	; (ba0 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b7e:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
     b80:	50ee      	str	r6, [r5, r3]
     b82:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b84:	2b18      	cmp	r3, #24
     b86:	d1fa      	bne.n	b7e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b88:	3b17      	subs	r3, #23
     b8a:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b8c:	0080      	lsls	r0, r0, #2
     b8e:	5011      	str	r1, [r2, r0]
}
     b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	2000007e 	.word	0x2000007e
     b98:	20000080 	.word	0x20000080
     b9c:	00000b69 	.word	0x00000b69
     ba0:	200000b8 	.word	0x200000b8

00000ba4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ba4:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ba6:	2309      	movs	r3, #9
     ba8:	466a      	mov	r2, sp
     baa:	7013      	strb	r3, [r2, #0]
     bac:	3301      	adds	r3, #1
     bae:	7053      	strb	r3, [r2, #1]
     bb0:	3301      	adds	r3, #1
     bb2:	7093      	strb	r3, [r2, #2]
     bb4:	3301      	adds	r3, #1
     bb6:	70d3      	strb	r3, [r2, #3]
     bb8:	3301      	adds	r3, #1
     bba:	7113      	strb	r3, [r2, #4]
     bbc:	3301      	adds	r3, #1
     bbe:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     bc0:	4b02      	ldr	r3, [pc, #8]	; (bcc <_sercom_get_interrupt_vector+0x28>)
     bc2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     bc4:	466b      	mov	r3, sp
     bc6:	5618      	ldrsb	r0, [r3, r0]
}
     bc8:	bd0e      	pop	{r1, r2, r3, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	000005e5 	.word	0x000005e5

00000bd0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     bd0:	b510      	push	{r4, lr}
     bd2:	4b02      	ldr	r3, [pc, #8]	; (bdc <SERCOM0_Handler+0xc>)
     bd4:	2000      	movs	r0, #0
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	4798      	blx	r3
     bda:	bd10      	pop	{r4, pc}
     bdc:	20000080 	.word	0x20000080

00000be0 <SERCOM1_Handler>:
     be0:	b510      	push	{r4, lr}
     be2:	4b02      	ldr	r3, [pc, #8]	; (bec <SERCOM1_Handler+0xc>)
     be4:	2001      	movs	r0, #1
     be6:	685b      	ldr	r3, [r3, #4]
     be8:	4798      	blx	r3
     bea:	bd10      	pop	{r4, pc}
     bec:	20000080 	.word	0x20000080

00000bf0 <SERCOM2_Handler>:
     bf0:	b510      	push	{r4, lr}
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <SERCOM2_Handler+0xc>)
     bf4:	2002      	movs	r0, #2
     bf6:	689b      	ldr	r3, [r3, #8]
     bf8:	4798      	blx	r3
     bfa:	bd10      	pop	{r4, pc}
     bfc:	20000080 	.word	0x20000080

00000c00 <SERCOM3_Handler>:
     c00:	b510      	push	{r4, lr}
     c02:	4b02      	ldr	r3, [pc, #8]	; (c0c <SERCOM3_Handler+0xc>)
     c04:	2003      	movs	r0, #3
     c06:	68db      	ldr	r3, [r3, #12]
     c08:	4798      	blx	r3
     c0a:	bd10      	pop	{r4, pc}
     c0c:	20000080 	.word	0x20000080

00000c10 <SERCOM4_Handler>:
     c10:	b510      	push	{r4, lr}
     c12:	4b02      	ldr	r3, [pc, #8]	; (c1c <SERCOM4_Handler+0xc>)
     c14:	2004      	movs	r0, #4
     c16:	691b      	ldr	r3, [r3, #16]
     c18:	4798      	blx	r3
     c1a:	bd10      	pop	{r4, pc}
     c1c:	20000080 	.word	0x20000080

00000c20 <SERCOM5_Handler>:
     c20:	b510      	push	{r4, lr}
     c22:	4b02      	ldr	r3, [pc, #8]	; (c2c <SERCOM5_Handler+0xc>)
     c24:	2005      	movs	r0, #5
     c26:	695b      	ldr	r3, [r3, #20]
     c28:	4798      	blx	r3
     c2a:	bd10      	pop	{r4, pc}
     c2c:	20000080 	.word	0x20000080

00000c30 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     c30:	4770      	bx	lr
	...

00000c34 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c34:	4b09      	ldr	r3, [pc, #36]	; (c5c <cpu_irq_enter_critical+0x28>)
     c36:	6819      	ldr	r1, [r3, #0]
     c38:	2900      	cmp	r1, #0
     c3a:	d10b      	bne.n	c54 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c3c:	f3ef 8010 	mrs	r0, PRIMASK
     c40:	4a07      	ldr	r2, [pc, #28]	; (c60 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     c42:	2800      	cmp	r0, #0
     c44:	d105      	bne.n	c52 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     c46:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c48:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c4c:	4905      	ldr	r1, [pc, #20]	; (c64 <cpu_irq_enter_critical+0x30>)
     c4e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     c50:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c52:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c54:	681a      	ldr	r2, [r3, #0]
     c56:	3201      	adds	r2, #1
     c58:	601a      	str	r2, [r3, #0]
}
     c5a:	4770      	bx	lr
     c5c:	20000098 	.word	0x20000098
     c60:	2000009c 	.word	0x2000009c
     c64:	20000008 	.word	0x20000008

00000c68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c68:	4b08      	ldr	r3, [pc, #32]	; (c8c <cpu_irq_leave_critical+0x24>)
     c6a:	681a      	ldr	r2, [r3, #0]
     c6c:	3a01      	subs	r2, #1
     c6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d109      	bne.n	c8a <cpu_irq_leave_critical+0x22>
     c76:	4b06      	ldr	r3, [pc, #24]	; (c90 <cpu_irq_leave_critical+0x28>)
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d005      	beq.n	c8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c7e:	2201      	movs	r2, #1
     c80:	4b04      	ldr	r3, [pc, #16]	; (c94 <cpu_irq_leave_critical+0x2c>)
     c82:	701a      	strb	r2, [r3, #0]
     c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c88:	b662      	cpsie	i
	}
}
     c8a:	4770      	bx	lr
     c8c:	20000098 	.word	0x20000098
     c90:	2000009c 	.word	0x2000009c
     c94:	20000008 	.word	0x20000008

00000c98 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c98:	2310      	movs	r3, #16
     c9a:	4902      	ldr	r1, [pc, #8]	; (ca4 <_system_dfll_wait_for_sync+0xc>)
     c9c:	68ca      	ldr	r2, [r1, #12]
     c9e:	421a      	tst	r2, r3
     ca0:	d0fc      	beq.n	c9c <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     ca2:	4770      	bx	lr
     ca4:	40000800 	.word	0x40000800

00000ca8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     caa:	2808      	cmp	r0, #8
     cac:	d806      	bhi.n	cbc <system_clock_source_get_hz+0x14>
     cae:	f000 fb9f 	bl	13f0 <__gnu_thumb1_case_uqi>
     cb2:	0508      	.short	0x0508
     cb4:	122e2e05 	.word	0x122e2e05
     cb8:	150b      	.short	0x150b
     cba:	26          	.byte	0x26
     cbb:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cbc:	2400      	movs	r4, #0
	}
}
     cbe:	0020      	movs	r0, r4
     cc0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     cc2:	4b15      	ldr	r3, [pc, #84]	; (d18 <system_clock_source_get_hz+0x70>)
     cc4:	691c      	ldr	r4, [r3, #16]
     cc6:	e7fa      	b.n	cbe <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cc8:	4b14      	ldr	r3, [pc, #80]	; (d1c <system_clock_source_get_hz+0x74>)
     cca:	4c15      	ldr	r4, [pc, #84]	; (d20 <system_clock_source_get_hz+0x78>)
     ccc:	6a1b      	ldr	r3, [r3, #32]
     cce:	059b      	lsls	r3, r3, #22
     cd0:	0f9b      	lsrs	r3, r3, #30
     cd2:	40dc      	lsrs	r4, r3
     cd4:	e7f3      	b.n	cbe <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     cd6:	4b10      	ldr	r3, [pc, #64]	; (d18 <system_clock_source_get_hz+0x70>)
     cd8:	695c      	ldr	r4, [r3, #20]
     cda:	e7f0      	b.n	cbe <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cdc:	4d0e      	ldr	r5, [pc, #56]	; (d18 <system_clock_source_get_hz+0x70>)
			return 0;
     cde:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     ce0:	682b      	ldr	r3, [r5, #0]
     ce2:	079b      	lsls	r3, r3, #30
     ce4:	d5eb      	bpl.n	cbe <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     ce6:	4b0f      	ldr	r3, [pc, #60]	; (d24 <system_clock_source_get_hz+0x7c>)
     ce8:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     cea:	682b      	ldr	r3, [r5, #0]
     cec:	075b      	lsls	r3, r3, #29
     cee:	d511      	bpl.n	d14 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cf0:	0020      	movs	r0, r4
     cf2:	4b0d      	ldr	r3, [pc, #52]	; (d28 <system_clock_source_get_hz+0x80>)
     cf4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cf6:	68ac      	ldr	r4, [r5, #8]
     cf8:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cfa:	4344      	muls	r4, r0
     cfc:	e7df      	b.n	cbe <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     cfe:	4b0b      	ldr	r3, [pc, #44]	; (d2c <system_clock_source_get_hz+0x84>)
			return 0;
     d00:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	075b      	lsls	r3, r3, #29
     d06:	d5da      	bpl.n	cbe <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     d08:	4b03      	ldr	r3, [pc, #12]	; (d18 <system_clock_source_get_hz+0x70>)
     d0a:	68dc      	ldr	r4, [r3, #12]
     d0c:	e7d7      	b.n	cbe <system_clock_source_get_hz+0x16>
		return 32768UL;
     d0e:	2480      	movs	r4, #128	; 0x80
     d10:	0224      	lsls	r4, r4, #8
     d12:	e7d4      	b.n	cbe <system_clock_source_get_hz+0x16>
		return 48000000UL;
     d14:	4c06      	ldr	r4, [pc, #24]	; (d30 <system_clock_source_get_hz+0x88>)
     d16:	e7d2      	b.n	cbe <system_clock_source_get_hz+0x16>
     d18:	200000a0 	.word	0x200000a0
     d1c:	40000800 	.word	0x40000800
     d20:	007a1200 	.word	0x007a1200
     d24:	00000c99 	.word	0x00000c99
     d28:	000010cd 	.word	0x000010cd
     d2c:	40000850 	.word	0x40000850
     d30:	02dc6c00 	.word	0x02dc6c00

00000d34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d34:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
     d36:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     d38:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d3a:	7845      	ldrb	r5, [r0, #1]
     d3c:	2001      	movs	r0, #1
     d3e:	2640      	movs	r6, #64	; 0x40
     d40:	4005      	ands	r5, r0
     d42:	4020      	ands	r0, r4
     d44:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d46:	4908      	ldr	r1, [pc, #32]	; (d68 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     d48:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d4a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     d4c:	01c0      	lsls	r0, r0, #7
     d4e:	43b3      	bics	r3, r6
     d50:	432b      	orrs	r3, r5
     d52:	43a3      	bics	r3, r4
     d54:	4303      	orrs	r3, r0
     d56:	2003      	movs	r0, #3
     d58:	4002      	ands	r2, r0
     d5a:	4804      	ldr	r0, [pc, #16]	; (d6c <system_clock_source_osc8m_set_config+0x38>)
     d5c:	0212      	lsls	r2, r2, #8
     d5e:	4003      	ands	r3, r0
     d60:	4313      	orrs	r3, r2
     d62:	620b      	str	r3, [r1, #32]
}
     d64:	bd70      	pop	{r4, r5, r6, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	40000800 	.word	0x40000800
     d6c:	fffffcff 	.word	0xfffffcff

00000d70 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
     d72:	2808      	cmp	r0, #8
     d74:	d806      	bhi.n	d84 <system_clock_source_enable+0x14>
     d76:	f000 fb3b 	bl	13f0 <__gnu_thumb1_case_uqi>
     d7a:	0514      	.short	0x0514
     d7c:	1a0e0c05 	.word	0x1a0e0c05
     d80:	2007      	.short	0x2007
     d82:	34          	.byte	0x34
     d83:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d84:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d88:	2302      	movs	r3, #2
     d8a:	4a19      	ldr	r2, [pc, #100]	; (df0 <system_clock_source_enable+0x80>)
     d8c:	6a11      	ldr	r1, [r2, #32]
     d8e:	430b      	orrs	r3, r1
     d90:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d92:	2000      	movs	r0, #0
     d94:	e7f7      	b.n	d86 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d96:	2302      	movs	r3, #2
     d98:	4a15      	ldr	r2, [pc, #84]	; (df0 <system_clock_source_enable+0x80>)
     d9a:	6991      	ldr	r1, [r2, #24]
     d9c:	430b      	orrs	r3, r1
     d9e:	6193      	str	r3, [r2, #24]
     da0:	e7f7      	b.n	d92 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     da2:	2302      	movs	r3, #2
     da4:	4a12      	ldr	r2, [pc, #72]	; (df0 <system_clock_source_enable+0x80>)
     da6:	8a11      	ldrh	r1, [r2, #16]
     da8:	430b      	orrs	r3, r1
     daa:	8213      	strh	r3, [r2, #16]
     dac:	e7f1      	b.n	d92 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     dae:	2302      	movs	r3, #2
     db0:	4a0f      	ldr	r2, [pc, #60]	; (df0 <system_clock_source_enable+0x80>)
     db2:	8a91      	ldrh	r1, [r2, #20]
     db4:	430b      	orrs	r3, r1
     db6:	8293      	strh	r3, [r2, #20]
     db8:	e7eb      	b.n	d92 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dba:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
     dbc:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dbe:	4e0d      	ldr	r6, [pc, #52]	; (df4 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dc0:	4d0b      	ldr	r5, [pc, #44]	; (df0 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dc2:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
     dc4:	4f0c      	ldr	r7, [pc, #48]	; (df8 <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dc6:	4313      	orrs	r3, r2
     dc8:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dca:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
     dcc:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     dce:	68b3      	ldr	r3, [r6, #8]
     dd0:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     dd2:	6873      	ldr	r3, [r6, #4]
     dd4:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     dd6:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
     dd8:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     dda:	6833      	ldr	r3, [r6, #0]
     ddc:	b29b      	uxth	r3, r3
     dde:	84ab      	strh	r3, [r5, #36]	; 0x24
     de0:	e7d7      	b.n	d92 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     de2:	2302      	movs	r3, #2
     de4:	4a05      	ldr	r2, [pc, #20]	; (dfc <system_clock_source_enable+0x8c>)
     de6:	7811      	ldrb	r1, [r2, #0]
     de8:	430b      	orrs	r3, r1
     dea:	7013      	strb	r3, [r2, #0]
     dec:	e7d1      	b.n	d92 <system_clock_source_enable+0x22>
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	40000800 	.word	0x40000800
     df4:	200000a0 	.word	0x200000a0
     df8:	00000c99 	.word	0x00000c99
     dfc:	40000844 	.word	0x40000844

00000e00 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e02:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e04:	211e      	movs	r1, #30
     e06:	4b19      	ldr	r3, [pc, #100]	; (e6c <system_clock_init+0x6c>)
     e08:	00d2      	lsls	r2, r2, #3
     e0a:	609a      	str	r2, [r3, #8]
     e0c:	4a18      	ldr	r2, [pc, #96]	; (e70 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e0e:	2400      	movs	r4, #0
     e10:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e12:	ad01      	add	r5, sp, #4
     e14:	438b      	bics	r3, r1
     e16:	6053      	str	r3, [r2, #4]
     e18:	2301      	movs	r3, #1
     e1a:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e1c:	b2e0      	uxtb	r0, r4
     e1e:	0029      	movs	r1, r5
     e20:	4b14      	ldr	r3, [pc, #80]	; (e74 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e22:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e24:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e26:	2c25      	cmp	r4, #37	; 0x25
     e28:	d1f8      	bne.n	e1c <system_clock_init+0x1c>
	config->run_in_standby  = false;
     e2a:	2400      	movs	r4, #0
     e2c:	466b      	mov	r3, sp
	config->on_demand       = true;
     e2e:	2601      	movs	r6, #1
	config->run_in_standby  = false;
     e30:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
     e32:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e34:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e36:	4668      	mov	r0, sp
     e38:	4b0f      	ldr	r3, [pc, #60]	; (e78 <system_clock_init+0x78>)
     e3a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e3c:	4b0f      	ldr	r3, [pc, #60]	; (e7c <system_clock_init+0x7c>)
     e3e:	2006      	movs	r0, #6
     e40:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e42:	4b0f      	ldr	r3, [pc, #60]	; (e80 <system_clock_init+0x80>)
     e44:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e46:	4b0f      	ldr	r3, [pc, #60]	; (e84 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e48:	0029      	movs	r1, r5
     e4a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e4c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e4e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e50:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e52:	2306      	movs	r3, #6
     e54:	0020      	movs	r0, r4
     e56:	702b      	strb	r3, [r5, #0]
     e58:	4b0b      	ldr	r3, [pc, #44]	; (e88 <system_clock_init+0x88>)
	config->division_factor    = 1;
     e5a:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
     e5c:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
     e5e:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
     e60:	726c      	strb	r4, [r5, #9]
     e62:	4798      	blx	r3
     e64:	0020      	movs	r0, r4
     e66:	4b09      	ldr	r3, [pc, #36]	; (e8c <system_clock_init+0x8c>)
     e68:	4798      	blx	r3
#endif
}
     e6a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
     e6c:	40000800 	.word	0x40000800
     e70:	41004000 	.word	0x41004000
     e74:	000010b1 	.word	0x000010b1
     e78:	00000d35 	.word	0x00000d35
     e7c:	00000d71 	.word	0x00000d71
     e80:	00000e9d 	.word	0x00000e9d
     e84:	40000400 	.word	0x40000400
     e88:	00000ebd 	.word	0x00000ebd
     e8c:	00000f61 	.word	0x00000f61

00000e90 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e90:	4b01      	ldr	r3, [pc, #4]	; (e98 <system_gclk_is_syncing+0x8>)
     e92:	7858      	ldrb	r0, [r3, #1]
     e94:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
     e96:	4770      	bx	lr
     e98:	40000c00 	.word	0x40000c00

00000e9c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     e9c:	2308      	movs	r3, #8
     e9e:	4a05      	ldr	r2, [pc, #20]	; (eb4 <system_gclk_init+0x18>)
     ea0:	6991      	ldr	r1, [r2, #24]
     ea2:	430b      	orrs	r3, r1
     ea4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     ea6:	2301      	movs	r3, #1
     ea8:	4a03      	ldr	r2, [pc, #12]	; (eb8 <system_gclk_init+0x1c>)
     eaa:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     eac:	7811      	ldrb	r1, [r2, #0]
     eae:	4219      	tst	r1, r3
     eb0:	d1fc      	bne.n	eac <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
     eb2:	4770      	bx	lr
     eb4:	40000400 	.word	0x40000400
     eb8:	40000c00 	.word	0x40000c00

00000ebc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ebe:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ec0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ec2:	0224      	lsls	r4, r4, #8
{
     ec4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     ec6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ec8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
     eca:	2b00      	cmp	r3, #0
     ecc:	d002      	beq.n	ed4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ece:	2380      	movs	r3, #128	; 0x80
     ed0:	02db      	lsls	r3, r3, #11
     ed2:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ed4:	7a4b      	ldrb	r3, [r1, #9]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d002      	beq.n	ee0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     eda:	2380      	movs	r3, #128	; 0x80
     edc:	031b      	lsls	r3, r3, #12
     ede:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     ee0:	684b      	ldr	r3, [r1, #4]
     ee2:	2b01      	cmp	r3, #1
     ee4:	d912      	bls.n	f0c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     ee6:	1e5d      	subs	r5, r3, #1
     ee8:	401d      	ands	r5, r3
     eea:	2202      	movs	r2, #2
     eec:	2d00      	cmp	r5, #0
     eee:	d006      	beq.n	efe <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     ef0:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ef2:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
     ef4:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ef6:	029b      	lsls	r3, r3, #10
     ef8:	e007      	b.n	f0a <system_gclk_gen_set_config+0x4e>
				div2_count++;
     efa:	3501      	adds	r5, #1
						mask <<= 1) {
     efc:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     efe:	429a      	cmp	r2, r3
     f00:	d3fb      	bcc.n	efa <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f02:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f04:	022d      	lsls	r5, r5, #8
     f06:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f08:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f0a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f0c:	7a0b      	ldrb	r3, [r1, #8]
     f0e:	2b00      	cmp	r3, #0
     f10:	d002      	beq.n	f18 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f12:	2380      	movs	r3, #128	; 0x80
     f14:	039b      	lsls	r3, r3, #14
     f16:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
     f18:	4f0c      	ldr	r7, [pc, #48]	; (f4c <system_gclk_gen_set_config+0x90>)
     f1a:	47b8      	blx	r7
     f1c:	2800      	cmp	r0, #0
     f1e:	d1fb      	bne.n	f18 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
     f20:	4b0b      	ldr	r3, [pc, #44]	; (f50 <system_gclk_gen_set_config+0x94>)
     f22:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f24:	4b0b      	ldr	r3, [pc, #44]	; (f54 <system_gclk_gen_set_config+0x98>)
     f26:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f28:	47b8      	blx	r7
     f2a:	2800      	cmp	r0, #0
     f2c:	d1fc      	bne.n	f28 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f2e:	4b0a      	ldr	r3, [pc, #40]	; (f58 <system_gclk_gen_set_config+0x9c>)
     f30:	609d      	str	r5, [r3, #8]
     f32:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
     f34:	47b8      	blx	r7
     f36:	2800      	cmp	r0, #0
     f38:	d1fc      	bne.n	f34 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f3a:	2280      	movs	r2, #128	; 0x80
     f3c:	686b      	ldr	r3, [r5, #4]
     f3e:	0252      	lsls	r2, r2, #9
     f40:	4013      	ands	r3, r2
     f42:	431c      	orrs	r4, r3
     f44:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
     f46:	4b05      	ldr	r3, [pc, #20]	; (f5c <system_gclk_gen_set_config+0xa0>)
     f48:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f4c:	00000e91 	.word	0x00000e91
     f50:	00000c35 	.word	0x00000c35
     f54:	40000c08 	.word	0x40000c08
     f58:	40000c00 	.word	0x40000c00
     f5c:	00000c69 	.word	0x00000c69

00000f60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f60:	b570      	push	{r4, r5, r6, lr}
     f62:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
     f64:	4c09      	ldr	r4, [pc, #36]	; (f8c <system_gclk_gen_enable+0x2c>)
     f66:	47a0      	blx	r4
     f68:	2800      	cmp	r0, #0
     f6a:	d1fb      	bne.n	f64 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
     f6c:	4b08      	ldr	r3, [pc, #32]	; (f90 <system_gclk_gen_enable+0x30>)
     f6e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f70:	4b08      	ldr	r3, [pc, #32]	; (f94 <system_gclk_gen_enable+0x34>)
     f72:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
     f74:	47a0      	blx	r4
     f76:	2800      	cmp	r0, #0
     f78:	d1fc      	bne.n	f74 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f7a:	2380      	movs	r3, #128	; 0x80
     f7c:	4a06      	ldr	r2, [pc, #24]	; (f98 <system_gclk_gen_enable+0x38>)
     f7e:	025b      	lsls	r3, r3, #9
     f80:	6851      	ldr	r1, [r2, #4]
     f82:	430b      	orrs	r3, r1
     f84:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     f86:	4b05      	ldr	r3, [pc, #20]	; (f9c <system_gclk_gen_enable+0x3c>)
     f88:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f8a:	bd70      	pop	{r4, r5, r6, pc}
     f8c:	00000e91 	.word	0x00000e91
     f90:	00000c35 	.word	0x00000c35
     f94:	40000c04 	.word	0x40000c04
     f98:	40000c00 	.word	0x40000c00
     f9c:	00000c69 	.word	0x00000c69

00000fa0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     fa2:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
     fa4:	4e18      	ldr	r6, [pc, #96]	; (1008 <system_gclk_gen_get_hz+0x68>)
     fa6:	47b0      	blx	r6
     fa8:	2800      	cmp	r0, #0
     faa:	d1fb      	bne.n	fa4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
     fac:	4b17      	ldr	r3, [pc, #92]	; (100c <system_gclk_gen_get_hz+0x6c>)
     fae:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fb0:	4b17      	ldr	r3, [pc, #92]	; (1010 <system_gclk_gen_get_hz+0x70>)
     fb2:	701f      	strb	r7, [r3, #0]
     fb4:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
     fb6:	47b0      	blx	r6
     fb8:	2800      	cmp	r0, #0
     fba:	d1fc      	bne.n	fb6 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fbc:	4d15      	ldr	r5, [pc, #84]	; (1014 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fbe:	4b16      	ldr	r3, [pc, #88]	; (1018 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     fc0:	6868      	ldr	r0, [r5, #4]
     fc2:	04c0      	lsls	r0, r0, #19
     fc4:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     fc6:	4798      	blx	r3
     fc8:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fca:	9b01      	ldr	r3, [sp, #4]
     fcc:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     fce:	686b      	ldr	r3, [r5, #4]
     fd0:	02db      	lsls	r3, r3, #11
     fd2:	0fdb      	lsrs	r3, r3, #31
     fd4:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fd6:	4b11      	ldr	r3, [pc, #68]	; (101c <system_gclk_gen_get_hz+0x7c>)
     fd8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
     fda:	47b0      	blx	r6
     fdc:	2800      	cmp	r0, #0
     fde:	d1fc      	bne.n	fda <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fe0:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <system_gclk_gen_get_hz+0x80>)
     fe4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     fe6:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
     fe8:	022d      	lsls	r5, r5, #8
     fea:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
     fec:	2b00      	cmp	r3, #0
     fee:	d108      	bne.n	1002 <system_gclk_gen_get_hz+0x62>
     ff0:	2d01      	cmp	r5, #1
     ff2:	d904      	bls.n	ffe <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
     ff4:	0020      	movs	r0, r4
     ff6:	0029      	movs	r1, r5
     ff8:	4b0a      	ldr	r3, [pc, #40]	; (1024 <system_gclk_gen_get_hz+0x84>)
     ffa:	4798      	blx	r3
     ffc:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
     ffe:	0020      	movs	r0, r4
    1000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1002:	3501      	adds	r5, #1
    1004:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    1006:	e7fa      	b.n	ffe <system_gclk_gen_get_hz+0x5e>
    1008:	00000e91 	.word	0x00000e91
    100c:	00000c35 	.word	0x00000c35
    1010:	40000c04 	.word	0x40000c04
    1014:	40000c00 	.word	0x40000c00
    1018:	00000ca9 	.word	0x00000ca9
    101c:	40000c08 	.word	0x40000c08
    1020:	00000c69 	.word	0x00000c69
    1024:	00001405 	.word	0x00001405

00001028 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1028:	b510      	push	{r4, lr}
    102a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    102c:	4b06      	ldr	r3, [pc, #24]	; (1048 <system_gclk_chan_enable+0x20>)
    102e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1032:	4a07      	ldr	r2, [pc, #28]	; (1050 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1034:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1036:	2380      	movs	r3, #128	; 0x80
    1038:	8851      	ldrh	r1, [r2, #2]
    103a:	01db      	lsls	r3, r3, #7
    103c:	430b      	orrs	r3, r1
    103e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1040:	4b04      	ldr	r3, [pc, #16]	; (1054 <system_gclk_chan_enable+0x2c>)
    1042:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1044:	bd10      	pop	{r4, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00000c35 	.word	0x00000c35
    104c:	40000c02 	.word	0x40000c02
    1050:	40000c00 	.word	0x40000c00
    1054:	00000c69 	.word	0x00000c69

00001058 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1058:	b510      	push	{r4, lr}
    105a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    105c:	4b0e      	ldr	r3, [pc, #56]	; (1098 <system_gclk_chan_disable+0x40>)
    105e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1060:	4b0e      	ldr	r3, [pc, #56]	; (109c <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1062:	4a0f      	ldr	r2, [pc, #60]	; (10a0 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1064:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1066:	4b0f      	ldr	r3, [pc, #60]	; (10a4 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1068:	4c0f      	ldr	r4, [pc, #60]	; (10a8 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    106a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    106c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    106e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1070:	4011      	ands	r1, r2
    1072:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1074:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1076:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1078:	4021      	ands	r1, r4
    107a:	8059      	strh	r1, [r3, #2]
    107c:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    107e:	2280      	movs	r2, #128	; 0x80
    1080:	01d2      	lsls	r2, r2, #7
    1082:	885c      	ldrh	r4, [r3, #2]
    1084:	4214      	tst	r4, r2
    1086:	d1fc      	bne.n	1082 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1088:	885a      	ldrh	r2, [r3, #2]
    108a:	0200      	lsls	r0, r0, #8
    108c:	400a      	ands	r2, r1
    108e:	4302      	orrs	r2, r0
    1090:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1092:	4b06      	ldr	r3, [pc, #24]	; (10ac <system_gclk_chan_disable+0x54>)
    1094:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1096:	bd10      	pop	{r4, pc}
    1098:	00000c35 	.word	0x00000c35
    109c:	40000c02 	.word	0x40000c02
    10a0:	fffff0ff 	.word	0xfffff0ff
    10a4:	40000c00 	.word	0x40000c00
    10a8:	ffffbfff 	.word	0xffffbfff
    10ac:	00000c69 	.word	0x00000c69

000010b0 <system_gclk_chan_set_config>:
{
    10b0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10b2:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    10b4:	4b03      	ldr	r3, [pc, #12]	; (10c4 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10b6:	0224      	lsls	r4, r4, #8
    10b8:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10ba:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10bc:	4b02      	ldr	r3, [pc, #8]	; (10c8 <system_gclk_chan_set_config+0x18>)
    10be:	b2a4      	uxth	r4, r4
    10c0:	805c      	strh	r4, [r3, #2]
}
    10c2:	bd10      	pop	{r4, pc}
    10c4:	00001059 	.word	0x00001059
    10c8:	40000c00 	.word	0x40000c00

000010cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <system_gclk_chan_get_hz+0x20>)
    10d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10d4:	4b06      	ldr	r3, [pc, #24]	; (10f0 <system_gclk_chan_get_hz+0x24>)
    10d6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    10d8:	4b06      	ldr	r3, [pc, #24]	; (10f4 <system_gclk_chan_get_hz+0x28>)
    10da:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    10dc:	4b06      	ldr	r3, [pc, #24]	; (10f8 <system_gclk_chan_get_hz+0x2c>)
    10de:	0524      	lsls	r4, r4, #20
    10e0:	0f24      	lsrs	r4, r4, #28
    10e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    10e4:	0020      	movs	r0, r4
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_gclk_chan_get_hz+0x30>)
    10e8:	4798      	blx	r3
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	00000c35 	.word	0x00000c35
    10f0:	40000c02 	.word	0x40000c02
    10f4:	40000c00 	.word	0x40000c00
    10f8:	00000c69 	.word	0x00000c69
    10fc:	00000fa1 	.word	0x00000fa1

00001100 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1100:	78d3      	ldrb	r3, [r2, #3]
{
    1102:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1104:	2b00      	cmp	r3, #0
    1106:	d135      	bne.n	1174 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1108:	7814      	ldrb	r4, [r2, #0]
    110a:	2c80      	cmp	r4, #128	; 0x80
    110c:	d003      	beq.n	1116 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    110e:	2380      	movs	r3, #128	; 0x80
    1110:	0624      	lsls	r4, r4, #24
    1112:	025b      	lsls	r3, r3, #9
    1114:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1116:	2502      	movs	r5, #2
    1118:	7854      	ldrb	r4, [r2, #1]
    111a:	43ac      	bics	r4, r5
    111c:	d106      	bne.n	112c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    111e:	7894      	ldrb	r4, [r2, #2]
    1120:	2c00      	cmp	r4, #0
    1122:	d124      	bne.n	116e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1124:	2480      	movs	r4, #128	; 0x80
    1126:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1128:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    112a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    112c:	7854      	ldrb	r4, [r2, #1]
    112e:	3c01      	subs	r4, #1
    1130:	2c01      	cmp	r4, #1
    1132:	d801      	bhi.n	1138 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1134:	4c12      	ldr	r4, [pc, #72]	; (1180 <_system_pinmux_config+0x80>)
    1136:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1138:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    113a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    113c:	05e4      	lsls	r4, r4, #23
    113e:	432c      	orrs	r4, r5
    1140:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1142:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1144:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1146:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1148:	0624      	lsls	r4, r4, #24
    114a:	432c      	orrs	r4, r5
    114c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    114e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1150:	78d4      	ldrb	r4, [r2, #3]
    1152:	2c00      	cmp	r4, #0
    1154:	d10a      	bne.n	116c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1156:	035b      	lsls	r3, r3, #13
    1158:	d503      	bpl.n	1162 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    115a:	7893      	ldrb	r3, [r2, #2]
    115c:	2b01      	cmp	r3, #1
    115e:	d10c      	bne.n	117a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1160:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1162:	7853      	ldrb	r3, [r2, #1]
    1164:	3b01      	subs	r3, #1
    1166:	2b01      	cmp	r3, #1
    1168:	d800      	bhi.n	116c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    116a:	6081      	str	r1, [r0, #8]
		}
	}
}
    116c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    116e:	24c0      	movs	r4, #192	; 0xc0
    1170:	02e4      	lsls	r4, r4, #11
    1172:	e7d9      	b.n	1128 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1174:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1176:	2300      	movs	r3, #0
    1178:	e7de      	b.n	1138 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    117a:	6141      	str	r1, [r0, #20]
    117c:	e7f1      	b.n	1162 <_system_pinmux_config+0x62>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	fffbffff 	.word	0xfffbffff

00001184 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1184:	b510      	push	{r4, lr}
    1186:	0003      	movs	r3, r0
    1188:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    118a:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    118c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    118e:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1190:	4281      	cmp	r1, r0
    1192:	d102      	bne.n	119a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1194:	4904      	ldr	r1, [pc, #16]	; (11a8 <system_pinmux_pin_set_config+0x24>)
    1196:	01e0      	lsls	r0, r4, #7
    1198:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    119a:	211f      	movs	r1, #31
    119c:	400b      	ands	r3, r1
    119e:	391e      	subs	r1, #30
    11a0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    11a2:	4b02      	ldr	r3, [pc, #8]	; (11ac <system_pinmux_pin_set_config+0x28>)
    11a4:	4798      	blx	r3
}
    11a6:	bd10      	pop	{r4, pc}
    11a8:	41004400 	.word	0x41004400
    11ac:	00001101 	.word	0x00001101

000011b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    11b0:	4770      	bx	lr
	...

000011b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    11b4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    11b6:	4b05      	ldr	r3, [pc, #20]	; (11cc <system_init+0x18>)
    11b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <system_init+0x1c>)
    11bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <system_init+0x20>)
    11c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <system_init+0x24>)
    11c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <system_init+0x28>)
    11c8:	4798      	blx	r3
}
    11ca:	bd10      	pop	{r4, pc}
    11cc:	00000e01 	.word	0x00000e01
    11d0:	00000c31 	.word	0x00000c31
    11d4:	000011b1 	.word	0x000011b1
    11d8:	000011b1 	.word	0x000011b1
    11dc:	000011b1 	.word	0x000011b1

000011e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11e0:	e7fe      	b.n	11e0 <Dummy_Handler>
	...

000011e4 <Reset_Handler>:
        if (pSrc != pDest) {
    11e4:	4821      	ldr	r0, [pc, #132]	; (126c <Reset_Handler+0x88>)
    11e6:	4922      	ldr	r1, [pc, #136]	; (1270 <Reset_Handler+0x8c>)
{
    11e8:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    11ea:	4288      	cmp	r0, r1
    11ec:	d004      	beq.n	11f8 <Reset_Handler+0x14>
    11ee:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    11f0:	4c20      	ldr	r4, [pc, #128]	; (1274 <Reset_Handler+0x90>)
    11f2:	18ca      	adds	r2, r1, r3
    11f4:	42a2      	cmp	r2, r4
    11f6:	d332      	bcc.n	125e <Reset_Handler+0x7a>
                *pDest++ = 0;
    11f8:	2100      	movs	r1, #0
    11fa:	4b1f      	ldr	r3, [pc, #124]	; (1278 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    11fc:	4a1f      	ldr	r2, [pc, #124]	; (127c <Reset_Handler+0x98>)
    11fe:	4293      	cmp	r3, r2
    1200:	d331      	bcc.n	1266 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1202:	21ff      	movs	r1, #255	; 0xff
    1204:	4b1e      	ldr	r3, [pc, #120]	; (1280 <Reset_Handler+0x9c>)
    1206:	4a1f      	ldr	r2, [pc, #124]	; (1284 <Reset_Handler+0xa0>)
    1208:	438b      	bics	r3, r1
    120a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    120c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    120e:	250c      	movs	r5, #12
    1210:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1212:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1214:	4b1c      	ldr	r3, [pc, #112]	; (1288 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1216:	481d      	ldr	r0, [pc, #116]	; (128c <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1218:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    121a:	78c3      	ldrb	r3, [r0, #3]
    121c:	39fc      	subs	r1, #252	; 0xfc
    121e:	438b      	bics	r3, r1
    1220:	4313      	orrs	r3, r2
    1222:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1224:	78c3      	ldrb	r3, [r0, #3]
    1226:	43ab      	bics	r3, r5
    1228:	4323      	orrs	r3, r4
    122a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    122c:	4b18      	ldr	r3, [pc, #96]	; (1290 <Reset_Handler+0xac>)
    122e:	7b98      	ldrb	r0, [r3, #14]
    1230:	43b0      	bics	r0, r6
    1232:	0006      	movs	r6, r0
    1234:	2020      	movs	r0, #32
    1236:	4330      	orrs	r0, r6
    1238:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    123a:	7b98      	ldrb	r0, [r3, #14]
    123c:	43a8      	bics	r0, r5
    123e:	4304      	orrs	r4, r0
    1240:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1242:	7b98      	ldrb	r0, [r3, #14]
    1244:	4388      	bics	r0, r1
    1246:	4302      	orrs	r2, r0
    1248:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    124a:	2380      	movs	r3, #128	; 0x80
    124c:	4a11      	ldr	r2, [pc, #68]	; (1294 <Reset_Handler+0xb0>)
    124e:	6851      	ldr	r1, [r2, #4]
    1250:	430b      	orrs	r3, r1
    1252:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1254:	4b10      	ldr	r3, [pc, #64]	; (1298 <Reset_Handler+0xb4>)
    1256:	4798      	blx	r3
        main();
    1258:	4b10      	ldr	r3, [pc, #64]	; (129c <Reset_Handler+0xb8>)
    125a:	4798      	blx	r3
    125c:	e7fe      	b.n	125c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    125e:	58c5      	ldr	r5, [r0, r3]
    1260:	3304      	adds	r3, #4
    1262:	6015      	str	r5, [r2, #0]
    1264:	e7c5      	b.n	11f2 <Reset_Handler+0xe>
                *pDest++ = 0;
    1266:	c302      	stmia	r3!, {r1}
    1268:	e7c9      	b.n	11fe <Reset_Handler+0x1a>
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	00001608 	.word	0x00001608
    1270:	20000000 	.word	0x20000000
    1274:	2000000c 	.word	0x2000000c
    1278:	2000000c 	.word	0x2000000c
    127c:	200000d0 	.word	0x200000d0
    1280:	00000000 	.word	0x00000000
    1284:	e000ed00 	.word	0xe000ed00
    1288:	410070fc 	.word	0x410070fc
    128c:	41005000 	.word	0x41005000
    1290:	41004800 	.word	0x41004800
    1294:	41004000 	.word	0x41004000
    1298:	00001589 	.word	0x00001589
    129c:	000013cd 	.word	0x000013cd

000012a0 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    12a0:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    12a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    12a4:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    12a6:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    12a8:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    12aa:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    12ac:	4d20      	ldr	r5, [pc, #128]	; (1330 <conf_port_pin+0x90>)
    12ae:	0021      	movs	r1, r4
    12b0:	200b      	movs	r0, #11
    12b2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    12b4:	7067      	strb	r7, [r4, #1]
    12b6:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    12b8:	0021      	movs	r1, r4
    12ba:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    12bc:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    12be:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    12c0:	2380      	movs	r3, #128	; 0x80
    12c2:	4e1c      	ldr	r6, [pc, #112]	; (1334 <conf_port_pin+0x94>)
    12c4:	00db      	lsls	r3, r3, #3
    12c6:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    12c8:	0021      	movs	r1, r4
    12ca:	2005      	movs	r0, #5
    12cc:	47a8      	blx	r5
    12ce:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    12d0:	0021      	movs	r1, r4
    12d2:	61b3      	str	r3, [r6, #24]
    12d4:	2006      	movs	r0, #6
    12d6:	47a8      	blx	r5
    12d8:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    12da:	0021      	movs	r1, r4
    12dc:	61b3      	str	r3, [r6, #24]
    12de:	2007      	movs	r0, #7
    12e0:	47a8      	blx	r5
    12e2:	2380      	movs	r3, #128	; 0x80
    12e4:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    12e6:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    12e8:	0021      	movs	r1, r4
    12ea:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    12ec:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    12ee:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    12f0:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    12f2:	0021      	movs	r1, r4
    12f4:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    12f6:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    12f8:	47a8      	blx	r5
    12fa:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    12fc:	0021      	movs	r1, r4
    12fe:	61b3      	str	r3, [r6, #24]
    1300:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1302:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1304:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1306:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1308:	47a8      	blx	r5
    130a:	0033      	movs	r3, r6
    130c:	2280      	movs	r2, #128	; 0x80
    130e:	3398      	adds	r3, #152	; 0x98
    1310:	0212      	lsls	r2, r2, #8
    1312:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    1314:	0021      	movs	r1, r4
    1316:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1318:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    131a:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    131c:	47a8      	blx	r5
    131e:	2380      	movs	r3, #128	; 0x80
    1320:	029b      	lsls	r3, r3, #10
    1322:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1324:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    1326:	0021      	movs	r1, r4
    1328:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    132a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    132c:	47a8      	blx	r5
} // end conf_port_pin(void)
    132e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1330:	000002f9 	.word	0x000002f9
    1334:	41004400 	.word	0x41004400

00001338 <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1338:	2300      	movs	r3, #0
{
    133a:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    133c:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    133e:	a801      	add	r0, sp, #4
    1340:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1342:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1344:	4b01      	ldr	r3, [pc, #4]	; (134c <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    1346:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    1348:	4798      	blx	r3
}
    134a:	bd07      	pop	{r0, r1, r2, pc}
    134c:	00000d35 	.word	0x00000d35

00001350 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1352:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1354:	4b09      	ldr	r3, [pc, #36]	; (137c <clk_gclk0_init+0x2c>)
    1356:	4798      	blx	r3
    1358:	4b09      	ldr	r3, [pc, #36]	; (1380 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    135a:	a901      	add	r1, sp, #4
    135c:	721c      	strb	r4, [r3, #8]
    135e:	2306      	movs	r3, #6
    1360:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1362:	3b05      	subs	r3, #5
    1364:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1366:	0020      	movs	r0, r4
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    136a:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    136c:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    136e:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1370:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1372:	0020      	movs	r0, r4
    1374:	4b04      	ldr	r3, [pc, #16]	; (1388 <clk_gclk0_init+0x38>)
    1376:	4798      	blx	r3
}
    1378:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00000e9d 	.word	0x00000e9d
    1380:	40000400 	.word	0x40000400
    1384:	00000ebd 	.word	0x00000ebd
    1388:	00000f61 	.word	0x00000f61

0000138c <sys_clk_init>:
{
    138c:	b510      	push	{r4, lr}
	clk_osc8m_init();
    138e:	4b03      	ldr	r3, [pc, #12]	; (139c <sys_clk_init+0x10>)
    1390:	4798      	blx	r3
	clk_gclk0_init();
    1392:	4b03      	ldr	r3, [pc, #12]	; (13a0 <sys_clk_init+0x14>)
    1394:	4798      	blx	r3
    delay_init();
    1396:	4b03      	ldr	r3, [pc, #12]	; (13a4 <sys_clk_init+0x18>)
    1398:	4798      	blx	r3
}
    139a:	bd10      	pop	{r4, pc}
    139c:	00001339 	.word	0x00001339
    13a0:	00001351 	.word	0x00001351
    13a4:	0000028d 	.word	0x0000028d

000013a8 <simSysInit>:
{
    13a8:	b510      	push	{r4, lr}
	system_init();
    13aa:	4b04      	ldr	r3, [pc, #16]	; (13bc <simSysInit+0x14>)
    13ac:	4798      	blx	r3
	sys_clk_init();
    13ae:	4b04      	ldr	r3, [pc, #16]	; (13c0 <simSysInit+0x18>)
    13b0:	4798      	blx	r3
	conf_port_pin();
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <simSysInit+0x1c>)
    13b4:	4798      	blx	r3
    uart245_init();
    13b6:	4b04      	ldr	r3, [pc, #16]	; (13c8 <simSysInit+0x20>)
    13b8:	4798      	blx	r3
}
    13ba:	bd10      	pop	{r4, pc}
    13bc:	000011b5 	.word	0x000011b5
    13c0:	0000138d 	.word	0x0000138d
    13c4:	000012a1 	.word	0x000012a1
    13c8:	00000115 	.word	0x00000115

000013cc <main>:
{
    13cc:	b510      	push	{r4, lr}
    simSysInit();
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <main+0x14>)
    13d0:	4798      	blx	r3
        uart245_enter_config();
    13d2:	4b04      	ldr	r3, [pc, #16]	; (13e4 <main+0x18>)
    13d4:	4798      	blx	r3
        uart245_config_test1();
    13d6:	4b04      	ldr	r3, [pc, #16]	; (13e8 <main+0x1c>)
    13d8:	4798      	blx	r3
        uart245_exit_config();
    13da:	4b04      	ldr	r3, [pc, #16]	; (13ec <main+0x20>)
    13dc:	4798      	blx	r3
    13de:	e7f8      	b.n	13d2 <main+0x6>
    13e0:	000013a9 	.word	0x000013a9
    13e4:	00000219 	.word	0x00000219
    13e8:	0000026d 	.word	0x0000026d
    13ec:	00000245 	.word	0x00000245

000013f0 <__gnu_thumb1_case_uqi>:
    13f0:	b402      	push	{r1}
    13f2:	4671      	mov	r1, lr
    13f4:	0849      	lsrs	r1, r1, #1
    13f6:	0049      	lsls	r1, r1, #1
    13f8:	5c09      	ldrb	r1, [r1, r0]
    13fa:	0049      	lsls	r1, r1, #1
    13fc:	448e      	add	lr, r1
    13fe:	bc02      	pop	{r1}
    1400:	4770      	bx	lr
    1402:	46c0      	nop			; (mov r8, r8)

00001404 <__udivsi3>:
    1404:	2200      	movs	r2, #0
    1406:	0843      	lsrs	r3, r0, #1
    1408:	428b      	cmp	r3, r1
    140a:	d374      	bcc.n	14f6 <__udivsi3+0xf2>
    140c:	0903      	lsrs	r3, r0, #4
    140e:	428b      	cmp	r3, r1
    1410:	d35f      	bcc.n	14d2 <__udivsi3+0xce>
    1412:	0a03      	lsrs	r3, r0, #8
    1414:	428b      	cmp	r3, r1
    1416:	d344      	bcc.n	14a2 <__udivsi3+0x9e>
    1418:	0b03      	lsrs	r3, r0, #12
    141a:	428b      	cmp	r3, r1
    141c:	d328      	bcc.n	1470 <__udivsi3+0x6c>
    141e:	0c03      	lsrs	r3, r0, #16
    1420:	428b      	cmp	r3, r1
    1422:	d30d      	bcc.n	1440 <__udivsi3+0x3c>
    1424:	22ff      	movs	r2, #255	; 0xff
    1426:	0209      	lsls	r1, r1, #8
    1428:	ba12      	rev	r2, r2
    142a:	0c03      	lsrs	r3, r0, #16
    142c:	428b      	cmp	r3, r1
    142e:	d302      	bcc.n	1436 <__udivsi3+0x32>
    1430:	1212      	asrs	r2, r2, #8
    1432:	0209      	lsls	r1, r1, #8
    1434:	d065      	beq.n	1502 <__udivsi3+0xfe>
    1436:	0b03      	lsrs	r3, r0, #12
    1438:	428b      	cmp	r3, r1
    143a:	d319      	bcc.n	1470 <__udivsi3+0x6c>
    143c:	e000      	b.n	1440 <__udivsi3+0x3c>
    143e:	0a09      	lsrs	r1, r1, #8
    1440:	0bc3      	lsrs	r3, r0, #15
    1442:	428b      	cmp	r3, r1
    1444:	d301      	bcc.n	144a <__udivsi3+0x46>
    1446:	03cb      	lsls	r3, r1, #15
    1448:	1ac0      	subs	r0, r0, r3
    144a:	4152      	adcs	r2, r2
    144c:	0b83      	lsrs	r3, r0, #14
    144e:	428b      	cmp	r3, r1
    1450:	d301      	bcc.n	1456 <__udivsi3+0x52>
    1452:	038b      	lsls	r3, r1, #14
    1454:	1ac0      	subs	r0, r0, r3
    1456:	4152      	adcs	r2, r2
    1458:	0b43      	lsrs	r3, r0, #13
    145a:	428b      	cmp	r3, r1
    145c:	d301      	bcc.n	1462 <__udivsi3+0x5e>
    145e:	034b      	lsls	r3, r1, #13
    1460:	1ac0      	subs	r0, r0, r3
    1462:	4152      	adcs	r2, r2
    1464:	0b03      	lsrs	r3, r0, #12
    1466:	428b      	cmp	r3, r1
    1468:	d301      	bcc.n	146e <__udivsi3+0x6a>
    146a:	030b      	lsls	r3, r1, #12
    146c:	1ac0      	subs	r0, r0, r3
    146e:	4152      	adcs	r2, r2
    1470:	0ac3      	lsrs	r3, r0, #11
    1472:	428b      	cmp	r3, r1
    1474:	d301      	bcc.n	147a <__udivsi3+0x76>
    1476:	02cb      	lsls	r3, r1, #11
    1478:	1ac0      	subs	r0, r0, r3
    147a:	4152      	adcs	r2, r2
    147c:	0a83      	lsrs	r3, r0, #10
    147e:	428b      	cmp	r3, r1
    1480:	d301      	bcc.n	1486 <__udivsi3+0x82>
    1482:	028b      	lsls	r3, r1, #10
    1484:	1ac0      	subs	r0, r0, r3
    1486:	4152      	adcs	r2, r2
    1488:	0a43      	lsrs	r3, r0, #9
    148a:	428b      	cmp	r3, r1
    148c:	d301      	bcc.n	1492 <__udivsi3+0x8e>
    148e:	024b      	lsls	r3, r1, #9
    1490:	1ac0      	subs	r0, r0, r3
    1492:	4152      	adcs	r2, r2
    1494:	0a03      	lsrs	r3, r0, #8
    1496:	428b      	cmp	r3, r1
    1498:	d301      	bcc.n	149e <__udivsi3+0x9a>
    149a:	020b      	lsls	r3, r1, #8
    149c:	1ac0      	subs	r0, r0, r3
    149e:	4152      	adcs	r2, r2
    14a0:	d2cd      	bcs.n	143e <__udivsi3+0x3a>
    14a2:	09c3      	lsrs	r3, r0, #7
    14a4:	428b      	cmp	r3, r1
    14a6:	d301      	bcc.n	14ac <__udivsi3+0xa8>
    14a8:	01cb      	lsls	r3, r1, #7
    14aa:	1ac0      	subs	r0, r0, r3
    14ac:	4152      	adcs	r2, r2
    14ae:	0983      	lsrs	r3, r0, #6
    14b0:	428b      	cmp	r3, r1
    14b2:	d301      	bcc.n	14b8 <__udivsi3+0xb4>
    14b4:	018b      	lsls	r3, r1, #6
    14b6:	1ac0      	subs	r0, r0, r3
    14b8:	4152      	adcs	r2, r2
    14ba:	0943      	lsrs	r3, r0, #5
    14bc:	428b      	cmp	r3, r1
    14be:	d301      	bcc.n	14c4 <__udivsi3+0xc0>
    14c0:	014b      	lsls	r3, r1, #5
    14c2:	1ac0      	subs	r0, r0, r3
    14c4:	4152      	adcs	r2, r2
    14c6:	0903      	lsrs	r3, r0, #4
    14c8:	428b      	cmp	r3, r1
    14ca:	d301      	bcc.n	14d0 <__udivsi3+0xcc>
    14cc:	010b      	lsls	r3, r1, #4
    14ce:	1ac0      	subs	r0, r0, r3
    14d0:	4152      	adcs	r2, r2
    14d2:	08c3      	lsrs	r3, r0, #3
    14d4:	428b      	cmp	r3, r1
    14d6:	d301      	bcc.n	14dc <__udivsi3+0xd8>
    14d8:	00cb      	lsls	r3, r1, #3
    14da:	1ac0      	subs	r0, r0, r3
    14dc:	4152      	adcs	r2, r2
    14de:	0883      	lsrs	r3, r0, #2
    14e0:	428b      	cmp	r3, r1
    14e2:	d301      	bcc.n	14e8 <__udivsi3+0xe4>
    14e4:	008b      	lsls	r3, r1, #2
    14e6:	1ac0      	subs	r0, r0, r3
    14e8:	4152      	adcs	r2, r2
    14ea:	0843      	lsrs	r3, r0, #1
    14ec:	428b      	cmp	r3, r1
    14ee:	d301      	bcc.n	14f4 <__udivsi3+0xf0>
    14f0:	004b      	lsls	r3, r1, #1
    14f2:	1ac0      	subs	r0, r0, r3
    14f4:	4152      	adcs	r2, r2
    14f6:	1a41      	subs	r1, r0, r1
    14f8:	d200      	bcs.n	14fc <__udivsi3+0xf8>
    14fa:	4601      	mov	r1, r0
    14fc:	4152      	adcs	r2, r2
    14fe:	4610      	mov	r0, r2
    1500:	4770      	bx	lr
    1502:	e7ff      	b.n	1504 <__udivsi3+0x100>
    1504:	b501      	push	{r0, lr}
    1506:	2000      	movs	r0, #0
    1508:	f000 f806 	bl	1518 <__aeabi_idiv0>
    150c:	bd02      	pop	{r1, pc}
    150e:	46c0      	nop			; (mov r8, r8)

00001510 <__aeabi_uidivmod>:
    1510:	2900      	cmp	r1, #0
    1512:	d0f7      	beq.n	1504 <__udivsi3+0x100>
    1514:	e776      	b.n	1404 <__udivsi3>
    1516:	4770      	bx	lr

00001518 <__aeabi_idiv0>:
    1518:	4770      	bx	lr
    151a:	46c0      	nop			; (mov r8, r8)

0000151c <__aeabi_llsl>:
    151c:	4091      	lsls	r1, r2
    151e:	1c03      	adds	r3, r0, #0
    1520:	4090      	lsls	r0, r2
    1522:	469c      	mov	ip, r3
    1524:	3a20      	subs	r2, #32
    1526:	4093      	lsls	r3, r2
    1528:	4319      	orrs	r1, r3
    152a:	4252      	negs	r2, r2
    152c:	4663      	mov	r3, ip
    152e:	40d3      	lsrs	r3, r2
    1530:	4319      	orrs	r1, r3
    1532:	4770      	bx	lr

00001534 <__aeabi_lmul>:
    1534:	b5f0      	push	{r4, r5, r6, r7, lr}
    1536:	46ce      	mov	lr, r9
    1538:	4647      	mov	r7, r8
    153a:	0415      	lsls	r5, r2, #16
    153c:	0c2d      	lsrs	r5, r5, #16
    153e:	002e      	movs	r6, r5
    1540:	b580      	push	{r7, lr}
    1542:	0407      	lsls	r7, r0, #16
    1544:	0c14      	lsrs	r4, r2, #16
    1546:	0c3f      	lsrs	r7, r7, #16
    1548:	4699      	mov	r9, r3
    154a:	0c03      	lsrs	r3, r0, #16
    154c:	437e      	muls	r6, r7
    154e:	435d      	muls	r5, r3
    1550:	4367      	muls	r7, r4
    1552:	4363      	muls	r3, r4
    1554:	197f      	adds	r7, r7, r5
    1556:	0c34      	lsrs	r4, r6, #16
    1558:	19e4      	adds	r4, r4, r7
    155a:	469c      	mov	ip, r3
    155c:	42a5      	cmp	r5, r4
    155e:	d903      	bls.n	1568 <__aeabi_lmul+0x34>
    1560:	2380      	movs	r3, #128	; 0x80
    1562:	025b      	lsls	r3, r3, #9
    1564:	4698      	mov	r8, r3
    1566:	44c4      	add	ip, r8
    1568:	464b      	mov	r3, r9
    156a:	4351      	muls	r1, r2
    156c:	4343      	muls	r3, r0
    156e:	0436      	lsls	r6, r6, #16
    1570:	0c36      	lsrs	r6, r6, #16
    1572:	0c25      	lsrs	r5, r4, #16
    1574:	0424      	lsls	r4, r4, #16
    1576:	4465      	add	r5, ip
    1578:	19a4      	adds	r4, r4, r6
    157a:	1859      	adds	r1, r3, r1
    157c:	1949      	adds	r1, r1, r5
    157e:	0020      	movs	r0, r4
    1580:	bc0c      	pop	{r2, r3}
    1582:	4690      	mov	r8, r2
    1584:	4699      	mov	r9, r3
    1586:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001588 <__libc_init_array>:
    1588:	b570      	push	{r4, r5, r6, lr}
    158a:	2600      	movs	r6, #0
    158c:	4d0c      	ldr	r5, [pc, #48]	; (15c0 <__libc_init_array+0x38>)
    158e:	4c0d      	ldr	r4, [pc, #52]	; (15c4 <__libc_init_array+0x3c>)
    1590:	1b64      	subs	r4, r4, r5
    1592:	10a4      	asrs	r4, r4, #2
    1594:	42a6      	cmp	r6, r4
    1596:	d109      	bne.n	15ac <__libc_init_array+0x24>
    1598:	2600      	movs	r6, #0
    159a:	f000 f825 	bl	15e8 <_init>
    159e:	4d0a      	ldr	r5, [pc, #40]	; (15c8 <__libc_init_array+0x40>)
    15a0:	4c0a      	ldr	r4, [pc, #40]	; (15cc <__libc_init_array+0x44>)
    15a2:	1b64      	subs	r4, r4, r5
    15a4:	10a4      	asrs	r4, r4, #2
    15a6:	42a6      	cmp	r6, r4
    15a8:	d105      	bne.n	15b6 <__libc_init_array+0x2e>
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	00b3      	lsls	r3, r6, #2
    15ae:	58eb      	ldr	r3, [r5, r3]
    15b0:	4798      	blx	r3
    15b2:	3601      	adds	r6, #1
    15b4:	e7ee      	b.n	1594 <__libc_init_array+0xc>
    15b6:	00b3      	lsls	r3, r6, #2
    15b8:	58eb      	ldr	r3, [r5, r3]
    15ba:	4798      	blx	r3
    15bc:	3601      	adds	r6, #1
    15be:	e7f2      	b.n	15a6 <__libc_init_array+0x1e>
    15c0:	000015f4 	.word	0x000015f4
    15c4:	000015f4 	.word	0x000015f4
    15c8:	000015f4 	.word	0x000015f4
    15cc:	000015f8 	.word	0x000015f8
    15d0:	42000800 	.word	0x42000800
    15d4:	42000c00 	.word	0x42000c00
    15d8:	42001000 	.word	0x42001000
    15dc:	42001400 	.word	0x42001400
    15e0:	42001800 	.word	0x42001800
    15e4:	42001c00 	.word	0x42001c00

000015e8 <_init>:
    15e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    15ee:	bc08      	pop	{r3}
    15f0:	469e      	mov	lr, r3
    15f2:	4770      	bx	lr

000015f4 <__init_array_start>:
    15f4:	000000dd 	.word	0x000000dd

000015f8 <_fini>:
    15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    15fe:	bc08      	pop	{r3}
    1600:	469e      	mov	lr, r3
    1602:	4770      	bx	lr

00001604 <__fini_array_start>:
    1604:	000000b5 	.word	0x000000b5
