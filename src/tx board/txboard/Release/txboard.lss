
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00003a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  2000000c  00003a24  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000c4  00003adc  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022779  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029f1  00000000  00000000  00042806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001fd0  00000000  00000000  000451f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000620  00000000  00000000  000471c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000530  00000000  00000000  000477e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004807  00000000  00000000  00047d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005bfc  00000000  00000000  0004c51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000013e0  00000000  00000000  0005211c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 f5 33 00 00 ed 34 00 00 ed 34 00 00     . . .3...4...4..
	...
      2c:	ed 34 00 00 00 00 00 00 00 00 00 00 ed 34 00 00     .4...........4..
      3c:	ed 34 00 00 ed 34 00 00 ed 34 00 00 ed 34 00 00     .4...4...4...4..
      4c:	ed 34 00 00 ed 34 00 00 ed 34 00 00 ed 34 00 00     .4...4...4...4..
      5c:	ed 34 00 00 ed 34 00 00 e1 27 00 00 f9 27 00 00     .4...4...'...'..
      6c:	11 28 00 00 29 28 00 00 41 28 00 00 59 28 00 00     .(..)(..A(..Y(..
      7c:	ed 34 00 00 ed 34 00 00 ed 34 00 00 ed 34 00 00     .4...4...4...4..
      8c:	ed 34 00 00 ed 34 00 00 ed 34 00 00 ed 34 00 00     .4...4...4...4..
      9c:	ed 34 00 00 ed 34 00 00 ed 34 00 00 ed 34 00 00     .4...4...4...4..
      ac:	ed 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00003a18 	.word	0x00003a18

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00003a18 	.word	0x00003a18
     10c:	00003a18 	.word	0x00003a18
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     210:	b580      	push	{r7, lr}
     212:	b082      	sub	sp, #8
     214:	af00      	add	r7, sp, #0
     216:	0002      	movs	r2, r0
     218:	1dfb      	adds	r3, r7, #7
     21a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     21c:	4b06      	ldr	r3, [pc, #24]	; (238 <system_interrupt_enable+0x28>)
     21e:	1dfa      	adds	r2, r7, #7
     220:	7812      	ldrb	r2, [r2, #0]
     222:	0011      	movs	r1, r2
     224:	221f      	movs	r2, #31
     226:	400a      	ands	r2, r1
     228:	2101      	movs	r1, #1
     22a:	4091      	lsls	r1, r2
     22c:	000a      	movs	r2, r1
     22e:	601a      	str	r2, [r3, #0]
}
     230:	46c0      	nop			; (mov r8, r8)
     232:	46bd      	mov	sp, r7
     234:	b002      	add	sp, #8
     236:	bd80      	pop	{r7, pc}
     238:	e000e100 	.word	0xe000e100

0000023c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     23c:	b580      	push	{r7, lr}
     23e:	b084      	sub	sp, #16
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     244:	687b      	ldr	r3, [r7, #4]
     246:	681b      	ldr	r3, [r3, #0]
     248:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     24a:	68fb      	ldr	r3, [r7, #12]
     24c:	69db      	ldr	r3, [r3, #28]
     24e:	1e5a      	subs	r2, r3, #1
     250:	4193      	sbcs	r3, r2
     252:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     254:	0018      	movs	r0, r3
     256:	46bd      	mov	sp, r7
     258:	b004      	add	sp, #16
     25a:	bd80      	pop	{r7, pc}

0000025c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2201      	movs	r2, #1
     268:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2200      	movs	r2, #0
     274:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     276:	687b      	ldr	r3, [r7, #4]
     278:	22c0      	movs	r2, #192	; 0xc0
     27a:	0392      	lsls	r2, r2, #14
     27c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2200      	movs	r2, #0
     282:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2201      	movs	r2, #1
     28e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2201      	movs	r2, #1
     294:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2224      	movs	r2, #36	; 0x24
     2a0:	2100      	movs	r1, #0
     2a2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	3318      	adds	r3, #24
     2a8:	220c      	movs	r2, #12
     2aa:	2100      	movs	r1, #0
     2ac:	0018      	movs	r0, r3
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <spi_get_config_defaults+0x7c>)
     2b0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     2b2:	687b      	ldr	r3, [r7, #4]
     2b4:	4a09      	ldr	r2, [pc, #36]	; (2dc <spi_get_config_defaults+0x80>)
     2b6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	2200      	movs	r2, #0
     2bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	2200      	movs	r2, #0
     2c2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	2200      	movs	r2, #0
     2c8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     2ca:	687b      	ldr	r3, [r7, #4]
     2cc:	2200      	movs	r2, #0
     2ce:	635a      	str	r2, [r3, #52]	; 0x34

};
     2d0:	46c0      	nop			; (mov r8, r8)
     2d2:	46bd      	mov	sp, r7
     2d4:	b002      	add	sp, #8
     2d6:	bd80      	pop	{r7, pc}
     2d8:	0000397d 	.word	0x0000397d
     2dc:	000186a0 	.word	0x000186a0

000002e0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
     2e6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	220a      	movs	r2, #10
     2ec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2200      	movs	r2, #0
     2f2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	2200      	movs	r2, #0
     2f8:	709a      	strb	r2, [r3, #2]
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	b002      	add	sp, #8
     300:	bd80      	pop	{r7, pc}
	...

00000304 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     304:	b580      	push	{r7, lr}
     306:	b084      	sub	sp, #16
     308:	af00      	add	r7, sp, #0
     30a:	6078      	str	r0, [r7, #4]
     30c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     30e:	683b      	ldr	r3, [r7, #0]
     310:	781a      	ldrb	r2, [r3, #0]
     312:	687b      	ldr	r3, [r7, #4]
     314:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     316:	683b      	ldr	r3, [r7, #0]
     318:	785a      	ldrb	r2, [r3, #1]
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     31e:	683b      	ldr	r3, [r7, #0]
     320:	789a      	ldrb	r2, [r3, #2]
     322:	687b      	ldr	r3, [r7, #4]
     324:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     326:	230c      	movs	r3, #12
     328:	18fb      	adds	r3, r7, r3
     32a:	0018      	movs	r0, r3
     32c:	4b0b      	ldr	r3, [pc, #44]	; (35c <spi_attach_slave+0x58>)
     32e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     330:	230c      	movs	r3, #12
     332:	18fb      	adds	r3, r7, r3
     334:	2201      	movs	r2, #1
     336:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     338:	687b      	ldr	r3, [r7, #4]
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	220c      	movs	r2, #12
     33e:	18ba      	adds	r2, r7, r2
     340:	0011      	movs	r1, r2
     342:	0018      	movs	r0, r3
     344:	4b06      	ldr	r3, [pc, #24]	; (360 <spi_attach_slave+0x5c>)
     346:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     348:	687b      	ldr	r3, [r7, #4]
     34a:	781b      	ldrb	r3, [r3, #0]
     34c:	2101      	movs	r1, #1
     34e:	0018      	movs	r0, r3
     350:	4b04      	ldr	r3, [pc, #16]	; (364 <spi_attach_slave+0x60>)
     352:	4798      	blx	r3
}
     354:	46c0      	nop			; (mov r8, r8)
     356:	46bd      	mov	sp, r7
     358:	b004      	add	sp, #16
     35a:	bd80      	pop	{r7, pc}
     35c:	00000199 	.word	0x00000199
     360:	00000e7d 	.word	0x00000e7d
     364:	000001bd 	.word	0x000001bd

00000368 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     370:	687b      	ldr	r3, [r7, #4]
     372:	681b      	ldr	r3, [r3, #0]
     374:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     376:	687b      	ldr	r3, [r7, #4]
     378:	681b      	ldr	r3, [r3, #0]
     37a:	0018      	movs	r0, r3
     37c:	4b0b      	ldr	r3, [pc, #44]	; (3ac <spi_enable+0x44>)
     37e:	4798      	blx	r3
     380:	0003      	movs	r3, r0
     382:	0018      	movs	r0, r3
     384:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <spi_enable+0x48>)
     386:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     388:	46c0      	nop			; (mov r8, r8)
     38a:	687b      	ldr	r3, [r7, #4]
     38c:	0018      	movs	r0, r3
     38e:	4b09      	ldr	r3, [pc, #36]	; (3b4 <spi_enable+0x4c>)
     390:	4798      	blx	r3
     392:	1e03      	subs	r3, r0, #0
     394:	d1f9      	bne.n	38a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     396:	68fb      	ldr	r3, [r7, #12]
     398:	681b      	ldr	r3, [r3, #0]
     39a:	2202      	movs	r2, #2
     39c:	431a      	orrs	r2, r3
     39e:	68fb      	ldr	r3, [r7, #12]
     3a0:	601a      	str	r2, [r3, #0]
}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	46bd      	mov	sp, r7
     3a6:	b004      	add	sp, #16
     3a8:	bd80      	pop	{r7, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	0000279d 	.word	0x0000279d
     3b0:	00000211 	.word	0x00000211
     3b4:	0000023d 	.word	0x0000023d

000003b8 <spi169_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 169 MHz module
 */
void spi169_init(void)
{
     3b8:	b580      	push	{r7, lr}
     3ba:	b090      	sub	sp, #64	; 0x40
     3bc:	af00      	add	r7, sp, #0
	if (spi169InitComp == true)
     3be:	4b24      	ldr	r3, [pc, #144]	; (450 <spi169_init+0x98>)
     3c0:	781b      	ldrb	r3, [r3, #0]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d13f      	bne.n	446 <spi169_init+0x8e>
	struct spi_config spi169MasterConf;
	struct spi_slave_inst_config spi169SlaveConf;
	struct port_config pinConf;
	
	// get default configs for slave
	spi_slave_inst_get_config_defaults(&spi169SlaveConf);
     3c6:	1d3b      	adds	r3, r7, #4
     3c8:	0018      	movs	r0, r3
     3ca:	4b22      	ldr	r3, [pc, #136]	; (454 <spi169_init+0x9c>)
     3cc:	4798      	blx	r3
	// change configs as necessary
	spi169SlaveConf.ss_pin = SS169;
     3ce:	1d3b      	adds	r3, r7, #4
     3d0:	2211      	movs	r2, #17
     3d2:	701a      	strb	r2, [r3, #0]
	// attach the slave configs to the slave
	spi_attach_slave(&spi169Slave, &spi169SlaveConf);
     3d4:	1d3a      	adds	r2, r7, #4
     3d6:	4b20      	ldr	r3, [pc, #128]	; (458 <spi169_init+0xa0>)
     3d8:	0011      	movs	r1, r2
     3da:	0018      	movs	r0, r3
     3dc:	4b1f      	ldr	r3, [pc, #124]	; (45c <spi169_init+0xa4>)
     3de:	4798      	blx	r3
		
    // initialize the slave select pin
//	port_get_config_defaults(&pinConf);
    
    // get defaults for master config
	spi_get_config_defaults(&spi169MasterConf);
     3e0:	2308      	movs	r3, #8
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	0018      	movs	r0, r3
     3e6:	4b1e      	ldr	r3, [pc, #120]	; (460 <spi169_init+0xa8>)
     3e8:	4798      	blx	r3
    
    spi169MasterConf.mux_setting = SPI169_PINXMUX;
     3ea:	2308      	movs	r3, #8
     3ec:	18fb      	adds	r3, r7, r3
     3ee:	228c      	movs	r2, #140	; 0x8c
     3f0:	0392      	lsls	r2, r2, #14
     3f2:	60da      	str	r2, [r3, #12]
    spi169MasterConf.pinmux_pad0 = MOSI169;
     3f4:	2308      	movs	r3, #8
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	4a1a      	ldr	r2, [pc, #104]	; (464 <spi169_init+0xac>)
     3fa:	629a      	str	r2, [r3, #40]	; 0x28
    spi169MasterConf.pinmux_pad1 = PINMUX_UNUSED;
     3fc:	2308      	movs	r3, #8
     3fe:	18fb      	adds	r3, r7, r3
     400:	2201      	movs	r2, #1
     402:	4252      	negs	r2, r2
     404:	62da      	str	r2, [r3, #44]	; 0x2c
    spi169MasterConf.pinmux_pad2 = MISO169;
     406:	2308      	movs	r3, #8
     408:	18fb      	adds	r3, r7, r3
     40a:	4a17      	ldr	r2, [pc, #92]	; (468 <spi169_init+0xb0>)
     40c:	631a      	str	r2, [r3, #48]	; 0x30
    spi169MasterConf.pinmux_pad3 = SCK169;
     40e:	2308      	movs	r3, #8
     410:	18fb      	adds	r3, r7, r3
     412:	4a16      	ldr	r2, [pc, #88]	; (46c <spi169_init+0xb4>)
     414:	635a      	str	r2, [r3, #52]	; 0x34
	
	// clock source should always be GLCK0
	spi169MasterConf.generator_source = SPI169_CLK;
     416:	2308      	movs	r3, #8
     418:	18fb      	adds	r3, r7, r3
     41a:	2224      	movs	r2, #36	; 0x24
     41c:	2100      	movs	r1, #0
     41e:	5499      	strb	r1, [r3, r2]
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;
     420:	2308      	movs	r3, #8
     422:	18fb      	adds	r3, r7, r3
     424:	4a12      	ldr	r2, [pc, #72]	; (470 <spi169_init+0xb8>)
     426:	619a      	str	r2, [r3, #24]

	// enable the master
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     428:	2308      	movs	r3, #8
     42a:	18fa      	adds	r2, r7, r3
     42c:	4911      	ldr	r1, [pc, #68]	; (474 <spi169_init+0xbc>)
     42e:	4b12      	ldr	r3, [pc, #72]	; (478 <spi169_init+0xc0>)
     430:	0018      	movs	r0, r3
     432:	4b12      	ldr	r3, [pc, #72]	; (47c <spi169_init+0xc4>)
     434:	4798      	blx	r3
	spi_enable(&spi169Master);
     436:	4b10      	ldr	r3, [pc, #64]	; (478 <spi169_init+0xc0>)
     438:	0018      	movs	r0, r3
     43a:	4b11      	ldr	r3, [pc, #68]	; (480 <spi169_init+0xc8>)
     43c:	4798      	blx	r3


    
    spi169InitComp = true;
     43e:	4b04      	ldr	r3, [pc, #16]	; (450 <spi169_init+0x98>)
     440:	2201      	movs	r2, #1
     442:	701a      	strb	r2, [r3, #0]
     444:	e000      	b.n	448 <spi169_init+0x90>
		return;
     446:	46c0      	nop			; (mov r8, r8)
}
     448:	46bd      	mov	sp, r7
     44a:	b010      	add	sp, #64	; 0x40
     44c:	bd80      	pop	{r7, pc}
     44e:	46c0      	nop			; (mov r8, r8)
     450:	20000028 	.word	0x20000028
     454:	000002e1 	.word	0x000002e1
     458:	200000a4 	.word	0x200000a4
     45c:	00000305 	.word	0x00000305
     460:	0000025d 	.word	0x0000025d
     464:	00100002 	.word	0x00100002
     468:	00120002 	.word	0x00120002
     46c:	00130002 	.word	0x00130002
     470:	000f4240 	.word	0x000f4240
     474:	42000c00 	.word	0x42000c00
     478:	20000068 	.word	0x20000068
     47c:	00001751 	.word	0x00001751
     480:	00000369 	.word	0x00000369

00000484 <spi169_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 169 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi169_start_xfer(spiAddr169 paramAddr, xferDir169 dir)
{
     484:	b5b0      	push	{r4, r5, r7, lr}
     486:	b084      	sub	sp, #16
     488:	af00      	add	r7, sp, #0
     48a:	0002      	movs	r2, r0
     48c:	1dbb      	adds	r3, r7, #6
     48e:	801a      	strh	r2, [r3, #0]
     490:	1d7b      	adds	r3, r7, #5
     492:	1c0a      	adds	r2, r1, #0
     494:	701a      	strb	r2, [r3, #0]
    
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
     496:	1dbb      	adds	r3, r7, #6
     498:	881b      	ldrh	r3, [r3, #0]
     49a:	4a1f      	ldr	r2, [pc, #124]	; (518 <spi169_start_xfer+0x94>)
     49c:	4313      	orrs	r3, r2
     49e:	b29a      	uxth	r2, r3
     4a0:	1dbb      	adds	r3, r7, #6
     4a2:	801a      	strh	r2, [r3, #0]
    
    if(dir == READ)
     4a4:	1d7b      	adds	r3, r7, #5
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	2b00      	cmp	r3, #0
     4aa:	d106      	bne.n	4ba <spi169_start_xfer+0x36>
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     4ac:	1dbb      	adds	r3, r7, #6
     4ae:	881b      	ldrh	r3, [r3, #0]
     4b0:	045b      	lsls	r3, r3, #17
     4b2:	0c5b      	lsrs	r3, r3, #17
     4b4:	b29a      	uxth	r2, r3
     4b6:	1dbb      	adds	r3, r7, #6
     4b8:	801a      	strh	r2, [r3, #0]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     4ba:	1dbb      	adds	r3, r7, #6
     4bc:	881b      	ldrh	r3, [r3, #0]
     4be:	0a1b      	lsrs	r3, r3, #8
     4c0:	b29b      	uxth	r3, r3
     4c2:	b21a      	sxth	r2, r3
     4c4:	1dbb      	adds	r3, r7, #6
     4c6:	881b      	ldrh	r3, [r3, #0]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	b21b      	sxth	r3, r3
     4cc:	4313      	orrs	r3, r2
     4ce:	b21b      	sxth	r3, r3
     4d0:	b29a      	uxth	r2, r3
     4d2:	1dbb      	adds	r3, r7, #6
     4d4:	801a      	strh	r2, [r3, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi169Master, &spi169Slave, true);
     4d6:	230f      	movs	r3, #15
     4d8:	18fc      	adds	r4, r7, r3
     4da:	4910      	ldr	r1, [pc, #64]	; (51c <spi169_start_xfer+0x98>)
     4dc:	4b10      	ldr	r3, [pc, #64]	; (520 <spi169_start_xfer+0x9c>)
     4de:	2201      	movs	r2, #1
     4e0:	0018      	movs	r0, r3
     4e2:	4b10      	ldr	r3, [pc, #64]	; (524 <spi169_start_xfer+0xa0>)
     4e4:	4798      	blx	r3
     4e6:	0003      	movs	r3, r0
     4e8:	7023      	strb	r3, [r4, #0]
    }while(read_status == STATUS_BUSY);
     4ea:	230f      	movs	r3, #15
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	2b05      	cmp	r3, #5
     4f2:	d0f0      	beq.n	4d6 <spi169_start_xfer+0x52>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi169Master, (uint8_t*) &paramAddr, 
     4f4:	230f      	movs	r3, #15
     4f6:	18fc      	adds	r4, r7, r3
     4f8:	4a0b      	ldr	r2, [pc, #44]	; (528 <spi169_start_xfer+0xa4>)
     4fa:	1db9      	adds	r1, r7, #6
     4fc:	4808      	ldr	r0, [pc, #32]	; (520 <spi169_start_xfer+0x9c>)
     4fe:	2302      	movs	r3, #2
     500:	4d0a      	ldr	r5, [pc, #40]	; (52c <spi169_start_xfer+0xa8>)
     502:	47a8      	blx	r5
     504:	0003      	movs	r3, r0
     506:	7023      	strb	r3, [r4, #0]
                    (uint8_t*) &spi169_status_bits, 2);
    
    return read_status;
     508:	230f      	movs	r3, #15
     50a:	18fb      	adds	r3, r7, r3
     50c:	781b      	ldrb	r3, [r3, #0]
}
     50e:	0018      	movs	r0, r3
     510:	46bd      	mov	sp, r7
     512:	b004      	add	sp, #16
     514:	bdb0      	pop	{r4, r5, r7, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	fffff000 	.word	0xfffff000
     51c:	200000a4 	.word	0x200000a4
     520:	20000068 	.word	0x20000068
     524:	00001ab1 	.word	0x00001ab1
     528:	2000002a 	.word	0x2000002a
     52c:	00001ec5 	.word	0x00001ec5

00000530 <spi169_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi169_stop_xfer(void)
{
     530:	b580      	push	{r7, lr}
     532:	af00      	add	r7, sp, #0
    // deselect slave
    return spi_select_slave(&spi169Master, &spi169Slave, false);
     534:	4904      	ldr	r1, [pc, #16]	; (548 <spi169_stop_xfer+0x18>)
     536:	4b05      	ldr	r3, [pc, #20]	; (54c <spi169_stop_xfer+0x1c>)
     538:	2200      	movs	r2, #0
     53a:	0018      	movs	r0, r3
     53c:	4b04      	ldr	r3, [pc, #16]	; (550 <spi169_stop_xfer+0x20>)
     53e:	4798      	blx	r3
     540:	0003      	movs	r3, r0
}
     542:	0018      	movs	r0, r3
     544:	46bd      	mov	sp, r7
     546:	bd80      	pop	{r7, pc}
     548:	200000a4 	.word	0x200000a4
     54c:	20000068 	.word	0x20000068
     550:	00001ab1 	.word	0x00001ab1

00000554 <spi169_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     554:	b5b0      	push	{r4, r5, r7, lr}
     556:	b084      	sub	sp, #16
     558:	af00      	add	r7, sp, #0
     55a:	6078      	str	r0, [r7, #4]
     55c:	000a      	movs	r2, r1
     55e:	1cbb      	adds	r3, r7, #2
     560:	801a      	strh	r2, [r3, #0]
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi169Master, \
     562:	230f      	movs	r3, #15
     564:	18fc      	adds	r4, r7, r3
     566:	1cbb      	adds	r3, r7, #2
     568:	881a      	ldrh	r2, [r3, #0]
     56a:	6879      	ldr	r1, [r7, #4]
     56c:	4806      	ldr	r0, [pc, #24]	; (588 <spi169_read+0x34>)
     56e:	2300      	movs	r3, #0
     570:	4d06      	ldr	r5, [pc, #24]	; (58c <spi169_read+0x38>)
     572:	47a8      	blx	r5
     574:	0003      	movs	r3, r0
     576:	7023      	strb	r3, [r4, #0]
                    read_buff, amount_bytes, 0x0000);
    
    return read_status;
     578:	230f      	movs	r3, #15
     57a:	18fb      	adds	r3, r7, r3
     57c:	781b      	ldrb	r3, [r3, #0]
}
     57e:	0018      	movs	r0, r3
     580:	46bd      	mov	sp, r7
     582:	b004      	add	sp, #16
     584:	bdb0      	pop	{r4, r5, r7, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	20000068 	.word	0x20000068
     58c:	000018f5 	.word	0x000018f5

00000590 <spi169_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 169 MHz module at read_addr.
 */
uint8_t spi169_rd8(spiAddr169 read_addr)
{
     590:	b580      	push	{r7, lr}
     592:	b084      	sub	sp, #16
     594:	af00      	add	r7, sp, #0
     596:	0002      	movs	r2, r0
     598:	1dbb      	adds	r3, r7, #6
     59a:	801a      	strh	r2, [r3, #0]
    uint8_t read_byte = 0;
     59c:	230f      	movs	r3, #15
     59e:	18fb      	adds	r3, r7, r3
     5a0:	2200      	movs	r2, #0
     5a2:	701a      	strb	r2, [r3, #0]
    
    spi169_start_xfer(read_addr, READ);
     5a4:	1dbb      	adds	r3, r7, #6
     5a6:	881b      	ldrh	r3, [r3, #0]
     5a8:	2100      	movs	r1, #0
     5aa:	0018      	movs	r0, r3
     5ac:	4b08      	ldr	r3, [pc, #32]	; (5d0 <spi169_rd8+0x40>)
     5ae:	4798      	blx	r3
    
    // read one byte
    spi169_read(&read_byte, 1);
     5b0:	230f      	movs	r3, #15
     5b2:	18fb      	adds	r3, r7, r3
     5b4:	2101      	movs	r1, #1
     5b6:	0018      	movs	r0, r3
     5b8:	4b06      	ldr	r3, [pc, #24]	; (5d4 <spi169_rd8+0x44>)
     5ba:	4798      	blx	r3
    
    spi169_stop_xfer();
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <spi169_rd8+0x48>)
     5be:	4798      	blx	r3
    
    return read_byte;
     5c0:	230f      	movs	r3, #15
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	781b      	ldrb	r3, [r3, #0]
}
     5c6:	0018      	movs	r0, r3
     5c8:	46bd      	mov	sp, r7
     5ca:	b004      	add	sp, #16
     5cc:	bd80      	pop	{r7, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	00000485 	.word	0x00000485
     5d4:	00000555 	.word	0x00000555
     5d8:	00000531 	.word	0x00000531

000005dc <spi169_write>:
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 169 MHz module. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_write(uint8_t* wrt_buff, \
    uint16_t amount_bytes)
{
     5dc:	b590      	push	{r4, r7, lr}
     5de:	b085      	sub	sp, #20
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
     5e4:	000a      	movs	r2, r1
     5e6:	1cbb      	adds	r3, r7, #2
     5e8:	801a      	strh	r2, [r3, #0]
    status_code_genare_t wrt_status;
    
    // write to the LCD
    wrt_status = spi_write_buffer_wait(&spi169Master, \
     5ea:	230f      	movs	r3, #15
     5ec:	18fc      	adds	r4, r7, r3
     5ee:	1cbb      	adds	r3, r7, #2
     5f0:	881a      	ldrh	r2, [r3, #0]
     5f2:	6879      	ldr	r1, [r7, #4]
     5f4:	4b06      	ldr	r3, [pc, #24]	; (610 <spi169_write+0x34>)
     5f6:	0018      	movs	r0, r3
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <spi169_write+0x38>)
     5fa:	4798      	blx	r3
     5fc:	0003      	movs	r3, r0
     5fe:	7023      	strb	r3, [r4, #0]
                        wrt_buff, amount_bytes);
    
    return wrt_status;
     600:	230f      	movs	r3, #15
     602:	18fb      	adds	r3, r7, r3
     604:	781b      	ldrb	r3, [r3, #0]
}
     606:	0018      	movs	r0, r3
     608:	46bd      	mov	sp, r7
     60a:	b005      	add	sp, #20
     60c:	bd90      	pop	{r4, r7, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	20000068 	.word	0x20000068
     614:	00001ba1 	.word	0x00001ba1

00000618 <spi169_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 169 MHz module at wrt_addr.
 */
status_code_genare_t spi169_wr8(spiAddr169 wrt_addr, uint8_t wrt_byte)
{
     618:	b590      	push	{r4, r7, lr}
     61a:	b085      	sub	sp, #20
     61c:	af00      	add	r7, sp, #0
     61e:	0002      	movs	r2, r0
     620:	1dbb      	adds	r3, r7, #6
     622:	801a      	strh	r2, [r3, #0]
     624:	1d7b      	adds	r3, r7, #5
     626:	1c0a      	adds	r2, r1, #0
     628:	701a      	strb	r2, [r3, #0]
    status_code_genare_t status_result;
    
    spi169_start_xfer(wrt_addr, WRT);
     62a:	1dbb      	adds	r3, r7, #6
     62c:	881b      	ldrh	r3, [r3, #0]
     62e:	2101      	movs	r1, #1
     630:	0018      	movs	r0, r3
     632:	4b0a      	ldr	r3, [pc, #40]	; (65c <spi169_wr8+0x44>)
     634:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi169_write(&wrt_byte, 1);
     636:	230f      	movs	r3, #15
     638:	18fc      	adds	r4, r7, r3
     63a:	1d7b      	adds	r3, r7, #5
     63c:	2101      	movs	r1, #1
     63e:	0018      	movs	r0, r3
     640:	4b07      	ldr	r3, [pc, #28]	; (660 <spi169_wr8+0x48>)
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	7023      	strb	r3, [r4, #0]
    
    spi169_stop_xfer();
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <spi169_wr8+0x4c>)
     64a:	4798      	blx	r3
    
    return status_result;
     64c:	230f      	movs	r3, #15
     64e:	18fb      	adds	r3, r7, r3
     650:	781b      	ldrb	r3, [r3, #0]
}
     652:	0018      	movs	r0, r3
     654:	46bd      	mov	sp, r7
     656:	b005      	add	sp, #20
     658:	bd90      	pop	{r4, r7, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00000485 	.word	0x00000485
     660:	000005dd 	.word	0x000005dd
     664:	00000531 	.word	0x00000531

00000668 <spi169_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi169_autorange(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_PLLRANGINGA, 0xFF);
     66c:	21ff      	movs	r1, #255	; 0xff
     66e:	2033      	movs	r0, #51	; 0x33
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <spi169_autorange+0x24>)
     672:	4798      	blx	r3
    
    while(spi169_rd8(AX5043_PLLRANGINGA) & 0x10);   
     674:	46c0      	nop			; (mov r8, r8)
     676:	2033      	movs	r0, #51	; 0x33
     678:	4b05      	ldr	r3, [pc, #20]	; (690 <spi169_autorange+0x28>)
     67a:	4798      	blx	r3
     67c:	0003      	movs	r3, r0
     67e:	001a      	movs	r2, r3
     680:	2310      	movs	r3, #16
     682:	4013      	ands	r3, r2
     684:	d1f7      	bne.n	676 <spi169_autorange+0xe>
    
}
     686:	46c0      	nop			; (mov r8, r8)
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	00000619 	.word	0x00000619
     690:	00000591 	.word	0x00000591

00000694 <spi169_tx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 169 MHz module for transmitting.
 */
void spi169_tx_init(void)
{
     694:	b580      	push	{r7, lr}
     696:	af00      	add	r7, sp, #0
    // set 169 MHz module to standby power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     698:	2165      	movs	r1, #101	; 0x65
     69a:	2002      	movs	r0, #2
     69c:	4bfd      	ldr	r3, [pc, #1012]	; (a94 <spi169_tx_init+0x400>)
     69e:	4798      	blx	r3
    delay_ms(100);
     6a0:	2064      	movs	r0, #100	; 0x64
     6a2:	4bfd      	ldr	r3, [pc, #1012]	; (a98 <spi169_tx_init+0x404>)
     6a4:	4798      	blx	r3
    
    // register settings generated by Radiolab software
    spi169_wr8(AX5043_MODULATION, 0x08);
     6a6:	2108      	movs	r1, #8
     6a8:	2010      	movs	r0, #16
     6aa:	4bfa      	ldr	r3, [pc, #1000]	; (a94 <spi169_tx_init+0x400>)
     6ac:	4798      	blx	r3
    spi169_wr8(AX5043_ENCODING, 0x00);
     6ae:	2100      	movs	r1, #0
     6b0:	2011      	movs	r0, #17
     6b2:	4bf8      	ldr	r3, [pc, #992]	; (a94 <spi169_tx_init+0x400>)
     6b4:	4798      	blx	r3
    spi169_wr8(AX5043_FRAMING, 0x06);
     6b6:	2106      	movs	r1, #6
     6b8:	2012      	movs	r0, #18
     6ba:	4bf6      	ldr	r3, [pc, #984]	; (a94 <spi169_tx_init+0x400>)
     6bc:	4798      	blx	r3
    spi169_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     6be:	2102      	movs	r1, #2
     6c0:	2021      	movs	r0, #33	; 0x21
     6c2:	4bf4      	ldr	r3, [pc, #976]	; (a94 <spi169_tx_init+0x400>)
     6c4:	4798      	blx	r3
    spi169_wr8(AX5043_PINFUNCDCLK, 0x02);
     6c6:	2102      	movs	r1, #2
     6c8:	2022      	movs	r0, #34	; 0x22
     6ca:	4bf2      	ldr	r3, [pc, #968]	; (a94 <spi169_tx_init+0x400>)
     6cc:	4798      	blx	r3
    spi169_wr8(AX5043_PINFUNCDATA, 0x02);
     6ce:	2102      	movs	r1, #2
     6d0:	2023      	movs	r0, #35	; 0x23
     6d2:	4bf0      	ldr	r3, [pc, #960]	; (a94 <spi169_tx_init+0x400>)
     6d4:	4798      	blx	r3
    spi169_wr8(AX5043_PINFUNCANTSEL, 0x02);
     6d6:	2102      	movs	r1, #2
     6d8:	2025      	movs	r0, #37	; 0x25
     6da:	4bee      	ldr	r3, [pc, #952]	; (a94 <spi169_tx_init+0x400>)
     6dc:	4798      	blx	r3
    spi169_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     6de:	2102      	movs	r1, #2
     6e0:	2026      	movs	r0, #38	; 0x26
     6e2:	4bec      	ldr	r3, [pc, #944]	; (a94 <spi169_tx_init+0x400>)
     6e4:	4798      	blx	r3
    spi169_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     6e6:	2101      	movs	r1, #1
     6e8:	206e      	movs	r0, #110	; 0x6e
     6ea:	4bea      	ldr	r3, [pc, #936]	; (a94 <spi169_tx_init+0x400>)
     6ec:	4798      	blx	r3
    spi169_wr8(AX5043_IFFREQ1, 0x06);
     6ee:	2380      	movs	r3, #128	; 0x80
     6f0:	005b      	lsls	r3, r3, #1
     6f2:	2106      	movs	r1, #6
     6f4:	0018      	movs	r0, r3
     6f6:	4be7      	ldr	r3, [pc, #924]	; (a94 <spi169_tx_init+0x400>)
     6f8:	4798      	blx	r3
    spi169_wr8(AX5043_IFFREQ0, 0x66);
     6fa:	2302      	movs	r3, #2
     6fc:	33ff      	adds	r3, #255	; 0xff
     6fe:	2166      	movs	r1, #102	; 0x66
     700:	0018      	movs	r0, r3
     702:	4be4      	ldr	r3, [pc, #912]	; (a94 <spi169_tx_init+0x400>)
     704:	4798      	blx	r3
    spi169_wr8(AX5043_DECIMATION, 0x05);
     706:	2381      	movs	r3, #129	; 0x81
     708:	005b      	lsls	r3, r3, #1
     70a:	2105      	movs	r1, #5
     70c:	0018      	movs	r0, r3
     70e:	4be1      	ldr	r3, [pc, #900]	; (a94 <spi169_tx_init+0x400>)
     710:	4798      	blx	r3
    spi169_wr8(AX5043_RXDATARATE2, 0x05);
     712:	2304      	movs	r3, #4
     714:	33ff      	adds	r3, #255	; 0xff
     716:	2105      	movs	r1, #5
     718:	0018      	movs	r0, r3
     71a:	4bde      	ldr	r3, [pc, #888]	; (a94 <spi169_tx_init+0x400>)
     71c:	4798      	blx	r3
    spi169_wr8(AX5043_RXDATARATE1, 0x35);
     71e:	2382      	movs	r3, #130	; 0x82
     720:	005b      	lsls	r3, r3, #1
     722:	2135      	movs	r1, #53	; 0x35
     724:	0018      	movs	r0, r3
     726:	4bdb      	ldr	r3, [pc, #876]	; (a94 <spi169_tx_init+0x400>)
     728:	4798      	blx	r3
    spi169_wr8(AX5043_RXDATARATE0, 0x55);
     72a:	2306      	movs	r3, #6
     72c:	33ff      	adds	r3, #255	; 0xff
     72e:	2155      	movs	r1, #85	; 0x55
     730:	0018      	movs	r0, r3
     732:	4bd8      	ldr	r3, [pc, #864]	; (a94 <spi169_tx_init+0x400>)
     734:	4798      	blx	r3
    spi169_wr8(AX5043_MAXDROFFSET2, 0x00);
     736:	2383      	movs	r3, #131	; 0x83
     738:	005b      	lsls	r3, r3, #1
     73a:	2100      	movs	r1, #0
     73c:	0018      	movs	r0, r3
     73e:	4bd5      	ldr	r3, [pc, #852]	; (a94 <spi169_tx_init+0x400>)
     740:	4798      	blx	r3
    spi169_wr8(AX5043_MAXDROFFSET1, 0x00);
     742:	2308      	movs	r3, #8
     744:	33ff      	adds	r3, #255	; 0xff
     746:	2100      	movs	r1, #0
     748:	0018      	movs	r0, r3
     74a:	4bd2      	ldr	r3, [pc, #840]	; (a94 <spi169_tx_init+0x400>)
     74c:	4798      	blx	r3
    spi169_wr8(AX5043_MAXDROFFSET0, 0x00);
     74e:	2384      	movs	r3, #132	; 0x84
     750:	005b      	lsls	r3, r3, #1
     752:	2100      	movs	r1, #0
     754:	0018      	movs	r0, r3
     756:	4bcf      	ldr	r3, [pc, #828]	; (a94 <spi169_tx_init+0x400>)
     758:	4798      	blx	r3
    spi169_wr8(AX5043_MAXRFOFFSET2, 0x80);
     75a:	230a      	movs	r3, #10
     75c:	33ff      	adds	r3, #255	; 0xff
     75e:	2180      	movs	r1, #128	; 0x80
     760:	0018      	movs	r0, r3
     762:	4bcc      	ldr	r3, [pc, #816]	; (a94 <spi169_tx_init+0x400>)
     764:	4798      	blx	r3
    spi169_wr8(AX5043_MAXRFOFFSET1, 0x29);
     766:	2385      	movs	r3, #133	; 0x85
     768:	005b      	lsls	r3, r3, #1
     76a:	2129      	movs	r1, #41	; 0x29
     76c:	0018      	movs	r0, r3
     76e:	4bc9      	ldr	r3, [pc, #804]	; (a94 <spi169_tx_init+0x400>)
     770:	4798      	blx	r3
    spi169_wr8(AX5043_MAXRFOFFSET0, 0x89);
     772:	230c      	movs	r3, #12
     774:	33ff      	adds	r3, #255	; 0xff
     776:	2189      	movs	r1, #137	; 0x89
     778:	0018      	movs	r0, r3
     77a:	4bc6      	ldr	r3, [pc, #792]	; (a94 <spi169_tx_init+0x400>)
     77c:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDMAX1, 0x22);
     77e:	2386      	movs	r3, #134	; 0x86
     780:	005b      	lsls	r3, r3, #1
     782:	2122      	movs	r1, #34	; 0x22
     784:	0018      	movs	r0, r3
     786:	4bc3      	ldr	r3, [pc, #780]	; (a94 <spi169_tx_init+0x400>)
     788:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDMAX0, 0xC0);
     78a:	230e      	movs	r3, #14
     78c:	33ff      	adds	r3, #255	; 0xff
     78e:	21c0      	movs	r1, #192	; 0xc0
     790:	0018      	movs	r0, r3
     792:	4bc0      	ldr	r3, [pc, #768]	; (a94 <spi169_tx_init+0x400>)
     794:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDMIN1, 0xDD);
     796:	2387      	movs	r3, #135	; 0x87
     798:	005b      	lsls	r3, r3, #1
     79a:	21dd      	movs	r1, #221	; 0xdd
     79c:	0018      	movs	r0, r3
     79e:	4bbd      	ldr	r3, [pc, #756]	; (a94 <spi169_tx_init+0x400>)
     7a0:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDMIN0, 0x40);
     7a2:	2310      	movs	r3, #16
     7a4:	33ff      	adds	r3, #255	; 0xff
     7a6:	2140      	movs	r1, #64	; 0x40
     7a8:	0018      	movs	r0, r3
     7aa:	4bba      	ldr	r3, [pc, #744]	; (a94 <spi169_tx_init+0x400>)
     7ac:	4798      	blx	r3
    spi169_wr8(AX5043_AMPLFILTER, 0x00);
     7ae:	2316      	movs	r3, #22
     7b0:	33ff      	adds	r3, #255	; 0xff
     7b2:	2100      	movs	r1, #0
     7b4:	0018      	movs	r0, r3
     7b6:	4bb7      	ldr	r3, [pc, #732]	; (a94 <spi169_tx_init+0x400>)
     7b8:	4798      	blx	r3
    spi169_wr8(AX5043_RXPARAMSETS, 0xF4);
     7ba:	2318      	movs	r3, #24
     7bc:	33ff      	adds	r3, #255	; 0xff
     7be:	21f4      	movs	r1, #244	; 0xf4
     7c0:	0018      	movs	r0, r3
     7c2:	4bb4      	ldr	r3, [pc, #720]	; (a94 <spi169_tx_init+0x400>)
     7c4:	4798      	blx	r3
    spi169_wr8(AX5043_AGCGAIN0, 0xE8);
     7c6:	2390      	movs	r3, #144	; 0x90
     7c8:	005b      	lsls	r3, r3, #1
     7ca:	21e8      	movs	r1, #232	; 0xe8
     7cc:	0018      	movs	r0, r3
     7ce:	4bb1      	ldr	r3, [pc, #708]	; (a94 <spi169_tx_init+0x400>)
     7d0:	4798      	blx	r3
    spi169_wr8(AX5043_AGCTARGET0, 0x84);
     7d2:	2322      	movs	r3, #34	; 0x22
     7d4:	33ff      	adds	r3, #255	; 0xff
     7d6:	2184      	movs	r1, #132	; 0x84
     7d8:	0018      	movs	r0, r3
     7da:	4bae      	ldr	r3, [pc, #696]	; (a94 <spi169_tx_init+0x400>)
     7dc:	4798      	blx	r3
    spi169_wr8(AX5043_TIMEGAIN0, 0xAD);
     7de:	2392      	movs	r3, #146	; 0x92
     7e0:	005b      	lsls	r3, r3, #1
     7e2:	21ad      	movs	r1, #173	; 0xad
     7e4:	0018      	movs	r0, r3
     7e6:	4bab      	ldr	r3, [pc, #684]	; (a94 <spi169_tx_init+0x400>)
     7e8:	4798      	blx	r3
    spi169_wr8(AX5043_DRGAIN0, 0xA7);
     7ea:	2326      	movs	r3, #38	; 0x26
     7ec:	33ff      	adds	r3, #255	; 0xff
     7ee:	21a7      	movs	r1, #167	; 0xa7
     7f0:	0018      	movs	r0, r3
     7f2:	4ba8      	ldr	r3, [pc, #672]	; (a94 <spi169_tx_init+0x400>)
     7f4:	4798      	blx	r3
    spi169_wr8(AX5043_PHASEGAIN0, 0xC3);
     7f6:	2393      	movs	r3, #147	; 0x93
     7f8:	005b      	lsls	r3, r3, #1
     7fa:	21c3      	movs	r1, #195	; 0xc3
     7fc:	0018      	movs	r0, r3
     7fe:	4ba5      	ldr	r3, [pc, #660]	; (a94 <spi169_tx_init+0x400>)
     800:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINA0, 0x0F);
     802:	2328      	movs	r3, #40	; 0x28
     804:	33ff      	adds	r3, #255	; 0xff
     806:	210f      	movs	r1, #15
     808:	0018      	movs	r0, r3
     80a:	4ba2      	ldr	r3, [pc, #648]	; (a94 <spi169_tx_init+0x400>)
     80c:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINB0, 0x1F);
     80e:	2394      	movs	r3, #148	; 0x94
     810:	005b      	lsls	r3, r3, #1
     812:	211f      	movs	r1, #31
     814:	0018      	movs	r0, r3
     816:	4b9f      	ldr	r3, [pc, #636]	; (a94 <spi169_tx_init+0x400>)
     818:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINC0, 0x0A);
     81a:	232a      	movs	r3, #42	; 0x2a
     81c:	33ff      	adds	r3, #255	; 0xff
     81e:	210a      	movs	r1, #10
     820:	0018      	movs	r0, r3
     822:	4b9c      	ldr	r3, [pc, #624]	; (a94 <spi169_tx_init+0x400>)
     824:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAIND0, 0x0A);
     826:	2395      	movs	r3, #149	; 0x95
     828:	005b      	lsls	r3, r3, #1
     82a:	210a      	movs	r1, #10
     82c:	0018      	movs	r0, r3
     82e:	4b99      	ldr	r3, [pc, #612]	; (a94 <spi169_tx_init+0x400>)
     830:	4798      	blx	r3
    spi169_wr8(AX5043_AMPLGAIN0, 0x06);
     832:	232c      	movs	r3, #44	; 0x2c
     834:	33ff      	adds	r3, #255	; 0xff
     836:	2106      	movs	r1, #6
     838:	0018      	movs	r0, r3
     83a:	4b96      	ldr	r3, [pc, #600]	; (a94 <spi169_tx_init+0x400>)
     83c:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV10, 0x00);
     83e:	2396      	movs	r3, #150	; 0x96
     840:	005b      	lsls	r3, r3, #1
     842:	2100      	movs	r1, #0
     844:	0018      	movs	r0, r3
     846:	4b93      	ldr	r3, [pc, #588]	; (a94 <spi169_tx_init+0x400>)
     848:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV00, 0x00);
     84a:	232e      	movs	r3, #46	; 0x2e
     84c:	33ff      	adds	r3, #255	; 0xff
     84e:	2100      	movs	r1, #0
     850:	0018      	movs	r0, r3
     852:	4b90      	ldr	r3, [pc, #576]	; (a94 <spi169_tx_init+0x400>)
     854:	4798      	blx	r3
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
     856:	2330      	movs	r3, #48	; 0x30
     858:	33ff      	adds	r3, #255	; 0xff
     85a:	2100      	movs	r1, #0
     85c:	0018      	movs	r0, r3
     85e:	4b8d      	ldr	r3, [pc, #564]	; (a94 <spi169_tx_init+0x400>)
     860:	4798      	blx	r3
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
     862:	2398      	movs	r3, #152	; 0x98
     864:	005b      	lsls	r3, r3, #1
     866:	21e8      	movs	r1, #232	; 0xe8
     868:	0018      	movs	r0, r3
     86a:	4b8a      	ldr	r3, [pc, #552]	; (a94 <spi169_tx_init+0x400>)
     86c:	4798      	blx	r3
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
     86e:	2332      	movs	r3, #50	; 0x32
     870:	33ff      	adds	r3, #255	; 0xff
     872:	2184      	movs	r1, #132	; 0x84
     874:	0018      	movs	r0, r3
     876:	4b87      	ldr	r3, [pc, #540]	; (a94 <spi169_tx_init+0x400>)
     878:	4798      	blx	r3
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     87a:	2399      	movs	r3, #153	; 0x99
     87c:	005b      	lsls	r3, r3, #1
     87e:	2100      	movs	r1, #0
     880:	0018      	movs	r0, r3
     882:	4b84      	ldr	r3, [pc, #528]	; (a94 <spi169_tx_init+0x400>)
     884:	4798      	blx	r3
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     886:	2334      	movs	r3, #52	; 0x34
     888:	33ff      	adds	r3, #255	; 0xff
     88a:	2100      	movs	r1, #0
     88c:	0018      	movs	r0, r3
     88e:	4b81      	ldr	r3, [pc, #516]	; (a94 <spi169_tx_init+0x400>)
     890:	4798      	blx	r3
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     892:	239a      	movs	r3, #154	; 0x9a
     894:	005b      	lsls	r3, r3, #1
     896:	21ab      	movs	r1, #171	; 0xab
     898:	0018      	movs	r0, r3
     89a:	4b7e      	ldr	r3, [pc, #504]	; (a94 <spi169_tx_init+0x400>)
     89c:	4798      	blx	r3
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     89e:	2336      	movs	r3, #54	; 0x36
     8a0:	33ff      	adds	r3, #255	; 0xff
     8a2:	21a6      	movs	r1, #166	; 0xa6
     8a4:	0018      	movs	r0, r3
     8a6:	4b7b      	ldr	r3, [pc, #492]	; (a94 <spi169_tx_init+0x400>)
     8a8:	4798      	blx	r3
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     8aa:	239b      	movs	r3, #155	; 0x9b
     8ac:	005b      	lsls	r3, r3, #1
     8ae:	21c3      	movs	r1, #195	; 0xc3
     8b0:	0018      	movs	r0, r3
     8b2:	4b78      	ldr	r3, [pc, #480]	; (a94 <spi169_tx_init+0x400>)
     8b4:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     8b6:	2338      	movs	r3, #56	; 0x38
     8b8:	33ff      	adds	r3, #255	; 0xff
     8ba:	210f      	movs	r1, #15
     8bc:	0018      	movs	r0, r3
     8be:	4b75      	ldr	r3, [pc, #468]	; (a94 <spi169_tx_init+0x400>)
     8c0:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     8c2:	239c      	movs	r3, #156	; 0x9c
     8c4:	005b      	lsls	r3, r3, #1
     8c6:	211f      	movs	r1, #31
     8c8:	0018      	movs	r0, r3
     8ca:	4b72      	ldr	r3, [pc, #456]	; (a94 <spi169_tx_init+0x400>)
     8cc:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     8ce:	233a      	movs	r3, #58	; 0x3a
     8d0:	33ff      	adds	r3, #255	; 0xff
     8d2:	210a      	movs	r1, #10
     8d4:	0018      	movs	r0, r3
     8d6:	4b6f      	ldr	r3, [pc, #444]	; (a94 <spi169_tx_init+0x400>)
     8d8:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     8da:	239d      	movs	r3, #157	; 0x9d
     8dc:	005b      	lsls	r3, r3, #1
     8de:	210a      	movs	r1, #10
     8e0:	0018      	movs	r0, r3
     8e2:	4b6c      	ldr	r3, [pc, #432]	; (a94 <spi169_tx_init+0x400>)
     8e4:	4798      	blx	r3
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     8e6:	233c      	movs	r3, #60	; 0x3c
     8e8:	33ff      	adds	r3, #255	; 0xff
     8ea:	2106      	movs	r1, #6
     8ec:	0018      	movs	r0, r3
     8ee:	4b69      	ldr	r3, [pc, #420]	; (a94 <spi169_tx_init+0x400>)
     8f0:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     8f2:	239e      	movs	r3, #158	; 0x9e
     8f4:	005b      	lsls	r3, r3, #1
     8f6:	2100      	movs	r1, #0
     8f8:	0018      	movs	r0, r3
     8fa:	4b66      	ldr	r3, [pc, #408]	; (a94 <spi169_tx_init+0x400>)
     8fc:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     8fe:	233e      	movs	r3, #62	; 0x3e
     900:	33ff      	adds	r3, #255	; 0xff
     902:	214b      	movs	r1, #75	; 0x4b
     904:	0018      	movs	r0, r3
     906:	4b63      	ldr	r3, [pc, #396]	; (a94 <spi169_tx_init+0x400>)
     908:	4798      	blx	r3
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     90a:	239f      	movs	r3, #159	; 0x9f
     90c:	005b      	lsls	r3, r3, #1
     90e:	2116      	movs	r1, #22
     910:	0018      	movs	r0, r3
     912:	4b60      	ldr	r3, [pc, #384]	; (a94 <spi169_tx_init+0x400>)
     914:	4798      	blx	r3
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     916:	2340      	movs	r3, #64	; 0x40
     918:	33ff      	adds	r3, #255	; 0xff
     91a:	2100      	movs	r1, #0
     91c:	0018      	movs	r0, r3
     91e:	4b5d      	ldr	r3, [pc, #372]	; (a94 <spi169_tx_init+0x400>)
     920:	4798      	blx	r3
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     922:	23a8      	movs	r3, #168	; 0xa8
     924:	005b      	lsls	r3, r3, #1
     926:	21ff      	movs	r1, #255	; 0xff
     928:	0018      	movs	r0, r3
     92a:	4b5a      	ldr	r3, [pc, #360]	; (a94 <spi169_tx_init+0x400>)
     92c:	4798      	blx	r3
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     92e:	2352      	movs	r3, #82	; 0x52
     930:	33ff      	adds	r3, #255	; 0xff
     932:	2184      	movs	r1, #132	; 0x84
     934:	0018      	movs	r0, r3
     936:	4b57      	ldr	r3, [pc, #348]	; (a94 <spi169_tx_init+0x400>)
     938:	4798      	blx	r3
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     93a:	23a9      	movs	r3, #169	; 0xa9
     93c:	005b      	lsls	r3, r3, #1
     93e:	2100      	movs	r1, #0
     940:	0018      	movs	r0, r3
     942:	4b54      	ldr	r3, [pc, #336]	; (a94 <spi169_tx_init+0x400>)
     944:	4798      	blx	r3
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     946:	2354      	movs	r3, #84	; 0x54
     948:	33ff      	adds	r3, #255	; 0xff
     94a:	2100      	movs	r1, #0
     94c:	0018      	movs	r0, r3
     94e:	4b51      	ldr	r3, [pc, #324]	; (a94 <spi169_tx_init+0x400>)
     950:	4798      	blx	r3
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     952:	23aa      	movs	r3, #170	; 0xaa
     954:	005b      	lsls	r3, r3, #1
     956:	21aa      	movs	r1, #170	; 0xaa
     958:	0018      	movs	r0, r3
     95a:	4b4e      	ldr	r3, [pc, #312]	; (a94 <spi169_tx_init+0x400>)
     95c:	4798      	blx	r3
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     95e:	2356      	movs	r3, #86	; 0x56
     960:	33ff      	adds	r3, #255	; 0xff
     962:	21a5      	movs	r1, #165	; 0xa5
     964:	0018      	movs	r0, r3
     966:	4b4b      	ldr	r3, [pc, #300]	; (a94 <spi169_tx_init+0x400>)
     968:	4798      	blx	r3
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     96a:	23ab      	movs	r3, #171	; 0xab
     96c:	005b      	lsls	r3, r3, #1
     96e:	21c3      	movs	r1, #195	; 0xc3
     970:	0018      	movs	r0, r3
     972:	4b48      	ldr	r3, [pc, #288]	; (a94 <spi169_tx_init+0x400>)
     974:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     976:	2358      	movs	r3, #88	; 0x58
     978:	33ff      	adds	r3, #255	; 0xff
     97a:	210f      	movs	r1, #15
     97c:	0018      	movs	r0, r3
     97e:	4b45      	ldr	r3, [pc, #276]	; (a94 <spi169_tx_init+0x400>)
     980:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     982:	23ac      	movs	r3, #172	; 0xac
     984:	005b      	lsls	r3, r3, #1
     986:	211f      	movs	r1, #31
     988:	0018      	movs	r0, r3
     98a:	4b42      	ldr	r3, [pc, #264]	; (a94 <spi169_tx_init+0x400>)
     98c:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAINC3, 0x0D);
     98e:	235a      	movs	r3, #90	; 0x5a
     990:	33ff      	adds	r3, #255	; 0xff
     992:	210d      	movs	r1, #13
     994:	0018      	movs	r0, r3
     996:	4b3f      	ldr	r3, [pc, #252]	; (a94 <spi169_tx_init+0x400>)
     998:	4798      	blx	r3
    spi169_wr8(AX5043_FREQGAIND3, 0x0D);
     99a:	23ad      	movs	r3, #173	; 0xad
     99c:	005b      	lsls	r3, r3, #1
     99e:	210d      	movs	r1, #13
     9a0:	0018      	movs	r0, r3
     9a2:	4b3c      	ldr	r3, [pc, #240]	; (a94 <spi169_tx_init+0x400>)
     9a4:	4798      	blx	r3
    spi169_wr8(AX5043_AMPLGAIN3, 0x06);
     9a6:	235c      	movs	r3, #92	; 0x5c
     9a8:	33ff      	adds	r3, #255	; 0xff
     9aa:	2106      	movs	r1, #6
     9ac:	0018      	movs	r0, r3
     9ae:	4b39      	ldr	r3, [pc, #228]	; (a94 <spi169_tx_init+0x400>)
     9b0:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV13, 0x00);
     9b2:	23ae      	movs	r3, #174	; 0xae
     9b4:	005b      	lsls	r3, r3, #1
     9b6:	2100      	movs	r1, #0
     9b8:	0018      	movs	r0, r3
     9ba:	4b36      	ldr	r3, [pc, #216]	; (a94 <spi169_tx_init+0x400>)
     9bc:	4798      	blx	r3
    spi169_wr8(AX5043_FREQDEV03, 0x4B);
     9be:	235e      	movs	r3, #94	; 0x5e
     9c0:	33ff      	adds	r3, #255	; 0xff
     9c2:	214b      	movs	r1, #75	; 0x4b
     9c4:	0018      	movs	r0, r3
     9c6:	4b33      	ldr	r3, [pc, #204]	; (a94 <spi169_tx_init+0x400>)
     9c8:	4798      	blx	r3
    spi169_wr8(AX5043_FOURFSK3, 0x16);
     9ca:	23af      	movs	r3, #175	; 0xaf
     9cc:	005b      	lsls	r3, r3, #1
     9ce:	2116      	movs	r1, #22
     9d0:	0018      	movs	r0, r3
     9d2:	4b30      	ldr	r3, [pc, #192]	; (a94 <spi169_tx_init+0x400>)
     9d4:	4798      	blx	r3
    spi169_wr8(AX5043_BBOFFSRES3, 0x00);
     9d6:	2360      	movs	r3, #96	; 0x60
     9d8:	33ff      	adds	r3, #255	; 0xff
     9da:	2100      	movs	r1, #0
     9dc:	0018      	movs	r0, r3
     9de:	4b2d      	ldr	r3, [pc, #180]	; (a94 <spi169_tx_init+0x400>)
     9e0:	4798      	blx	r3
    spi169_wr8(AX5043_MODCFGF, 0x00);
     9e2:	23b0      	movs	r3, #176	; 0xb0
     9e4:	005b      	lsls	r3, r3, #1
     9e6:	2100      	movs	r1, #0
     9e8:	0018      	movs	r0, r3
     9ea:	4b2a      	ldr	r3, [pc, #168]	; (a94 <spi169_tx_init+0x400>)
     9ec:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDEV2, 0x00);
     9ee:	2362      	movs	r3, #98	; 0x62
     9f0:	33ff      	adds	r3, #255	; 0xff
     9f2:	2100      	movs	r1, #0
     9f4:	0018      	movs	r0, r3
     9f6:	4b27      	ldr	r3, [pc, #156]	; (a94 <spi169_tx_init+0x400>)
     9f8:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDEV1, 0x02);
     9fa:	23b1      	movs	r3, #177	; 0xb1
     9fc:	005b      	lsls	r3, r3, #1
     9fe:	2102      	movs	r1, #2
     a00:	0018      	movs	r0, r3
     a02:	4b24      	ldr	r3, [pc, #144]	; (a94 <spi169_tx_init+0x400>)
     a04:	4798      	blx	r3
    spi169_wr8(AX5043_FSKDEV0, 0x0C);
     a06:	2364      	movs	r3, #100	; 0x64
     a08:	33ff      	adds	r3, #255	; 0xff
     a0a:	210c      	movs	r1, #12
     a0c:	0018      	movs	r0, r3
     a0e:	4b21      	ldr	r3, [pc, #132]	; (a94 <spi169_tx_init+0x400>)
     a10:	4798      	blx	r3
    spi169_wr8(AX5043_MODCFGA, 0x01);
     a12:	23b2      	movs	r3, #178	; 0xb2
     a14:	005b      	lsls	r3, r3, #1
     a16:	2101      	movs	r1, #1
     a18:	0018      	movs	r0, r3
     a1a:	4b1e      	ldr	r3, [pc, #120]	; (a94 <spi169_tx_init+0x400>)
     a1c:	4798      	blx	r3
    spi169_wr8(AX5043_TXRATE2, 0x00);
     a1e:	2366      	movs	r3, #102	; 0x66
     a20:	33ff      	adds	r3, #255	; 0xff
     a22:	2100      	movs	r1, #0
     a24:	0018      	movs	r0, r3
     a26:	4b1b      	ldr	r3, [pc, #108]	; (a94 <spi169_tx_init+0x400>)
     a28:	4798      	blx	r3
    spi169_wr8(AX5043_TXRATE1, 0x04);
     a2a:	23b3      	movs	r3, #179	; 0xb3
     a2c:	005b      	lsls	r3, r3, #1
     a2e:	2104      	movs	r1, #4
     a30:	0018      	movs	r0, r3
     a32:	4b18      	ldr	r3, [pc, #96]	; (a94 <spi169_tx_init+0x400>)
     a34:	4798      	blx	r3
    spi169_wr8(AX5043_TXRATE0, 0xEA);
     a36:	2368      	movs	r3, #104	; 0x68
     a38:	33ff      	adds	r3, #255	; 0xff
     a3a:	21ea      	movs	r1, #234	; 0xea
     a3c:	0018      	movs	r0, r3
     a3e:	4b15      	ldr	r3, [pc, #84]	; (a94 <spi169_tx_init+0x400>)
     a40:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFA1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     a42:	23b4      	movs	r3, #180	; 0xb4
     a44:	005b      	lsls	r3, r3, #1
     a46:	210f      	movs	r1, #15
     a48:	0018      	movs	r0, r3
     a4a:	4b12      	ldr	r3, [pc, #72]	; (a94 <spi169_tx_init+0x400>)
     a4c:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFA0, TXPWR0);
     a4e:	236a      	movs	r3, #106	; 0x6a
     a50:	33ff      	adds	r3, #255	; 0xff
     a52:	21ff      	movs	r1, #255	; 0xff
     a54:	0018      	movs	r0, r3
     a56:	4b0f      	ldr	r3, [pc, #60]	; (a94 <spi169_tx_init+0x400>)
     a58:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFB1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     a5a:	23b5      	movs	r3, #181	; 0xb5
     a5c:	005b      	lsls	r3, r3, #1
     a5e:	210f      	movs	r1, #15
     a60:	0018      	movs	r0, r3
     a62:	4b0c      	ldr	r3, [pc, #48]	; (a94 <spi169_tx_init+0x400>)
     a64:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFB0, TXPWR0);
     a66:	236c      	movs	r3, #108	; 0x6c
     a68:	33ff      	adds	r3, #255	; 0xff
     a6a:	21ff      	movs	r1, #255	; 0xff
     a6c:	0018      	movs	r0, r3
     a6e:	4b09      	ldr	r3, [pc, #36]	; (a94 <spi169_tx_init+0x400>)
     a70:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFC1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     a72:	23b6      	movs	r3, #182	; 0xb6
     a74:	005b      	lsls	r3, r3, #1
     a76:	210f      	movs	r1, #15
     a78:	0018      	movs	r0, r3
     a7a:	4b06      	ldr	r3, [pc, #24]	; (a94 <spi169_tx_init+0x400>)
     a7c:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFC0, TXPWR0);
     a7e:	236e      	movs	r3, #110	; 0x6e
     a80:	33ff      	adds	r3, #255	; 0xff
     a82:	21ff      	movs	r1, #255	; 0xff
     a84:	0018      	movs	r0, r3
     a86:	4b03      	ldr	r3, [pc, #12]	; (a94 <spi169_tx_init+0x400>)
     a88:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFD1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     a8a:	23b7      	movs	r3, #183	; 0xb7
     a8c:	005b      	lsls	r3, r3, #1
     a8e:	210f      	movs	r1, #15
     a90:	0018      	movs	r0, r3
     a92:	e003      	b.n	a9c <spi169_tx_init+0x408>
     a94:	00000619 	.word	0x00000619
     a98:	00000e25 	.word	0x00000e25
     a9c:	4b9c      	ldr	r3, [pc, #624]	; (d10 <spi169_tx_init+0x67c>)
     a9e:	4798      	blx	r3
    spi169_wr8(AX5043_TXPWRCOEFFD0, TXPWR0);
     aa0:	2370      	movs	r3, #112	; 0x70
     aa2:	33ff      	adds	r3, #255	; 0xff
     aa4:	21ff      	movs	r1, #255	; 0xff
     aa6:	0018      	movs	r0, r3
     aa8:	4b99      	ldr	r3, [pc, #612]	; (d10 <spi169_tx_init+0x67c>)
     aaa:	4798      	blx	r3
    spi169_wr8(AX5043_PLLVCOI, 0x8A);
     aac:	23c0      	movs	r3, #192	; 0xc0
     aae:	005b      	lsls	r3, r3, #1
     ab0:	218a      	movs	r1, #138	; 0x8a
     ab2:	0018      	movs	r0, r3
     ab4:	4b96      	ldr	r3, [pc, #600]	; (d10 <spi169_tx_init+0x67c>)
     ab6:	4798      	blx	r3
    spi169_wr8(AX5043_PLLRNGCLK, 0x03);
     ab8:	2384      	movs	r3, #132	; 0x84
     aba:	33ff      	adds	r3, #255	; 0xff
     abc:	2103      	movs	r1, #3
     abe:	0018      	movs	r0, r3
     ac0:	4b93      	ldr	r3, [pc, #588]	; (d10 <spi169_tx_init+0x67c>)
     ac2:	4798      	blx	r3
    spi169_wr8(AX5043_BBTUNE, 0x0F);
     ac4:	23c4      	movs	r3, #196	; 0xc4
     ac6:	005b      	lsls	r3, r3, #1
     ac8:	210f      	movs	r1, #15
     aca:	0018      	movs	r0, r3
     acc:	4b90      	ldr	r3, [pc, #576]	; (d10 <spi169_tx_init+0x67c>)
     ace:	4798      	blx	r3
    spi169_wr8(AX5043_BBOFFSCAP, 0x77);
     ad0:	238a      	movs	r3, #138	; 0x8a
     ad2:	33ff      	adds	r3, #255	; 0xff
     ad4:	2177      	movs	r1, #119	; 0x77
     ad6:	0018      	movs	r0, r3
     ad8:	4b8d      	ldr	r3, [pc, #564]	; (d10 <spi169_tx_init+0x67c>)
     ada:	4798      	blx	r3
    spi169_wr8(AX5043_PKTADDRCFG, 0x80);
     adc:	2380      	movs	r3, #128	; 0x80
     ade:	009b      	lsls	r3, r3, #2
     ae0:	2180      	movs	r1, #128	; 0x80
     ae2:	0018      	movs	r0, r3
     ae4:	4b8a      	ldr	r3, [pc, #552]	; (d10 <spi169_tx_init+0x67c>)
     ae6:	4798      	blx	r3
    spi169_wr8(AX5043_PKTLENCFG, 0x00);
     ae8:	4b8a      	ldr	r3, [pc, #552]	; (d14 <spi169_tx_init+0x680>)
     aea:	2100      	movs	r1, #0
     aec:	0018      	movs	r0, r3
     aee:	4b88      	ldr	r3, [pc, #544]	; (d10 <spi169_tx_init+0x67c>)
     af0:	4798      	blx	r3
    spi169_wr8(AX5043_PKTLENOFFSET, 0x04);
     af2:	4b89      	ldr	r3, [pc, #548]	; (d18 <spi169_tx_init+0x684>)
     af4:	2104      	movs	r1, #4
     af6:	0018      	movs	r0, r3
     af8:	4b85      	ldr	r3, [pc, #532]	; (d10 <spi169_tx_init+0x67c>)
     afa:	4798      	blx	r3
    spi169_wr8(AX5043_PKTMAXLEN, 0xC8);
     afc:	4b87      	ldr	r3, [pc, #540]	; (d1c <spi169_tx_init+0x688>)
     afe:	21c8      	movs	r1, #200	; 0xc8
     b00:	0018      	movs	r0, r3
     b02:	4b83      	ldr	r3, [pc, #524]	; (d10 <spi169_tx_init+0x67c>)
     b04:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0PAT3, 0xAA);
     b06:	2384      	movs	r3, #132	; 0x84
     b08:	009b      	lsls	r3, r3, #2
     b0a:	21aa      	movs	r1, #170	; 0xaa
     b0c:	0018      	movs	r0, r3
     b0e:	4b80      	ldr	r3, [pc, #512]	; (d10 <spi169_tx_init+0x67c>)
     b10:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0PAT2, 0xCC);
     b12:	4b83      	ldr	r3, [pc, #524]	; (d20 <spi169_tx_init+0x68c>)
     b14:	21cc      	movs	r1, #204	; 0xcc
     b16:	0018      	movs	r0, r3
     b18:	4b7d      	ldr	r3, [pc, #500]	; (d10 <spi169_tx_init+0x67c>)
     b1a:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0PAT1, 0xAA);
     b1c:	4b81      	ldr	r3, [pc, #516]	; (d24 <spi169_tx_init+0x690>)
     b1e:	21aa      	movs	r1, #170	; 0xaa
     b20:	0018      	movs	r0, r3
     b22:	4b7b      	ldr	r3, [pc, #492]	; (d10 <spi169_tx_init+0x67c>)
     b24:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0PAT0, 0xCC);
     b26:	4b80      	ldr	r3, [pc, #512]	; (d28 <spi169_tx_init+0x694>)
     b28:	21cc      	movs	r1, #204	; 0xcc
     b2a:	0018      	movs	r0, r3
     b2c:	4b78      	ldr	r3, [pc, #480]	; (d10 <spi169_tx_init+0x67c>)
     b2e:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0LEN, 0x9F);
     b30:	2385      	movs	r3, #133	; 0x85
     b32:	009b      	lsls	r3, r3, #2
     b34:	219f      	movs	r1, #159	; 0x9f
     b36:	0018      	movs	r0, r3
     b38:	4b75      	ldr	r3, [pc, #468]	; (d10 <spi169_tx_init+0x67c>)
     b3a:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH0MAX, 0x1F);
     b3c:	4b7b      	ldr	r3, [pc, #492]	; (d2c <spi169_tx_init+0x698>)
     b3e:	211f      	movs	r1, #31
     b40:	0018      	movs	r0, r3
     b42:	4b73      	ldr	r3, [pc, #460]	; (d10 <spi169_tx_init+0x67c>)
     b44:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH1PAT1, 0x55);
     b46:	2386      	movs	r3, #134	; 0x86
     b48:	009b      	lsls	r3, r3, #2
     b4a:	2155      	movs	r1, #85	; 0x55
     b4c:	0018      	movs	r0, r3
     b4e:	4b70      	ldr	r3, [pc, #448]	; (d10 <spi169_tx_init+0x67c>)
     b50:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH1PAT0, 0x55);
     b52:	4b77      	ldr	r3, [pc, #476]	; (d30 <spi169_tx_init+0x69c>)
     b54:	2155      	movs	r1, #85	; 0x55
     b56:	0018      	movs	r0, r3
     b58:	4b6d      	ldr	r3, [pc, #436]	; (d10 <spi169_tx_init+0x67c>)
     b5a:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH1LEN, 0x8A);
     b5c:	2387      	movs	r3, #135	; 0x87
     b5e:	009b      	lsls	r3, r3, #2
     b60:	218a      	movs	r1, #138	; 0x8a
     b62:	0018      	movs	r0, r3
     b64:	4b6a      	ldr	r3, [pc, #424]	; (d10 <spi169_tx_init+0x67c>)
     b66:	4798      	blx	r3
    spi169_wr8(AX5043_MATCH1MAX, 0x0A);
     b68:	4b72      	ldr	r3, [pc, #456]	; (d34 <spi169_tx_init+0x6a0>)
     b6a:	210a      	movs	r1, #10
     b6c:	0018      	movs	r0, r3
     b6e:	4b68      	ldr	r3, [pc, #416]	; (d10 <spi169_tx_init+0x67c>)
     b70:	4798      	blx	r3
    spi169_wr8(AX5043_TMGTXBOOST, 0x32);
     b72:	2388      	movs	r3, #136	; 0x88
     b74:	009b      	lsls	r3, r3, #2
     b76:	2132      	movs	r1, #50	; 0x32
     b78:	0018      	movs	r0, r3
     b7a:	4b65      	ldr	r3, [pc, #404]	; (d10 <spi169_tx_init+0x67c>)
     b7c:	4798      	blx	r3
    spi169_wr8(AX5043_TMGTXSETTLE, 0x14);
     b7e:	4b6e      	ldr	r3, [pc, #440]	; (d38 <spi169_tx_init+0x6a4>)
     b80:	2114      	movs	r1, #20
     b82:	0018      	movs	r0, r3
     b84:	4b62      	ldr	r3, [pc, #392]	; (d10 <spi169_tx_init+0x67c>)
     b86:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXBOOST, 0x32);
     b88:	4b6c      	ldr	r3, [pc, #432]	; (d3c <spi169_tx_init+0x6a8>)
     b8a:	2132      	movs	r1, #50	; 0x32
     b8c:	0018      	movs	r0, r3
     b8e:	4b60      	ldr	r3, [pc, #384]	; (d10 <spi169_tx_init+0x67c>)
     b90:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXSETTLE, 0x14);
     b92:	2389      	movs	r3, #137	; 0x89
     b94:	009b      	lsls	r3, r3, #2
     b96:	2114      	movs	r1, #20
     b98:	0018      	movs	r0, r3
     b9a:	4b5d      	ldr	r3, [pc, #372]	; (d10 <spi169_tx_init+0x67c>)
     b9c:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     b9e:	4b68      	ldr	r3, [pc, #416]	; (d40 <spi169_tx_init+0x6ac>)
     ba0:	2100      	movs	r1, #0
     ba2:	0018      	movs	r0, r3
     ba4:	4b5a      	ldr	r3, [pc, #360]	; (d10 <spi169_tx_init+0x67c>)
     ba6:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     ba8:	4b66      	ldr	r3, [pc, #408]	; (d44 <spi169_tx_init+0x6b0>)
     baa:	2173      	movs	r1, #115	; 0x73
     bac:	0018      	movs	r0, r3
     bae:	4b58      	ldr	r3, [pc, #352]	; (d10 <spi169_tx_init+0x67c>)
     bb0:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXRSSI, 0x03);
     bb2:	238a      	movs	r3, #138	; 0x8a
     bb4:	009b      	lsls	r3, r3, #2
     bb6:	2103      	movs	r1, #3
     bb8:	0018      	movs	r0, r3
     bba:	4b55      	ldr	r3, [pc, #340]	; (d10 <spi169_tx_init+0x67c>)
     bbc:	4798      	blx	r3
    spi169_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     bbe:	4b62      	ldr	r3, [pc, #392]	; (d48 <spi169_tx_init+0x6b4>)
     bc0:	2135      	movs	r1, #53	; 0x35
     bc2:	0018      	movs	r0, r3
     bc4:	4b52      	ldr	r3, [pc, #328]	; (d10 <spi169_tx_init+0x67c>)
     bc6:	4798      	blx	r3
    spi169_wr8(AX5043_RSSIABSTHR, 0xE6);
     bc8:	4b60      	ldr	r3, [pc, #384]	; (d4c <spi169_tx_init+0x6b8>)
     bca:	21e6      	movs	r1, #230	; 0xe6
     bcc:	0018      	movs	r0, r3
     bce:	4b50      	ldr	r3, [pc, #320]	; (d10 <spi169_tx_init+0x67c>)
     bd0:	4798      	blx	r3
    spi169_wr8(AX5043_BGNDRSSITHR, 0x00);
     bd2:	4b5f      	ldr	r3, [pc, #380]	; (d50 <spi169_tx_init+0x6bc>)
     bd4:	2100      	movs	r1, #0
     bd6:	0018      	movs	r0, r3
     bd8:	4b4d      	ldr	r3, [pc, #308]	; (d10 <spi169_tx_init+0x67c>)
     bda:	4798      	blx	r3
    spi169_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     bdc:	238c      	movs	r3, #140	; 0x8c
     bde:	009b      	lsls	r3, r3, #2
     be0:	210d      	movs	r1, #13
     be2:	0018      	movs	r0, r3
     be4:	4b4a      	ldr	r3, [pc, #296]	; (d10 <spi169_tx_init+0x67c>)
     be6:	4798      	blx	r3
    spi169_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     be8:	4b5a      	ldr	r3, [pc, #360]	; (d54 <spi169_tx_init+0x6c0>)
     bea:	2120      	movs	r1, #32
     bec:	0018      	movs	r0, r3
     bee:	4b48      	ldr	r3, [pc, #288]	; (d10 <spi169_tx_init+0x67c>)
     bf0:	4798      	blx	r3
    spi169_wr8(AX5043_DACVALUE1, 0x00);
     bf2:	23cc      	movs	r3, #204	; 0xcc
     bf4:	009b      	lsls	r3, r3, #2
     bf6:	2100      	movs	r1, #0
     bf8:	0018      	movs	r0, r3
     bfa:	4b45      	ldr	r3, [pc, #276]	; (d10 <spi169_tx_init+0x67c>)
     bfc:	4798      	blx	r3
    spi169_wr8(AX5043_DACVALUE0, 0x00);
     bfe:	4b56      	ldr	r3, [pc, #344]	; (d58 <spi169_tx_init+0x6c4>)
     c00:	2100      	movs	r1, #0
     c02:	0018      	movs	r0, r3
     c04:	4b42      	ldr	r3, [pc, #264]	; (d10 <spi169_tx_init+0x67c>)
     c06:	4798      	blx	r3
    spi169_wr8(AX5043_DACCONFIG, 0x00);
     c08:	4b54      	ldr	r3, [pc, #336]	; (d5c <spi169_tx_init+0x6c8>)
     c0a:	2100      	movs	r1, #0
     c0c:	0018      	movs	r0, r3
     c0e:	4b40      	ldr	r3, [pc, #256]	; (d10 <spi169_tx_init+0x67c>)
     c10:	4798      	blx	r3
    spi169_wr8(AX5043_REF, 0x03);
     c12:	4b53      	ldr	r3, [pc, #332]	; (d60 <spi169_tx_init+0x6cc>)
     c14:	2103      	movs	r1, #3
     c16:	0018      	movs	r0, r3
     c18:	4b3d      	ldr	r3, [pc, #244]	; (d10 <spi169_tx_init+0x67c>)
     c1a:	4798      	blx	r3
    spi169_wr8(AX5043_XTALOSC, 0x03);
     c1c:	23f1      	movs	r3, #241	; 0xf1
     c1e:	011b      	lsls	r3, r3, #4
     c20:	2103      	movs	r1, #3
     c22:	0018      	movs	r0, r3
     c24:	4b3a      	ldr	r3, [pc, #232]	; (d10 <spi169_tx_init+0x67c>)
     c26:	4798      	blx	r3
    spi169_wr8(AX5043_XTALAMPL, 0x07);
     c28:	4b4e      	ldr	r3, [pc, #312]	; (d64 <spi169_tx_init+0x6d0>)
     c2a:	2107      	movs	r1, #7
     c2c:	0018      	movs	r0, r3
     c2e:	4b38      	ldr	r3, [pc, #224]	; (d10 <spi169_tx_init+0x67c>)
     c30:	4798      	blx	r3
    spi169_wr8(AX5043_0xF1C, 0x07);
     c32:	4b4d      	ldr	r3, [pc, #308]	; (d68 <spi169_tx_init+0x6d4>)
     c34:	2107      	movs	r1, #7
     c36:	0018      	movs	r0, r3
     c38:	4b35      	ldr	r3, [pc, #212]	; (d10 <spi169_tx_init+0x67c>)
     c3a:	4798      	blx	r3
    spi169_wr8(AX5043_0xF21, 0x68);
     c3c:	4b4b      	ldr	r3, [pc, #300]	; (d6c <spi169_tx_init+0x6d8>)
     c3e:	2168      	movs	r1, #104	; 0x68
     c40:	0018      	movs	r0, r3
     c42:	4b33      	ldr	r3, [pc, #204]	; (d10 <spi169_tx_init+0x67c>)
     c44:	4798      	blx	r3
    spi169_wr8(AX5043_0xF22, 0xFF);
     c46:	4b4a      	ldr	r3, [pc, #296]	; (d70 <spi169_tx_init+0x6dc>)
     c48:	21ff      	movs	r1, #255	; 0xff
     c4a:	0018      	movs	r0, r3
     c4c:	4b30      	ldr	r3, [pc, #192]	; (d10 <spi169_tx_init+0x67c>)
     c4e:	4798      	blx	r3
    spi169_wr8(AX5043_0xF23, 0x84);
     c50:	4b48      	ldr	r3, [pc, #288]	; (d74 <spi169_tx_init+0x6e0>)
     c52:	2184      	movs	r1, #132	; 0x84
     c54:	0018      	movs	r0, r3
     c56:	4b2e      	ldr	r3, [pc, #184]	; (d10 <spi169_tx_init+0x67c>)
     c58:	4798      	blx	r3
    spi169_wr8(AX5043_0xF26, 0x98);
     c5a:	4b47      	ldr	r3, [pc, #284]	; (d78 <spi169_tx_init+0x6e4>)
     c5c:	2198      	movs	r1, #152	; 0x98
     c5e:	0018      	movs	r0, r3
     c60:	4b2b      	ldr	r3, [pc, #172]	; (d10 <spi169_tx_init+0x67c>)
     c62:	4798      	blx	r3
    spi169_wr8(AX5043_0xF34, 0x08);
     c64:	4b45      	ldr	r3, [pc, #276]	; (d7c <spi169_tx_init+0x6e8>)
     c66:	2108      	movs	r1, #8
     c68:	0018      	movs	r0, r3
     c6a:	4b29      	ldr	r3, [pc, #164]	; (d10 <spi169_tx_init+0x67c>)
     c6c:	4798      	blx	r3
    spi169_wr8(AX5043_0xF35, 0x10);
     c6e:	4b44      	ldr	r3, [pc, #272]	; (d80 <spi169_tx_init+0x6ec>)
     c70:	2110      	movs	r1, #16
     c72:	0018      	movs	r0, r3
     c74:	4b26      	ldr	r3, [pc, #152]	; (d10 <spi169_tx_init+0x67c>)
     c76:	4798      	blx	r3
    spi169_wr8(AX5043_0xF44, 0x25);
     c78:	4b42      	ldr	r3, [pc, #264]	; (d84 <spi169_tx_init+0x6f0>)
     c7a:	2125      	movs	r1, #37	; 0x25
     c7c:	0018      	movs	r0, r3
     c7e:	4b24      	ldr	r3, [pc, #144]	; (d10 <spi169_tx_init+0x67c>)
     c80:	4798      	blx	r3
    
    spi169_wr8(AX5043_PLLLOOP, 0x09);
     c82:	2109      	movs	r1, #9
     c84:	2030      	movs	r0, #48	; 0x30
     c86:	4b22      	ldr	r3, [pc, #136]	; (d10 <spi169_tx_init+0x67c>)
     c88:	4798      	blx	r3
    spi169_wr8(AX5043_PLLCPI, 0x02);
     c8a:	2102      	movs	r1, #2
     c8c:	2031      	movs	r0, #49	; 0x31
     c8e:	4b20      	ldr	r3, [pc, #128]	; (d10 <spi169_tx_init+0x67c>)
     c90:	4798      	blx	r3
    spi169_wr8(AX5043_PLLVCODIV, 0x30);
     c92:	2130      	movs	r1, #48	; 0x30
     c94:	2032      	movs	r0, #50	; 0x32
     c96:	4b1e      	ldr	r3, [pc, #120]	; (d10 <spi169_tx_init+0x67c>)
     c98:	4798      	blx	r3
    spi169_wr8(AX5043_XTALCAP, 0x13);
     c9a:	23c2      	movs	r3, #194	; 0xc2
     c9c:	005b      	lsls	r3, r3, #1
     c9e:	2113      	movs	r1, #19
     ca0:	0018      	movs	r0, r3
     ca2:	4b1b      	ldr	r3, [pc, #108]	; (d10 <spi169_tx_init+0x67c>)
     ca4:	4798      	blx	r3
    spi169_wr8(AX5043_0xF00, 0x0F);
     ca6:	23f0      	movs	r3, #240	; 0xf0
     ca8:	011b      	lsls	r3, r3, #4
     caa:	210f      	movs	r1, #15
     cac:	0018      	movs	r0, r3
     cae:	4b18      	ldr	r3, [pc, #96]	; (d10 <spi169_tx_init+0x67c>)
     cb0:	4798      	blx	r3
    spi169_wr8(AX5043_0xF18, 0x06);
     cb2:	4b35      	ldr	r3, [pc, #212]	; (d88 <spi169_tx_init+0x6f4>)
     cb4:	2106      	movs	r1, #6
     cb6:	0018      	movs	r0, r3
     cb8:	4b15      	ldr	r3, [pc, #84]	; (d10 <spi169_tx_init+0x67c>)
     cba:	4798      	blx	r3
    
    //set the freqeuency (169 MHz)
    spi169_wr8(AX5043_FREQA0, 0x01);
     cbc:	2101      	movs	r1, #1
     cbe:	2037      	movs	r0, #55	; 0x37
     cc0:	4b13      	ldr	r3, [pc, #76]	; (d10 <spi169_tx_init+0x67c>)
     cc2:	4798      	blx	r3
    spi169_wr8(AX5043_FREQA1, 0x00);
     cc4:	2100      	movs	r1, #0
     cc6:	2036      	movs	r0, #54	; 0x36
     cc8:	4b11      	ldr	r3, [pc, #68]	; (d10 <spi169_tx_init+0x67c>)
     cca:	4798      	blx	r3
    spi169_wr8(AX5043_FREQA2, 0x90);
     ccc:	2190      	movs	r1, #144	; 0x90
     cce:	2035      	movs	r0, #53	; 0x35
     cd0:	4b0f      	ldr	r3, [pc, #60]	; (d10 <spi169_tx_init+0x67c>)
     cd2:	4798      	blx	r3
    spi169_wr8(AX5043_FREQA3, 0x0A);
     cd4:	210a      	movs	r1, #10
     cd6:	2034      	movs	r0, #52	; 0x34
     cd8:	4b0d      	ldr	r3, [pc, #52]	; (d10 <spi169_tx_init+0x67c>)
     cda:	4798      	blx	r3
    
    // wait for crystal to start
    while((spi169_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
     cdc:	46c0      	nop			; (mov r8, r8)
     cde:	201d      	movs	r0, #29
     ce0:	4b2a      	ldr	r3, [pc, #168]	; (d8c <spi169_tx_init+0x6f8>)
     ce2:	4798      	blx	r3
     ce4:	0003      	movs	r3, r0
     ce6:	001a      	movs	r2, r3
     ce8:	2301      	movs	r3, #1
     cea:	4013      	ands	r3, r2
     cec:	2b01      	cmp	r3, #1
     cee:	d1f6      	bne.n	cde <spi169_tx_init+0x64a>
    
    // autorange the PLL once crystal has settled
    spi169_autorange();
     cf0:	4b27      	ldr	r3, [pc, #156]	; (d90 <spi169_tx_init+0x6fc>)
     cf2:	4798      	blx	r3
    
    // clear the FIFO
    spi169_wr8(AX5043_FIFOSTAT, (1 << 7));
     cf4:	2180      	movs	r1, #128	; 0x80
     cf6:	2028      	movs	r0, #40	; 0x28
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <spi169_tx_init+0x67c>)
     cfa:	4798      	blx	r3

    // set to full transmit power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLTX);
     cfc:	216d      	movs	r1, #109	; 0x6d
     cfe:	2002      	movs	r0, #2
     d00:	4b03      	ldr	r3, [pc, #12]	; (d10 <spi169_tx_init+0x67c>)
     d02:	4798      	blx	r3
    delay_ms(100);
     d04:	2064      	movs	r0, #100	; 0x64
     d06:	4b23      	ldr	r3, [pc, #140]	; (d94 <spi169_tx_init+0x700>)
     d08:	4798      	blx	r3
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	46bd      	mov	sp, r7
     d0e:	bd80      	pop	{r7, pc}
     d10:	00000619 	.word	0x00000619
     d14:	00000201 	.word	0x00000201
     d18:	00000202 	.word	0x00000202
     d1c:	00000203 	.word	0x00000203
     d20:	00000211 	.word	0x00000211
     d24:	00000212 	.word	0x00000212
     d28:	00000213 	.word	0x00000213
     d2c:	00000216 	.word	0x00000216
     d30:	00000219 	.word	0x00000219
     d34:	0000021e 	.word	0x0000021e
     d38:	00000221 	.word	0x00000221
     d3c:	00000223 	.word	0x00000223
     d40:	00000225 	.word	0x00000225
     d44:	00000226 	.word	0x00000226
     d48:	0000022a 	.word	0x0000022a
     d4c:	0000022d 	.word	0x0000022d
     d50:	0000022f 	.word	0x0000022f
     d54:	00000233 	.word	0x00000233
     d58:	00000331 	.word	0x00000331
     d5c:	00000332 	.word	0x00000332
     d60:	00000f0d 	.word	0x00000f0d
     d64:	00000f11 	.word	0x00000f11
     d68:	00000f1c 	.word	0x00000f1c
     d6c:	00000f21 	.word	0x00000f21
     d70:	00000f22 	.word	0x00000f22
     d74:	00000f23 	.word	0x00000f23
     d78:	00000f26 	.word	0x00000f26
     d7c:	00000f34 	.word	0x00000f34
     d80:	00000f35 	.word	0x00000f35
     d84:	00000f44 	.word	0x00000f44
     d88:	00000f18 	.word	0x00000f18
     d8c:	00000591 	.word	0x00000591
     d90:	00000669 	.word	0x00000669
     d94:	00000e25 	.word	0x00000e25

00000d98 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     d98:	b580      	push	{r7, lr}
     d9a:	b082      	sub	sp, #8
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	2b00      	cmp	r3, #0
     da4:	d00c      	beq.n	dc0 <delay_cycles+0x28>
		SysTick->LOAD = n;
     da6:	4b08      	ldr	r3, [pc, #32]	; (dc8 <delay_cycles+0x30>)
     da8:	687a      	ldr	r2, [r7, #4]
     daa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     dac:	4b06      	ldr	r3, [pc, #24]	; (dc8 <delay_cycles+0x30>)
     dae:	2200      	movs	r2, #0
     db0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	4b04      	ldr	r3, [pc, #16]	; (dc8 <delay_cycles+0x30>)
     db6:	681a      	ldr	r2, [r3, #0]
     db8:	2380      	movs	r3, #128	; 0x80
     dba:	025b      	lsls	r3, r3, #9
     dbc:	4013      	ands	r3, r2
     dbe:	d0f9      	beq.n	db4 <delay_cycles+0x1c>
		};
	}
}
     dc0:	46c0      	nop			; (mov r8, r8)
     dc2:	46bd      	mov	sp, r7
     dc4:	b002      	add	sp, #8
     dc6:	bd80      	pop	{r7, pc}
     dc8:	e000e010 	.word	0xe000e010

00000dcc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     dcc:	b580      	push	{r7, lr}
     dce:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     dd0:	2000      	movs	r0, #0
     dd2:	4b0f      	ldr	r3, [pc, #60]	; (e10 <delay_init+0x44>)
     dd4:	4798      	blx	r3
     dd6:	0002      	movs	r2, r0
     dd8:	4b0e      	ldr	r3, [pc, #56]	; (e14 <delay_init+0x48>)
     dda:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     ddc:	4b0d      	ldr	r3, [pc, #52]	; (e14 <delay_init+0x48>)
     dde:	6818      	ldr	r0, [r3, #0]
     de0:	4b0d      	ldr	r3, [pc, #52]	; (e18 <delay_init+0x4c>)
     de2:	22fa      	movs	r2, #250	; 0xfa
     de4:	0091      	lsls	r1, r2, #2
     de6:	4798      	blx	r3
     de8:	0003      	movs	r3, r0
     dea:	001a      	movs	r2, r3
     dec:	4b09      	ldr	r3, [pc, #36]	; (e14 <delay_init+0x48>)
     dee:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     df0:	4b08      	ldr	r3, [pc, #32]	; (e14 <delay_init+0x48>)
     df2:	6818      	ldr	r0, [r3, #0]
     df4:	4b08      	ldr	r3, [pc, #32]	; (e18 <delay_init+0x4c>)
     df6:	22fa      	movs	r2, #250	; 0xfa
     df8:	0091      	lsls	r1, r2, #2
     dfa:	4798      	blx	r3
     dfc:	0003      	movs	r3, r0
     dfe:	001a      	movs	r2, r3
     e00:	4b06      	ldr	r3, [pc, #24]	; (e1c <delay_init+0x50>)
     e02:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <delay_init+0x54>)
     e06:	2205      	movs	r2, #5
     e08:	601a      	str	r2, [r3, #0]
}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	46bd      	mov	sp, r7
     e0e:	bd80      	pop	{r7, pc}
     e10:	00002fa9 	.word	0x00002fa9
     e14:	20000000 	.word	0x20000000
     e18:	0000381d 	.word	0x0000381d
     e1c:	20000004 	.word	0x20000004
     e20:	e000e010 	.word	0xe000e010

00000e24 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
	while (n--) {
     e2c:	e004      	b.n	e38 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     e2e:	4b07      	ldr	r3, [pc, #28]	; (e4c <delay_cycles_ms+0x28>)
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	0018      	movs	r0, r3
     e34:	4b06      	ldr	r3, [pc, #24]	; (e50 <delay_cycles_ms+0x2c>)
     e36:	4798      	blx	r3
	while (n--) {
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	1e5a      	subs	r2, r3, #1
     e3c:	607a      	str	r2, [r7, #4]
     e3e:	2b00      	cmp	r3, #0
     e40:	d1f5      	bne.n	e2e <delay_cycles_ms+0xa>
	}
}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	46bd      	mov	sp, r7
     e46:	b002      	add	sp, #8
     e48:	bd80      	pop	{r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	20000000 	.word	0x20000000
     e50:	00000d99 	.word	0x00000d99

00000e54 <system_pinmux_get_config_defaults>:
{
     e54:	b580      	push	{r7, lr}
     e56:	b082      	sub	sp, #8
     e58:	af00      	add	r7, sp, #0
     e5a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	2280      	movs	r2, #128	; 0x80
     e60:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e62:	687b      	ldr	r3, [r7, #4]
     e64:	2200      	movs	r2, #0
     e66:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	2201      	movs	r2, #1
     e6c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e6e:	687b      	ldr	r3, [r7, #4]
     e70:	2200      	movs	r2, #0
     e72:	70da      	strb	r2, [r3, #3]
}
     e74:	46c0      	nop			; (mov r8, r8)
     e76:	46bd      	mov	sp, r7
     e78:	b002      	add	sp, #8
     e7a:	bd80      	pop	{r7, pc}

00000e7c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	b084      	sub	sp, #16
     e80:	af00      	add	r7, sp, #0
     e82:	0002      	movs	r2, r0
     e84:	6039      	str	r1, [r7, #0]
     e86:	1dfb      	adds	r3, r7, #7
     e88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     e8a:	230c      	movs	r3, #12
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	0018      	movs	r0, r3
     e90:	4b10      	ldr	r3, [pc, #64]	; (ed4 <port_pin_set_config+0x58>)
     e92:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     e94:	230c      	movs	r3, #12
     e96:	18fb      	adds	r3, r7, r3
     e98:	2280      	movs	r2, #128	; 0x80
     e9a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e9c:	683b      	ldr	r3, [r7, #0]
     e9e:	781a      	ldrb	r2, [r3, #0]
     ea0:	230c      	movs	r3, #12
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ea6:	683b      	ldr	r3, [r7, #0]
     ea8:	785a      	ldrb	r2, [r3, #1]
     eaa:	230c      	movs	r3, #12
     eac:	18fb      	adds	r3, r7, r3
     eae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     eb0:	683b      	ldr	r3, [r7, #0]
     eb2:	789a      	ldrb	r2, [r3, #2]
     eb4:	230c      	movs	r3, #12
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     eba:	230c      	movs	r3, #12
     ebc:	18fa      	adds	r2, r7, r3
     ebe:	1dfb      	adds	r3, r7, #7
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	0011      	movs	r1, r2
     ec4:	0018      	movs	r0, r3
     ec6:	4b04      	ldr	r3, [pc, #16]	; (ed8 <port_pin_set_config+0x5c>)
     ec8:	4798      	blx	r3
}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	46bd      	mov	sp, r7
     ece:	b004      	add	sp, #16
     ed0:	bd80      	pop	{r7, pc}
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	00000e55 	.word	0x00000e55
     ed8:	0000336d 	.word	0x0000336d

00000edc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     edc:	b580      	push	{r7, lr}
     ede:	b082      	sub	sp, #8
     ee0:	af00      	add	r7, sp, #0
     ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	2200      	movs	r2, #0
     ee8:	701a      	strb	r2, [r3, #0]
}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	46bd      	mov	sp, r7
     eee:	b002      	add	sp, #8
     ef0:	bd80      	pop	{r7, pc}

00000ef2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ef2:	b580      	push	{r7, lr}
     ef4:	b086      	sub	sp, #24
     ef6:	af00      	add	r7, sp, #0
     ef8:	60f8      	str	r0, [r7, #12]
     efa:	60b9      	str	r1, [r7, #8]
     efc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     efe:	2316      	movs	r3, #22
     f00:	18fb      	adds	r3, r7, r3
     f02:	2200      	movs	r2, #0
     f04:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     f06:	68bb      	ldr	r3, [r7, #8]
     f08:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     f0a:	68bb      	ldr	r3, [r7, #8]
     f0c:	085a      	lsrs	r2, r3, #1
     f0e:	68fb      	ldr	r3, [r7, #12]
     f10:	429a      	cmp	r2, r3
     f12:	d201      	bcs.n	f18 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f14:	2340      	movs	r3, #64	; 0x40
     f16:	e026      	b.n	f66 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     f18:	68bb      	ldr	r3, [r7, #8]
     f1a:	085b      	lsrs	r3, r3, #1
     f1c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     f1e:	e00a      	b.n	f36 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     f20:	693a      	ldr	r2, [r7, #16]
     f22:	68fb      	ldr	r3, [r7, #12]
     f24:	1ad3      	subs	r3, r2, r3
     f26:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     f28:	2316      	movs	r3, #22
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	881a      	ldrh	r2, [r3, #0]
     f2e:	2316      	movs	r3, #22
     f30:	18fb      	adds	r3, r7, r3
     f32:	3201      	adds	r2, #1
     f34:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     f36:	693a      	ldr	r2, [r7, #16]
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	429a      	cmp	r2, r3
     f3c:	d2f0      	bcs.n	f20 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     f3e:	2316      	movs	r3, #22
     f40:	18fb      	adds	r3, r7, r3
     f42:	2216      	movs	r2, #22
     f44:	18ba      	adds	r2, r7, r2
     f46:	8812      	ldrh	r2, [r2, #0]
     f48:	3a01      	subs	r2, #1
     f4a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     f4c:	2316      	movs	r3, #22
     f4e:	18fb      	adds	r3, r7, r3
     f50:	881b      	ldrh	r3, [r3, #0]
     f52:	2bff      	cmp	r3, #255	; 0xff
     f54:	d901      	bls.n	f5a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f56:	2340      	movs	r3, #64	; 0x40
     f58:	e005      	b.n	f66 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	2216      	movs	r2, #22
     f5e:	18ba      	adds	r2, r7, r2
     f60:	8812      	ldrh	r2, [r2, #0]
     f62:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     f64:	2300      	movs	r3, #0
	}
}
     f66:	0018      	movs	r0, r3
     f68:	46bd      	mov	sp, r7
     f6a:	b006      	add	sp, #24
     f6c:	bd80      	pop	{r7, pc}
	...

00000f70 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f70:	b580      	push	{r7, lr}
     f72:	b084      	sub	sp, #16
     f74:	af00      	add	r7, sp, #0
     f76:	0002      	movs	r2, r0
     f78:	1dfb      	adds	r3, r7, #7
     f7a:	701a      	strb	r2, [r3, #0]
     f7c:	1dbb      	adds	r3, r7, #6
     f7e:	1c0a      	adds	r2, r1, #0
     f80:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     f82:	4b1a      	ldr	r3, [pc, #104]	; (fec <sercom_set_gclk_generator+0x7c>)
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2201      	movs	r2, #1
     f88:	4053      	eors	r3, r2
     f8a:	b2db      	uxtb	r3, r3
     f8c:	2b00      	cmp	r3, #0
     f8e:	d103      	bne.n	f98 <sercom_set_gclk_generator+0x28>
     f90:	1dbb      	adds	r3, r7, #6
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d01b      	beq.n	fd0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     f98:	230c      	movs	r3, #12
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	0018      	movs	r0, r3
     f9e:	4b14      	ldr	r3, [pc, #80]	; (ff0 <sercom_set_gclk_generator+0x80>)
     fa0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     fa2:	230c      	movs	r3, #12
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	1dfa      	adds	r2, r7, #7
     fa8:	7812      	ldrb	r2, [r2, #0]
     faa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fac:	230c      	movs	r3, #12
     fae:	18fb      	adds	r3, r7, r3
     fb0:	0019      	movs	r1, r3
     fb2:	2013      	movs	r0, #19
     fb4:	4b0f      	ldr	r3, [pc, #60]	; (ff4 <sercom_set_gclk_generator+0x84>)
     fb6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     fb8:	2013      	movs	r0, #19
     fba:	4b0f      	ldr	r3, [pc, #60]	; (ff8 <sercom_set_gclk_generator+0x88>)
     fbc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     fbe:	4b0b      	ldr	r3, [pc, #44]	; (fec <sercom_set_gclk_generator+0x7c>)
     fc0:	1dfa      	adds	r2, r7, #7
     fc2:	7812      	ldrb	r2, [r2, #0]
     fc4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     fc6:	4b09      	ldr	r3, [pc, #36]	; (fec <sercom_set_gclk_generator+0x7c>)
     fc8:	2201      	movs	r2, #1
     fca:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     fcc:	2300      	movs	r3, #0
     fce:	e008      	b.n	fe2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <sercom_set_gclk_generator+0x7c>)
     fd2:	785b      	ldrb	r3, [r3, #1]
     fd4:	1dfa      	adds	r2, r7, #7
     fd6:	7812      	ldrb	r2, [r2, #0]
     fd8:	429a      	cmp	r2, r3
     fda:	d101      	bne.n	fe0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     fdc:	2300      	movs	r3, #0
     fde:	e000      	b.n	fe2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     fe0:	231d      	movs	r3, #29
}
     fe2:	0018      	movs	r0, r3
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	2000002c 	.word	0x2000002c
     ff0:	00000edd 	.word	0x00000edd
     ff4:	00003081 	.word	0x00003081
     ff8:	000030c5 	.word	0x000030c5

00000ffc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	000a      	movs	r2, r1
    1006:	1cfb      	adds	r3, r7, #3
    1008:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	4a4d      	ldr	r2, [pc, #308]	; (1144 <_sercom_get_default_pad+0x148>)
    100e:	4293      	cmp	r3, r2
    1010:	d03f      	beq.n	1092 <_sercom_get_default_pad+0x96>
    1012:	4a4c      	ldr	r2, [pc, #304]	; (1144 <_sercom_get_default_pad+0x148>)
    1014:	4293      	cmp	r3, r2
    1016:	d806      	bhi.n	1026 <_sercom_get_default_pad+0x2a>
    1018:	4a4b      	ldr	r2, [pc, #300]	; (1148 <_sercom_get_default_pad+0x14c>)
    101a:	4293      	cmp	r3, r2
    101c:	d00f      	beq.n	103e <_sercom_get_default_pad+0x42>
    101e:	4a4b      	ldr	r2, [pc, #300]	; (114c <_sercom_get_default_pad+0x150>)
    1020:	4293      	cmp	r3, r2
    1022:	d021      	beq.n	1068 <_sercom_get_default_pad+0x6c>
    1024:	e089      	b.n	113a <_sercom_get_default_pad+0x13e>
    1026:	4a4a      	ldr	r2, [pc, #296]	; (1150 <_sercom_get_default_pad+0x154>)
    1028:	4293      	cmp	r3, r2
    102a:	d100      	bne.n	102e <_sercom_get_default_pad+0x32>
    102c:	e05b      	b.n	10e6 <_sercom_get_default_pad+0xea>
    102e:	4a49      	ldr	r2, [pc, #292]	; (1154 <_sercom_get_default_pad+0x158>)
    1030:	4293      	cmp	r3, r2
    1032:	d100      	bne.n	1036 <_sercom_get_default_pad+0x3a>
    1034:	e06c      	b.n	1110 <_sercom_get_default_pad+0x114>
    1036:	4a48      	ldr	r2, [pc, #288]	; (1158 <_sercom_get_default_pad+0x15c>)
    1038:	4293      	cmp	r3, r2
    103a:	d03f      	beq.n	10bc <_sercom_get_default_pad+0xc0>
    103c:	e07d      	b.n	113a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    103e:	1cfb      	adds	r3, r7, #3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	2b01      	cmp	r3, #1
    1044:	d00a      	beq.n	105c <_sercom_get_default_pad+0x60>
    1046:	dc02      	bgt.n	104e <_sercom_get_default_pad+0x52>
    1048:	2b00      	cmp	r3, #0
    104a:	d005      	beq.n	1058 <_sercom_get_default_pad+0x5c>
    104c:	e075      	b.n	113a <_sercom_get_default_pad+0x13e>
    104e:	2b02      	cmp	r3, #2
    1050:	d006      	beq.n	1060 <_sercom_get_default_pad+0x64>
    1052:	2b03      	cmp	r3, #3
    1054:	d006      	beq.n	1064 <_sercom_get_default_pad+0x68>
    1056:	e070      	b.n	113a <_sercom_get_default_pad+0x13e>
    1058:	4b40      	ldr	r3, [pc, #256]	; (115c <_sercom_get_default_pad+0x160>)
    105a:	e06f      	b.n	113c <_sercom_get_default_pad+0x140>
    105c:	4b40      	ldr	r3, [pc, #256]	; (1160 <_sercom_get_default_pad+0x164>)
    105e:	e06d      	b.n	113c <_sercom_get_default_pad+0x140>
    1060:	4b40      	ldr	r3, [pc, #256]	; (1164 <_sercom_get_default_pad+0x168>)
    1062:	e06b      	b.n	113c <_sercom_get_default_pad+0x140>
    1064:	4b40      	ldr	r3, [pc, #256]	; (1168 <_sercom_get_default_pad+0x16c>)
    1066:	e069      	b.n	113c <_sercom_get_default_pad+0x140>
    1068:	1cfb      	adds	r3, r7, #3
    106a:	781b      	ldrb	r3, [r3, #0]
    106c:	2b01      	cmp	r3, #1
    106e:	d00a      	beq.n	1086 <_sercom_get_default_pad+0x8a>
    1070:	dc02      	bgt.n	1078 <_sercom_get_default_pad+0x7c>
    1072:	2b00      	cmp	r3, #0
    1074:	d005      	beq.n	1082 <_sercom_get_default_pad+0x86>
    1076:	e060      	b.n	113a <_sercom_get_default_pad+0x13e>
    1078:	2b02      	cmp	r3, #2
    107a:	d006      	beq.n	108a <_sercom_get_default_pad+0x8e>
    107c:	2b03      	cmp	r3, #3
    107e:	d006      	beq.n	108e <_sercom_get_default_pad+0x92>
    1080:	e05b      	b.n	113a <_sercom_get_default_pad+0x13e>
    1082:	2303      	movs	r3, #3
    1084:	e05a      	b.n	113c <_sercom_get_default_pad+0x140>
    1086:	4b39      	ldr	r3, [pc, #228]	; (116c <_sercom_get_default_pad+0x170>)
    1088:	e058      	b.n	113c <_sercom_get_default_pad+0x140>
    108a:	4b39      	ldr	r3, [pc, #228]	; (1170 <_sercom_get_default_pad+0x174>)
    108c:	e056      	b.n	113c <_sercom_get_default_pad+0x140>
    108e:	4b39      	ldr	r3, [pc, #228]	; (1174 <_sercom_get_default_pad+0x178>)
    1090:	e054      	b.n	113c <_sercom_get_default_pad+0x140>
    1092:	1cfb      	adds	r3, r7, #3
    1094:	781b      	ldrb	r3, [r3, #0]
    1096:	2b01      	cmp	r3, #1
    1098:	d00a      	beq.n	10b0 <_sercom_get_default_pad+0xb4>
    109a:	dc02      	bgt.n	10a2 <_sercom_get_default_pad+0xa6>
    109c:	2b00      	cmp	r3, #0
    109e:	d005      	beq.n	10ac <_sercom_get_default_pad+0xb0>
    10a0:	e04b      	b.n	113a <_sercom_get_default_pad+0x13e>
    10a2:	2b02      	cmp	r3, #2
    10a4:	d006      	beq.n	10b4 <_sercom_get_default_pad+0xb8>
    10a6:	2b03      	cmp	r3, #3
    10a8:	d006      	beq.n	10b8 <_sercom_get_default_pad+0xbc>
    10aa:	e046      	b.n	113a <_sercom_get_default_pad+0x13e>
    10ac:	4b32      	ldr	r3, [pc, #200]	; (1178 <_sercom_get_default_pad+0x17c>)
    10ae:	e045      	b.n	113c <_sercom_get_default_pad+0x140>
    10b0:	4b32      	ldr	r3, [pc, #200]	; (117c <_sercom_get_default_pad+0x180>)
    10b2:	e043      	b.n	113c <_sercom_get_default_pad+0x140>
    10b4:	4b32      	ldr	r3, [pc, #200]	; (1180 <_sercom_get_default_pad+0x184>)
    10b6:	e041      	b.n	113c <_sercom_get_default_pad+0x140>
    10b8:	4b32      	ldr	r3, [pc, #200]	; (1184 <_sercom_get_default_pad+0x188>)
    10ba:	e03f      	b.n	113c <_sercom_get_default_pad+0x140>
    10bc:	1cfb      	adds	r3, r7, #3
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	2b01      	cmp	r3, #1
    10c2:	d00a      	beq.n	10da <_sercom_get_default_pad+0xde>
    10c4:	dc02      	bgt.n	10cc <_sercom_get_default_pad+0xd0>
    10c6:	2b00      	cmp	r3, #0
    10c8:	d005      	beq.n	10d6 <_sercom_get_default_pad+0xda>
    10ca:	e036      	b.n	113a <_sercom_get_default_pad+0x13e>
    10cc:	2b02      	cmp	r3, #2
    10ce:	d006      	beq.n	10de <_sercom_get_default_pad+0xe2>
    10d0:	2b03      	cmp	r3, #3
    10d2:	d006      	beq.n	10e2 <_sercom_get_default_pad+0xe6>
    10d4:	e031      	b.n	113a <_sercom_get_default_pad+0x13e>
    10d6:	4b2c      	ldr	r3, [pc, #176]	; (1188 <_sercom_get_default_pad+0x18c>)
    10d8:	e030      	b.n	113c <_sercom_get_default_pad+0x140>
    10da:	4b2c      	ldr	r3, [pc, #176]	; (118c <_sercom_get_default_pad+0x190>)
    10dc:	e02e      	b.n	113c <_sercom_get_default_pad+0x140>
    10de:	4b2c      	ldr	r3, [pc, #176]	; (1190 <_sercom_get_default_pad+0x194>)
    10e0:	e02c      	b.n	113c <_sercom_get_default_pad+0x140>
    10e2:	4b2c      	ldr	r3, [pc, #176]	; (1194 <_sercom_get_default_pad+0x198>)
    10e4:	e02a      	b.n	113c <_sercom_get_default_pad+0x140>
    10e6:	1cfb      	adds	r3, r7, #3
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b01      	cmp	r3, #1
    10ec:	d00a      	beq.n	1104 <_sercom_get_default_pad+0x108>
    10ee:	dc02      	bgt.n	10f6 <_sercom_get_default_pad+0xfa>
    10f0:	2b00      	cmp	r3, #0
    10f2:	d005      	beq.n	1100 <_sercom_get_default_pad+0x104>
    10f4:	e021      	b.n	113a <_sercom_get_default_pad+0x13e>
    10f6:	2b02      	cmp	r3, #2
    10f8:	d006      	beq.n	1108 <_sercom_get_default_pad+0x10c>
    10fa:	2b03      	cmp	r3, #3
    10fc:	d006      	beq.n	110c <_sercom_get_default_pad+0x110>
    10fe:	e01c      	b.n	113a <_sercom_get_default_pad+0x13e>
    1100:	4b25      	ldr	r3, [pc, #148]	; (1198 <_sercom_get_default_pad+0x19c>)
    1102:	e01b      	b.n	113c <_sercom_get_default_pad+0x140>
    1104:	4b25      	ldr	r3, [pc, #148]	; (119c <_sercom_get_default_pad+0x1a0>)
    1106:	e019      	b.n	113c <_sercom_get_default_pad+0x140>
    1108:	4b25      	ldr	r3, [pc, #148]	; (11a0 <_sercom_get_default_pad+0x1a4>)
    110a:	e017      	b.n	113c <_sercom_get_default_pad+0x140>
    110c:	4b25      	ldr	r3, [pc, #148]	; (11a4 <_sercom_get_default_pad+0x1a8>)
    110e:	e015      	b.n	113c <_sercom_get_default_pad+0x140>
    1110:	1cfb      	adds	r3, r7, #3
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	2b01      	cmp	r3, #1
    1116:	d00a      	beq.n	112e <_sercom_get_default_pad+0x132>
    1118:	dc02      	bgt.n	1120 <_sercom_get_default_pad+0x124>
    111a:	2b00      	cmp	r3, #0
    111c:	d005      	beq.n	112a <_sercom_get_default_pad+0x12e>
    111e:	e00c      	b.n	113a <_sercom_get_default_pad+0x13e>
    1120:	2b02      	cmp	r3, #2
    1122:	d006      	beq.n	1132 <_sercom_get_default_pad+0x136>
    1124:	2b03      	cmp	r3, #3
    1126:	d006      	beq.n	1136 <_sercom_get_default_pad+0x13a>
    1128:	e007      	b.n	113a <_sercom_get_default_pad+0x13e>
    112a:	4b1f      	ldr	r3, [pc, #124]	; (11a8 <_sercom_get_default_pad+0x1ac>)
    112c:	e006      	b.n	113c <_sercom_get_default_pad+0x140>
    112e:	4b1f      	ldr	r3, [pc, #124]	; (11ac <_sercom_get_default_pad+0x1b0>)
    1130:	e004      	b.n	113c <_sercom_get_default_pad+0x140>
    1132:	4b1f      	ldr	r3, [pc, #124]	; (11b0 <_sercom_get_default_pad+0x1b4>)
    1134:	e002      	b.n	113c <_sercom_get_default_pad+0x140>
    1136:	4b1f      	ldr	r3, [pc, #124]	; (11b4 <_sercom_get_default_pad+0x1b8>)
    1138:	e000      	b.n	113c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    113a:	2300      	movs	r3, #0
}
    113c:	0018      	movs	r0, r3
    113e:	46bd      	mov	sp, r7
    1140:	b002      	add	sp, #8
    1142:	bd80      	pop	{r7, pc}
    1144:	42001000 	.word	0x42001000
    1148:	42000800 	.word	0x42000800
    114c:	42000c00 	.word	0x42000c00
    1150:	42001800 	.word	0x42001800
    1154:	42001c00 	.word	0x42001c00
    1158:	42001400 	.word	0x42001400
    115c:	00040003 	.word	0x00040003
    1160:	00050003 	.word	0x00050003
    1164:	00060003 	.word	0x00060003
    1168:	00070003 	.word	0x00070003
    116c:	00010003 	.word	0x00010003
    1170:	001e0003 	.word	0x001e0003
    1174:	001f0003 	.word	0x001f0003
    1178:	00080003 	.word	0x00080003
    117c:	00090003 	.word	0x00090003
    1180:	000a0003 	.word	0x000a0003
    1184:	000b0003 	.word	0x000b0003
    1188:	00100003 	.word	0x00100003
    118c:	00110003 	.word	0x00110003
    1190:	00120003 	.word	0x00120003
    1194:	00130003 	.word	0x00130003
    1198:	000c0003 	.word	0x000c0003
    119c:	000d0003 	.word	0x000d0003
    11a0:	000e0003 	.word	0x000e0003
    11a4:	000f0003 	.word	0x000f0003
    11a8:	00160003 	.word	0x00160003
    11ac:	00170003 	.word	0x00170003
    11b0:	00180003 	.word	0x00180003
    11b4:	00190003 	.word	0x00190003

000011b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    11b8:	b590      	push	{r4, r7, lr}
    11ba:	b08b      	sub	sp, #44	; 0x2c
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    11c0:	230c      	movs	r3, #12
    11c2:	18fb      	adds	r3, r7, r3
    11c4:	4a0f      	ldr	r2, [pc, #60]	; (1204 <_sercom_get_sercom_inst_index+0x4c>)
    11c6:	ca13      	ldmia	r2!, {r0, r1, r4}
    11c8:	c313      	stmia	r3!, {r0, r1, r4}
    11ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    11cc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ce:	2300      	movs	r3, #0
    11d0:	627b      	str	r3, [r7, #36]	; 0x24
    11d2:	e00e      	b.n	11f2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    11d4:	230c      	movs	r3, #12
    11d6:	18fb      	adds	r3, r7, r3
    11d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11da:	0092      	lsls	r2, r2, #2
    11dc:	58d3      	ldr	r3, [r2, r3]
    11de:	001a      	movs	r2, r3
    11e0:	687b      	ldr	r3, [r7, #4]
    11e2:	429a      	cmp	r2, r3
    11e4:	d102      	bne.n	11ec <_sercom_get_sercom_inst_index+0x34>
			return i;
    11e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11e8:	b2db      	uxtb	r3, r3
    11ea:	e006      	b.n	11fa <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11ee:	3301      	adds	r3, #1
    11f0:	627b      	str	r3, [r7, #36]	; 0x24
    11f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11f4:	2b05      	cmp	r3, #5
    11f6:	d9ed      	bls.n	11d4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    11f8:	2300      	movs	r3, #0
}
    11fa:	0018      	movs	r0, r3
    11fc:	46bd      	mov	sp, r7
    11fe:	b00b      	add	sp, #44	; 0x2c
    1200:	bd90      	pop	{r4, r7, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	0000398c 	.word	0x0000398c

00001208 <system_pinmux_get_config_defaults>:
{
    1208:	b580      	push	{r7, lr}
    120a:	b082      	sub	sp, #8
    120c:	af00      	add	r7, sp, #0
    120e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	2280      	movs	r2, #128	; 0x80
    1214:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	2200      	movs	r2, #0
    121a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    121c:	687b      	ldr	r3, [r7, #4]
    121e:	2201      	movs	r2, #1
    1220:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1222:	687b      	ldr	r3, [r7, #4]
    1224:	2200      	movs	r2, #0
    1226:	70da      	strb	r2, [r3, #3]
}
    1228:	46c0      	nop			; (mov r8, r8)
    122a:	46bd      	mov	sp, r7
    122c:	b002      	add	sp, #8
    122e:	bd80      	pop	{r7, pc}

00001230 <system_pinmux_get_group_from_gpio_pin>:
{
    1230:	b580      	push	{r7, lr}
    1232:	b084      	sub	sp, #16
    1234:	af00      	add	r7, sp, #0
    1236:	0002      	movs	r2, r0
    1238:	1dfb      	adds	r3, r7, #7
    123a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    123c:	230f      	movs	r3, #15
    123e:	18fb      	adds	r3, r7, r3
    1240:	1dfa      	adds	r2, r7, #7
    1242:	7812      	ldrb	r2, [r2, #0]
    1244:	09d2      	lsrs	r2, r2, #7
    1246:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1248:	230e      	movs	r3, #14
    124a:	18fb      	adds	r3, r7, r3
    124c:	1dfa      	adds	r2, r7, #7
    124e:	7812      	ldrb	r2, [r2, #0]
    1250:	0952      	lsrs	r2, r2, #5
    1252:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1254:	4b0d      	ldr	r3, [pc, #52]	; (128c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1256:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1258:	230f      	movs	r3, #15
    125a:	18fb      	adds	r3, r7, r3
    125c:	781b      	ldrb	r3, [r3, #0]
    125e:	2b00      	cmp	r3, #0
    1260:	d10f      	bne.n	1282 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1262:	230f      	movs	r3, #15
    1264:	18fb      	adds	r3, r7, r3
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	009b      	lsls	r3, r3, #2
    126a:	2210      	movs	r2, #16
    126c:	4694      	mov	ip, r2
    126e:	44bc      	add	ip, r7
    1270:	4463      	add	r3, ip
    1272:	3b08      	subs	r3, #8
    1274:	681a      	ldr	r2, [r3, #0]
    1276:	230e      	movs	r3, #14
    1278:	18fb      	adds	r3, r7, r3
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	01db      	lsls	r3, r3, #7
    127e:	18d3      	adds	r3, r2, r3
    1280:	e000      	b.n	1284 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    1282:	2300      	movs	r3, #0
}
    1284:	0018      	movs	r0, r3
    1286:	46bd      	mov	sp, r7
    1288:	b004      	add	sp, #16
    128a:	bd80      	pop	{r7, pc}
    128c:	41004400 	.word	0x41004400

00001290 <port_get_group_from_gpio_pin>:
{
    1290:	b580      	push	{r7, lr}
    1292:	b082      	sub	sp, #8
    1294:	af00      	add	r7, sp, #0
    1296:	0002      	movs	r2, r0
    1298:	1dfb      	adds	r3, r7, #7
    129a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    129c:	1dfb      	adds	r3, r7, #7
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	0018      	movs	r0, r3
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <port_get_group_from_gpio_pin+0x20>)
    12a4:	4798      	blx	r3
    12a6:	0003      	movs	r3, r0
}
    12a8:	0018      	movs	r0, r3
    12aa:	46bd      	mov	sp, r7
    12ac:	b002      	add	sp, #8
    12ae:	bd80      	pop	{r7, pc}
    12b0:	00001231 	.word	0x00001231

000012b4 <port_pin_set_output_level>:
{
    12b4:	b580      	push	{r7, lr}
    12b6:	b084      	sub	sp, #16
    12b8:	af00      	add	r7, sp, #0
    12ba:	0002      	movs	r2, r0
    12bc:	1dfb      	adds	r3, r7, #7
    12be:	701a      	strb	r2, [r3, #0]
    12c0:	1dbb      	adds	r3, r7, #6
    12c2:	1c0a      	adds	r2, r1, #0
    12c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    12c6:	1dfb      	adds	r3, r7, #7
    12c8:	781b      	ldrb	r3, [r3, #0]
    12ca:	0018      	movs	r0, r3
    12cc:	4b0d      	ldr	r3, [pc, #52]	; (1304 <port_pin_set_output_level+0x50>)
    12ce:	4798      	blx	r3
    12d0:	0003      	movs	r3, r0
    12d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    12d4:	1dfb      	adds	r3, r7, #7
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	221f      	movs	r2, #31
    12da:	4013      	ands	r3, r2
    12dc:	2201      	movs	r2, #1
    12de:	409a      	lsls	r2, r3
    12e0:	0013      	movs	r3, r2
    12e2:	60bb      	str	r3, [r7, #8]
	if (level) {
    12e4:	1dbb      	adds	r3, r7, #6
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d003      	beq.n	12f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    12ec:	68fb      	ldr	r3, [r7, #12]
    12ee:	68ba      	ldr	r2, [r7, #8]
    12f0:	619a      	str	r2, [r3, #24]
}
    12f2:	e002      	b.n	12fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	68ba      	ldr	r2, [r7, #8]
    12f8:	615a      	str	r2, [r3, #20]
}
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	46bd      	mov	sp, r7
    12fe:	b004      	add	sp, #16
    1300:	bd80      	pop	{r7, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	00001291 	.word	0x00001291

00001308 <system_gclk_chan_get_config_defaults>:
{
    1308:	b580      	push	{r7, lr}
    130a:	b082      	sub	sp, #8
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	2200      	movs	r2, #0
    1314:	701a      	strb	r2, [r3, #0]
}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	46bd      	mov	sp, r7
    131a:	b002      	add	sp, #8
    131c:	bd80      	pop	{r7, pc}
	...

00001320 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1320:	b580      	push	{r7, lr}
    1322:	b082      	sub	sp, #8
    1324:	af00      	add	r7, sp, #0
    1326:	0002      	movs	r2, r0
    1328:	6039      	str	r1, [r7, #0]
    132a:	1dfb      	adds	r3, r7, #7
    132c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    132e:	1dfb      	adds	r3, r7, #7
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b01      	cmp	r3, #1
    1334:	d00a      	beq.n	134c <system_apb_clock_set_mask+0x2c>
    1336:	2b02      	cmp	r3, #2
    1338:	d00f      	beq.n	135a <system_apb_clock_set_mask+0x3a>
    133a:	2b00      	cmp	r3, #0
    133c:	d114      	bne.n	1368 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    133e:	4b0e      	ldr	r3, [pc, #56]	; (1378 <system_apb_clock_set_mask+0x58>)
    1340:	4a0d      	ldr	r2, [pc, #52]	; (1378 <system_apb_clock_set_mask+0x58>)
    1342:	6991      	ldr	r1, [r2, #24]
    1344:	683a      	ldr	r2, [r7, #0]
    1346:	430a      	orrs	r2, r1
    1348:	619a      	str	r2, [r3, #24]
			break;
    134a:	e00f      	b.n	136c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <system_apb_clock_set_mask+0x58>)
    134e:	4a0a      	ldr	r2, [pc, #40]	; (1378 <system_apb_clock_set_mask+0x58>)
    1350:	69d1      	ldr	r1, [r2, #28]
    1352:	683a      	ldr	r2, [r7, #0]
    1354:	430a      	orrs	r2, r1
    1356:	61da      	str	r2, [r3, #28]
			break;
    1358:	e008      	b.n	136c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    135a:	4b07      	ldr	r3, [pc, #28]	; (1378 <system_apb_clock_set_mask+0x58>)
    135c:	4a06      	ldr	r2, [pc, #24]	; (1378 <system_apb_clock_set_mask+0x58>)
    135e:	6a11      	ldr	r1, [r2, #32]
    1360:	683a      	ldr	r2, [r7, #0]
    1362:	430a      	orrs	r2, r1
    1364:	621a      	str	r2, [r3, #32]
			break;
    1366:	e001      	b.n	136c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1368:	2317      	movs	r3, #23
    136a:	e000      	b.n	136e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    136c:	2300      	movs	r3, #0
}
    136e:	0018      	movs	r0, r3
    1370:	46bd      	mov	sp, r7
    1372:	b002      	add	sp, #8
    1374:	bd80      	pop	{r7, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	40000400 	.word	0x40000400

0000137c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    137c:	b580      	push	{r7, lr}
    137e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1380:	4b05      	ldr	r3, [pc, #20]	; (1398 <system_is_debugger_present+0x1c>)
    1382:	789b      	ldrb	r3, [r3, #2]
    1384:	b2db      	uxtb	r3, r3
    1386:	001a      	movs	r2, r3
    1388:	2302      	movs	r3, #2
    138a:	4013      	ands	r3, r2
    138c:	1e5a      	subs	r2, r3, #1
    138e:	4193      	sbcs	r3, r2
    1390:	b2db      	uxtb	r3, r3
}
    1392:	0018      	movs	r0, r3
    1394:	46bd      	mov	sp, r7
    1396:	bd80      	pop	{r7, pc}
    1398:	41002000 	.word	0x41002000

0000139c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    139c:	b580      	push	{r7, lr}
    139e:	b084      	sub	sp, #16
    13a0:	af00      	add	r7, sp, #0
    13a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	7e1b      	ldrb	r3, [r3, #24]
    13ae:	b2db      	uxtb	r3, r3
    13b0:	001a      	movs	r2, r3
    13b2:	2302      	movs	r3, #2
    13b4:	4013      	ands	r3, r2
    13b6:	1e5a      	subs	r2, r3, #1
    13b8:	4193      	sbcs	r3, r2
    13ba:	b2db      	uxtb	r3, r3
}
    13bc:	0018      	movs	r0, r3
    13be:	46bd      	mov	sp, r7
    13c0:	b004      	add	sp, #16
    13c2:	bd80      	pop	{r7, pc}

000013c4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	b084      	sub	sp, #16
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13d2:	68fb      	ldr	r3, [r7, #12]
    13d4:	7e1b      	ldrb	r3, [r3, #24]
    13d6:	b2db      	uxtb	r3, r3
    13d8:	001a      	movs	r2, r3
    13da:	2301      	movs	r3, #1
    13dc:	4013      	ands	r3, r2
    13de:	1e5a      	subs	r2, r3, #1
    13e0:	4193      	sbcs	r3, r2
    13e2:	b2db      	uxtb	r3, r3
}
    13e4:	0018      	movs	r0, r3
    13e6:	46bd      	mov	sp, r7
    13e8:	b004      	add	sp, #16
    13ea:	bd80      	pop	{r7, pc}

000013ec <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    13ec:	b580      	push	{r7, lr}
    13ee:	b084      	sub	sp, #16
    13f0:	af00      	add	r7, sp, #0
    13f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13f4:	687b      	ldr	r3, [r7, #4]
    13f6:	681b      	ldr	r3, [r3, #0]
    13f8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13fa:	68fb      	ldr	r3, [r7, #12]
    13fc:	7e1b      	ldrb	r3, [r3, #24]
    13fe:	b2db      	uxtb	r3, r3
    1400:	001a      	movs	r2, r3
    1402:	2304      	movs	r3, #4
    1404:	4013      	ands	r3, r2
    1406:	1e5a      	subs	r2, r3, #1
    1408:	4193      	sbcs	r3, r2
    140a:	b2db      	uxtb	r3, r3
}
    140c:	0018      	movs	r0, r3
    140e:	46bd      	mov	sp, r7
    1410:	b004      	add	sp, #16
    1412:	bd80      	pop	{r7, pc}

00001414 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1414:	b580      	push	{r7, lr}
    1416:	b084      	sub	sp, #16
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
    141c:	000a      	movs	r2, r1
    141e:	1cbb      	adds	r3, r7, #2
    1420:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	681b      	ldr	r3, [r3, #0]
    1426:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	0018      	movs	r0, r3
    142c:	4b0a      	ldr	r3, [pc, #40]	; (1458 <spi_write+0x44>)
    142e:	4798      	blx	r3
    1430:	0003      	movs	r3, r0
    1432:	001a      	movs	r2, r3
    1434:	2301      	movs	r3, #1
    1436:	4053      	eors	r3, r2
    1438:	b2db      	uxtb	r3, r3
    143a:	2b00      	cmp	r3, #0
    143c:	d001      	beq.n	1442 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    143e:	2305      	movs	r3, #5
    1440:	e006      	b.n	1450 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1442:	1cbb      	adds	r3, r7, #2
    1444:	881b      	ldrh	r3, [r3, #0]
    1446:	05db      	lsls	r3, r3, #23
    1448:	0dda      	lsrs	r2, r3, #23
    144a:	68fb      	ldr	r3, [r7, #12]
    144c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    144e:	2300      	movs	r3, #0
}
    1450:	0018      	movs	r0, r3
    1452:	46bd      	mov	sp, r7
    1454:	b004      	add	sp, #16
    1456:	bd80      	pop	{r7, pc}
    1458:	000013c5 	.word	0x000013c5

0000145c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    145c:	b580      	push	{r7, lr}
    145e:	b084      	sub	sp, #16
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
    1464:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	681b      	ldr	r3, [r3, #0]
    146a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    146c:	687b      	ldr	r3, [r7, #4]
    146e:	0018      	movs	r0, r3
    1470:	4b1b      	ldr	r3, [pc, #108]	; (14e0 <spi_read+0x84>)
    1472:	4798      	blx	r3
    1474:	0003      	movs	r3, r0
    1476:	001a      	movs	r2, r3
    1478:	2301      	movs	r3, #1
    147a:	4053      	eors	r3, r2
    147c:	b2db      	uxtb	r3, r3
    147e:	2b00      	cmp	r3, #0
    1480:	d001      	beq.n	1486 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1482:	2310      	movs	r3, #16
    1484:	e027      	b.n	14d6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1486:	230f      	movs	r3, #15
    1488:	18fb      	adds	r3, r7, r3
    148a:	2200      	movs	r2, #0
    148c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    148e:	68bb      	ldr	r3, [r7, #8]
    1490:	8b5b      	ldrh	r3, [r3, #26]
    1492:	b29b      	uxth	r3, r3
    1494:	001a      	movs	r2, r3
    1496:	2304      	movs	r3, #4
    1498:	4013      	ands	r3, r2
    149a:	d006      	beq.n	14aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    149c:	230f      	movs	r3, #15
    149e:	18fb      	adds	r3, r7, r3
    14a0:	221e      	movs	r2, #30
    14a2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14a4:	68bb      	ldr	r3, [r7, #8]
    14a6:	2204      	movs	r2, #4
    14a8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	799b      	ldrb	r3, [r3, #6]
    14ae:	2b01      	cmp	r3, #1
    14b0:	d108      	bne.n	14c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14b2:	68bb      	ldr	r3, [r7, #8]
    14b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b6:	b29b      	uxth	r3, r3
    14b8:	05db      	lsls	r3, r3, #23
    14ba:	0ddb      	lsrs	r3, r3, #23
    14bc:	b29a      	uxth	r2, r3
    14be:	683b      	ldr	r3, [r7, #0]
    14c0:	801a      	strh	r2, [r3, #0]
    14c2:	e005      	b.n	14d0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14c4:	68bb      	ldr	r3, [r7, #8]
    14c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14c8:	b2db      	uxtb	r3, r3
    14ca:	b29a      	uxth	r2, r3
    14cc:	683b      	ldr	r3, [r7, #0]
    14ce:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    14d0:	230f      	movs	r3, #15
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	781b      	ldrb	r3, [r3, #0]
}
    14d6:	0018      	movs	r0, r3
    14d8:	46bd      	mov	sp, r7
    14da:	b004      	add	sp, #16
    14dc:	bd80      	pop	{r7, pc}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	000013ed 	.word	0x000013ed

000014e4 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b084      	sub	sp, #16
    14e8:	af00      	add	r7, sp, #0
    14ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	2202      	movs	r2, #2
    14f6:	761a      	strb	r2, [r3, #24]
}
    14f8:	46c0      	nop			; (mov r8, r8)
    14fa:	46bd      	mov	sp, r7
    14fc:	b004      	add	sp, #16
    14fe:	bd80      	pop	{r7, pc}

00001500 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    1500:	b590      	push	{r4, r7, lr}
    1502:	b093      	sub	sp, #76	; 0x4c
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
    1508:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    1510:	687b      	ldr	r3, [r7, #4]
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1516:	231c      	movs	r3, #28
    1518:	18fb      	adds	r3, r7, r3
    151a:	0018      	movs	r0, r3
    151c:	4b85      	ldr	r3, [pc, #532]	; (1734 <_spi_set_config+0x234>)
    151e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1520:	231c      	movs	r3, #28
    1522:	18fb      	adds	r3, r7, r3
    1524:	2200      	movs	r2, #0
    1526:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    1528:	683b      	ldr	r3, [r7, #0]
    152a:	781b      	ldrb	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d103      	bne.n	1538 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1530:	231c      	movs	r3, #28
    1532:	18fb      	adds	r3, r7, r3
    1534:	2200      	movs	r2, #0
    1536:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1538:	683b      	ldr	r3, [r7, #0]
    153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    153c:	230c      	movs	r3, #12
    153e:	18fb      	adds	r3, r7, r3
    1540:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    1546:	230c      	movs	r3, #12
    1548:	18fb      	adds	r3, r7, r3
    154a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    154c:	683b      	ldr	r3, [r7, #0]
    154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1550:	230c      	movs	r3, #12
    1552:	18fb      	adds	r3, r7, r3
    1554:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    1556:	683b      	ldr	r3, [r7, #0]
    1558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    155a:	230c      	movs	r3, #12
    155c:	18fb      	adds	r3, r7, r3
    155e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1560:	2347      	movs	r3, #71	; 0x47
    1562:	18fb      	adds	r3, r7, r3
    1564:	2200      	movs	r2, #0
    1566:	701a      	strb	r2, [r3, #0]
    1568:	e02c      	b.n	15c4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    156a:	2347      	movs	r3, #71	; 0x47
    156c:	18fb      	adds	r3, r7, r3
    156e:	781a      	ldrb	r2, [r3, #0]
    1570:	230c      	movs	r3, #12
    1572:	18fb      	adds	r3, r7, r3
    1574:	0092      	lsls	r2, r2, #2
    1576:	58d3      	ldr	r3, [r2, r3]
    1578:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    157a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    157c:	2b00      	cmp	r3, #0
    157e:	d109      	bne.n	1594 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1580:	2347      	movs	r3, #71	; 0x47
    1582:	18fb      	adds	r3, r7, r3
    1584:	781a      	ldrb	r2, [r3, #0]
    1586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1588:	0011      	movs	r1, r2
    158a:	0018      	movs	r0, r3
    158c:	4b6a      	ldr	r3, [pc, #424]	; (1738 <_spi_set_config+0x238>)
    158e:	4798      	blx	r3
    1590:	0003      	movs	r3, r0
    1592:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1596:	3301      	adds	r3, #1
    1598:	d00d      	beq.n	15b6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    159a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    159c:	b2da      	uxtb	r2, r3
    159e:	231c      	movs	r3, #28
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    15a6:	0c1b      	lsrs	r3, r3, #16
    15a8:	b2db      	uxtb	r3, r3
    15aa:	221c      	movs	r2, #28
    15ac:	18ba      	adds	r2, r7, r2
    15ae:	0011      	movs	r1, r2
    15b0:	0018      	movs	r0, r3
    15b2:	4b62      	ldr	r3, [pc, #392]	; (173c <_spi_set_config+0x23c>)
    15b4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    15b6:	2347      	movs	r3, #71	; 0x47
    15b8:	18fb      	adds	r3, r7, r3
    15ba:	781a      	ldrb	r2, [r3, #0]
    15bc:	2347      	movs	r3, #71	; 0x47
    15be:	18fb      	adds	r3, r7, r3
    15c0:	3201      	adds	r2, #1
    15c2:	701a      	strb	r2, [r3, #0]
    15c4:	2347      	movs	r3, #71	; 0x47
    15c6:	18fb      	adds	r3, r7, r3
    15c8:	781b      	ldrb	r3, [r3, #0]
    15ca:	2b03      	cmp	r3, #3
    15cc:	d9cd      	bls.n	156a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    15ce:	683b      	ldr	r3, [r7, #0]
    15d0:	781a      	ldrb	r2, [r3, #0]
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    15d6:	683b      	ldr	r3, [r7, #0]
    15d8:	7c1a      	ldrb	r2, [r3, #16]
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    15de:	683b      	ldr	r3, [r7, #0]
    15e0:	7c9a      	ldrb	r2, [r3, #18]
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    15e6:	683b      	ldr	r3, [r7, #0]
    15e8:	7d1a      	ldrb	r2, [r3, #20]
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    15ee:	230a      	movs	r3, #10
    15f0:	18fb      	adds	r3, r7, r3
    15f2:	2200      	movs	r2, #0
    15f4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    15f6:	2300      	movs	r3, #0
    15f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    15fa:	2300      	movs	r3, #0
    15fc:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    15fe:	683b      	ldr	r3, [r7, #0]
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	2b01      	cmp	r3, #1
    1604:	d129      	bne.n	165a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	0018      	movs	r0, r3
    160c:	4b4c      	ldr	r3, [pc, #304]	; (1740 <_spi_set_config+0x240>)
    160e:	4798      	blx	r3
    1610:	0003      	movs	r3, r0
    1612:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1616:	3314      	adds	r3, #20
    1618:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    161c:	b2db      	uxtb	r3, r3
    161e:	0018      	movs	r0, r3
    1620:	4b48      	ldr	r3, [pc, #288]	; (1744 <_spi_set_config+0x244>)
    1622:	4798      	blx	r3
    1624:	0003      	movs	r3, r0
    1626:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1628:	683b      	ldr	r3, [r7, #0]
    162a:	699b      	ldr	r3, [r3, #24]
    162c:	2223      	movs	r2, #35	; 0x23
    162e:	18bc      	adds	r4, r7, r2
    1630:	220a      	movs	r2, #10
    1632:	18ba      	adds	r2, r7, r2
    1634:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1636:	0018      	movs	r0, r3
    1638:	4b43      	ldr	r3, [pc, #268]	; (1748 <_spi_set_config+0x248>)
    163a:	4798      	blx	r3
    163c:	0003      	movs	r3, r0
    163e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1640:	2323      	movs	r3, #35	; 0x23
    1642:	18fb      	adds	r3, r7, r3
    1644:	781b      	ldrb	r3, [r3, #0]
    1646:	2b00      	cmp	r3, #0
    1648:	d001      	beq.n	164e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    164a:	2317      	movs	r3, #23
    164c:	e06d      	b.n	172a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    164e:	230a      	movs	r3, #10
    1650:	18fb      	adds	r3, r7, r3
    1652:	881b      	ldrh	r3, [r3, #0]
    1654:	b2da      	uxtb	r2, r3
    1656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1658:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    165a:	683b      	ldr	r3, [r7, #0]
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	2b00      	cmp	r3, #0
    1660:	d11a      	bne.n	1698 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1662:	683b      	ldr	r3, [r7, #0]
    1664:	699b      	ldr	r3, [r3, #24]
    1666:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	8b9b      	ldrh	r3, [r3, #28]
    166c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1672:	683a      	ldr	r2, [r7, #0]
    1674:	7f92      	ldrb	r2, [r2, #30]
    1676:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1678:	683a      	ldr	r2, [r7, #0]
    167a:	7fd2      	ldrb	r2, [r2, #31]
    167c:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    167e:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    1680:	431a      	orrs	r2, r3
    1682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1684:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	2220      	movs	r2, #32
    168a:	5c9b      	ldrb	r3, [r3, r2]
    168c:	2b00      	cmp	r3, #0
    168e:	d003      	beq.n	1698 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1692:	2240      	movs	r2, #64	; 0x40
    1694:	4313      	orrs	r3, r2
    1696:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1698:	683b      	ldr	r3, [r7, #0]
    169a:	685b      	ldr	r3, [r3, #4]
    169c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    169e:	4313      	orrs	r3, r2
    16a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    16a2:	683b      	ldr	r3, [r7, #0]
    16a4:	689b      	ldr	r3, [r3, #8]
    16a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16a8:	4313      	orrs	r3, r2
    16aa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    16ac:	683b      	ldr	r3, [r7, #0]
    16ae:	68db      	ldr	r3, [r3, #12]
    16b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    16b2:	4313      	orrs	r3, r2
    16b4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    16b6:	683b      	ldr	r3, [r7, #0]
    16b8:	7c1b      	ldrb	r3, [r3, #16]
    16ba:	001a      	movs	r2, r3
    16bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16be:	4313      	orrs	r3, r2
    16c0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    16c2:	683b      	ldr	r3, [r7, #0]
    16c4:	7c5b      	ldrb	r3, [r3, #17]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d103      	bne.n	16d2 <_spi_set_config+0x1d2>
    16ca:	4b20      	ldr	r3, [pc, #128]	; (174c <_spi_set_config+0x24c>)
    16cc:	4798      	blx	r3
    16ce:	1e03      	subs	r3, r0, #0
    16d0:	d003      	beq.n	16da <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    16d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    16d4:	2280      	movs	r2, #128	; 0x80
    16d6:	4313      	orrs	r3, r2
    16d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    16da:	683b      	ldr	r3, [r7, #0]
    16dc:	7c9b      	ldrb	r3, [r3, #18]
    16de:	2b00      	cmp	r3, #0
    16e0:	d004      	beq.n	16ec <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    16e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16e4:	2280      	movs	r2, #128	; 0x80
    16e6:	0292      	lsls	r2, r2, #10
    16e8:	4313      	orrs	r3, r2
    16ea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    16ec:	683b      	ldr	r3, [r7, #0]
    16ee:	7cdb      	ldrb	r3, [r3, #19]
    16f0:	2b00      	cmp	r3, #0
    16f2:	d004      	beq.n	16fe <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    16f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    16f6:	2280      	movs	r2, #128	; 0x80
    16f8:	0092      	lsls	r2, r2, #2
    16fa:	4313      	orrs	r3, r2
    16fc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    16fe:	683b      	ldr	r3, [r7, #0]
    1700:	7d1b      	ldrb	r3, [r3, #20]
    1702:	2b00      	cmp	r3, #0
    1704:	d004      	beq.n	1710 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1708:	2280      	movs	r2, #128	; 0x80
    170a:	0192      	lsls	r2, r2, #6
    170c:	4313      	orrs	r3, r2
    170e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1716:	431a      	orrs	r2, r3
    1718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    171e:	685a      	ldr	r2, [r3, #4]
    1720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1722:	431a      	orrs	r2, r3
    1724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1726:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1728:	2300      	movs	r3, #0
}
    172a:	0018      	movs	r0, r3
    172c:	46bd      	mov	sp, r7
    172e:	b013      	add	sp, #76	; 0x4c
    1730:	bd90      	pop	{r4, r7, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	00001209 	.word	0x00001209
    1738:	00000ffd 	.word	0x00000ffd
    173c:	0000336d 	.word	0x0000336d
    1740:	000011b9 	.word	0x000011b9
    1744:	000031a5 	.word	0x000031a5
    1748:	00000ef3 	.word	0x00000ef3
    174c:	0000137d 	.word	0x0000137d

00001750 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1750:	b590      	push	{r4, r7, lr}
    1752:	b08b      	sub	sp, #44	; 0x2c
    1754:	af00      	add	r7, sp, #0
    1756:	60f8      	str	r0, [r7, #12]
    1758:	60b9      	str	r1, [r7, #8]
    175a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    175c:	68fb      	ldr	r3, [r7, #12]
    175e:	68ba      	ldr	r2, [r7, #8]
    1760:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1768:	6a3b      	ldr	r3, [r7, #32]
    176a:	681b      	ldr	r3, [r3, #0]
    176c:	2202      	movs	r2, #2
    176e:	4013      	ands	r3, r2
    1770:	d001      	beq.n	1776 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1772:	231c      	movs	r3, #28
    1774:	e0a6      	b.n	18c4 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1776:	6a3b      	ldr	r3, [r7, #32]
    1778:	681b      	ldr	r3, [r3, #0]
    177a:	2201      	movs	r2, #1
    177c:	4013      	ands	r3, r2
    177e:	d001      	beq.n	1784 <spi_init+0x34>
		return STATUS_BUSY;
    1780:	2305      	movs	r3, #5
    1782:	e09f      	b.n	18c4 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	0018      	movs	r0, r3
    178a:	4b50      	ldr	r3, [pc, #320]	; (18cc <spi_init+0x17c>)
    178c:	4798      	blx	r3
    178e:	0003      	movs	r3, r0
    1790:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1792:	69fb      	ldr	r3, [r7, #28]
    1794:	3302      	adds	r3, #2
    1796:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1798:	69fb      	ldr	r3, [r7, #28]
    179a:	3314      	adds	r3, #20
    179c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    179e:	2201      	movs	r2, #1
    17a0:	69bb      	ldr	r3, [r7, #24]
    17a2:	409a      	lsls	r2, r3
    17a4:	0013      	movs	r3, r2
    17a6:	0019      	movs	r1, r3
    17a8:	2002      	movs	r0, #2
    17aa:	4b49      	ldr	r3, [pc, #292]	; (18d0 <spi_init+0x180>)
    17ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    17ae:	2310      	movs	r3, #16
    17b0:	18fb      	adds	r3, r7, r3
    17b2:	0018      	movs	r0, r3
    17b4:	4b47      	ldr	r3, [pc, #284]	; (18d4 <spi_init+0x184>)
    17b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    17b8:	687b      	ldr	r3, [r7, #4]
    17ba:	2224      	movs	r2, #36	; 0x24
    17bc:	5c9a      	ldrb	r2, [r3, r2]
    17be:	2310      	movs	r3, #16
    17c0:	18fb      	adds	r3, r7, r3
    17c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    17c4:	697b      	ldr	r3, [r7, #20]
    17c6:	b2db      	uxtb	r3, r3
    17c8:	2210      	movs	r2, #16
    17ca:	18ba      	adds	r2, r7, r2
    17cc:	0011      	movs	r1, r2
    17ce:	0018      	movs	r0, r3
    17d0:	4b41      	ldr	r3, [pc, #260]	; (18d8 <spi_init+0x188>)
    17d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    17d4:	697b      	ldr	r3, [r7, #20]
    17d6:	b2db      	uxtb	r3, r3
    17d8:	0018      	movs	r0, r3
    17da:	4b40      	ldr	r3, [pc, #256]	; (18dc <spi_init+0x18c>)
    17dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    17de:	687b      	ldr	r3, [r7, #4]
    17e0:	2224      	movs	r2, #36	; 0x24
    17e2:	5c9b      	ldrb	r3, [r3, r2]
    17e4:	2100      	movs	r1, #0
    17e6:	0018      	movs	r0, r3
    17e8:	4b3d      	ldr	r3, [pc, #244]	; (18e0 <spi_init+0x190>)
    17ea:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    17ec:	687b      	ldr	r3, [r7, #4]
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	2b01      	cmp	r3, #1
    17f2:	d105      	bne.n	1800 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    17f4:	6a3b      	ldr	r3, [r7, #32]
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	220c      	movs	r2, #12
    17fa:	431a      	orrs	r2, r3
    17fc:	6a3b      	ldr	r3, [r7, #32]
    17fe:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	d105      	bne.n	1814 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1808:	6a3b      	ldr	r3, [r7, #32]
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	2208      	movs	r2, #8
    180e:	431a      	orrs	r2, r3
    1810:	6a3b      	ldr	r3, [r7, #32]
    1812:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1814:	2327      	movs	r3, #39	; 0x27
    1816:	18fb      	adds	r3, r7, r3
    1818:	2200      	movs	r2, #0
    181a:	701a      	strb	r2, [r3, #0]
    181c:	e010      	b.n	1840 <spi_init+0xf0>
		module->callback[i]        = NULL;
    181e:	2327      	movs	r3, #39	; 0x27
    1820:	18fb      	adds	r3, r7, r3
    1822:	781b      	ldrb	r3, [r3, #0]
    1824:	68fa      	ldr	r2, [r7, #12]
    1826:	3302      	adds	r3, #2
    1828:	009b      	lsls	r3, r3, #2
    182a:	18d3      	adds	r3, r2, r3
    182c:	3304      	adds	r3, #4
    182e:	2200      	movs	r2, #0
    1830:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1832:	2327      	movs	r3, #39	; 0x27
    1834:	18fb      	adds	r3, r7, r3
    1836:	781a      	ldrb	r2, [r3, #0]
    1838:	2327      	movs	r3, #39	; 0x27
    183a:	18fb      	adds	r3, r7, r3
    183c:	3201      	adds	r2, #1
    183e:	701a      	strb	r2, [r3, #0]
    1840:	2327      	movs	r3, #39	; 0x27
    1842:	18fb      	adds	r3, r7, r3
    1844:	781b      	ldrb	r3, [r3, #0]
    1846:	2b06      	cmp	r3, #6
    1848:	d9e9      	bls.n	181e <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	2200      	movs	r2, #0
    184e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1850:	68fb      	ldr	r3, [r7, #12]
    1852:	2200      	movs	r2, #0
    1854:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	2200      	movs	r2, #0
    185a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    185c:	68fb      	ldr	r3, [r7, #12]
    185e:	2200      	movs	r2, #0
    1860:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	2236      	movs	r2, #54	; 0x36
    1866:	2100      	movs	r1, #0
    1868:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    186a:	68fb      	ldr	r3, [r7, #12]
    186c:	2237      	movs	r2, #55	; 0x37
    186e:	2100      	movs	r1, #0
    1870:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    1872:	68fb      	ldr	r3, [r7, #12]
    1874:	2238      	movs	r2, #56	; 0x38
    1876:	2100      	movs	r1, #0
    1878:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	2203      	movs	r2, #3
    187e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    1880:	68fb      	ldr	r3, [r7, #12]
    1882:	2200      	movs	r2, #0
    1884:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1886:	68fb      	ldr	r3, [r7, #12]
    1888:	681b      	ldr	r3, [r3, #0]
    188a:	2213      	movs	r2, #19
    188c:	18bc      	adds	r4, r7, r2
    188e:	0018      	movs	r0, r3
    1890:	4b0e      	ldr	r3, [pc, #56]	; (18cc <spi_init+0x17c>)
    1892:	4798      	blx	r3
    1894:	0003      	movs	r3, r0
    1896:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1898:	4a12      	ldr	r2, [pc, #72]	; (18e4 <spi_init+0x194>)
    189a:	2313      	movs	r3, #19
    189c:	18fb      	adds	r3, r7, r3
    189e:	781b      	ldrb	r3, [r3, #0]
    18a0:	0011      	movs	r1, r2
    18a2:	0018      	movs	r0, r3
    18a4:	4b10      	ldr	r3, [pc, #64]	; (18e8 <spi_init+0x198>)
    18a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    18a8:	2313      	movs	r3, #19
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	781a      	ldrb	r2, [r3, #0]
    18ae:	4b0f      	ldr	r3, [pc, #60]	; (18ec <spi_init+0x19c>)
    18b0:	0092      	lsls	r2, r2, #2
    18b2:	68f9      	ldr	r1, [r7, #12]
    18b4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    18b6:	687a      	ldr	r2, [r7, #4]
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	0011      	movs	r1, r2
    18bc:	0018      	movs	r0, r3
    18be:	4b0c      	ldr	r3, [pc, #48]	; (18f0 <spi_init+0x1a0>)
    18c0:	4798      	blx	r3
    18c2:	0003      	movs	r3, r0
}
    18c4:	0018      	movs	r0, r3
    18c6:	46bd      	mov	sp, r7
    18c8:	b00b      	add	sp, #44	; 0x2c
    18ca:	bd90      	pop	{r4, r7, pc}
    18cc:	000011b9 	.word	0x000011b9
    18d0:	00001321 	.word	0x00001321
    18d4:	00001309 	.word	0x00001309
    18d8:	00003081 	.word	0x00003081
    18dc:	000030c5 	.word	0x000030c5
    18e0:	00000f71 	.word	0x00000f71
    18e4:	00002411 	.word	0x00002411
    18e8:	00002731 	.word	0x00002731
    18ec:	200000ac 	.word	0x200000ac
    18f0:	00001501 	.word	0x00001501

000018f4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    18f4:	b590      	push	{r4, r7, lr}
    18f6:	b089      	sub	sp, #36	; 0x24
    18f8:	af00      	add	r7, sp, #0
    18fa:	60f8      	str	r0, [r7, #12]
    18fc:	60b9      	str	r1, [r7, #8]
    18fe:	0019      	movs	r1, r3
    1900:	1dbb      	adds	r3, r7, #6
    1902:	801a      	strh	r2, [r3, #0]
    1904:	1d3b      	adds	r3, r7, #4
    1906:	1c0a      	adds	r2, r1, #0
    1908:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    190a:	68fb      	ldr	r3, [r7, #12]
    190c:	2238      	movs	r2, #56	; 0x38
    190e:	5c9b      	ldrb	r3, [r3, r2]
    1910:	b2db      	uxtb	r3, r3
    1912:	2b05      	cmp	r3, #5
    1914:	d101      	bne.n	191a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1916:	2305      	movs	r3, #5
    1918:	e0b8      	b.n	1a8c <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    191a:	1dbb      	adds	r3, r7, #6
    191c:	881b      	ldrh	r3, [r3, #0]
    191e:	2b00      	cmp	r3, #0
    1920:	d101      	bne.n	1926 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    1922:	2317      	movs	r3, #23
    1924:	e0b2      	b.n	1a8c <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	79db      	ldrb	r3, [r3, #7]
    192a:	2201      	movs	r2, #1
    192c:	4053      	eors	r3, r2
    192e:	b2db      	uxtb	r3, r3
    1930:	2b00      	cmp	r3, #0
    1932:	d001      	beq.n	1938 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    1934:	231c      	movs	r3, #28
    1936:	e0a9      	b.n	1a8c <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1938:	68fb      	ldr	r3, [r7, #12]
    193a:	795b      	ldrb	r3, [r3, #5]
    193c:	2b00      	cmp	r3, #0
    193e:	d109      	bne.n	1954 <spi_read_buffer_wait+0x60>
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	0018      	movs	r0, r3
    1944:	4b53      	ldr	r3, [pc, #332]	; (1a94 <spi_read_buffer_wait+0x1a0>)
    1946:	4798      	blx	r3
    1948:	1e03      	subs	r3, r0, #0
    194a:	d003      	beq.n	1954 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	0018      	movs	r0, r3
    1950:	4b51      	ldr	r3, [pc, #324]	; (1a98 <spi_read_buffer_wait+0x1a4>)
    1952:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    1954:	231e      	movs	r3, #30
    1956:	18fb      	adds	r3, r7, r3
    1958:	2200      	movs	r2, #0
    195a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    195c:	e08d      	b.n	1a7a <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	795b      	ldrb	r3, [r3, #5]
    1962:	2b01      	cmp	r3, #1
    1964:	d112      	bne.n	198c <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	0018      	movs	r0, r3
    196c:	4b4b      	ldr	r3, [pc, #300]	; (1a9c <spi_read_buffer_wait+0x1a8>)
    196e:	4798      	blx	r3
    1970:	0003      	movs	r3, r0
    1972:	001a      	movs	r2, r3
    1974:	2301      	movs	r3, #1
    1976:	4053      	eors	r3, r2
    1978:	b2db      	uxtb	r3, r3
    197a:	2b00      	cmp	r3, #0
    197c:	d1f4      	bne.n	1968 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    197e:	1d3b      	adds	r3, r7, #4
    1980:	881a      	ldrh	r2, [r3, #0]
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	0011      	movs	r1, r2
    1986:	0018      	movs	r0, r3
    1988:	4b45      	ldr	r3, [pc, #276]	; (1aa0 <spi_read_buffer_wait+0x1ac>)
    198a:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    198c:	68fb      	ldr	r3, [r7, #12]
    198e:	795b      	ldrb	r3, [r3, #5]
    1990:	2b00      	cmp	r3, #0
    1992:	d12a      	bne.n	19ea <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1994:	2300      	movs	r3, #0
    1996:	61bb      	str	r3, [r7, #24]
    1998:	e008      	b.n	19ac <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    199a:	68fb      	ldr	r3, [r7, #12]
    199c:	0018      	movs	r0, r3
    199e:	4b41      	ldr	r3, [pc, #260]	; (1aa4 <spi_read_buffer_wait+0x1b0>)
    19a0:	4798      	blx	r3
    19a2:	1e03      	subs	r3, r0, #0
    19a4:	d107      	bne.n	19b6 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    19a6:	69bb      	ldr	r3, [r7, #24]
    19a8:	3301      	adds	r3, #1
    19aa:	61bb      	str	r3, [r7, #24]
    19ac:	69bb      	ldr	r3, [r7, #24]
    19ae:	4a3e      	ldr	r2, [pc, #248]	; (1aa8 <spi_read_buffer_wait+0x1b4>)
    19b0:	4293      	cmp	r3, r2
    19b2:	d9f2      	bls.n	199a <spi_read_buffer_wait+0xa6>
    19b4:	e000      	b.n	19b8 <spi_read_buffer_wait+0xc4>
					break;
    19b6:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    19b8:	68fb      	ldr	r3, [r7, #12]
    19ba:	0018      	movs	r0, r3
    19bc:	4b35      	ldr	r3, [pc, #212]	; (1a94 <spi_read_buffer_wait+0x1a0>)
    19be:	4798      	blx	r3
    19c0:	1e03      	subs	r3, r0, #0
    19c2:	d005      	beq.n	19d0 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	0018      	movs	r0, r3
    19c8:	4b33      	ldr	r3, [pc, #204]	; (1a98 <spi_read_buffer_wait+0x1a4>)
    19ca:	4798      	blx	r3
				return STATUS_ABORTED;
    19cc:	2304      	movs	r3, #4
    19ce:	e05d      	b.n	1a8c <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    19d0:	68fb      	ldr	r3, [r7, #12]
    19d2:	0018      	movs	r0, r3
    19d4:	4b33      	ldr	r3, [pc, #204]	; (1aa4 <spi_read_buffer_wait+0x1b0>)
    19d6:	4798      	blx	r3
    19d8:	0003      	movs	r3, r0
    19da:	001a      	movs	r2, r3
    19dc:	2301      	movs	r3, #1
    19de:	4053      	eors	r3, r2
    19e0:	b2db      	uxtb	r3, r3
    19e2:	2b00      	cmp	r3, #0
    19e4:	d001      	beq.n	19ea <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    19e6:	2312      	movs	r3, #18
    19e8:	e050      	b.n	1a8c <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	0018      	movs	r0, r3
    19f0:	4b2c      	ldr	r3, [pc, #176]	; (1aa4 <spi_read_buffer_wait+0x1b0>)
    19f2:	4798      	blx	r3
    19f4:	0003      	movs	r3, r0
    19f6:	001a      	movs	r2, r3
    19f8:	2301      	movs	r3, #1
    19fa:	4053      	eors	r3, r2
    19fc:	b2db      	uxtb	r3, r3
    19fe:	2b00      	cmp	r3, #0
    1a00:	d1f4      	bne.n	19ec <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    1a02:	2314      	movs	r3, #20
    1a04:	18fb      	adds	r3, r7, r3
    1a06:	2200      	movs	r2, #0
    1a08:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    1a0a:	2317      	movs	r3, #23
    1a0c:	18fc      	adds	r4, r7, r3
    1a0e:	2314      	movs	r3, #20
    1a10:	18fa      	adds	r2, r7, r3
    1a12:	68fb      	ldr	r3, [r7, #12]
    1a14:	0011      	movs	r1, r2
    1a16:	0018      	movs	r0, r3
    1a18:	4b24      	ldr	r3, [pc, #144]	; (1aac <spi_read_buffer_wait+0x1b8>)
    1a1a:	4798      	blx	r3
    1a1c:	0003      	movs	r3, r0
    1a1e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    1a20:	2317      	movs	r3, #23
    1a22:	18fb      	adds	r3, r7, r3
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d003      	beq.n	1a32 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    1a2a:	2317      	movs	r3, #23
    1a2c:	18fb      	adds	r3, r7, r3
    1a2e:	781b      	ldrb	r3, [r3, #0]
    1a30:	e02c      	b.n	1a8c <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1a32:	231e      	movs	r3, #30
    1a34:	18fb      	adds	r3, r7, r3
    1a36:	881b      	ldrh	r3, [r3, #0]
    1a38:	221e      	movs	r2, #30
    1a3a:	18ba      	adds	r2, r7, r2
    1a3c:	1c59      	adds	r1, r3, #1
    1a3e:	8011      	strh	r1, [r2, #0]
    1a40:	001a      	movs	r2, r3
    1a42:	68bb      	ldr	r3, [r7, #8]
    1a44:	189b      	adds	r3, r3, r2
    1a46:	2214      	movs	r2, #20
    1a48:	18ba      	adds	r2, r7, r2
    1a4a:	8812      	ldrh	r2, [r2, #0]
    1a4c:	b2d2      	uxtb	r2, r2
    1a4e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	799b      	ldrb	r3, [r3, #6]
    1a54:	2b01      	cmp	r3, #1
    1a56:	d110      	bne.n	1a7a <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    1a58:	231e      	movs	r3, #30
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	881b      	ldrh	r3, [r3, #0]
    1a5e:	221e      	movs	r2, #30
    1a60:	18ba      	adds	r2, r7, r2
    1a62:	1c59      	adds	r1, r3, #1
    1a64:	8011      	strh	r1, [r2, #0]
    1a66:	001a      	movs	r2, r3
    1a68:	68bb      	ldr	r3, [r7, #8]
    1a6a:	189b      	adds	r3, r3, r2
    1a6c:	2214      	movs	r2, #20
    1a6e:	18ba      	adds	r2, r7, r2
    1a70:	8812      	ldrh	r2, [r2, #0]
    1a72:	0a12      	lsrs	r2, r2, #8
    1a74:	b292      	uxth	r2, r2
    1a76:	b2d2      	uxtb	r2, r2
    1a78:	701a      	strb	r2, [r3, #0]
	while (length--) {
    1a7a:	1dbb      	adds	r3, r7, #6
    1a7c:	881b      	ldrh	r3, [r3, #0]
    1a7e:	1dba      	adds	r2, r7, #6
    1a80:	1e59      	subs	r1, r3, #1
    1a82:	8011      	strh	r1, [r2, #0]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d000      	beq.n	1a8a <spi_read_buffer_wait+0x196>
    1a88:	e769      	b.n	195e <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
    1a8a:	2300      	movs	r3, #0
}
    1a8c:	0018      	movs	r0, r3
    1a8e:	46bd      	mov	sp, r7
    1a90:	b009      	add	sp, #36	; 0x24
    1a92:	bd90      	pop	{r4, r7, pc}
    1a94:	0000139d 	.word	0x0000139d
    1a98:	000014e5 	.word	0x000014e5
    1a9c:	000013c5 	.word	0x000013c5
    1aa0:	00001415 	.word	0x00001415
    1aa4:	000013ed 	.word	0x000013ed
    1aa8:	00002710 	.word	0x00002710
    1aac:	0000145d 	.word	0x0000145d

00001ab0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	b086      	sub	sp, #24
    1ab4:	af00      	add	r7, sp, #0
    1ab6:	60f8      	str	r0, [r7, #12]
    1ab8:	60b9      	str	r1, [r7, #8]
    1aba:	1dfb      	adds	r3, r7, #7
    1abc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1abe:	68fb      	ldr	r3, [r7, #12]
    1ac0:	795b      	ldrb	r3, [r3, #5]
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d001      	beq.n	1aca <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1ac6:	2315      	movs	r3, #21
    1ac8:	e05c      	b.n	1b84 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1aca:	68fb      	ldr	r3, [r7, #12]
    1acc:	7a1b      	ldrb	r3, [r3, #8]
    1ace:	2201      	movs	r2, #1
    1ad0:	4053      	eors	r3, r2
    1ad2:	b2db      	uxtb	r3, r3
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d054      	beq.n	1b82 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1ad8:	1dfb      	adds	r3, r7, #7
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d04a      	beq.n	1b76 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1ae0:	68bb      	ldr	r3, [r7, #8]
    1ae2:	785b      	ldrb	r3, [r3, #1]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d03f      	beq.n	1b68 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1ae8:	68fb      	ldr	r3, [r7, #12]
    1aea:	0018      	movs	r0, r3
    1aec:	4b27      	ldr	r3, [pc, #156]	; (1b8c <spi_select_slave+0xdc>)
    1aee:	4798      	blx	r3
    1af0:	0003      	movs	r3, r0
    1af2:	001a      	movs	r2, r3
    1af4:	2301      	movs	r3, #1
    1af6:	4053      	eors	r3, r2
    1af8:	b2db      	uxtb	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	d007      	beq.n	1b0e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1afe:	68bb      	ldr	r3, [r7, #8]
    1b00:	781b      	ldrb	r3, [r3, #0]
    1b02:	2101      	movs	r1, #1
    1b04:	0018      	movs	r0, r3
    1b06:	4b22      	ldr	r3, [pc, #136]	; (1b90 <spi_select_slave+0xe0>)
    1b08:	4798      	blx	r3
					return STATUS_BUSY;
    1b0a:	2305      	movs	r3, #5
    1b0c:	e03a      	b.n	1b84 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1b0e:	68bb      	ldr	r3, [r7, #8]
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	2100      	movs	r1, #0
    1b14:	0018      	movs	r0, r3
    1b16:	4b1e      	ldr	r3, [pc, #120]	; (1b90 <spi_select_slave+0xe0>)
    1b18:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    1b1a:	68bb      	ldr	r3, [r7, #8]
    1b1c:	789b      	ldrb	r3, [r3, #2]
    1b1e:	b29a      	uxth	r2, r3
    1b20:	68fb      	ldr	r3, [r7, #12]
    1b22:	0011      	movs	r1, r2
    1b24:	0018      	movs	r0, r3
    1b26:	4b1b      	ldr	r3, [pc, #108]	; (1b94 <spi_select_slave+0xe4>)
    1b28:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    1b2a:	68fb      	ldr	r3, [r7, #12]
    1b2c:	79db      	ldrb	r3, [r3, #7]
    1b2e:	2201      	movs	r2, #1
    1b30:	4053      	eors	r3, r2
    1b32:	b2db      	uxtb	r3, r3
    1b34:	2b00      	cmp	r3, #0
    1b36:	d024      	beq.n	1b82 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	68fb      	ldr	r3, [r7, #12]
    1b3c:	0018      	movs	r0, r3
    1b3e:	4b16      	ldr	r3, [pc, #88]	; (1b98 <spi_select_slave+0xe8>)
    1b40:	4798      	blx	r3
    1b42:	0003      	movs	r3, r0
    1b44:	001a      	movs	r2, r3
    1b46:	2301      	movs	r3, #1
    1b48:	4053      	eors	r3, r2
    1b4a:	b2db      	uxtb	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d1f4      	bne.n	1b3a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1b50:	2316      	movs	r3, #22
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	2200      	movs	r2, #0
    1b56:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1b58:	2316      	movs	r3, #22
    1b5a:	18fa      	adds	r2, r7, r3
    1b5c:	68fb      	ldr	r3, [r7, #12]
    1b5e:	0011      	movs	r1, r2
    1b60:	0018      	movs	r0, r3
    1b62:	4b0e      	ldr	r3, [pc, #56]	; (1b9c <spi_select_slave+0xec>)
    1b64:	4798      	blx	r3
    1b66:	e00c      	b.n	1b82 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1b68:	68bb      	ldr	r3, [r7, #8]
    1b6a:	781b      	ldrb	r3, [r3, #0]
    1b6c:	2100      	movs	r1, #0
    1b6e:	0018      	movs	r0, r3
    1b70:	4b07      	ldr	r3, [pc, #28]	; (1b90 <spi_select_slave+0xe0>)
    1b72:	4798      	blx	r3
    1b74:	e005      	b.n	1b82 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1b76:	68bb      	ldr	r3, [r7, #8]
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	2101      	movs	r1, #1
    1b7c:	0018      	movs	r0, r3
    1b7e:	4b04      	ldr	r3, [pc, #16]	; (1b90 <spi_select_slave+0xe0>)
    1b80:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1b82:	2300      	movs	r3, #0
}
    1b84:	0018      	movs	r0, r3
    1b86:	46bd      	mov	sp, r7
    1b88:	b006      	add	sp, #24
    1b8a:	bd80      	pop	{r7, pc}
    1b8c:	000013c5 	.word	0x000013c5
    1b90:	000012b5 	.word	0x000012b5
    1b94:	00001415 	.word	0x00001415
    1b98:	000013ed 	.word	0x000013ed
    1b9c:	0000145d 	.word	0x0000145d

00001ba0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b08a      	sub	sp, #40	; 0x28
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	60f8      	str	r0, [r7, #12]
    1ba8:	60b9      	str	r1, [r7, #8]
    1baa:	1dbb      	adds	r3, r7, #6
    1bac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1bae:	68fb      	ldr	r3, [r7, #12]
    1bb0:	2238      	movs	r2, #56	; 0x38
    1bb2:	5c9b      	ldrb	r3, [r3, r2]
    1bb4:	b2db      	uxtb	r3, r3
    1bb6:	2b05      	cmp	r3, #5
    1bb8:	d101      	bne.n	1bbe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1bba:	2305      	movs	r3, #5
    1bbc:	e170      	b.n	1ea0 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    1bbe:	1dbb      	adds	r3, r7, #6
    1bc0:	881b      	ldrh	r3, [r3, #0]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d101      	bne.n	1bca <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    1bc6:	2317      	movs	r3, #23
    1bc8:	e16a      	b.n	1ea0 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1bca:	68fb      	ldr	r3, [r7, #12]
    1bcc:	795b      	ldrb	r3, [r3, #5]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d109      	bne.n	1be6 <spi_write_buffer_wait+0x46>
    1bd2:	68fb      	ldr	r3, [r7, #12]
    1bd4:	0018      	movs	r0, r3
    1bd6:	4bb4      	ldr	r3, [pc, #720]	; (1ea8 <spi_write_buffer_wait+0x308>)
    1bd8:	4798      	blx	r3
    1bda:	1e03      	subs	r3, r0, #0
    1bdc:	d003      	beq.n	1be6 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	0018      	movs	r0, r3
    1be2:	4bb2      	ldr	r3, [pc, #712]	; (1eac <spi_write_buffer_wait+0x30c>)
    1be4:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    1be6:	2326      	movs	r3, #38	; 0x26
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	2200      	movs	r2, #0
    1bec:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    1bee:	2324      	movs	r3, #36	; 0x24
    1bf0:	18fb      	adds	r3, r7, r3
    1bf2:	1dba      	adds	r2, r7, #6
    1bf4:	8812      	ldrh	r2, [r2, #0]
    1bf6:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1bf8:	e0fe      	b.n	1df8 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1bfa:	68fb      	ldr	r3, [r7, #12]
    1bfc:	795b      	ldrb	r3, [r3, #5]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d12a      	bne.n	1c58 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1c02:	2300      	movs	r3, #0
    1c04:	623b      	str	r3, [r7, #32]
    1c06:	e008      	b.n	1c1a <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    1c08:	68fb      	ldr	r3, [r7, #12]
    1c0a:	0018      	movs	r0, r3
    1c0c:	4ba8      	ldr	r3, [pc, #672]	; (1eb0 <spi_write_buffer_wait+0x310>)
    1c0e:	4798      	blx	r3
    1c10:	1e03      	subs	r3, r0, #0
    1c12:	d107      	bne.n	1c24 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1c14:	6a3b      	ldr	r3, [r7, #32]
    1c16:	3301      	adds	r3, #1
    1c18:	623b      	str	r3, [r7, #32]
    1c1a:	6a3b      	ldr	r3, [r7, #32]
    1c1c:	4aa5      	ldr	r2, [pc, #660]	; (1eb4 <spi_write_buffer_wait+0x314>)
    1c1e:	4293      	cmp	r3, r2
    1c20:	d9f2      	bls.n	1c08 <spi_write_buffer_wait+0x68>
    1c22:	e000      	b.n	1c26 <spi_write_buffer_wait+0x86>
					break;
    1c24:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1c26:	68fb      	ldr	r3, [r7, #12]
    1c28:	0018      	movs	r0, r3
    1c2a:	4b9f      	ldr	r3, [pc, #636]	; (1ea8 <spi_write_buffer_wait+0x308>)
    1c2c:	4798      	blx	r3
    1c2e:	1e03      	subs	r3, r0, #0
    1c30:	d005      	beq.n	1c3e <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    1c32:	68fb      	ldr	r3, [r7, #12]
    1c34:	0018      	movs	r0, r3
    1c36:	4b9d      	ldr	r3, [pc, #628]	; (1eac <spi_write_buffer_wait+0x30c>)
    1c38:	4798      	blx	r3
				return STATUS_ABORTED;
    1c3a:	2304      	movs	r3, #4
    1c3c:	e130      	b.n	1ea0 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    1c3e:	68fb      	ldr	r3, [r7, #12]
    1c40:	0018      	movs	r0, r3
    1c42:	4b9b      	ldr	r3, [pc, #620]	; (1eb0 <spi_write_buffer_wait+0x310>)
    1c44:	4798      	blx	r3
    1c46:	0003      	movs	r3, r0
    1c48:	001a      	movs	r2, r3
    1c4a:	2301      	movs	r3, #1
    1c4c:	4053      	eors	r3, r2
    1c4e:	b2db      	uxtb	r3, r3
    1c50:	2b00      	cmp	r3, #0
    1c52:	d001      	beq.n	1c58 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1c54:	2312      	movs	r3, #18
    1c56:	e123      	b.n	1ea0 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1c58:	46c0      	nop			; (mov r8, r8)
    1c5a:	68fb      	ldr	r3, [r7, #12]
    1c5c:	0018      	movs	r0, r3
    1c5e:	4b94      	ldr	r3, [pc, #592]	; (1eb0 <spi_write_buffer_wait+0x310>)
    1c60:	4798      	blx	r3
    1c62:	0003      	movs	r3, r0
    1c64:	001a      	movs	r2, r3
    1c66:	2301      	movs	r3, #1
    1c68:	4053      	eors	r3, r2
    1c6a:	b2db      	uxtb	r3, r3
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d1f4      	bne.n	1c5a <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1c70:	2326      	movs	r3, #38	; 0x26
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	881b      	ldrh	r3, [r3, #0]
    1c76:	2226      	movs	r2, #38	; 0x26
    1c78:	18ba      	adds	r2, r7, r2
    1c7a:	1c59      	adds	r1, r3, #1
    1c7c:	8011      	strh	r1, [r2, #0]
    1c7e:	001a      	movs	r2, r3
    1c80:	68bb      	ldr	r3, [r7, #8]
    1c82:	189b      	adds	r3, r3, r2
    1c84:	781a      	ldrb	r2, [r3, #0]
    1c86:	231e      	movs	r3, #30
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	799b      	ldrb	r3, [r3, #6]
    1c90:	2b01      	cmp	r3, #1
    1c92:	d115      	bne.n	1cc0 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1c94:	2326      	movs	r3, #38	; 0x26
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	881b      	ldrh	r3, [r3, #0]
    1c9a:	2226      	movs	r2, #38	; 0x26
    1c9c:	18ba      	adds	r2, r7, r2
    1c9e:	1c59      	adds	r1, r3, #1
    1ca0:	8011      	strh	r1, [r2, #0]
    1ca2:	001a      	movs	r2, r3
    1ca4:	68bb      	ldr	r3, [r7, #8]
    1ca6:	189b      	adds	r3, r3, r2
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	021b      	lsls	r3, r3, #8
    1cac:	b21a      	sxth	r2, r3
    1cae:	231e      	movs	r3, #30
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	2100      	movs	r1, #0
    1cb4:	5e5b      	ldrsh	r3, [r3, r1]
    1cb6:	4313      	orrs	r3, r2
    1cb8:	b21a      	sxth	r2, r3
    1cba:	231e      	movs	r3, #30
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1cc0:	231e      	movs	r3, #30
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	881a      	ldrh	r2, [r3, #0]
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	0011      	movs	r1, r2
    1cca:	0018      	movs	r0, r3
    1ccc:	4b7a      	ldr	r3, [pc, #488]	; (1eb8 <spi_write_buffer_wait+0x318>)
    1cce:	4798      	blx	r3

		if (module->receiver_enabled) {
    1cd0:	68fb      	ldr	r3, [r7, #12]
    1cd2:	79db      	ldrb	r3, [r3, #7]
    1cd4:	2224      	movs	r2, #36	; 0x24
    1cd6:	18ba      	adds	r2, r7, r2
    1cd8:	2124      	movs	r1, #36	; 0x24
    1cda:	1879      	adds	r1, r7, r1
    1cdc:	8809      	ldrh	r1, [r1, #0]
    1cde:	8011      	strh	r1, [r2, #0]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d100      	bne.n	1ce6 <spi_write_buffer_wait+0x146>
    1ce4:	e088      	b.n	1df8 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	795b      	ldrb	r3, [r3, #5]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d000      	beq.n	1cf0 <spi_write_buffer_wait+0x150>
    1cee:	e069      	b.n	1dc4 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1cf0:	2300      	movs	r3, #0
    1cf2:	61bb      	str	r3, [r7, #24]
    1cf4:	e047      	b.n	1d86 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    1cf6:	1dbb      	adds	r3, r7, #6
    1cf8:	881b      	ldrh	r3, [r3, #0]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d03a      	beq.n	1d74 <spi_write_buffer_wait+0x1d4>
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	0018      	movs	r0, r3
    1d02:	4b6b      	ldr	r3, [pc, #428]	; (1eb0 <spi_write_buffer_wait+0x310>)
    1d04:	4798      	blx	r3
    1d06:	1e03      	subs	r3, r0, #0
    1d08:	d034      	beq.n	1d74 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    1d0a:	2326      	movs	r3, #38	; 0x26
    1d0c:	18fb      	adds	r3, r7, r3
    1d0e:	881b      	ldrh	r3, [r3, #0]
    1d10:	2226      	movs	r2, #38	; 0x26
    1d12:	18ba      	adds	r2, r7, r2
    1d14:	1c59      	adds	r1, r3, #1
    1d16:	8011      	strh	r1, [r2, #0]
    1d18:	001a      	movs	r2, r3
    1d1a:	68bb      	ldr	r3, [r7, #8]
    1d1c:	189b      	adds	r3, r3, r2
    1d1e:	781a      	ldrb	r2, [r3, #0]
    1d20:	231e      	movs	r3, #30
    1d22:	18fb      	adds	r3, r7, r3
    1d24:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d26:	68fb      	ldr	r3, [r7, #12]
    1d28:	799b      	ldrb	r3, [r3, #6]
    1d2a:	2b01      	cmp	r3, #1
    1d2c:	d115      	bne.n	1d5a <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1d2e:	2326      	movs	r3, #38	; 0x26
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	881b      	ldrh	r3, [r3, #0]
    1d34:	2226      	movs	r2, #38	; 0x26
    1d36:	18ba      	adds	r2, r7, r2
    1d38:	1c59      	adds	r1, r3, #1
    1d3a:	8011      	strh	r1, [r2, #0]
    1d3c:	001a      	movs	r2, r3
    1d3e:	68bb      	ldr	r3, [r7, #8]
    1d40:	189b      	adds	r3, r3, r2
    1d42:	781b      	ldrb	r3, [r3, #0]
    1d44:	021b      	lsls	r3, r3, #8
    1d46:	b21a      	sxth	r2, r3
    1d48:	231e      	movs	r3, #30
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	2100      	movs	r1, #0
    1d4e:	5e5b      	ldrsh	r3, [r3, r1]
    1d50:	4313      	orrs	r3, r2
    1d52:	b21a      	sxth	r2, r3
    1d54:	231e      	movs	r3, #30
    1d56:	18fb      	adds	r3, r7, r3
    1d58:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    1d5a:	231e      	movs	r3, #30
    1d5c:	18fb      	adds	r3, r7, r3
    1d5e:	881a      	ldrh	r2, [r3, #0]
    1d60:	68fb      	ldr	r3, [r7, #12]
    1d62:	0011      	movs	r1, r2
    1d64:	0018      	movs	r0, r3
    1d66:	4b54      	ldr	r3, [pc, #336]	; (1eb8 <spi_write_buffer_wait+0x318>)
    1d68:	4798      	blx	r3
						length--;
    1d6a:	1dbb      	adds	r3, r7, #6
    1d6c:	881a      	ldrh	r2, [r3, #0]
    1d6e:	1dbb      	adds	r3, r7, #6
    1d70:	3a01      	subs	r2, #1
    1d72:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    1d74:	68fb      	ldr	r3, [r7, #12]
    1d76:	0018      	movs	r0, r3
    1d78:	4b50      	ldr	r3, [pc, #320]	; (1ebc <spi_write_buffer_wait+0x31c>)
    1d7a:	4798      	blx	r3
    1d7c:	1e03      	subs	r3, r0, #0
    1d7e:	d107      	bne.n	1d90 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1d80:	69bb      	ldr	r3, [r7, #24]
    1d82:	3301      	adds	r3, #1
    1d84:	61bb      	str	r3, [r7, #24]
    1d86:	69bb      	ldr	r3, [r7, #24]
    1d88:	4a4a      	ldr	r2, [pc, #296]	; (1eb4 <spi_write_buffer_wait+0x314>)
    1d8a:	4293      	cmp	r3, r2
    1d8c:	d9b3      	bls.n	1cf6 <spi_write_buffer_wait+0x156>
    1d8e:	e000      	b.n	1d92 <spi_write_buffer_wait+0x1f2>
						break;
    1d90:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    1d92:	68fb      	ldr	r3, [r7, #12]
    1d94:	0018      	movs	r0, r3
    1d96:	4b44      	ldr	r3, [pc, #272]	; (1ea8 <spi_write_buffer_wait+0x308>)
    1d98:	4798      	blx	r3
    1d9a:	1e03      	subs	r3, r0, #0
    1d9c:	d005      	beq.n	1daa <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	0018      	movs	r0, r3
    1da2:	4b42      	ldr	r3, [pc, #264]	; (1eac <spi_write_buffer_wait+0x30c>)
    1da4:	4798      	blx	r3
					return STATUS_ABORTED;
    1da6:	2304      	movs	r3, #4
    1da8:	e07a      	b.n	1ea0 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	0018      	movs	r0, r3
    1dae:	4b43      	ldr	r3, [pc, #268]	; (1ebc <spi_write_buffer_wait+0x31c>)
    1db0:	4798      	blx	r3
    1db2:	0003      	movs	r3, r0
    1db4:	001a      	movs	r2, r3
    1db6:	2301      	movs	r3, #1
    1db8:	4053      	eors	r3, r2
    1dba:	b2db      	uxtb	r3, r3
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d001      	beq.n	1dc4 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1dc0:	2312      	movs	r3, #18
    1dc2:	e06d      	b.n	1ea0 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1dc4:	46c0      	nop			; (mov r8, r8)
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	0018      	movs	r0, r3
    1dca:	4b3c      	ldr	r3, [pc, #240]	; (1ebc <spi_write_buffer_wait+0x31c>)
    1dcc:	4798      	blx	r3
    1dce:	0003      	movs	r3, r0
    1dd0:	001a      	movs	r2, r3
    1dd2:	2301      	movs	r3, #1
    1dd4:	4053      	eors	r3, r2
    1dd6:	b2db      	uxtb	r3, r3
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d1f4      	bne.n	1dc6 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1ddc:	2312      	movs	r3, #18
    1dde:	18fa      	adds	r2, r7, r3
    1de0:	68fb      	ldr	r3, [r7, #12]
    1de2:	0011      	movs	r1, r2
    1de4:	0018      	movs	r0, r3
    1de6:	4b36      	ldr	r3, [pc, #216]	; (1ec0 <spi_write_buffer_wait+0x320>)
    1de8:	4798      	blx	r3
			flush_length--;
    1dea:	2324      	movs	r3, #36	; 0x24
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	881a      	ldrh	r2, [r3, #0]
    1df0:	2324      	movs	r3, #36	; 0x24
    1df2:	18fb      	adds	r3, r7, r3
    1df4:	3a01      	subs	r2, #1
    1df6:	801a      	strh	r2, [r3, #0]
	while (length--) {
    1df8:	1dbb      	adds	r3, r7, #6
    1dfa:	881b      	ldrh	r3, [r3, #0]
    1dfc:	1dba      	adds	r2, r7, #6
    1dfe:	1e59      	subs	r1, r3, #1
    1e00:	8011      	strh	r1, [r2, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d000      	beq.n	1e08 <spi_write_buffer_wait+0x268>
    1e06:	e6f8      	b.n	1bfa <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1e08:	68fb      	ldr	r3, [r7, #12]
    1e0a:	795b      	ldrb	r3, [r3, #5]
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	d10b      	bne.n	1e28 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1e10:	46c0      	nop			; (mov r8, r8)
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	0018      	movs	r0, r3
    1e16:	4b24      	ldr	r3, [pc, #144]	; (1ea8 <spi_write_buffer_wait+0x308>)
    1e18:	4798      	blx	r3
    1e1a:	0003      	movs	r3, r0
    1e1c:	001a      	movs	r2, r3
    1e1e:	2301      	movs	r3, #1
    1e20:	4053      	eors	r3, r2
    1e22:	b2db      	uxtb	r3, r3
    1e24:	2b00      	cmp	r3, #0
    1e26:	d1f4      	bne.n	1e12 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1e28:	68fb      	ldr	r3, [r7, #12]
    1e2a:	795b      	ldrb	r3, [r3, #5]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d136      	bne.n	1e9e <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    1e30:	68fb      	ldr	r3, [r7, #12]
    1e32:	79db      	ldrb	r3, [r3, #7]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d032      	beq.n	1e9e <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    1e38:	e02c      	b.n	1e94 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1e3a:	2300      	movs	r3, #0
    1e3c:	617b      	str	r3, [r7, #20]
    1e3e:	e008      	b.n	1e52 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	0018      	movs	r0, r3
    1e44:	4b1d      	ldr	r3, [pc, #116]	; (1ebc <spi_write_buffer_wait+0x31c>)
    1e46:	4798      	blx	r3
    1e48:	1e03      	subs	r3, r0, #0
    1e4a:	d107      	bne.n	1e5c <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1e4c:	697b      	ldr	r3, [r7, #20]
    1e4e:	3301      	adds	r3, #1
    1e50:	617b      	str	r3, [r7, #20]
    1e52:	697b      	ldr	r3, [r7, #20]
    1e54:	4a17      	ldr	r2, [pc, #92]	; (1eb4 <spi_write_buffer_wait+0x314>)
    1e56:	4293      	cmp	r3, r2
    1e58:	d9f2      	bls.n	1e40 <spi_write_buffer_wait+0x2a0>
    1e5a:	e000      	b.n	1e5e <spi_write_buffer_wait+0x2be>
						break;
    1e5c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	0018      	movs	r0, r3
    1e62:	4b16      	ldr	r3, [pc, #88]	; (1ebc <spi_write_buffer_wait+0x31c>)
    1e64:	4798      	blx	r3
    1e66:	0003      	movs	r3, r0
    1e68:	001a      	movs	r2, r3
    1e6a:	2301      	movs	r3, #1
    1e6c:	4053      	eors	r3, r2
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	2b00      	cmp	r3, #0
    1e72:	d001      	beq.n	1e78 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1e74:	2312      	movs	r3, #18
    1e76:	e013      	b.n	1ea0 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    1e78:	2310      	movs	r3, #16
    1e7a:	18fa      	adds	r2, r7, r3
    1e7c:	68fb      	ldr	r3, [r7, #12]
    1e7e:	0011      	movs	r1, r2
    1e80:	0018      	movs	r0, r3
    1e82:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <spi_write_buffer_wait+0x320>)
    1e84:	4798      	blx	r3
				flush_length--;
    1e86:	2324      	movs	r3, #36	; 0x24
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	881a      	ldrh	r2, [r3, #0]
    1e8c:	2324      	movs	r3, #36	; 0x24
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	3a01      	subs	r2, #1
    1e92:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    1e94:	2324      	movs	r3, #36	; 0x24
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	881b      	ldrh	r3, [r3, #0]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d1cd      	bne.n	1e3a <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    1e9e:	2300      	movs	r3, #0
}
    1ea0:	0018      	movs	r0, r3
    1ea2:	46bd      	mov	sp, r7
    1ea4:	b00a      	add	sp, #40	; 0x28
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	0000139d 	.word	0x0000139d
    1eac:	000014e5 	.word	0x000014e5
    1eb0:	000013c5 	.word	0x000013c5
    1eb4:	00002710 	.word	0x00002710
    1eb8:	00001415 	.word	0x00001415
    1ebc:	000013ed 	.word	0x000013ed
    1ec0:	0000145d 	.word	0x0000145d

00001ec4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1ec4:	b590      	push	{r4, r7, lr}
    1ec6:	b08d      	sub	sp, #52	; 0x34
    1ec8:	af00      	add	r7, sp, #0
    1eca:	60f8      	str	r0, [r7, #12]
    1ecc:	60b9      	str	r1, [r7, #8]
    1ece:	607a      	str	r2, [r7, #4]
    1ed0:	001a      	movs	r2, r3
    1ed2:	1cbb      	adds	r3, r7, #2
    1ed4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	2238      	movs	r2, #56	; 0x38
    1eda:	5c9b      	ldrb	r3, [r3, r2]
    1edc:	b2db      	uxtb	r3, r3
    1ede:	2b05      	cmp	r3, #5
    1ee0:	d101      	bne.n	1ee6 <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1ee2:	2305      	movs	r3, #5
    1ee4:	e1e3      	b.n	22ae <STACK_SIZE+0x2ae>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    1ee6:	1cbb      	adds	r3, r7, #2
    1ee8:	881b      	ldrh	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d101      	bne.n	1ef2 <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
    1eee:	2317      	movs	r3, #23
    1ef0:	e1dd      	b.n	22ae <STACK_SIZE+0x2ae>
	}

	if (!(module->receiver_enabled)) {
    1ef2:	68fb      	ldr	r3, [r7, #12]
    1ef4:	79db      	ldrb	r3, [r3, #7]
    1ef6:	2201      	movs	r2, #1
    1ef8:	4053      	eors	r3, r2
    1efa:	b2db      	uxtb	r3, r3
    1efc:	2b00      	cmp	r3, #0
    1efe:	d001      	beq.n	1f04 <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
    1f00:	231c      	movs	r3, #28
    1f02:	e1d4      	b.n	22ae <STACK_SIZE+0x2ae>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	795b      	ldrb	r3, [r3, #5]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d109      	bne.n	1f20 <spi_transceive_buffer_wait+0x5c>
    1f0c:	68fb      	ldr	r3, [r7, #12]
    1f0e:	0018      	movs	r0, r3
    1f10:	4bca      	ldr	r3, [pc, #808]	; (223c <STACK_SIZE+0x23c>)
    1f12:	4798      	blx	r3
    1f14:	1e03      	subs	r3, r0, #0
    1f16:	d003      	beq.n	1f20 <spi_transceive_buffer_wait+0x5c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	0018      	movs	r0, r3
    1f1c:	4bc8      	ldr	r3, [pc, #800]	; (2240 <STACK_SIZE+0x240>)
    1f1e:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    1f20:	232e      	movs	r3, #46	; 0x2e
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	2200      	movs	r2, #0
    1f26:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
    1f28:	232c      	movs	r3, #44	; 0x2c
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	2200      	movs	r2, #0
    1f2e:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
    1f30:	232a      	movs	r3, #42	; 0x2a
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	1cba      	adds	r2, r7, #2
    1f36:	8812      	ldrh	r2, [r2, #0]
    1f38:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
    1f3a:	e123      	b.n	2184 <STACK_SIZE+0x184>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	795b      	ldrb	r3, [r3, #5]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d12a      	bne.n	1f9a <spi_transceive_buffer_wait+0xd6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1f44:	2300      	movs	r3, #0
    1f46:	627b      	str	r3, [r7, #36]	; 0x24
    1f48:	e008      	b.n	1f5c <spi_transceive_buffer_wait+0x98>
				if (spi_is_ready_to_write(module)) {
    1f4a:	68fb      	ldr	r3, [r7, #12]
    1f4c:	0018      	movs	r0, r3
    1f4e:	4bbd      	ldr	r3, [pc, #756]	; (2244 <STACK_SIZE+0x244>)
    1f50:	4798      	blx	r3
    1f52:	1e03      	subs	r3, r0, #0
    1f54:	d107      	bne.n	1f66 <spi_transceive_buffer_wait+0xa2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f58:	3301      	adds	r3, #1
    1f5a:	627b      	str	r3, [r7, #36]	; 0x24
    1f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f5e:	4aba      	ldr	r2, [pc, #744]	; (2248 <STACK_SIZE+0x248>)
    1f60:	4293      	cmp	r3, r2
    1f62:	d9f2      	bls.n	1f4a <spi_transceive_buffer_wait+0x86>
    1f64:	e000      	b.n	1f68 <spi_transceive_buffer_wait+0xa4>
					break;
    1f66:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	0018      	movs	r0, r3
    1f6c:	4bb3      	ldr	r3, [pc, #716]	; (223c <STACK_SIZE+0x23c>)
    1f6e:	4798      	blx	r3
    1f70:	1e03      	subs	r3, r0, #0
    1f72:	d005      	beq.n	1f80 <spi_transceive_buffer_wait+0xbc>
				_spi_clear_tx_complete_flag(module);
    1f74:	68fb      	ldr	r3, [r7, #12]
    1f76:	0018      	movs	r0, r3
    1f78:	4bb1      	ldr	r3, [pc, #708]	; (2240 <STACK_SIZE+0x240>)
    1f7a:	4798      	blx	r3
				return STATUS_ABORTED;
    1f7c:	2304      	movs	r3, #4
    1f7e:	e196      	b.n	22ae <STACK_SIZE+0x2ae>
			}

			if (!spi_is_ready_to_write(module)) {
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	0018      	movs	r0, r3
    1f84:	4baf      	ldr	r3, [pc, #700]	; (2244 <STACK_SIZE+0x244>)
    1f86:	4798      	blx	r3
    1f88:	0003      	movs	r3, r0
    1f8a:	001a      	movs	r2, r3
    1f8c:	2301      	movs	r3, #1
    1f8e:	4053      	eors	r3, r2
    1f90:	b2db      	uxtb	r3, r3
    1f92:	2b00      	cmp	r3, #0
    1f94:	d001      	beq.n	1f9a <spi_transceive_buffer_wait+0xd6>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1f96:	2312      	movs	r3, #18
    1f98:	e189      	b.n	22ae <STACK_SIZE+0x2ae>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	0018      	movs	r0, r3
    1fa0:	4ba8      	ldr	r3, [pc, #672]	; (2244 <STACK_SIZE+0x244>)
    1fa2:	4798      	blx	r3
    1fa4:	0003      	movs	r3, r0
    1fa6:	001a      	movs	r2, r3
    1fa8:	2301      	movs	r3, #1
    1faa:	4053      	eors	r3, r2
    1fac:	b2db      	uxtb	r3, r3
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d1f4      	bne.n	1f9c <spi_transceive_buffer_wait+0xd8>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1fb2:	232e      	movs	r3, #46	; 0x2e
    1fb4:	18fb      	adds	r3, r7, r3
    1fb6:	881b      	ldrh	r3, [r3, #0]
    1fb8:	222e      	movs	r2, #46	; 0x2e
    1fba:	18ba      	adds	r2, r7, r2
    1fbc:	1c59      	adds	r1, r3, #1
    1fbe:	8011      	strh	r1, [r2, #0]
    1fc0:	001a      	movs	r2, r3
    1fc2:	68bb      	ldr	r3, [r7, #8]
    1fc4:	189b      	adds	r3, r3, r2
    1fc6:	781a      	ldrb	r2, [r3, #0]
    1fc8:	2322      	movs	r3, #34	; 0x22
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1fce:	68fb      	ldr	r3, [r7, #12]
    1fd0:	799b      	ldrb	r3, [r3, #6]
    1fd2:	2b01      	cmp	r3, #1
    1fd4:	d115      	bne.n	2002 <STACK_SIZE+0x2>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1fd6:	232e      	movs	r3, #46	; 0x2e
    1fd8:	18fb      	adds	r3, r7, r3
    1fda:	881b      	ldrh	r3, [r3, #0]
    1fdc:	222e      	movs	r2, #46	; 0x2e
    1fde:	18ba      	adds	r2, r7, r2
    1fe0:	1c59      	adds	r1, r3, #1
    1fe2:	8011      	strh	r1, [r2, #0]
    1fe4:	001a      	movs	r2, r3
    1fe6:	68bb      	ldr	r3, [r7, #8]
    1fe8:	189b      	adds	r3, r3, r2
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	021b      	lsls	r3, r3, #8
    1fee:	b21a      	sxth	r2, r3
    1ff0:	2322      	movs	r3, #34	; 0x22
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	2100      	movs	r1, #0
    1ff6:	5e5b      	ldrsh	r3, [r3, r1]
    1ff8:	4313      	orrs	r3, r2
    1ffa:	b21a      	sxth	r2, r3
    1ffc:	2322      	movs	r3, #34	; 0x22
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    2002:	2322      	movs	r3, #34	; 0x22
    2004:	18fb      	adds	r3, r7, r3
    2006:	881a      	ldrh	r2, [r3, #0]
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	0011      	movs	r1, r2
    200c:	0018      	movs	r0, r3
    200e:	4b8f      	ldr	r3, [pc, #572]	; (224c <STACK_SIZE+0x24c>)
    2010:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	795b      	ldrb	r3, [r3, #5]
    2016:	2b00      	cmp	r3, #0
    2018:	d165      	bne.n	20e6 <STACK_SIZE+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    201a:	2300      	movs	r3, #0
    201c:	61fb      	str	r3, [r7, #28]
    201e:	e043      	b.n	20a8 <STACK_SIZE+0xa8>
				if (spi_is_ready_to_write(module)) {
    2020:	68fb      	ldr	r3, [r7, #12]
    2022:	0018      	movs	r0, r3
    2024:	4b87      	ldr	r3, [pc, #540]	; (2244 <STACK_SIZE+0x244>)
    2026:	4798      	blx	r3
    2028:	1e03      	subs	r3, r0, #0
    202a:	d034      	beq.n	2096 <STACK_SIZE+0x96>
					data_to_send = tx_data[tx_pos++];
    202c:	232e      	movs	r3, #46	; 0x2e
    202e:	18fb      	adds	r3, r7, r3
    2030:	881b      	ldrh	r3, [r3, #0]
    2032:	222e      	movs	r2, #46	; 0x2e
    2034:	18ba      	adds	r2, r7, r2
    2036:	1c59      	adds	r1, r3, #1
    2038:	8011      	strh	r1, [r2, #0]
    203a:	001a      	movs	r2, r3
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	189b      	adds	r3, r3, r2
    2040:	781a      	ldrb	r2, [r3, #0]
    2042:	2322      	movs	r3, #34	; 0x22
    2044:	18fb      	adds	r3, r7, r3
    2046:	801a      	strh	r2, [r3, #0]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2048:	68fb      	ldr	r3, [r7, #12]
    204a:	799b      	ldrb	r3, [r3, #6]
    204c:	2b01      	cmp	r3, #1
    204e:	d115      	bne.n	207c <STACK_SIZE+0x7c>
						data_to_send |= (tx_data[tx_pos++] << 8);
    2050:	232e      	movs	r3, #46	; 0x2e
    2052:	18fb      	adds	r3, r7, r3
    2054:	881b      	ldrh	r3, [r3, #0]
    2056:	222e      	movs	r2, #46	; 0x2e
    2058:	18ba      	adds	r2, r7, r2
    205a:	1c59      	adds	r1, r3, #1
    205c:	8011      	strh	r1, [r2, #0]
    205e:	001a      	movs	r2, r3
    2060:	68bb      	ldr	r3, [r7, #8]
    2062:	189b      	adds	r3, r3, r2
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	021b      	lsls	r3, r3, #8
    2068:	b21a      	sxth	r2, r3
    206a:	2322      	movs	r3, #34	; 0x22
    206c:	18fb      	adds	r3, r7, r3
    206e:	2100      	movs	r1, #0
    2070:	5e5b      	ldrsh	r3, [r3, r1]
    2072:	4313      	orrs	r3, r2
    2074:	b21a      	sxth	r2, r3
    2076:	2322      	movs	r3, #34	; 0x22
    2078:	18fb      	adds	r3, r7, r3
    207a:	801a      	strh	r2, [r3, #0]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
    207c:	2322      	movs	r3, #34	; 0x22
    207e:	18fb      	adds	r3, r7, r3
    2080:	881a      	ldrh	r2, [r3, #0]
    2082:	68fb      	ldr	r3, [r7, #12]
    2084:	0011      	movs	r1, r2
    2086:	0018      	movs	r0, r3
    2088:	4b70      	ldr	r3, [pc, #448]	; (224c <STACK_SIZE+0x24c>)
    208a:	4798      	blx	r3
					length--;
    208c:	1cbb      	adds	r3, r7, #2
    208e:	881a      	ldrh	r2, [r3, #0]
    2090:	1cbb      	adds	r3, r7, #2
    2092:	3a01      	subs	r2, #1
    2094:	801a      	strh	r2, [r3, #0]
				}
				if (spi_is_ready_to_read(module)) {
    2096:	68fb      	ldr	r3, [r7, #12]
    2098:	0018      	movs	r0, r3
    209a:	4b6d      	ldr	r3, [pc, #436]	; (2250 <STACK_SIZE+0x250>)
    209c:	4798      	blx	r3
    209e:	1e03      	subs	r3, r0, #0
    20a0:	d107      	bne.n	20b2 <STACK_SIZE+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    20a2:	69fb      	ldr	r3, [r7, #28]
    20a4:	3301      	adds	r3, #1
    20a6:	61fb      	str	r3, [r7, #28]
    20a8:	69fb      	ldr	r3, [r7, #28]
    20aa:	4a67      	ldr	r2, [pc, #412]	; (2248 <STACK_SIZE+0x248>)
    20ac:	4293      	cmp	r3, r2
    20ae:	d9b7      	bls.n	2020 <STACK_SIZE+0x20>
    20b0:	e000      	b.n	20b4 <STACK_SIZE+0xb4>
					break;
    20b2:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    20b4:	68fb      	ldr	r3, [r7, #12]
    20b6:	0018      	movs	r0, r3
    20b8:	4b60      	ldr	r3, [pc, #384]	; (223c <STACK_SIZE+0x23c>)
    20ba:	4798      	blx	r3
    20bc:	1e03      	subs	r3, r0, #0
    20be:	d005      	beq.n	20cc <STACK_SIZE+0xcc>
				_spi_clear_tx_complete_flag(module);
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	0018      	movs	r0, r3
    20c4:	4b5e      	ldr	r3, [pc, #376]	; (2240 <STACK_SIZE+0x240>)
    20c6:	4798      	blx	r3
				return STATUS_ABORTED;
    20c8:	2304      	movs	r3, #4
    20ca:	e0f0      	b.n	22ae <STACK_SIZE+0x2ae>
			}

			if (!spi_is_ready_to_read(module)) {
    20cc:	68fb      	ldr	r3, [r7, #12]
    20ce:	0018      	movs	r0, r3
    20d0:	4b5f      	ldr	r3, [pc, #380]	; (2250 <STACK_SIZE+0x250>)
    20d2:	4798      	blx	r3
    20d4:	0003      	movs	r3, r0
    20d6:	001a      	movs	r2, r3
    20d8:	2301      	movs	r3, #1
    20da:	4053      	eors	r3, r2
    20dc:	b2db      	uxtb	r3, r3
    20de:	2b00      	cmp	r3, #0
    20e0:	d001      	beq.n	20e6 <STACK_SIZE+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    20e2:	2312      	movs	r3, #18
    20e4:	e0e3      	b.n	22ae <STACK_SIZE+0x2ae>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	68fb      	ldr	r3, [r7, #12]
    20ea:	0018      	movs	r0, r3
    20ec:	4b58      	ldr	r3, [pc, #352]	; (2250 <STACK_SIZE+0x250>)
    20ee:	4798      	blx	r3
    20f0:	0003      	movs	r3, r0
    20f2:	001a      	movs	r2, r3
    20f4:	2301      	movs	r3, #1
    20f6:	4053      	eors	r3, r2
    20f8:	b2db      	uxtb	r3, r3
    20fa:	2b00      	cmp	r3, #0
    20fc:	d1f4      	bne.n	20e8 <STACK_SIZE+0xe8>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    20fe:	2314      	movs	r3, #20
    2100:	18fb      	adds	r3, r7, r3
    2102:	2200      	movs	r2, #0
    2104:	801a      	strh	r2, [r3, #0]
		rx_length--;
    2106:	232a      	movs	r3, #42	; 0x2a
    2108:	18fb      	adds	r3, r7, r3
    210a:	881a      	ldrh	r2, [r3, #0]
    210c:	232a      	movs	r3, #42	; 0x2a
    210e:	18fb      	adds	r3, r7, r3
    2110:	3a01      	subs	r2, #1
    2112:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    2114:	2317      	movs	r3, #23
    2116:	18fc      	adds	r4, r7, r3
    2118:	2314      	movs	r3, #20
    211a:	18fa      	adds	r2, r7, r3
    211c:	68fb      	ldr	r3, [r7, #12]
    211e:	0011      	movs	r1, r2
    2120:	0018      	movs	r0, r3
    2122:	4b4c      	ldr	r3, [pc, #304]	; (2254 <STACK_SIZE+0x254>)
    2124:	4798      	blx	r3
    2126:	0003      	movs	r3, r0
    2128:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    212a:	2317      	movs	r3, #23
    212c:	18fb      	adds	r3, r7, r3
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	2b00      	cmp	r3, #0
    2132:	d003      	beq.n	213c <STACK_SIZE+0x13c>
			/* Overflow, abort */
			return retval;
    2134:	2317      	movs	r3, #23
    2136:	18fb      	adds	r3, r7, r3
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	e0b8      	b.n	22ae <STACK_SIZE+0x2ae>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    213c:	232c      	movs	r3, #44	; 0x2c
    213e:	18fb      	adds	r3, r7, r3
    2140:	881b      	ldrh	r3, [r3, #0]
    2142:	222c      	movs	r2, #44	; 0x2c
    2144:	18ba      	adds	r2, r7, r2
    2146:	1c59      	adds	r1, r3, #1
    2148:	8011      	strh	r1, [r2, #0]
    214a:	001a      	movs	r2, r3
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	189b      	adds	r3, r3, r2
    2150:	2214      	movs	r2, #20
    2152:	18ba      	adds	r2, r7, r2
    2154:	8812      	ldrh	r2, [r2, #0]
    2156:	b2d2      	uxtb	r2, r2
    2158:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	799b      	ldrb	r3, [r3, #6]
    215e:	2b01      	cmp	r3, #1
    2160:	d110      	bne.n	2184 <STACK_SIZE+0x184>
			rx_data[rx_pos++] = (received_data >> 8);
    2162:	232c      	movs	r3, #44	; 0x2c
    2164:	18fb      	adds	r3, r7, r3
    2166:	881b      	ldrh	r3, [r3, #0]
    2168:	222c      	movs	r2, #44	; 0x2c
    216a:	18ba      	adds	r2, r7, r2
    216c:	1c59      	adds	r1, r3, #1
    216e:	8011      	strh	r1, [r2, #0]
    2170:	001a      	movs	r2, r3
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	189b      	adds	r3, r3, r2
    2176:	2214      	movs	r2, #20
    2178:	18ba      	adds	r2, r7, r2
    217a:	8812      	ldrh	r2, [r2, #0]
    217c:	0a12      	lsrs	r2, r2, #8
    217e:	b292      	uxth	r2, r2
    2180:	b2d2      	uxtb	r2, r2
    2182:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2184:	1cbb      	adds	r3, r7, #2
    2186:	881b      	ldrh	r3, [r3, #0]
    2188:	1cba      	adds	r2, r7, #2
    218a:	1e59      	subs	r1, r3, #1
    218c:	8011      	strh	r1, [r2, #0]
    218e:	2b00      	cmp	r3, #0
    2190:	d000      	beq.n	2194 <STACK_SIZE+0x194>
    2192:	e6d3      	b.n	1f3c <spi_transceive_buffer_wait+0x78>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2194:	68fb      	ldr	r3, [r7, #12]
    2196:	795b      	ldrb	r3, [r3, #5]
    2198:	2b01      	cmp	r3, #1
    219a:	d10b      	bne.n	21b4 <STACK_SIZE+0x1b4>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    219c:	46c0      	nop			; (mov r8, r8)
    219e:	68fb      	ldr	r3, [r7, #12]
    21a0:	0018      	movs	r0, r3
    21a2:	4b26      	ldr	r3, [pc, #152]	; (223c <STACK_SIZE+0x23c>)
    21a4:	4798      	blx	r3
    21a6:	0003      	movs	r3, r0
    21a8:	001a      	movs	r2, r3
    21aa:	2301      	movs	r3, #1
    21ac:	4053      	eors	r3, r2
    21ae:	b2db      	uxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	d1f4      	bne.n	219e <STACK_SIZE+0x19e>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    21b4:	68fb      	ldr	r3, [r7, #12]
    21b6:	795b      	ldrb	r3, [r3, #5]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d000      	beq.n	21be <STACK_SIZE+0x1be>
    21bc:	e076      	b.n	22ac <STACK_SIZE+0x2ac>
		while (rx_length) {
    21be:	e06f      	b.n	22a0 <STACK_SIZE+0x2a0>
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    21c0:	2300      	movs	r3, #0
    21c2:	61bb      	str	r3, [r7, #24]
    21c4:	e008      	b.n	21d8 <STACK_SIZE+0x1d8>
				if (spi_is_ready_to_read(module)) {
    21c6:	68fb      	ldr	r3, [r7, #12]
    21c8:	0018      	movs	r0, r3
    21ca:	4b21      	ldr	r3, [pc, #132]	; (2250 <STACK_SIZE+0x250>)
    21cc:	4798      	blx	r3
    21ce:	1e03      	subs	r3, r0, #0
    21d0:	d107      	bne.n	21e2 <STACK_SIZE+0x1e2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    21d2:	69bb      	ldr	r3, [r7, #24]
    21d4:	3301      	adds	r3, #1
    21d6:	61bb      	str	r3, [r7, #24]
    21d8:	69bb      	ldr	r3, [r7, #24]
    21da:	4a1b      	ldr	r2, [pc, #108]	; (2248 <STACK_SIZE+0x248>)
    21dc:	4293      	cmp	r3, r2
    21de:	d9f2      	bls.n	21c6 <STACK_SIZE+0x1c6>
    21e0:	e000      	b.n	21e4 <STACK_SIZE+0x1e4>
					break;
    21e2:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (!spi_is_ready_to_read(module)) {
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	0018      	movs	r0, r3
    21e8:	4b19      	ldr	r3, [pc, #100]	; (2250 <STACK_SIZE+0x250>)
    21ea:	4798      	blx	r3
    21ec:	0003      	movs	r3, r0
    21ee:	001a      	movs	r2, r3
    21f0:	2301      	movs	r3, #1
    21f2:	4053      	eors	r3, r2
    21f4:	b2db      	uxtb	r3, r3
    21f6:	2b00      	cmp	r3, #0
    21f8:	d001      	beq.n	21fe <STACK_SIZE+0x1fe>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    21fa:	2312      	movs	r3, #18
    21fc:	e057      	b.n	22ae <STACK_SIZE+0x2ae>
			}
			enum status_code retval;
			uint16_t received_data = 0;
    21fe:	2312      	movs	r3, #18
    2200:	18fb      	adds	r3, r7, r3
    2202:	2200      	movs	r2, #0
    2204:	801a      	strh	r2, [r3, #0]
			rx_length--;
    2206:	232a      	movs	r3, #42	; 0x2a
    2208:	18fb      	adds	r3, r7, r3
    220a:	881a      	ldrh	r2, [r3, #0]
    220c:	232a      	movs	r3, #42	; 0x2a
    220e:	18fb      	adds	r3, r7, r3
    2210:	3a01      	subs	r2, #1
    2212:	801a      	strh	r2, [r3, #0]

			retval = spi_read(module, &received_data);
    2214:	2316      	movs	r3, #22
    2216:	18fc      	adds	r4, r7, r3
    2218:	2312      	movs	r3, #18
    221a:	18fa      	adds	r2, r7, r3
    221c:	68fb      	ldr	r3, [r7, #12]
    221e:	0011      	movs	r1, r2
    2220:	0018      	movs	r0, r3
    2222:	4b0c      	ldr	r3, [pc, #48]	; (2254 <STACK_SIZE+0x254>)
    2224:	4798      	blx	r3
    2226:	0003      	movs	r3, r0
    2228:	7023      	strb	r3, [r4, #0]

			if (retval != STATUS_OK) {
    222a:	2316      	movs	r3, #22
    222c:	18fb      	adds	r3, r7, r3
    222e:	781b      	ldrb	r3, [r3, #0]
    2230:	2b00      	cmp	r3, #0
    2232:	d011      	beq.n	2258 <STACK_SIZE+0x258>
				/* Overflow, abort */
				return retval;
    2234:	2316      	movs	r3, #22
    2236:	18fb      	adds	r3, r7, r3
    2238:	781b      	ldrb	r3, [r3, #0]
    223a:	e038      	b.n	22ae <STACK_SIZE+0x2ae>
    223c:	0000139d 	.word	0x0000139d
    2240:	000014e5 	.word	0x000014e5
    2244:	000013c5 	.word	0x000013c5
    2248:	00002710 	.word	0x00002710
    224c:	00001415 	.word	0x00001415
    2250:	000013ed 	.word	0x000013ed
    2254:	0000145d 	.word	0x0000145d
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
    2258:	232c      	movs	r3, #44	; 0x2c
    225a:	18fb      	adds	r3, r7, r3
    225c:	881b      	ldrh	r3, [r3, #0]
    225e:	222c      	movs	r2, #44	; 0x2c
    2260:	18ba      	adds	r2, r7, r2
    2262:	1c59      	adds	r1, r3, #1
    2264:	8011      	strh	r1, [r2, #0]
    2266:	001a      	movs	r2, r3
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	189b      	adds	r3, r3, r2
    226c:	2212      	movs	r2, #18
    226e:	18ba      	adds	r2, r7, r2
    2270:	8812      	ldrh	r2, [r2, #0]
    2272:	b2d2      	uxtb	r2, r2
    2274:	701a      	strb	r2, [r3, #0]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2276:	68fb      	ldr	r3, [r7, #12]
    2278:	799b      	ldrb	r3, [r3, #6]
    227a:	2b01      	cmp	r3, #1
    227c:	d110      	bne.n	22a0 <STACK_SIZE+0x2a0>
				rx_data[rx_pos++] = (received_data >> 8);
    227e:	232c      	movs	r3, #44	; 0x2c
    2280:	18fb      	adds	r3, r7, r3
    2282:	881b      	ldrh	r3, [r3, #0]
    2284:	222c      	movs	r2, #44	; 0x2c
    2286:	18ba      	adds	r2, r7, r2
    2288:	1c59      	adds	r1, r3, #1
    228a:	8011      	strh	r1, [r2, #0]
    228c:	001a      	movs	r2, r3
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	189b      	adds	r3, r3, r2
    2292:	2212      	movs	r2, #18
    2294:	18ba      	adds	r2, r7, r2
    2296:	8812      	ldrh	r2, [r2, #0]
    2298:	0a12      	lsrs	r2, r2, #8
    229a:	b292      	uxth	r2, r2
    229c:	b2d2      	uxtb	r2, r2
    229e:	701a      	strb	r2, [r3, #0]
		while (rx_length) {
    22a0:	232a      	movs	r3, #42	; 0x2a
    22a2:	18fb      	adds	r3, r7, r3
    22a4:	881b      	ldrh	r3, [r3, #0]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d000      	beq.n	22ac <STACK_SIZE+0x2ac>
    22aa:	e789      	b.n	21c0 <STACK_SIZE+0x1c0>
			}
		}
	}
#  endif
	return STATUS_OK;
    22ac:	2300      	movs	r3, #0
}
    22ae:	0018      	movs	r0, r3
    22b0:	46bd      	mov	sp, r7
    22b2:	b00d      	add	sp, #52	; 0x34
    22b4:	bd90      	pop	{r4, r7, pc}
    22b6:	46c0      	nop			; (mov r8, r8)

000022b8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b084      	sub	sp, #16
    22bc:	af00      	add	r7, sp, #0
    22be:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22c0:	687b      	ldr	r3, [r7, #4]
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	b2da      	uxtb	r2, r3
    22ce:	230e      	movs	r3, #14
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22d8:	1c5a      	adds	r2, r3, #1
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	799b      	ldrb	r3, [r3, #6]
    22e2:	2b01      	cmp	r3, #1
    22e4:	d113      	bne.n	230e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    22ea:	781b      	ldrb	r3, [r3, #0]
    22ec:	b2db      	uxtb	r3, r3
    22ee:	021b      	lsls	r3, r3, #8
    22f0:	b21a      	sxth	r2, r3
    22f2:	230e      	movs	r3, #14
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	2100      	movs	r1, #0
    22f8:	5e5b      	ldrsh	r3, [r3, r1]
    22fa:	4313      	orrs	r3, r2
    22fc:	b21a      	sxth	r2, r3
    22fe:	230e      	movs	r3, #14
    2300:	18fb      	adds	r3, r7, r3
    2302:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2308:	1c5a      	adds	r2, r3, #1
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    230e:	230e      	movs	r3, #14
    2310:	18fb      	adds	r3, r7, r3
    2312:	881b      	ldrh	r3, [r3, #0]
    2314:	05db      	lsls	r3, r3, #23
    2316:	0dda      	lsrs	r2, r3, #23
    2318:	68bb      	ldr	r3, [r7, #8]
    231a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2320:	b29b      	uxth	r3, r3
    2322:	3b01      	subs	r3, #1
    2324:	b29a      	uxth	r2, r3
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	869a      	strh	r2, [r3, #52]	; 0x34
}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	46bd      	mov	sp, r7
    232e:	b004      	add	sp, #16
    2330:	bd80      	pop	{r7, pc}
	...

00002334 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    2334:	b580      	push	{r7, lr}
    2336:	b084      	sub	sp, #16
    2338:	af00      	add	r7, sp, #0
    233a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    233c:	687b      	ldr	r3, [r7, #4]
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    2342:	4b08      	ldr	r3, [pc, #32]	; (2364 <_spi_write_dummy+0x30>)
    2344:	881b      	ldrh	r3, [r3, #0]
    2346:	001a      	movs	r2, r3
    2348:	68fb      	ldr	r3, [r7, #12]
    234a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    2350:	b29b      	uxth	r3, r3
    2352:	3b01      	subs	r3, #1
    2354:	b29a      	uxth	r2, r3
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	865a      	strh	r2, [r3, #50]	; 0x32
}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	46bd      	mov	sp, r7
    235e:	b004      	add	sp, #16
    2360:	bd80      	pop	{r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	200000a8 	.word	0x200000a8

00002368 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    2368:	b580      	push	{r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
    236e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    2376:	230a      	movs	r3, #10
    2378:	18fb      	adds	r3, r7, r3
    237a:	2200      	movs	r2, #0
    237c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2382:	230a      	movs	r3, #10
    2384:	18fb      	adds	r3, r7, r3
    2386:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    238c:	b29b      	uxth	r3, r3
    238e:	3b01      	subs	r3, #1
    2390:	b29a      	uxth	r2, r3
    2392:	687b      	ldr	r3, [r7, #4]
    2394:	865a      	strh	r2, [r3, #50]	; 0x32
}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	46bd      	mov	sp, r7
    239a:	b004      	add	sp, #16
    239c:	bd80      	pop	{r7, pc}

0000239e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    239e:	b580      	push	{r7, lr}
    23a0:	b084      	sub	sp, #16
    23a2:	af00      	add	r7, sp, #0
    23a4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	681b      	ldr	r3, [r3, #0]
    23aa:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    23ac:	68fb      	ldr	r3, [r7, #12]
    23ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23b0:	b29a      	uxth	r2, r3
    23b2:	230a      	movs	r3, #10
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	05d2      	lsls	r2, r2, #23
    23b8:	0dd2      	lsrs	r2, r2, #23
    23ba:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23c0:	220a      	movs	r2, #10
    23c2:	18ba      	adds	r2, r7, r2
    23c4:	8812      	ldrh	r2, [r2, #0]
    23c6:	b2d2      	uxtb	r2, r2
    23c8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23ce:	1c5a      	adds	r2, r3, #1
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	799b      	ldrb	r3, [r3, #6]
    23d8:	2b01      	cmp	r3, #1
    23da:	d10d      	bne.n	23f8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23e0:	220a      	movs	r2, #10
    23e2:	18ba      	adds	r2, r7, r2
    23e4:	8812      	ldrh	r2, [r2, #0]
    23e6:	0a12      	lsrs	r2, r2, #8
    23e8:	b292      	uxth	r2, r2
    23ea:	b2d2      	uxtb	r2, r2
    23ec:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23f2:	1c5a      	adds	r2, r3, #1
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    23f8:	687b      	ldr	r3, [r7, #4]
    23fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    23fc:	b29b      	uxth	r3, r3
    23fe:	3b01      	subs	r3, #1
    2400:	b29a      	uxth	r2, r3
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	861a      	strh	r2, [r3, #48]	; 0x30
}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	46bd      	mov	sp, r7
    240a:	b004      	add	sp, #16
    240c:	bd80      	pop	{r7, pc}
	...

00002410 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2410:	b580      	push	{r7, lr}
    2412:	b086      	sub	sp, #24
    2414:	af00      	add	r7, sp, #0
    2416:	0002      	movs	r2, r0
    2418:	1dfb      	adds	r3, r7, #7
    241a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    241c:	1dfb      	adds	r3, r7, #7
    241e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    2420:	4bb9      	ldr	r3, [pc, #740]	; (2708 <_spi_interrupt_handler+0x2f8>)
    2422:	0092      	lsls	r2, r2, #2
    2424:	58d3      	ldr	r3, [r2, r3]
    2426:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2428:	697b      	ldr	r3, [r7, #20]
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    242e:	697b      	ldr	r3, [r7, #20]
    2430:	2237      	movs	r2, #55	; 0x37
    2432:	5c9a      	ldrb	r2, [r3, r2]
    2434:	697b      	ldr	r3, [r7, #20]
    2436:	2136      	movs	r1, #54	; 0x36
    2438:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    243a:	230f      	movs	r3, #15
    243c:	18fb      	adds	r3, r7, r3
    243e:	400a      	ands	r2, r1
    2440:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2442:	693b      	ldr	r3, [r7, #16]
    2444:	7e1b      	ldrb	r3, [r3, #24]
    2446:	b2da      	uxtb	r2, r3
    2448:	230c      	movs	r3, #12
    244a:	18fb      	adds	r3, r7, r3
    244c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    244e:	693b      	ldr	r3, [r7, #16]
    2450:	7d9b      	ldrb	r3, [r3, #22]
    2452:	b2db      	uxtb	r3, r3
    2454:	b29a      	uxth	r2, r3
    2456:	230c      	movs	r3, #12
    2458:	18fb      	adds	r3, r7, r3
    245a:	210c      	movs	r1, #12
    245c:	1879      	adds	r1, r7, r1
    245e:	8809      	ldrh	r1, [r1, #0]
    2460:	400a      	ands	r2, r1
    2462:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2464:	230c      	movs	r3, #12
    2466:	18fb      	adds	r3, r7, r3
    2468:	881b      	ldrh	r3, [r3, #0]
    246a:	2201      	movs	r2, #1
    246c:	4013      	ands	r3, r2
    246e:	d041      	beq.n	24f4 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2470:	697b      	ldr	r3, [r7, #20]
    2472:	795b      	ldrb	r3, [r3, #5]
    2474:	2b01      	cmp	r3, #1
    2476:	d110      	bne.n	249a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    2478:	697b      	ldr	r3, [r7, #20]
    247a:	7a5b      	ldrb	r3, [r3, #9]
    247c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    247e:	2b00      	cmp	r3, #0
    2480:	d10b      	bne.n	249a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    2482:	697b      	ldr	r3, [r7, #20]
    2484:	0018      	movs	r0, r3
    2486:	4ba1      	ldr	r3, [pc, #644]	; (270c <_spi_interrupt_handler+0x2fc>)
    2488:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    248a:	697b      	ldr	r3, [r7, #20]
    248c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    248e:	b29b      	uxth	r3, r3
    2490:	2b00      	cmp	r3, #0
    2492:	d102      	bne.n	249a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2494:	693b      	ldr	r3, [r7, #16]
    2496:	2201      	movs	r2, #1
    2498:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    249a:	697b      	ldr	r3, [r7, #20]
    249c:	795b      	ldrb	r3, [r3, #5]
		if (0
    249e:	2b01      	cmp	r3, #1
    24a0:	d104      	bne.n	24ac <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    24a2:	697b      	ldr	r3, [r7, #20]
    24a4:	7a5b      	ldrb	r3, [r3, #9]
    24a6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    24a8:	2b00      	cmp	r3, #0
    24aa:	d108      	bne.n	24be <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	795b      	ldrb	r3, [r3, #5]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d11f      	bne.n	24f4 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    24b4:	697b      	ldr	r3, [r7, #20]
    24b6:	7a5b      	ldrb	r3, [r3, #9]
    24b8:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    24ba:	2b00      	cmp	r3, #0
    24bc:	d01a      	beq.n	24f4 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    24be:	697b      	ldr	r3, [r7, #20]
    24c0:	0018      	movs	r0, r3
    24c2:	4b93      	ldr	r3, [pc, #588]	; (2710 <_spi_interrupt_handler+0x300>)
    24c4:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    24c6:	697b      	ldr	r3, [r7, #20]
    24c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    24ca:	b29b      	uxth	r3, r3
    24cc:	2b00      	cmp	r3, #0
    24ce:	d111      	bne.n	24f4 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    24d0:	693b      	ldr	r3, [r7, #16]
    24d2:	2201      	movs	r2, #1
    24d4:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    24d6:	697b      	ldr	r3, [r7, #20]
    24d8:	7a5b      	ldrb	r3, [r3, #9]
    24da:	b2db      	uxtb	r3, r3
    24dc:	2b01      	cmp	r3, #1
    24de:	d109      	bne.n	24f4 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    24e0:	697b      	ldr	r3, [r7, #20]
    24e2:	79db      	ldrb	r3, [r3, #7]
    24e4:	2201      	movs	r2, #1
    24e6:	4053      	eors	r3, r2
    24e8:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    24ea:	2b00      	cmp	r3, #0
    24ec:	d002      	beq.n	24f4 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    24ee:	693b      	ldr	r3, [r7, #16]
    24f0:	2202      	movs	r2, #2
    24f2:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    24f4:	230c      	movs	r3, #12
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	881b      	ldrh	r3, [r3, #0]
    24fa:	2204      	movs	r2, #4
    24fc:	4013      	ands	r3, r2
    24fe:	d100      	bne.n	2502 <_spi_interrupt_handler+0xf2>
    2500:	e07e      	b.n	2600 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2502:	693b      	ldr	r3, [r7, #16]
    2504:	8b5b      	ldrh	r3, [r3, #26]
    2506:	b29b      	uxth	r3, r3
    2508:	001a      	movs	r2, r3
    250a:	2304      	movs	r3, #4
    250c:	4013      	ands	r3, r2
    250e:	d022      	beq.n	2556 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2510:	697b      	ldr	r3, [r7, #20]
    2512:	7a5b      	ldrb	r3, [r3, #9]
    2514:	b2db      	uxtb	r3, r3
    2516:	2b01      	cmp	r3, #1
    2518:	d014      	beq.n	2544 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    251a:	697b      	ldr	r3, [r7, #20]
    251c:	2238      	movs	r2, #56	; 0x38
    251e:	211e      	movs	r1, #30
    2520:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	2203      	movs	r2, #3
    2526:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2528:	693b      	ldr	r3, [r7, #16]
    252a:	2205      	movs	r2, #5
    252c:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    252e:	230f      	movs	r3, #15
    2530:	18fb      	adds	r3, r7, r3
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	2208      	movs	r2, #8
    2536:	4013      	ands	r3, r2
    2538:	d004      	beq.n	2544 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    253a:	697b      	ldr	r3, [r7, #20]
    253c:	699b      	ldr	r3, [r3, #24]
    253e:	697a      	ldr	r2, [r7, #20]
    2540:	0010      	movs	r0, r2
    2542:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2544:	693b      	ldr	r3, [r7, #16]
    2546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2548:	230a      	movs	r3, #10
    254a:	18fb      	adds	r3, r7, r3
    254c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    254e:	693b      	ldr	r3, [r7, #16]
    2550:	2204      	movs	r2, #4
    2552:	835a      	strh	r2, [r3, #26]
    2554:	e054      	b.n	2600 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    2556:	697b      	ldr	r3, [r7, #20]
    2558:	7a5b      	ldrb	r3, [r3, #9]
    255a:	b2db      	uxtb	r3, r3
    255c:	2b01      	cmp	r3, #1
    255e:	d11e      	bne.n	259e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    2560:	697b      	ldr	r3, [r7, #20]
    2562:	0018      	movs	r0, r3
    2564:	4b6b      	ldr	r3, [pc, #428]	; (2714 <_spi_interrupt_handler+0x304>)
    2566:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    2568:	697b      	ldr	r3, [r7, #20]
    256a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    256c:	b29b      	uxth	r3, r3
    256e:	2b00      	cmp	r3, #0
    2570:	d146      	bne.n	2600 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2572:	693b      	ldr	r3, [r7, #16]
    2574:	2204      	movs	r2, #4
    2576:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    2578:	697b      	ldr	r3, [r7, #20]
    257a:	2238      	movs	r2, #56	; 0x38
    257c:	2100      	movs	r1, #0
    257e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    2580:	697b      	ldr	r3, [r7, #20]
    2582:	2203      	movs	r2, #3
    2584:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    2586:	230f      	movs	r3, #15
    2588:	18fb      	adds	r3, r7, r3
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	2201      	movs	r2, #1
    258e:	4013      	ands	r3, r2
    2590:	d036      	beq.n	2600 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2592:	697b      	ldr	r3, [r7, #20]
    2594:	68db      	ldr	r3, [r3, #12]
    2596:	697a      	ldr	r2, [r7, #20]
    2598:	0010      	movs	r0, r2
    259a:	4798      	blx	r3
    259c:	e030      	b.n	2600 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    259e:	697b      	ldr	r3, [r7, #20]
    25a0:	0018      	movs	r0, r3
    25a2:	4b5d      	ldr	r3, [pc, #372]	; (2718 <_spi_interrupt_handler+0x308>)
    25a4:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    25a6:	697b      	ldr	r3, [r7, #20]
    25a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    25aa:	b29b      	uxth	r3, r3
    25ac:	2b00      	cmp	r3, #0
    25ae:	d127      	bne.n	2600 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    25b0:	697b      	ldr	r3, [r7, #20]
    25b2:	2238      	movs	r2, #56	; 0x38
    25b4:	2100      	movs	r1, #0
    25b6:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    25b8:	693b      	ldr	r3, [r7, #16]
    25ba:	2204      	movs	r2, #4
    25bc:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    25be:	697b      	ldr	r3, [r7, #20]
    25c0:	7a5b      	ldrb	r3, [r3, #9]
    25c2:	b2db      	uxtb	r3, r3
    25c4:	2b02      	cmp	r3, #2
    25c6:	d10b      	bne.n	25e0 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    25c8:	230f      	movs	r3, #15
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	2204      	movs	r2, #4
    25d0:	4013      	ands	r3, r2
    25d2:	d015      	beq.n	2600 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    25d4:	697b      	ldr	r3, [r7, #20]
    25d6:	695b      	ldr	r3, [r3, #20]
    25d8:	697a      	ldr	r2, [r7, #20]
    25da:	0010      	movs	r0, r2
    25dc:	4798      	blx	r3
    25de:	e00f      	b.n	2600 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    25e0:	697b      	ldr	r3, [r7, #20]
    25e2:	7a5b      	ldrb	r3, [r3, #9]
    25e4:	b2db      	uxtb	r3, r3
    25e6:	2b00      	cmp	r3, #0
    25e8:	d10a      	bne.n	2600 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    25ea:	230f      	movs	r3, #15
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	781b      	ldrb	r3, [r3, #0]
    25f0:	2202      	movs	r2, #2
    25f2:	4013      	ands	r3, r2
    25f4:	d004      	beq.n	2600 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    25f6:	697b      	ldr	r3, [r7, #20]
    25f8:	691b      	ldr	r3, [r3, #16]
    25fa:	697a      	ldr	r2, [r7, #20]
    25fc:	0010      	movs	r0, r2
    25fe:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2600:	230c      	movs	r3, #12
    2602:	18fb      	adds	r3, r7, r3
    2604:	881b      	ldrh	r3, [r3, #0]
    2606:	2202      	movs	r2, #2
    2608:	4013      	ands	r3, r2
    260a:	d046      	beq.n	269a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    260c:	697b      	ldr	r3, [r7, #20]
    260e:	795b      	ldrb	r3, [r3, #5]
    2610:	2b00      	cmp	r3, #0
    2612:	d11d      	bne.n	2650 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    2614:	693b      	ldr	r3, [r7, #16]
    2616:	2207      	movs	r2, #7
    2618:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    261a:	693b      	ldr	r3, [r7, #16]
    261c:	2202      	movs	r2, #2
    261e:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    2620:	697b      	ldr	r3, [r7, #20]
    2622:	2203      	movs	r2, #3
    2624:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    2626:	697b      	ldr	r3, [r7, #20]
    2628:	2200      	movs	r2, #0
    262a:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    262c:	697b      	ldr	r3, [r7, #20]
    262e:	2200      	movs	r2, #0
    2630:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    2632:	697b      	ldr	r3, [r7, #20]
    2634:	2238      	movs	r2, #56	; 0x38
    2636:	2100      	movs	r1, #0
    2638:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    263a:	230f      	movs	r3, #15
    263c:	18fb      	adds	r3, r7, r3
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	2210      	movs	r2, #16
    2642:	4013      	ands	r3, r2
    2644:	d004      	beq.n	2650 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    2646:	697b      	ldr	r3, [r7, #20]
    2648:	69db      	ldr	r3, [r3, #28]
    264a:	697a      	ldr	r2, [r7, #20]
    264c:	0010      	movs	r0, r2
    264e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2650:	697b      	ldr	r3, [r7, #20]
    2652:	795b      	ldrb	r3, [r3, #5]
    2654:	2b01      	cmp	r3, #1
    2656:	d120      	bne.n	269a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2658:	697b      	ldr	r3, [r7, #20]
    265a:	7a5b      	ldrb	r3, [r3, #9]
    265c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    265e:	2b01      	cmp	r3, #1
    2660:	d11b      	bne.n	269a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2662:	697b      	ldr	r3, [r7, #20]
    2664:	79db      	ldrb	r3, [r3, #7]
    2666:	2201      	movs	r2, #1
    2668:	4053      	eors	r3, r2
    266a:	b2db      	uxtb	r3, r3
    266c:	2b00      	cmp	r3, #0
    266e:	d014      	beq.n	269a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2670:	693b      	ldr	r3, [r7, #16]
    2672:	2202      	movs	r2, #2
    2674:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    2676:	697b      	ldr	r3, [r7, #20]
    2678:	2203      	movs	r2, #3
    267a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    267c:	697b      	ldr	r3, [r7, #20]
    267e:	2238      	movs	r2, #56	; 0x38
    2680:	2100      	movs	r1, #0
    2682:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2684:	230f      	movs	r3, #15
    2686:	18fb      	adds	r3, r7, r3
    2688:	781b      	ldrb	r3, [r3, #0]
    268a:	2201      	movs	r2, #1
    268c:	4013      	ands	r3, r2
    268e:	d004      	beq.n	269a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2690:	697b      	ldr	r3, [r7, #20]
    2692:	68db      	ldr	r3, [r3, #12]
    2694:	697a      	ldr	r2, [r7, #20]
    2696:	0010      	movs	r0, r2
    2698:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    269a:	230c      	movs	r3, #12
    269c:	18fb      	adds	r3, r7, r3
    269e:	881b      	ldrh	r3, [r3, #0]
    26a0:	2208      	movs	r2, #8
    26a2:	4013      	ands	r3, r2
    26a4:	d014      	beq.n	26d0 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    26a6:	697b      	ldr	r3, [r7, #20]
    26a8:	795b      	ldrb	r3, [r3, #5]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d110      	bne.n	26d0 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    26ae:	693b      	ldr	r3, [r7, #16]
    26b0:	2208      	movs	r2, #8
    26b2:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    26b4:	693b      	ldr	r3, [r7, #16]
    26b6:	2208      	movs	r2, #8
    26b8:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    26ba:	230f      	movs	r3, #15
    26bc:	18fb      	adds	r3, r7, r3
    26be:	781b      	ldrb	r3, [r3, #0]
    26c0:	2220      	movs	r2, #32
    26c2:	4013      	ands	r3, r2
    26c4:	d004      	beq.n	26d0 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    26c6:	697b      	ldr	r3, [r7, #20]
    26c8:	6a1b      	ldr	r3, [r3, #32]
    26ca:	697a      	ldr	r2, [r7, #20]
    26cc:	0010      	movs	r0, r2
    26ce:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    26d0:	230c      	movs	r3, #12
    26d2:	18fb      	adds	r3, r7, r3
    26d4:	881b      	ldrh	r3, [r3, #0]
    26d6:	2280      	movs	r2, #128	; 0x80
    26d8:	4013      	ands	r3, r2
    26da:	d010      	beq.n	26fe <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    26dc:	693b      	ldr	r3, [r7, #16]
    26de:	2280      	movs	r2, #128	; 0x80
    26e0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    26e2:	693b      	ldr	r3, [r7, #16]
    26e4:	2280      	movs	r2, #128	; 0x80
    26e6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    26e8:	230f      	movs	r3, #15
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	2240      	movs	r2, #64	; 0x40
    26f0:	4013      	ands	r3, r2
    26f2:	d004      	beq.n	26fe <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    26f4:	697b      	ldr	r3, [r7, #20]
    26f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    26f8:	697a      	ldr	r2, [r7, #20]
    26fa:	0010      	movs	r0, r2
    26fc:	4798      	blx	r3
		}
	}
#  endif
}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	46bd      	mov	sp, r7
    2702:	b006      	add	sp, #24
    2704:	bd80      	pop	{r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	200000ac 	.word	0x200000ac
    270c:	00002335 	.word	0x00002335
    2710:	000022b9 	.word	0x000022b9
    2714:	00002369 	.word	0x00002369
    2718:	0000239f 	.word	0x0000239f

0000271c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	0002      	movs	r2, r0
    2724:	1dfb      	adds	r3, r7, #7
    2726:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2728:	46c0      	nop			; (mov r8, r8)
    272a:	46bd      	mov	sp, r7
    272c:	b002      	add	sp, #8
    272e:	bd80      	pop	{r7, pc}

00002730 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2730:	b580      	push	{r7, lr}
    2732:	b084      	sub	sp, #16
    2734:	af00      	add	r7, sp, #0
    2736:	0002      	movs	r2, r0
    2738:	6039      	str	r1, [r7, #0]
    273a:	1dfb      	adds	r3, r7, #7
    273c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    273e:	4b13      	ldr	r3, [pc, #76]	; (278c <_sercom_set_handler+0x5c>)
    2740:	781b      	ldrb	r3, [r3, #0]
    2742:	2201      	movs	r2, #1
    2744:	4053      	eors	r3, r2
    2746:	b2db      	uxtb	r3, r3
    2748:	2b00      	cmp	r3, #0
    274a:	d015      	beq.n	2778 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    274c:	2300      	movs	r3, #0
    274e:	60fb      	str	r3, [r7, #12]
    2750:	e00c      	b.n	276c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2752:	4b0f      	ldr	r3, [pc, #60]	; (2790 <_sercom_set_handler+0x60>)
    2754:	68fa      	ldr	r2, [r7, #12]
    2756:	0092      	lsls	r2, r2, #2
    2758:	490e      	ldr	r1, [pc, #56]	; (2794 <_sercom_set_handler+0x64>)
    275a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    275c:	4b0e      	ldr	r3, [pc, #56]	; (2798 <_sercom_set_handler+0x68>)
    275e:	68fa      	ldr	r2, [r7, #12]
    2760:	0092      	lsls	r2, r2, #2
    2762:	2100      	movs	r1, #0
    2764:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2766:	68fb      	ldr	r3, [r7, #12]
    2768:	3301      	adds	r3, #1
    276a:	60fb      	str	r3, [r7, #12]
    276c:	68fb      	ldr	r3, [r7, #12]
    276e:	2b05      	cmp	r3, #5
    2770:	d9ef      	bls.n	2752 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    2772:	4b06      	ldr	r3, [pc, #24]	; (278c <_sercom_set_handler+0x5c>)
    2774:	2201      	movs	r2, #1
    2776:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2778:	1dfb      	adds	r3, r7, #7
    277a:	781a      	ldrb	r2, [r3, #0]
    277c:	4b04      	ldr	r3, [pc, #16]	; (2790 <_sercom_set_handler+0x60>)
    277e:	0092      	lsls	r2, r2, #2
    2780:	6839      	ldr	r1, [r7, #0]
    2782:	50d1      	str	r1, [r2, r3]
}
    2784:	46c0      	nop			; (mov r8, r8)
    2786:	46bd      	mov	sp, r7
    2788:	b004      	add	sp, #16
    278a:	bd80      	pop	{r7, pc}
    278c:	2000002e 	.word	0x2000002e
    2790:	20000030 	.word	0x20000030
    2794:	0000271d 	.word	0x0000271d
    2798:	200000ac 	.word	0x200000ac

0000279c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    279c:	b590      	push	{r4, r7, lr}
    279e:	b085      	sub	sp, #20
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    27a4:	2308      	movs	r3, #8
    27a6:	18fb      	adds	r3, r7, r3
    27a8:	4a0b      	ldr	r2, [pc, #44]	; (27d8 <_sercom_get_interrupt_vector+0x3c>)
    27aa:	6811      	ldr	r1, [r2, #0]
    27ac:	6019      	str	r1, [r3, #0]
    27ae:	8892      	ldrh	r2, [r2, #4]
    27b0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    27b2:	230f      	movs	r3, #15
    27b4:	18fc      	adds	r4, r7, r3
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	0018      	movs	r0, r3
    27ba:	4b08      	ldr	r3, [pc, #32]	; (27dc <_sercom_get_interrupt_vector+0x40>)
    27bc:	4798      	blx	r3
    27be:	0003      	movs	r3, r0
    27c0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    27c2:	230f      	movs	r3, #15
    27c4:	18fb      	adds	r3, r7, r3
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	2208      	movs	r2, #8
    27ca:	18ba      	adds	r2, r7, r2
    27cc:	5cd3      	ldrb	r3, [r2, r3]
    27ce:	b25b      	sxtb	r3, r3
}
    27d0:	0018      	movs	r0, r3
    27d2:	46bd      	mov	sp, r7
    27d4:	b005      	add	sp, #20
    27d6:	bd90      	pop	{r4, r7, pc}
    27d8:	000039a4 	.word	0x000039a4
    27dc:	000011b9 	.word	0x000011b9

000027e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    27e0:	b580      	push	{r7, lr}
    27e2:	af00      	add	r7, sp, #0
    27e4:	4b03      	ldr	r3, [pc, #12]	; (27f4 <SERCOM0_Handler+0x14>)
    27e6:	681b      	ldr	r3, [r3, #0]
    27e8:	2000      	movs	r0, #0
    27ea:	4798      	blx	r3
    27ec:	46c0      	nop			; (mov r8, r8)
    27ee:	46bd      	mov	sp, r7
    27f0:	bd80      	pop	{r7, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	20000030 	.word	0x20000030

000027f8 <SERCOM1_Handler>:
    27f8:	b580      	push	{r7, lr}
    27fa:	af00      	add	r7, sp, #0
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <SERCOM1_Handler+0x14>)
    27fe:	685b      	ldr	r3, [r3, #4]
    2800:	2001      	movs	r0, #1
    2802:	4798      	blx	r3
    2804:	46c0      	nop			; (mov r8, r8)
    2806:	46bd      	mov	sp, r7
    2808:	bd80      	pop	{r7, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	20000030 	.word	0x20000030

00002810 <SERCOM2_Handler>:
    2810:	b580      	push	{r7, lr}
    2812:	af00      	add	r7, sp, #0
    2814:	4b03      	ldr	r3, [pc, #12]	; (2824 <SERCOM2_Handler+0x14>)
    2816:	689b      	ldr	r3, [r3, #8]
    2818:	2002      	movs	r0, #2
    281a:	4798      	blx	r3
    281c:	46c0      	nop			; (mov r8, r8)
    281e:	46bd      	mov	sp, r7
    2820:	bd80      	pop	{r7, pc}
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	20000030 	.word	0x20000030

00002828 <SERCOM3_Handler>:
    2828:	b580      	push	{r7, lr}
    282a:	af00      	add	r7, sp, #0
    282c:	4b03      	ldr	r3, [pc, #12]	; (283c <SERCOM3_Handler+0x14>)
    282e:	68db      	ldr	r3, [r3, #12]
    2830:	2003      	movs	r0, #3
    2832:	4798      	blx	r3
    2834:	46c0      	nop			; (mov r8, r8)
    2836:	46bd      	mov	sp, r7
    2838:	bd80      	pop	{r7, pc}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	20000030 	.word	0x20000030

00002840 <SERCOM4_Handler>:
    2840:	b580      	push	{r7, lr}
    2842:	af00      	add	r7, sp, #0
    2844:	4b03      	ldr	r3, [pc, #12]	; (2854 <SERCOM4_Handler+0x14>)
    2846:	691b      	ldr	r3, [r3, #16]
    2848:	2004      	movs	r0, #4
    284a:	4798      	blx	r3
    284c:	46c0      	nop			; (mov r8, r8)
    284e:	46bd      	mov	sp, r7
    2850:	bd80      	pop	{r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	20000030 	.word	0x20000030

00002858 <SERCOM5_Handler>:
    2858:	b580      	push	{r7, lr}
    285a:	af00      	add	r7, sp, #0
    285c:	4b03      	ldr	r3, [pc, #12]	; (286c <SERCOM5_Handler+0x14>)
    285e:	695b      	ldr	r3, [r3, #20]
    2860:	2005      	movs	r0, #5
    2862:	4798      	blx	r3
    2864:	46c0      	nop			; (mov r8, r8)
    2866:	46bd      	mov	sp, r7
    2868:	bd80      	pop	{r7, pc}
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	20000030 	.word	0x20000030

00002870 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2870:	b580      	push	{r7, lr}
    2872:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2874:	46c0      	nop			; (mov r8, r8)
    2876:	46bd      	mov	sp, r7
    2878:	bd80      	pop	{r7, pc}
	...

0000287c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2882:	4b10      	ldr	r3, [pc, #64]	; (28c4 <cpu_irq_enter_critical+0x48>)
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	2b00      	cmp	r3, #0
    2888:	d112      	bne.n	28b0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    288a:	f3ef 8310 	mrs	r3, PRIMASK
    288e:	607b      	str	r3, [r7, #4]
  return(result);
    2890:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2892:	2b00      	cmp	r3, #0
    2894:	d109      	bne.n	28aa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2896:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2898:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    289c:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <cpu_irq_enter_critical+0x4c>)
    289e:	2200      	movs	r2, #0
    28a0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    28a2:	4b0a      	ldr	r3, [pc, #40]	; (28cc <cpu_irq_enter_critical+0x50>)
    28a4:	2201      	movs	r2, #1
    28a6:	701a      	strb	r2, [r3, #0]
    28a8:	e002      	b.n	28b0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    28aa:	4b08      	ldr	r3, [pc, #32]	; (28cc <cpu_irq_enter_critical+0x50>)
    28ac:	2200      	movs	r2, #0
    28ae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    28b0:	4b04      	ldr	r3, [pc, #16]	; (28c4 <cpu_irq_enter_critical+0x48>)
    28b2:	681b      	ldr	r3, [r3, #0]
    28b4:	1c5a      	adds	r2, r3, #1
    28b6:	4b03      	ldr	r3, [pc, #12]	; (28c4 <cpu_irq_enter_critical+0x48>)
    28b8:	601a      	str	r2, [r3, #0]
}
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	46bd      	mov	sp, r7
    28be:	b002      	add	sp, #8
    28c0:	bd80      	pop	{r7, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000048 	.word	0x20000048
    28c8:	20000008 	.word	0x20000008
    28cc:	2000004c 	.word	0x2000004c

000028d0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    28d0:	b580      	push	{r7, lr}
    28d2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    28d4:	4b0b      	ldr	r3, [pc, #44]	; (2904 <cpu_irq_leave_critical+0x34>)
    28d6:	681b      	ldr	r3, [r3, #0]
    28d8:	1e5a      	subs	r2, r3, #1
    28da:	4b0a      	ldr	r3, [pc, #40]	; (2904 <cpu_irq_leave_critical+0x34>)
    28dc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    28de:	4b09      	ldr	r3, [pc, #36]	; (2904 <cpu_irq_leave_critical+0x34>)
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	2b00      	cmp	r3, #0
    28e4:	d10a      	bne.n	28fc <cpu_irq_leave_critical+0x2c>
    28e6:	4b08      	ldr	r3, [pc, #32]	; (2908 <cpu_irq_leave_critical+0x38>)
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	b2db      	uxtb	r3, r3
    28ec:	2b00      	cmp	r3, #0
    28ee:	d005      	beq.n	28fc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    28f0:	4b06      	ldr	r3, [pc, #24]	; (290c <cpu_irq_leave_critical+0x3c>)
    28f2:	2201      	movs	r2, #1
    28f4:	701a      	strb	r2, [r3, #0]
    28f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28fa:	b662      	cpsie	i
	}
}
    28fc:	46c0      	nop			; (mov r8, r8)
    28fe:	46bd      	mov	sp, r7
    2900:	bd80      	pop	{r7, pc}
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	20000048 	.word	0x20000048
    2908:	2000004c 	.word	0x2000004c
    290c:	20000008 	.word	0x20000008

00002910 <system_gclk_gen_get_config_defaults>:
{
    2910:	b580      	push	{r7, lr}
    2912:	b082      	sub	sp, #8
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	2201      	movs	r2, #1
    291c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    291e:	687b      	ldr	r3, [r7, #4]
    2920:	2200      	movs	r2, #0
    2922:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	2206      	movs	r2, #6
    2928:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	2200      	movs	r2, #0
    292e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2930:	687b      	ldr	r3, [r7, #4]
    2932:	2200      	movs	r2, #0
    2934:	725a      	strb	r2, [r3, #9]
}
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	46bd      	mov	sp, r7
    293a:	b002      	add	sp, #8
    293c:	bd80      	pop	{r7, pc}

0000293e <system_clock_source_osc8m_get_config_defaults>:
{
    293e:	b580      	push	{r7, lr}
    2940:	b082      	sub	sp, #8
    2942:	af00      	add	r7, sp, #0
    2944:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	2203      	movs	r2, #3
    294a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2200      	movs	r2, #0
    2950:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	2201      	movs	r2, #1
    2956:	709a      	strb	r2, [r3, #2]
}
    2958:	46c0      	nop			; (mov r8, r8)
    295a:	46bd      	mov	sp, r7
    295c:	b002      	add	sp, #8
    295e:	bd80      	pop	{r7, pc}

00002960 <system_cpu_clock_set_divider>:
{
    2960:	b580      	push	{r7, lr}
    2962:	b082      	sub	sp, #8
    2964:	af00      	add	r7, sp, #0
    2966:	0002      	movs	r2, r0
    2968:	1dfb      	adds	r3, r7, #7
    296a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    296c:	4a03      	ldr	r2, [pc, #12]	; (297c <system_cpu_clock_set_divider+0x1c>)
    296e:	1dfb      	adds	r3, r7, #7
    2970:	781b      	ldrb	r3, [r3, #0]
    2972:	7213      	strb	r3, [r2, #8]
}
    2974:	46c0      	nop			; (mov r8, r8)
    2976:	46bd      	mov	sp, r7
    2978:	b002      	add	sp, #8
    297a:	bd80      	pop	{r7, pc}
    297c:	40000400 	.word	0x40000400

00002980 <system_apb_clock_set_divider>:
{
    2980:	b580      	push	{r7, lr}
    2982:	b082      	sub	sp, #8
    2984:	af00      	add	r7, sp, #0
    2986:	0002      	movs	r2, r0
    2988:	1dfb      	adds	r3, r7, #7
    298a:	701a      	strb	r2, [r3, #0]
    298c:	1dbb      	adds	r3, r7, #6
    298e:	1c0a      	adds	r2, r1, #0
    2990:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2992:	1dfb      	adds	r3, r7, #7
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	2b01      	cmp	r3, #1
    2998:	d008      	beq.n	29ac <system_apb_clock_set_divider+0x2c>
    299a:	2b02      	cmp	r3, #2
    299c:	d00b      	beq.n	29b6 <system_apb_clock_set_divider+0x36>
    299e:	2b00      	cmp	r3, #0
    29a0:	d10e      	bne.n	29c0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    29a2:	4a0b      	ldr	r2, [pc, #44]	; (29d0 <system_apb_clock_set_divider+0x50>)
    29a4:	1dbb      	adds	r3, r7, #6
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	7253      	strb	r3, [r2, #9]
			break;
    29aa:	e00b      	b.n	29c4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    29ac:	4a08      	ldr	r2, [pc, #32]	; (29d0 <system_apb_clock_set_divider+0x50>)
    29ae:	1dbb      	adds	r3, r7, #6
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	7293      	strb	r3, [r2, #10]
			break;
    29b4:	e006      	b.n	29c4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    29b6:	4a06      	ldr	r2, [pc, #24]	; (29d0 <system_apb_clock_set_divider+0x50>)
    29b8:	1dbb      	adds	r3, r7, #6
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	72d3      	strb	r3, [r2, #11]
			break;
    29be:	e001      	b.n	29c4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    29c0:	2317      	movs	r3, #23
    29c2:	e000      	b.n	29c6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    29c4:	2300      	movs	r3, #0
}
    29c6:	0018      	movs	r0, r3
    29c8:	46bd      	mov	sp, r7
    29ca:	b002      	add	sp, #8
    29cc:	bd80      	pop	{r7, pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	40000400 	.word	0x40000400

000029d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    29d4:	b580      	push	{r7, lr}
    29d6:	b082      	sub	sp, #8
    29d8:	af00      	add	r7, sp, #0
    29da:	0002      	movs	r2, r0
    29dc:	1dfb      	adds	r3, r7, #7
    29de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    29e0:	4a08      	ldr	r2, [pc, #32]	; (2a04 <system_flash_set_waitstates+0x30>)
    29e2:	1dfb      	adds	r3, r7, #7
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	210f      	movs	r1, #15
    29e8:	400b      	ands	r3, r1
    29ea:	b2d9      	uxtb	r1, r3
    29ec:	6853      	ldr	r3, [r2, #4]
    29ee:	200f      	movs	r0, #15
    29f0:	4001      	ands	r1, r0
    29f2:	0049      	lsls	r1, r1, #1
    29f4:	201e      	movs	r0, #30
    29f6:	4383      	bics	r3, r0
    29f8:	430b      	orrs	r3, r1
    29fa:	6053      	str	r3, [r2, #4]
}
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	46bd      	mov	sp, r7
    2a00:	b002      	add	sp, #8
    2a02:	bd80      	pop	{r7, pc}
    2a04:	41004000 	.word	0x41004000

00002a08 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    2a08:	b580      	push	{r7, lr}
    2a0a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a0c:	46c0      	nop			; (mov r8, r8)
    2a0e:	4b04      	ldr	r3, [pc, #16]	; (2a20 <_system_dfll_wait_for_sync+0x18>)
    2a10:	68db      	ldr	r3, [r3, #12]
    2a12:	2210      	movs	r2, #16
    2a14:	4013      	ands	r3, r2
    2a16:	d0fa      	beq.n	2a0e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    2a18:	46c0      	nop			; (mov r8, r8)
    2a1a:	46bd      	mov	sp, r7
    2a1c:	bd80      	pop	{r7, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	40000800 	.word	0x40000800

00002a24 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    2a24:	b580      	push	{r7, lr}
    2a26:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2a28:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2a2a:	2202      	movs	r2, #2
    2a2c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2a2e:	4b0c      	ldr	r3, [pc, #48]	; (2a60 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2a30:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2a32:	4a0a      	ldr	r2, [pc, #40]	; (2a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2a34:	4b0b      	ldr	r3, [pc, #44]	; (2a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2a36:	689b      	ldr	r3, [r3, #8]
    2a38:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2a3a:	4a08      	ldr	r2, [pc, #32]	; (2a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2a3c:	4b09      	ldr	r3, [pc, #36]	; (2a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2a3e:	685b      	ldr	r3, [r3, #4]
    2a40:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2a42:	4b06      	ldr	r3, [pc, #24]	; (2a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2a44:	2200      	movs	r2, #0
    2a46:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    2a48:	4b05      	ldr	r3, [pc, #20]	; (2a60 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    2a4a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2a4c:	4a03      	ldr	r2, [pc, #12]	; (2a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    2a4e:	4b05      	ldr	r3, [pc, #20]	; (2a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	b29b      	uxth	r3, r3
    2a54:	8493      	strh	r3, [r2, #36]	; 0x24
}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	46bd      	mov	sp, r7
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	40000800 	.word	0x40000800
    2a60:	00002a09 	.word	0x00002a09
    2a64:	20000050 	.word	0x20000050

00002a68 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	b082      	sub	sp, #8
    2a6c:	af00      	add	r7, sp, #0
    2a6e:	0002      	movs	r2, r0
    2a70:	1dfb      	adds	r3, r7, #7
    2a72:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2a74:	1dfb      	adds	r3, r7, #7
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	2b08      	cmp	r3, #8
    2a7a:	d840      	bhi.n	2afe <system_clock_source_get_hz+0x96>
    2a7c:	009a      	lsls	r2, r3, #2
    2a7e:	4b22      	ldr	r3, [pc, #136]	; (2b08 <system_clock_source_get_hz+0xa0>)
    2a80:	18d3      	adds	r3, r2, r3
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2a86:	4b21      	ldr	r3, [pc, #132]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2a88:	691b      	ldr	r3, [r3, #16]
    2a8a:	e039      	b.n	2b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2a8c:	4b20      	ldr	r3, [pc, #128]	; (2b10 <system_clock_source_get_hz+0xa8>)
    2a8e:	6a1b      	ldr	r3, [r3, #32]
    2a90:	059b      	lsls	r3, r3, #22
    2a92:	0f9b      	lsrs	r3, r3, #30
    2a94:	b2db      	uxtb	r3, r3
    2a96:	001a      	movs	r2, r3
    2a98:	4b1e      	ldr	r3, [pc, #120]	; (2b14 <system_clock_source_get_hz+0xac>)
    2a9a:	40d3      	lsrs	r3, r2
    2a9c:	e030      	b.n	2b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2a9e:	2380      	movs	r3, #128	; 0x80
    2aa0:	021b      	lsls	r3, r3, #8
    2aa2:	e02d      	b.n	2b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2aa4:	2380      	movs	r3, #128	; 0x80
    2aa6:	021b      	lsls	r3, r3, #8
    2aa8:	e02a      	b.n	2b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2aaa:	4b18      	ldr	r3, [pc, #96]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2aac:	695b      	ldr	r3, [r3, #20]
    2aae:	e027      	b.n	2b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ab0:	4b16      	ldr	r3, [pc, #88]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2ab2:	681b      	ldr	r3, [r3, #0]
    2ab4:	2202      	movs	r2, #2
    2ab6:	4013      	ands	r3, r2
    2ab8:	d101      	bne.n	2abe <system_clock_source_get_hz+0x56>
			return 0;
    2aba:	2300      	movs	r3, #0
    2abc:	e020      	b.n	2b00 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2abe:	4b16      	ldr	r3, [pc, #88]	; (2b18 <system_clock_source_get_hz+0xb0>)
    2ac0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2ac2:	4b12      	ldr	r3, [pc, #72]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2ac4:	681b      	ldr	r3, [r3, #0]
    2ac6:	2204      	movs	r2, #4
    2ac8:	4013      	ands	r3, r2
    2aca:	d009      	beq.n	2ae0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2acc:	2000      	movs	r0, #0
    2ace:	4b13      	ldr	r3, [pc, #76]	; (2b1c <system_clock_source_get_hz+0xb4>)
    2ad0:	4798      	blx	r3
    2ad2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    2ad4:	4b0d      	ldr	r3, [pc, #52]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2ad6:	689b      	ldr	r3, [r3, #8]
    2ad8:	041b      	lsls	r3, r3, #16
    2ada:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2adc:	4353      	muls	r3, r2
    2ade:	e00f      	b.n	2b00 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    2ae0:	4b0f      	ldr	r3, [pc, #60]	; (2b20 <system_clock_source_get_hz+0xb8>)
    2ae2:	e00d      	b.n	2b00 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ae4:	4a0a      	ldr	r2, [pc, #40]	; (2b10 <system_clock_source_get_hz+0xa8>)
    2ae6:	2350      	movs	r3, #80	; 0x50
    2ae8:	5cd3      	ldrb	r3, [r2, r3]
    2aea:	b2db      	uxtb	r3, r3
    2aec:	001a      	movs	r2, r3
    2aee:	2304      	movs	r3, #4
    2af0:	4013      	ands	r3, r2
    2af2:	d101      	bne.n	2af8 <system_clock_source_get_hz+0x90>
			return 0;
    2af4:	2300      	movs	r3, #0
    2af6:	e003      	b.n	2b00 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    2af8:	4b04      	ldr	r3, [pc, #16]	; (2b0c <system_clock_source_get_hz+0xa4>)
    2afa:	68db      	ldr	r3, [r3, #12]
    2afc:	e000      	b.n	2b00 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    2afe:	2300      	movs	r3, #0
	}
}
    2b00:	0018      	movs	r0, r3
    2b02:	46bd      	mov	sp, r7
    2b04:	b002      	add	sp, #8
    2b06:	bd80      	pop	{r7, pc}
    2b08:	000039ac 	.word	0x000039ac
    2b0c:	20000050 	.word	0x20000050
    2b10:	40000800 	.word	0x40000800
    2b14:	007a1200 	.word	0x007a1200
    2b18:	00002a09 	.word	0x00002a09
    2b1c:	000031a5 	.word	0x000031a5
    2b20:	02dc6c00 	.word	0x02dc6c00

00002b24 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	b084      	sub	sp, #16
    2b28:	af00      	add	r7, sp, #0
    2b2a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2b2c:	4b1a      	ldr	r3, [pc, #104]	; (2b98 <system_clock_source_osc8m_set_config+0x74>)
    2b2e:	6a1b      	ldr	r3, [r3, #32]
    2b30:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	1c1a      	adds	r2, r3, #0
    2b38:	2303      	movs	r3, #3
    2b3a:	4013      	ands	r3, r2
    2b3c:	b2da      	uxtb	r2, r3
    2b3e:	230d      	movs	r3, #13
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	2103      	movs	r1, #3
    2b44:	400a      	ands	r2, r1
    2b46:	0010      	movs	r0, r2
    2b48:	781a      	ldrb	r2, [r3, #0]
    2b4a:	2103      	movs	r1, #3
    2b4c:	438a      	bics	r2, r1
    2b4e:	1c11      	adds	r1, r2, #0
    2b50:	1c02      	adds	r2, r0, #0
    2b52:	430a      	orrs	r2, r1
    2b54:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	789a      	ldrb	r2, [r3, #2]
    2b5a:	230c      	movs	r3, #12
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	01d0      	lsls	r0, r2, #7
    2b60:	781a      	ldrb	r2, [r3, #0]
    2b62:	217f      	movs	r1, #127	; 0x7f
    2b64:	400a      	ands	r2, r1
    2b66:	1c11      	adds	r1, r2, #0
    2b68:	1c02      	adds	r2, r0, #0
    2b6a:	430a      	orrs	r2, r1
    2b6c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	785a      	ldrb	r2, [r3, #1]
    2b72:	230c      	movs	r3, #12
    2b74:	18fb      	adds	r3, r7, r3
    2b76:	2101      	movs	r1, #1
    2b78:	400a      	ands	r2, r1
    2b7a:	0190      	lsls	r0, r2, #6
    2b7c:	781a      	ldrb	r2, [r3, #0]
    2b7e:	2140      	movs	r1, #64	; 0x40
    2b80:	438a      	bics	r2, r1
    2b82:	1c11      	adds	r1, r2, #0
    2b84:	1c02      	adds	r2, r0, #0
    2b86:	430a      	orrs	r2, r1
    2b88:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2b8a:	4b03      	ldr	r3, [pc, #12]	; (2b98 <system_clock_source_osc8m_set_config+0x74>)
    2b8c:	68fa      	ldr	r2, [r7, #12]
    2b8e:	621a      	str	r2, [r3, #32]
}
    2b90:	46c0      	nop			; (mov r8, r8)
    2b92:	46bd      	mov	sp, r7
    2b94:	b004      	add	sp, #16
    2b96:	bd80      	pop	{r7, pc}
    2b98:	40000800 	.word	0x40000800

00002b9c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b082      	sub	sp, #8
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	0002      	movs	r2, r0
    2ba4:	1dfb      	adds	r3, r7, #7
    2ba6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2ba8:	1dfb      	adds	r3, r7, #7
    2baa:	781b      	ldrb	r3, [r3, #0]
    2bac:	2b08      	cmp	r3, #8
    2bae:	d83b      	bhi.n	2c28 <system_clock_source_enable+0x8c>
    2bb0:	009a      	lsls	r2, r3, #2
    2bb2:	4b21      	ldr	r3, [pc, #132]	; (2c38 <system_clock_source_enable+0x9c>)
    2bb4:	18d3      	adds	r3, r2, r3
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2bba:	4b20      	ldr	r3, [pc, #128]	; (2c3c <system_clock_source_enable+0xa0>)
    2bbc:	4a1f      	ldr	r2, [pc, #124]	; (2c3c <system_clock_source_enable+0xa0>)
    2bbe:	6a12      	ldr	r2, [r2, #32]
    2bc0:	2102      	movs	r1, #2
    2bc2:	430a      	orrs	r2, r1
    2bc4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    2bc6:	2300      	movs	r3, #0
    2bc8:	e031      	b.n	2c2e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2bca:	4b1c      	ldr	r3, [pc, #112]	; (2c3c <system_clock_source_enable+0xa0>)
    2bcc:	4a1b      	ldr	r2, [pc, #108]	; (2c3c <system_clock_source_enable+0xa0>)
    2bce:	6992      	ldr	r2, [r2, #24]
    2bd0:	2102      	movs	r1, #2
    2bd2:	430a      	orrs	r2, r1
    2bd4:	619a      	str	r2, [r3, #24]
		break;
    2bd6:	e029      	b.n	2c2c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2bd8:	4a18      	ldr	r2, [pc, #96]	; (2c3c <system_clock_source_enable+0xa0>)
    2bda:	4b18      	ldr	r3, [pc, #96]	; (2c3c <system_clock_source_enable+0xa0>)
    2bdc:	8a1b      	ldrh	r3, [r3, #16]
    2bde:	b29b      	uxth	r3, r3
    2be0:	2102      	movs	r1, #2
    2be2:	430b      	orrs	r3, r1
    2be4:	b29b      	uxth	r3, r3
    2be6:	8213      	strh	r3, [r2, #16]
		break;
    2be8:	e020      	b.n	2c2c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2bea:	4a14      	ldr	r2, [pc, #80]	; (2c3c <system_clock_source_enable+0xa0>)
    2bec:	4b13      	ldr	r3, [pc, #76]	; (2c3c <system_clock_source_enable+0xa0>)
    2bee:	8a9b      	ldrh	r3, [r3, #20]
    2bf0:	b29b      	uxth	r3, r3
    2bf2:	2102      	movs	r1, #2
    2bf4:	430b      	orrs	r3, r1
    2bf6:	b29b      	uxth	r3, r3
    2bf8:	8293      	strh	r3, [r2, #20]
		break;
    2bfa:	e017      	b.n	2c2c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2bfc:	4b10      	ldr	r3, [pc, #64]	; (2c40 <system_clock_source_enable+0xa4>)
    2bfe:	681b      	ldr	r3, [r3, #0]
    2c00:	2202      	movs	r2, #2
    2c02:	431a      	orrs	r2, r3
    2c04:	4b0e      	ldr	r3, [pc, #56]	; (2c40 <system_clock_source_enable+0xa4>)
    2c06:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2c08:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <system_clock_source_enable+0xa8>)
    2c0a:	4798      	blx	r3
		break;
    2c0c:	e00e      	b.n	2c2c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2c0e:	4a0b      	ldr	r2, [pc, #44]	; (2c3c <system_clock_source_enable+0xa0>)
    2c10:	490a      	ldr	r1, [pc, #40]	; (2c3c <system_clock_source_enable+0xa0>)
    2c12:	2344      	movs	r3, #68	; 0x44
    2c14:	5ccb      	ldrb	r3, [r1, r3]
    2c16:	b2db      	uxtb	r3, r3
    2c18:	2102      	movs	r1, #2
    2c1a:	430b      	orrs	r3, r1
    2c1c:	b2d9      	uxtb	r1, r3
    2c1e:	2344      	movs	r3, #68	; 0x44
    2c20:	54d1      	strb	r1, [r2, r3]
		break;
    2c22:	e003      	b.n	2c2c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2c24:	2300      	movs	r3, #0
    2c26:	e002      	b.n	2c2e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2c28:	2317      	movs	r3, #23
    2c2a:	e000      	b.n	2c2e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    2c2c:	2300      	movs	r3, #0
}
    2c2e:	0018      	movs	r0, r3
    2c30:	46bd      	mov	sp, r7
    2c32:	b002      	add	sp, #8
    2c34:	bd80      	pop	{r7, pc}
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	000039d0 	.word	0x000039d0
    2c3c:	40000800 	.word	0x40000800
    2c40:	20000050 	.word	0x20000050
    2c44:	00002a25 	.word	0x00002a25

00002c48 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b082      	sub	sp, #8
    2c4c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2c4e:	003b      	movs	r3, r7
    2c50:	2201      	movs	r2, #1
    2c52:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2c54:	2300      	movs	r3, #0
    2c56:	607b      	str	r3, [r7, #4]
    2c58:	e009      	b.n	2c6e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	b2db      	uxtb	r3, r3
    2c5e:	003a      	movs	r2, r7
    2c60:	0011      	movs	r1, r2
    2c62:	0018      	movs	r0, r3
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <_switch_peripheral_gclk+0x34>)
    2c66:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	3301      	adds	r3, #1
    2c6c:	607b      	str	r3, [r7, #4]
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	2b24      	cmp	r3, #36	; 0x24
    2c72:	d9f2      	bls.n	2c5a <_switch_peripheral_gclk+0x12>
	}
}
    2c74:	46c0      	nop			; (mov r8, r8)
    2c76:	46bd      	mov	sp, r7
    2c78:	b002      	add	sp, #8
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	00003081 	.word	0x00003081

00002c80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b0a0      	sub	sp, #128	; 0x80
    2c84:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2c86:	4b27      	ldr	r3, [pc, #156]	; (2d24 <system_clock_init+0xa4>)
    2c88:	22c2      	movs	r2, #194	; 0xc2
    2c8a:	00d2      	lsls	r2, r2, #3
    2c8c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2c8e:	2000      	movs	r0, #0
    2c90:	4b25      	ldr	r3, [pc, #148]	; (2d28 <system_clock_init+0xa8>)
    2c92:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2c94:	4b25      	ldr	r3, [pc, #148]	; (2d2c <system_clock_init+0xac>)
    2c96:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2c98:	237c      	movs	r3, #124	; 0x7c
    2c9a:	18fb      	adds	r3, r7, r3
    2c9c:	0018      	movs	r0, r3
    2c9e:	4b24      	ldr	r3, [pc, #144]	; (2d30 <system_clock_init+0xb0>)
    2ca0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2ca2:	237c      	movs	r3, #124	; 0x7c
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	2200      	movs	r2, #0
    2ca8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2caa:	237c      	movs	r3, #124	; 0x7c
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	2201      	movs	r2, #1
    2cb0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2cb2:	237c      	movs	r3, #124	; 0x7c
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	2200      	movs	r2, #0
    2cb8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2cba:	237c      	movs	r3, #124	; 0x7c
    2cbc:	18fb      	adds	r3, r7, r3
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b1c      	ldr	r3, [pc, #112]	; (2d34 <system_clock_init+0xb4>)
    2cc2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2cc4:	2006      	movs	r0, #6
    2cc6:	4b1c      	ldr	r3, [pc, #112]	; (2d38 <system_clock_init+0xb8>)
    2cc8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2cca:	4b1c      	ldr	r3, [pc, #112]	; (2d3c <system_clock_init+0xbc>)
    2ccc:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2cce:	2000      	movs	r0, #0
    2cd0:	4b1b      	ldr	r3, [pc, #108]	; (2d40 <system_clock_init+0xc0>)
    2cd2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2cd4:	2100      	movs	r1, #0
    2cd6:	2000      	movs	r0, #0
    2cd8:	4b1a      	ldr	r3, [pc, #104]	; (2d44 <system_clock_init+0xc4>)
    2cda:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2cdc:	2100      	movs	r1, #0
    2cde:	2001      	movs	r0, #1
    2ce0:	4b18      	ldr	r3, [pc, #96]	; (2d44 <system_clock_init+0xc4>)
    2ce2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2ce4:	2100      	movs	r1, #0
    2ce6:	2002      	movs	r0, #2
    2ce8:	4b16      	ldr	r3, [pc, #88]	; (2d44 <system_clock_init+0xc4>)
    2cea:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2cec:	1d3b      	adds	r3, r7, #4
    2cee:	0018      	movs	r0, r3
    2cf0:	4b15      	ldr	r3, [pc, #84]	; (2d48 <system_clock_init+0xc8>)
    2cf2:	4798      	blx	r3
    2cf4:	1d3b      	adds	r3, r7, #4
    2cf6:	2206      	movs	r2, #6
    2cf8:	701a      	strb	r2, [r3, #0]
    2cfa:	1d3b      	adds	r3, r7, #4
    2cfc:	2201      	movs	r2, #1
    2cfe:	605a      	str	r2, [r3, #4]
    2d00:	1d3b      	adds	r3, r7, #4
    2d02:	2200      	movs	r2, #0
    2d04:	721a      	strb	r2, [r3, #8]
    2d06:	1d3b      	adds	r3, r7, #4
    2d08:	2200      	movs	r2, #0
    2d0a:	725a      	strb	r2, [r3, #9]
    2d0c:	1d3b      	adds	r3, r7, #4
    2d0e:	0019      	movs	r1, r3
    2d10:	2000      	movs	r0, #0
    2d12:	4b0e      	ldr	r3, [pc, #56]	; (2d4c <system_clock_init+0xcc>)
    2d14:	4798      	blx	r3
    2d16:	2000      	movs	r0, #0
    2d18:	4b0d      	ldr	r3, [pc, #52]	; (2d50 <system_clock_init+0xd0>)
    2d1a:	4798      	blx	r3
#endif
}
    2d1c:	46c0      	nop			; (mov r8, r8)
    2d1e:	46bd      	mov	sp, r7
    2d20:	b020      	add	sp, #128	; 0x80
    2d22:	bd80      	pop	{r7, pc}
    2d24:	40000800 	.word	0x40000800
    2d28:	000029d5 	.word	0x000029d5
    2d2c:	00002c49 	.word	0x00002c49
    2d30:	0000293f 	.word	0x0000293f
    2d34:	00002b25 	.word	0x00002b25
    2d38:	00002b9d 	.word	0x00002b9d
    2d3c:	00002df9 	.word	0x00002df9
    2d40:	00002961 	.word	0x00002961
    2d44:	00002981 	.word	0x00002981
    2d48:	00002911 	.word	0x00002911
    2d4c:	00002e29 	.word	0x00002e29
    2d50:	00002f4d 	.word	0x00002f4d

00002d54 <system_apb_clock_set_mask>:
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b082      	sub	sp, #8
    2d58:	af00      	add	r7, sp, #0
    2d5a:	0002      	movs	r2, r0
    2d5c:	6039      	str	r1, [r7, #0]
    2d5e:	1dfb      	adds	r3, r7, #7
    2d60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2d62:	1dfb      	adds	r3, r7, #7
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	2b01      	cmp	r3, #1
    2d68:	d00a      	beq.n	2d80 <system_apb_clock_set_mask+0x2c>
    2d6a:	2b02      	cmp	r3, #2
    2d6c:	d00f      	beq.n	2d8e <system_apb_clock_set_mask+0x3a>
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d114      	bne.n	2d9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2d72:	4b0e      	ldr	r3, [pc, #56]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d74:	4a0d      	ldr	r2, [pc, #52]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d76:	6991      	ldr	r1, [r2, #24]
    2d78:	683a      	ldr	r2, [r7, #0]
    2d7a:	430a      	orrs	r2, r1
    2d7c:	619a      	str	r2, [r3, #24]
			break;
    2d7e:	e00f      	b.n	2da0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2d80:	4b0a      	ldr	r3, [pc, #40]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d82:	4a0a      	ldr	r2, [pc, #40]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d84:	69d1      	ldr	r1, [r2, #28]
    2d86:	683a      	ldr	r2, [r7, #0]
    2d88:	430a      	orrs	r2, r1
    2d8a:	61da      	str	r2, [r3, #28]
			break;
    2d8c:	e008      	b.n	2da0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2d8e:	4b07      	ldr	r3, [pc, #28]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d90:	4a06      	ldr	r2, [pc, #24]	; (2dac <system_apb_clock_set_mask+0x58>)
    2d92:	6a11      	ldr	r1, [r2, #32]
    2d94:	683a      	ldr	r2, [r7, #0]
    2d96:	430a      	orrs	r2, r1
    2d98:	621a      	str	r2, [r3, #32]
			break;
    2d9a:	e001      	b.n	2da0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2d9c:	2317      	movs	r3, #23
    2d9e:	e000      	b.n	2da2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2da0:	2300      	movs	r3, #0
}
    2da2:	0018      	movs	r0, r3
    2da4:	46bd      	mov	sp, r7
    2da6:	b002      	add	sp, #8
    2da8:	bd80      	pop	{r7, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	40000400 	.word	0x40000400

00002db0 <system_interrupt_enter_critical_section>:
{
    2db0:	b580      	push	{r7, lr}
    2db2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2db4:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <system_interrupt_enter_critical_section+0x10>)
    2db6:	4798      	blx	r3
}
    2db8:	46c0      	nop			; (mov r8, r8)
    2dba:	46bd      	mov	sp, r7
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	0000287d 	.word	0x0000287d

00002dc4 <system_interrupt_leave_critical_section>:
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2dc8:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <system_interrupt_leave_critical_section+0x10>)
    2dca:	4798      	blx	r3
}
    2dcc:	46c0      	nop			; (mov r8, r8)
    2dce:	46bd      	mov	sp, r7
    2dd0:	bd80      	pop	{r7, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	000028d1 	.word	0x000028d1

00002dd8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2dd8:	b580      	push	{r7, lr}
    2dda:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ddc:	4b05      	ldr	r3, [pc, #20]	; (2df4 <system_gclk_is_syncing+0x1c>)
    2dde:	785b      	ldrb	r3, [r3, #1]
    2de0:	b2db      	uxtb	r3, r3
    2de2:	b25b      	sxtb	r3, r3
    2de4:	2b00      	cmp	r3, #0
    2de6:	da01      	bge.n	2dec <system_gclk_is_syncing+0x14>
		return true;
    2de8:	2301      	movs	r3, #1
    2dea:	e000      	b.n	2dee <system_gclk_is_syncing+0x16>
	}

	return false;
    2dec:	2300      	movs	r3, #0
}
    2dee:	0018      	movs	r0, r3
    2df0:	46bd      	mov	sp, r7
    2df2:	bd80      	pop	{r7, pc}
    2df4:	40000c00 	.word	0x40000c00

00002df8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2df8:	b580      	push	{r7, lr}
    2dfa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2dfc:	2108      	movs	r1, #8
    2dfe:	2000      	movs	r0, #0
    2e00:	4b07      	ldr	r3, [pc, #28]	; (2e20 <system_gclk_init+0x28>)
    2e02:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2e04:	4b07      	ldr	r3, [pc, #28]	; (2e24 <system_gclk_init+0x2c>)
    2e06:	2201      	movs	r2, #1
    2e08:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	4b05      	ldr	r3, [pc, #20]	; (2e24 <system_gclk_init+0x2c>)
    2e0e:	781b      	ldrb	r3, [r3, #0]
    2e10:	b2db      	uxtb	r3, r3
    2e12:	001a      	movs	r2, r3
    2e14:	2301      	movs	r3, #1
    2e16:	4013      	ands	r3, r2
    2e18:	d1f8      	bne.n	2e0c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	46bd      	mov	sp, r7
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	00002d55 	.word	0x00002d55
    2e24:	40000c00 	.word	0x40000c00

00002e28 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b086      	sub	sp, #24
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	0002      	movs	r2, r0
    2e30:	6039      	str	r1, [r7, #0]
    2e32:	1dfb      	adds	r3, r7, #7
    2e34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2e36:	1dfb      	adds	r3, r7, #7
    2e38:	781b      	ldrb	r3, [r3, #0]
    2e3a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2e3c:	1dfb      	adds	r3, r7, #7
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2e42:	683b      	ldr	r3, [r7, #0]
    2e44:	781b      	ldrb	r3, [r3, #0]
    2e46:	021b      	lsls	r3, r3, #8
    2e48:	001a      	movs	r2, r3
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	4313      	orrs	r3, r2
    2e4e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2e50:	683b      	ldr	r3, [r7, #0]
    2e52:	785b      	ldrb	r3, [r3, #1]
    2e54:	2b00      	cmp	r3, #0
    2e56:	d004      	beq.n	2e62 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2e58:	697b      	ldr	r3, [r7, #20]
    2e5a:	2280      	movs	r2, #128	; 0x80
    2e5c:	02d2      	lsls	r2, r2, #11
    2e5e:	4313      	orrs	r3, r2
    2e60:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2e62:	683b      	ldr	r3, [r7, #0]
    2e64:	7a5b      	ldrb	r3, [r3, #9]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d004      	beq.n	2e74 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2e6a:	697b      	ldr	r3, [r7, #20]
    2e6c:	2280      	movs	r2, #128	; 0x80
    2e6e:	0312      	lsls	r2, r2, #12
    2e70:	4313      	orrs	r3, r2
    2e72:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2e74:	683b      	ldr	r3, [r7, #0]
    2e76:	685b      	ldr	r3, [r3, #4]
    2e78:	2b01      	cmp	r3, #1
    2e7a:	d92c      	bls.n	2ed6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2e7c:	683b      	ldr	r3, [r7, #0]
    2e7e:	685a      	ldr	r2, [r3, #4]
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	685b      	ldr	r3, [r3, #4]
    2e84:	3b01      	subs	r3, #1
    2e86:	4013      	ands	r3, r2
    2e88:	d11a      	bne.n	2ec0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2e8a:	2300      	movs	r3, #0
    2e8c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2e8e:	2302      	movs	r3, #2
    2e90:	60bb      	str	r3, [r7, #8]
    2e92:	e005      	b.n	2ea0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2e94:	68fb      	ldr	r3, [r7, #12]
    2e96:	3301      	adds	r3, #1
    2e98:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    2e9a:	68bb      	ldr	r3, [r7, #8]
    2e9c:	005b      	lsls	r3, r3, #1
    2e9e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	685a      	ldr	r2, [r3, #4]
    2ea4:	68bb      	ldr	r3, [r7, #8]
    2ea6:	429a      	cmp	r2, r3
    2ea8:	d8f4      	bhi.n	2e94 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2eaa:	68fb      	ldr	r3, [r7, #12]
    2eac:	021b      	lsls	r3, r3, #8
    2eae:	693a      	ldr	r2, [r7, #16]
    2eb0:	4313      	orrs	r3, r2
    2eb2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2eb4:	697b      	ldr	r3, [r7, #20]
    2eb6:	2280      	movs	r2, #128	; 0x80
    2eb8:	0352      	lsls	r2, r2, #13
    2eba:	4313      	orrs	r3, r2
    2ebc:	617b      	str	r3, [r7, #20]
    2ebe:	e00a      	b.n	2ed6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2ec0:	683b      	ldr	r3, [r7, #0]
    2ec2:	685b      	ldr	r3, [r3, #4]
    2ec4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2ec6:	693a      	ldr	r2, [r7, #16]
    2ec8:	4313      	orrs	r3, r2
    2eca:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2ecc:	697b      	ldr	r3, [r7, #20]
    2ece:	2280      	movs	r2, #128	; 0x80
    2ed0:	0292      	lsls	r2, r2, #10
    2ed2:	4313      	orrs	r3, r2
    2ed4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	7a1b      	ldrb	r3, [r3, #8]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d004      	beq.n	2ee8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2ede:	697b      	ldr	r3, [r7, #20]
    2ee0:	2280      	movs	r2, #128	; 0x80
    2ee2:	0392      	lsls	r2, r2, #14
    2ee4:	4313      	orrs	r3, r2
    2ee6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2ee8:	46c0      	nop			; (mov r8, r8)
    2eea:	4b13      	ldr	r3, [pc, #76]	; (2f38 <system_gclk_gen_set_config+0x110>)
    2eec:	4798      	blx	r3
    2eee:	1e03      	subs	r3, r0, #0
    2ef0:	d1fb      	bne.n	2eea <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2ef2:	4b12      	ldr	r3, [pc, #72]	; (2f3c <system_gclk_gen_set_config+0x114>)
    2ef4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ef6:	4a12      	ldr	r2, [pc, #72]	; (2f40 <system_gclk_gen_set_config+0x118>)
    2ef8:	1dfb      	adds	r3, r7, #7
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	4b0d      	ldr	r3, [pc, #52]	; (2f38 <system_gclk_gen_set_config+0x110>)
    2f02:	4798      	blx	r3
    2f04:	1e03      	subs	r3, r0, #0
    2f06:	d1fb      	bne.n	2f00 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2f08:	4b0e      	ldr	r3, [pc, #56]	; (2f44 <system_gclk_gen_set_config+0x11c>)
    2f0a:	693a      	ldr	r2, [r7, #16]
    2f0c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	4b09      	ldr	r3, [pc, #36]	; (2f38 <system_gclk_gen_set_config+0x110>)
    2f12:	4798      	blx	r3
    2f14:	1e03      	subs	r3, r0, #0
    2f16:	d1fb      	bne.n	2f10 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2f18:	4b0a      	ldr	r3, [pc, #40]	; (2f44 <system_gclk_gen_set_config+0x11c>)
    2f1a:	4a0a      	ldr	r2, [pc, #40]	; (2f44 <system_gclk_gen_set_config+0x11c>)
    2f1c:	6851      	ldr	r1, [r2, #4]
    2f1e:	2280      	movs	r2, #128	; 0x80
    2f20:	0252      	lsls	r2, r2, #9
    2f22:	4011      	ands	r1, r2
    2f24:	697a      	ldr	r2, [r7, #20]
    2f26:	430a      	orrs	r2, r1
    2f28:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2f2a:	4b07      	ldr	r3, [pc, #28]	; (2f48 <system_gclk_gen_set_config+0x120>)
    2f2c:	4798      	blx	r3
}
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	46bd      	mov	sp, r7
    2f32:	b006      	add	sp, #24
    2f34:	bd80      	pop	{r7, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	00002dd9 	.word	0x00002dd9
    2f3c:	00002db1 	.word	0x00002db1
    2f40:	40000c08 	.word	0x40000c08
    2f44:	40000c00 	.word	0x40000c00
    2f48:	00002dc5 	.word	0x00002dc5

00002f4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2f4c:	b580      	push	{r7, lr}
    2f4e:	b082      	sub	sp, #8
    2f50:	af00      	add	r7, sp, #0
    2f52:	0002      	movs	r2, r0
    2f54:	1dfb      	adds	r3, r7, #7
    2f56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	4b0e      	ldr	r3, [pc, #56]	; (2f94 <system_gclk_gen_enable+0x48>)
    2f5c:	4798      	blx	r3
    2f5e:	1e03      	subs	r3, r0, #0
    2f60:	d1fb      	bne.n	2f5a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2f62:	4b0d      	ldr	r3, [pc, #52]	; (2f98 <system_gclk_gen_enable+0x4c>)
    2f64:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2f66:	4a0d      	ldr	r2, [pc, #52]	; (2f9c <system_gclk_gen_enable+0x50>)
    2f68:	1dfb      	adds	r3, r7, #7
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	4b08      	ldr	r3, [pc, #32]	; (2f94 <system_gclk_gen_enable+0x48>)
    2f72:	4798      	blx	r3
    2f74:	1e03      	subs	r3, r0, #0
    2f76:	d1fb      	bne.n	2f70 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2f78:	4b09      	ldr	r3, [pc, #36]	; (2fa0 <system_gclk_gen_enable+0x54>)
    2f7a:	4a09      	ldr	r2, [pc, #36]	; (2fa0 <system_gclk_gen_enable+0x54>)
    2f7c:	6852      	ldr	r2, [r2, #4]
    2f7e:	2180      	movs	r1, #128	; 0x80
    2f80:	0249      	lsls	r1, r1, #9
    2f82:	430a      	orrs	r2, r1
    2f84:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2f86:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <system_gclk_gen_enable+0x58>)
    2f88:	4798      	blx	r3
}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	46bd      	mov	sp, r7
    2f8e:	b002      	add	sp, #8
    2f90:	bd80      	pop	{r7, pc}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	00002dd9 	.word	0x00002dd9
    2f98:	00002db1 	.word	0x00002db1
    2f9c:	40000c04 	.word	0x40000c04
    2fa0:	40000c00 	.word	0x40000c00
    2fa4:	00002dc5 	.word	0x00002dc5

00002fa8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2fa8:	b580      	push	{r7, lr}
    2faa:	b086      	sub	sp, #24
    2fac:	af00      	add	r7, sp, #0
    2fae:	0002      	movs	r2, r0
    2fb0:	1dfb      	adds	r3, r7, #7
    2fb2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2fb4:	46c0      	nop			; (mov r8, r8)
    2fb6:	4b2a      	ldr	r3, [pc, #168]	; (3060 <system_gclk_gen_get_hz+0xb8>)
    2fb8:	4798      	blx	r3
    2fba:	1e03      	subs	r3, r0, #0
    2fbc:	d1fb      	bne.n	2fb6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2fbe:	4b29      	ldr	r3, [pc, #164]	; (3064 <system_gclk_gen_get_hz+0xbc>)
    2fc0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2fc2:	4a29      	ldr	r2, [pc, #164]	; (3068 <system_gclk_gen_get_hz+0xc0>)
    2fc4:	1dfb      	adds	r3, r7, #7
    2fc6:	781b      	ldrb	r3, [r3, #0]
    2fc8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	4b24      	ldr	r3, [pc, #144]	; (3060 <system_gclk_gen_get_hz+0xb8>)
    2fce:	4798      	blx	r3
    2fd0:	1e03      	subs	r3, r0, #0
    2fd2:	d1fb      	bne.n	2fcc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2fd4:	4b25      	ldr	r3, [pc, #148]	; (306c <system_gclk_gen_get_hz+0xc4>)
    2fd6:	685b      	ldr	r3, [r3, #4]
    2fd8:	04db      	lsls	r3, r3, #19
    2fda:	0edb      	lsrs	r3, r3, #27
    2fdc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2fde:	0018      	movs	r0, r3
    2fe0:	4b23      	ldr	r3, [pc, #140]	; (3070 <system_gclk_gen_get_hz+0xc8>)
    2fe2:	4798      	blx	r3
    2fe4:	0003      	movs	r3, r0
    2fe6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2fe8:	4a1f      	ldr	r2, [pc, #124]	; (3068 <system_gclk_gen_get_hz+0xc0>)
    2fea:	1dfb      	adds	r3, r7, #7
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2ff0:	4b1e      	ldr	r3, [pc, #120]	; (306c <system_gclk_gen_get_hz+0xc4>)
    2ff2:	685b      	ldr	r3, [r3, #4]
    2ff4:	02db      	lsls	r3, r3, #11
    2ff6:	0fdb      	lsrs	r3, r3, #31
    2ff8:	b2da      	uxtb	r2, r3
    2ffa:	2313      	movs	r3, #19
    2ffc:	18fb      	adds	r3, r7, r3
    2ffe:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3000:	4a1c      	ldr	r2, [pc, #112]	; (3074 <system_gclk_gen_get_hz+0xcc>)
    3002:	1dfb      	adds	r3, r7, #7
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3008:	46c0      	nop			; (mov r8, r8)
    300a:	4b15      	ldr	r3, [pc, #84]	; (3060 <system_gclk_gen_get_hz+0xb8>)
    300c:	4798      	blx	r3
    300e:	1e03      	subs	r3, r0, #0
    3010:	d1fb      	bne.n	300a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3012:	4b16      	ldr	r3, [pc, #88]	; (306c <system_gclk_gen_get_hz+0xc4>)
    3014:	689b      	ldr	r3, [r3, #8]
    3016:	021b      	lsls	r3, r3, #8
    3018:	0c1b      	lsrs	r3, r3, #16
    301a:	b29b      	uxth	r3, r3
    301c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    301e:	4b16      	ldr	r3, [pc, #88]	; (3078 <system_gclk_gen_get_hz+0xd0>)
    3020:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3022:	2313      	movs	r3, #19
    3024:	18fb      	adds	r3, r7, r3
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	2b00      	cmp	r3, #0
    302a:	d109      	bne.n	3040 <system_gclk_gen_get_hz+0x98>
    302c:	68fb      	ldr	r3, [r7, #12]
    302e:	2b01      	cmp	r3, #1
    3030:	d906      	bls.n	3040 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    3032:	4b12      	ldr	r3, [pc, #72]	; (307c <system_gclk_gen_get_hz+0xd4>)
    3034:	68f9      	ldr	r1, [r7, #12]
    3036:	6978      	ldr	r0, [r7, #20]
    3038:	4798      	blx	r3
    303a:	0003      	movs	r3, r0
    303c:	617b      	str	r3, [r7, #20]
    303e:	e00a      	b.n	3056 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3040:	2313      	movs	r3, #19
    3042:	18fb      	adds	r3, r7, r3
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	2b00      	cmp	r3, #0
    3048:	d005      	beq.n	3056 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	3301      	adds	r3, #1
    304e:	697a      	ldr	r2, [r7, #20]
    3050:	40da      	lsrs	r2, r3
    3052:	0013      	movs	r3, r2
    3054:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3056:	697b      	ldr	r3, [r7, #20]
}
    3058:	0018      	movs	r0, r3
    305a:	46bd      	mov	sp, r7
    305c:	b006      	add	sp, #24
    305e:	bd80      	pop	{r7, pc}
    3060:	00002dd9 	.word	0x00002dd9
    3064:	00002db1 	.word	0x00002db1
    3068:	40000c04 	.word	0x40000c04
    306c:	40000c00 	.word	0x40000c00
    3070:	00002a69 	.word	0x00002a69
    3074:	40000c08 	.word	0x40000c08
    3078:	00002dc5 	.word	0x00002dc5
    307c:	0000381d 	.word	0x0000381d

00003080 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3080:	b580      	push	{r7, lr}
    3082:	b084      	sub	sp, #16
    3084:	af00      	add	r7, sp, #0
    3086:	0002      	movs	r2, r0
    3088:	6039      	str	r1, [r7, #0]
    308a:	1dfb      	adds	r3, r7, #7
    308c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    308e:	1dfb      	adds	r3, r7, #7
    3090:	781b      	ldrb	r3, [r3, #0]
    3092:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3094:	683b      	ldr	r3, [r7, #0]
    3096:	781b      	ldrb	r3, [r3, #0]
    3098:	021b      	lsls	r3, r3, #8
    309a:	001a      	movs	r2, r3
    309c:	68fb      	ldr	r3, [r7, #12]
    309e:	4313      	orrs	r3, r2
    30a0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    30a2:	1dfb      	adds	r3, r7, #7
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	0018      	movs	r0, r3
    30a8:	4b04      	ldr	r3, [pc, #16]	; (30bc <system_gclk_chan_set_config+0x3c>)
    30aa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    30ac:	4b04      	ldr	r3, [pc, #16]	; (30c0 <system_gclk_chan_set_config+0x40>)
    30ae:	68fa      	ldr	r2, [r7, #12]
    30b0:	b292      	uxth	r2, r2
    30b2:	805a      	strh	r2, [r3, #2]
}
    30b4:	46c0      	nop			; (mov r8, r8)
    30b6:	46bd      	mov	sp, r7
    30b8:	b004      	add	sp, #16
    30ba:	bd80      	pop	{r7, pc}
    30bc:	0000310d 	.word	0x0000310d
    30c0:	40000c00 	.word	0x40000c00

000030c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b082      	sub	sp, #8
    30c8:	af00      	add	r7, sp, #0
    30ca:	0002      	movs	r2, r0
    30cc:	1dfb      	adds	r3, r7, #7
    30ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    30d0:	4b0a      	ldr	r3, [pc, #40]	; (30fc <system_gclk_chan_enable+0x38>)
    30d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    30d4:	4a0a      	ldr	r2, [pc, #40]	; (3100 <system_gclk_chan_enable+0x3c>)
    30d6:	1dfb      	adds	r3, r7, #7
    30d8:	781b      	ldrb	r3, [r3, #0]
    30da:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    30dc:	4909      	ldr	r1, [pc, #36]	; (3104 <system_gclk_chan_enable+0x40>)
    30de:	4b09      	ldr	r3, [pc, #36]	; (3104 <system_gclk_chan_enable+0x40>)
    30e0:	885b      	ldrh	r3, [r3, #2]
    30e2:	b29b      	uxth	r3, r3
    30e4:	2280      	movs	r2, #128	; 0x80
    30e6:	01d2      	lsls	r2, r2, #7
    30e8:	4313      	orrs	r3, r2
    30ea:	b29b      	uxth	r3, r3
    30ec:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    30ee:	4b06      	ldr	r3, [pc, #24]	; (3108 <system_gclk_chan_enable+0x44>)
    30f0:	4798      	blx	r3
}
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	46bd      	mov	sp, r7
    30f6:	b002      	add	sp, #8
    30f8:	bd80      	pop	{r7, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	00002db1 	.word	0x00002db1
    3100:	40000c02 	.word	0x40000c02
    3104:	40000c00 	.word	0x40000c00
    3108:	00002dc5 	.word	0x00002dc5

0000310c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    310c:	b580      	push	{r7, lr}
    310e:	b084      	sub	sp, #16
    3110:	af00      	add	r7, sp, #0
    3112:	0002      	movs	r2, r0
    3114:	1dfb      	adds	r3, r7, #7
    3116:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3118:	4b1c      	ldr	r3, [pc, #112]	; (318c <system_gclk_chan_disable+0x80>)
    311a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    311c:	4a1c      	ldr	r2, [pc, #112]	; (3190 <system_gclk_chan_disable+0x84>)
    311e:	1dfb      	adds	r3, r7, #7
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3124:	4b1b      	ldr	r3, [pc, #108]	; (3194 <system_gclk_chan_disable+0x88>)
    3126:	885b      	ldrh	r3, [r3, #2]
    3128:	051b      	lsls	r3, r3, #20
    312a:	0f1b      	lsrs	r3, r3, #28
    312c:	b2db      	uxtb	r3, r3
    312e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3130:	4a18      	ldr	r2, [pc, #96]	; (3194 <system_gclk_chan_disable+0x88>)
    3132:	8853      	ldrh	r3, [r2, #2]
    3134:	4918      	ldr	r1, [pc, #96]	; (3198 <system_gclk_chan_disable+0x8c>)
    3136:	400b      	ands	r3, r1
    3138:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    313a:	4a16      	ldr	r2, [pc, #88]	; (3194 <system_gclk_chan_disable+0x88>)
    313c:	4b15      	ldr	r3, [pc, #84]	; (3194 <system_gclk_chan_disable+0x88>)
    313e:	885b      	ldrh	r3, [r3, #2]
    3140:	b29b      	uxth	r3, r3
    3142:	4916      	ldr	r1, [pc, #88]	; (319c <system_gclk_chan_disable+0x90>)
    3144:	400b      	ands	r3, r1
    3146:	b29b      	uxth	r3, r3
    3148:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	4b11      	ldr	r3, [pc, #68]	; (3194 <system_gclk_chan_disable+0x88>)
    314e:	885b      	ldrh	r3, [r3, #2]
    3150:	b29b      	uxth	r3, r3
    3152:	001a      	movs	r2, r3
    3154:	2380      	movs	r3, #128	; 0x80
    3156:	01db      	lsls	r3, r3, #7
    3158:	4013      	ands	r3, r2
    315a:	d1f7      	bne.n	314c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    315c:	4a0d      	ldr	r2, [pc, #52]	; (3194 <system_gclk_chan_disable+0x88>)
    315e:	68fb      	ldr	r3, [r7, #12]
    3160:	b2db      	uxtb	r3, r3
    3162:	1c19      	adds	r1, r3, #0
    3164:	230f      	movs	r3, #15
    3166:	400b      	ands	r3, r1
    3168:	b2d9      	uxtb	r1, r3
    316a:	8853      	ldrh	r3, [r2, #2]
    316c:	1c08      	adds	r0, r1, #0
    316e:	210f      	movs	r1, #15
    3170:	4001      	ands	r1, r0
    3172:	0208      	lsls	r0, r1, #8
    3174:	4908      	ldr	r1, [pc, #32]	; (3198 <system_gclk_chan_disable+0x8c>)
    3176:	400b      	ands	r3, r1
    3178:	1c19      	adds	r1, r3, #0
    317a:	1c03      	adds	r3, r0, #0
    317c:	430b      	orrs	r3, r1
    317e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3180:	4b07      	ldr	r3, [pc, #28]	; (31a0 <system_gclk_chan_disable+0x94>)
    3182:	4798      	blx	r3
}
    3184:	46c0      	nop			; (mov r8, r8)
    3186:	46bd      	mov	sp, r7
    3188:	b004      	add	sp, #16
    318a:	bd80      	pop	{r7, pc}
    318c:	00002db1 	.word	0x00002db1
    3190:	40000c02 	.word	0x40000c02
    3194:	40000c00 	.word	0x40000c00
    3198:	fffff0ff 	.word	0xfffff0ff
    319c:	ffffbfff 	.word	0xffffbfff
    31a0:	00002dc5 	.word	0x00002dc5

000031a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	0002      	movs	r2, r0
    31ac:	1dfb      	adds	r3, r7, #7
    31ae:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    31b0:	4b0d      	ldr	r3, [pc, #52]	; (31e8 <system_gclk_chan_get_hz+0x44>)
    31b2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31b4:	4a0d      	ldr	r2, [pc, #52]	; (31ec <system_gclk_chan_get_hz+0x48>)
    31b6:	1dfb      	adds	r3, r7, #7
    31b8:	781b      	ldrb	r3, [r3, #0]
    31ba:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    31bc:	4b0c      	ldr	r3, [pc, #48]	; (31f0 <system_gclk_chan_get_hz+0x4c>)
    31be:	885b      	ldrh	r3, [r3, #2]
    31c0:	051b      	lsls	r3, r3, #20
    31c2:	0f1b      	lsrs	r3, r3, #28
    31c4:	b2da      	uxtb	r2, r3
    31c6:	230f      	movs	r3, #15
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    31cc:	4b09      	ldr	r3, [pc, #36]	; (31f4 <system_gclk_chan_get_hz+0x50>)
    31ce:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    31d0:	230f      	movs	r3, #15
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	0018      	movs	r0, r3
    31d8:	4b07      	ldr	r3, [pc, #28]	; (31f8 <system_gclk_chan_get_hz+0x54>)
    31da:	4798      	blx	r3
    31dc:	0003      	movs	r3, r0
}
    31de:	0018      	movs	r0, r3
    31e0:	46bd      	mov	sp, r7
    31e2:	b004      	add	sp, #16
    31e4:	bd80      	pop	{r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00002db1 	.word	0x00002db1
    31ec:	40000c02 	.word	0x40000c02
    31f0:	40000c00 	.word	0x40000c00
    31f4:	00002dc5 	.word	0x00002dc5
    31f8:	00002fa9 	.word	0x00002fa9

000031fc <system_pinmux_get_group_from_gpio_pin>:
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b084      	sub	sp, #16
    3200:	af00      	add	r7, sp, #0
    3202:	0002      	movs	r2, r0
    3204:	1dfb      	adds	r3, r7, #7
    3206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3208:	230f      	movs	r3, #15
    320a:	18fb      	adds	r3, r7, r3
    320c:	1dfa      	adds	r2, r7, #7
    320e:	7812      	ldrb	r2, [r2, #0]
    3210:	09d2      	lsrs	r2, r2, #7
    3212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3214:	230e      	movs	r3, #14
    3216:	18fb      	adds	r3, r7, r3
    3218:	1dfa      	adds	r2, r7, #7
    321a:	7812      	ldrb	r2, [r2, #0]
    321c:	0952      	lsrs	r2, r2, #5
    321e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3220:	4b0d      	ldr	r3, [pc, #52]	; (3258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3222:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3224:	230f      	movs	r3, #15
    3226:	18fb      	adds	r3, r7, r3
    3228:	781b      	ldrb	r3, [r3, #0]
    322a:	2b00      	cmp	r3, #0
    322c:	d10f      	bne.n	324e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    322e:	230f      	movs	r3, #15
    3230:	18fb      	adds	r3, r7, r3
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	009b      	lsls	r3, r3, #2
    3236:	2210      	movs	r2, #16
    3238:	4694      	mov	ip, r2
    323a:	44bc      	add	ip, r7
    323c:	4463      	add	r3, ip
    323e:	3b08      	subs	r3, #8
    3240:	681a      	ldr	r2, [r3, #0]
    3242:	230e      	movs	r3, #14
    3244:	18fb      	adds	r3, r7, r3
    3246:	781b      	ldrb	r3, [r3, #0]
    3248:	01db      	lsls	r3, r3, #7
    324a:	18d3      	adds	r3, r2, r3
    324c:	e000      	b.n	3250 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    324e:	2300      	movs	r3, #0
}
    3250:	0018      	movs	r0, r3
    3252:	46bd      	mov	sp, r7
    3254:	b004      	add	sp, #16
    3256:	bd80      	pop	{r7, pc}
    3258:	41004400 	.word	0x41004400

0000325c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    325c:	b580      	push	{r7, lr}
    325e:	b088      	sub	sp, #32
    3260:	af00      	add	r7, sp, #0
    3262:	60f8      	str	r0, [r7, #12]
    3264:	60b9      	str	r1, [r7, #8]
    3266:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3268:	2300      	movs	r3, #0
    326a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    326c:	687b      	ldr	r3, [r7, #4]
    326e:	78db      	ldrb	r3, [r3, #3]
    3270:	2201      	movs	r2, #1
    3272:	4053      	eors	r3, r2
    3274:	b2db      	uxtb	r3, r3
    3276:	2b00      	cmp	r3, #0
    3278:	d035      	beq.n	32e6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	2b80      	cmp	r3, #128	; 0x80
    3280:	d00b      	beq.n	329a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3282:	69fb      	ldr	r3, [r7, #28]
    3284:	2280      	movs	r2, #128	; 0x80
    3286:	0252      	lsls	r2, r2, #9
    3288:	4313      	orrs	r3, r2
    328a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    328c:	687b      	ldr	r3, [r7, #4]
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	061b      	lsls	r3, r3, #24
    3292:	001a      	movs	r2, r3
    3294:	69fb      	ldr	r3, [r7, #28]
    3296:	4313      	orrs	r3, r2
    3298:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	785b      	ldrb	r3, [r3, #1]
    329e:	2b00      	cmp	r3, #0
    32a0:	d003      	beq.n	32aa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    32a6:	2b02      	cmp	r3, #2
    32a8:	d110      	bne.n	32cc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    32aa:	69fb      	ldr	r3, [r7, #28]
    32ac:	2280      	movs	r2, #128	; 0x80
    32ae:	0292      	lsls	r2, r2, #10
    32b0:	4313      	orrs	r3, r2
    32b2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	789b      	ldrb	r3, [r3, #2]
    32b8:	2b00      	cmp	r3, #0
    32ba:	d004      	beq.n	32c6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    32bc:	69fb      	ldr	r3, [r7, #28]
    32be:	2280      	movs	r2, #128	; 0x80
    32c0:	02d2      	lsls	r2, r2, #11
    32c2:	4313      	orrs	r3, r2
    32c4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    32c6:	68fb      	ldr	r3, [r7, #12]
    32c8:	68ba      	ldr	r2, [r7, #8]
    32ca:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	785b      	ldrb	r3, [r3, #1]
    32d0:	2b01      	cmp	r3, #1
    32d2:	d003      	beq.n	32dc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32d8:	2b02      	cmp	r3, #2
    32da:	d107      	bne.n	32ec <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    32dc:	69fb      	ldr	r3, [r7, #28]
    32de:	4a22      	ldr	r2, [pc, #136]	; (3368 <_system_pinmux_config+0x10c>)
    32e0:	4013      	ands	r3, r2
    32e2:	61fb      	str	r3, [r7, #28]
    32e4:	e002      	b.n	32ec <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    32e6:	68fb      	ldr	r3, [r7, #12]
    32e8:	68ba      	ldr	r2, [r7, #8]
    32ea:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    32ec:	68bb      	ldr	r3, [r7, #8]
    32ee:	041b      	lsls	r3, r3, #16
    32f0:	0c1b      	lsrs	r3, r3, #16
    32f2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    32f4:	68bb      	ldr	r3, [r7, #8]
    32f6:	0c1b      	lsrs	r3, r3, #16
    32f8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    32fa:	69ba      	ldr	r2, [r7, #24]
    32fc:	69fb      	ldr	r3, [r7, #28]
    32fe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3300:	22a0      	movs	r2, #160	; 0xa0
    3302:	05d2      	lsls	r2, r2, #23
    3304:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    330a:	697a      	ldr	r2, [r7, #20]
    330c:	69fb      	ldr	r3, [r7, #28]
    330e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3310:	22d0      	movs	r2, #208	; 0xd0
    3312:	0612      	lsls	r2, r2, #24
    3314:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3316:	68fb      	ldr	r3, [r7, #12]
    3318:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	78db      	ldrb	r3, [r3, #3]
    331e:	2201      	movs	r2, #1
    3320:	4053      	eors	r3, r2
    3322:	b2db      	uxtb	r3, r3
    3324:	2b00      	cmp	r3, #0
    3326:	d01a      	beq.n	335e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3328:	69fa      	ldr	r2, [r7, #28]
    332a:	2380      	movs	r3, #128	; 0x80
    332c:	02db      	lsls	r3, r3, #11
    332e:	4013      	ands	r3, r2
    3330:	d00a      	beq.n	3348 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	789b      	ldrb	r3, [r3, #2]
    3336:	2b01      	cmp	r3, #1
    3338:	d103      	bne.n	3342 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    333a:	68fb      	ldr	r3, [r7, #12]
    333c:	68ba      	ldr	r2, [r7, #8]
    333e:	619a      	str	r2, [r3, #24]
    3340:	e002      	b.n	3348 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3342:	68fb      	ldr	r3, [r7, #12]
    3344:	68ba      	ldr	r2, [r7, #8]
    3346:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	785b      	ldrb	r3, [r3, #1]
    334c:	2b01      	cmp	r3, #1
    334e:	d003      	beq.n	3358 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3354:	2b02      	cmp	r3, #2
    3356:	d102      	bne.n	335e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3358:	68fb      	ldr	r3, [r7, #12]
    335a:	68ba      	ldr	r2, [r7, #8]
    335c:	609a      	str	r2, [r3, #8]
		}
	}
}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	46bd      	mov	sp, r7
    3362:	b008      	add	sp, #32
    3364:	bd80      	pop	{r7, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	fffbffff 	.word	0xfffbffff

0000336c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    3372:	0002      	movs	r2, r0
    3374:	6039      	str	r1, [r7, #0]
    3376:	1dfb      	adds	r3, r7, #7
    3378:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    337a:	1dfb      	adds	r3, r7, #7
    337c:	781b      	ldrb	r3, [r3, #0]
    337e:	0018      	movs	r0, r3
    3380:	4b0a      	ldr	r3, [pc, #40]	; (33ac <system_pinmux_pin_set_config+0x40>)
    3382:	4798      	blx	r3
    3384:	0003      	movs	r3, r0
    3386:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3388:	1dfb      	adds	r3, r7, #7
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	221f      	movs	r2, #31
    338e:	4013      	ands	r3, r2
    3390:	2201      	movs	r2, #1
    3392:	409a      	lsls	r2, r3
    3394:	0013      	movs	r3, r2
    3396:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3398:	683a      	ldr	r2, [r7, #0]
    339a:	68b9      	ldr	r1, [r7, #8]
    339c:	68fb      	ldr	r3, [r7, #12]
    339e:	0018      	movs	r0, r3
    33a0:	4b03      	ldr	r3, [pc, #12]	; (33b0 <system_pinmux_pin_set_config+0x44>)
    33a2:	4798      	blx	r3
}
    33a4:	46c0      	nop			; (mov r8, r8)
    33a6:	46bd      	mov	sp, r7
    33a8:	b004      	add	sp, #16
    33aa:	bd80      	pop	{r7, pc}
    33ac:	000031fd 	.word	0x000031fd
    33b0:	0000325d 	.word	0x0000325d

000033b4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    33b4:	b580      	push	{r7, lr}
    33b6:	af00      	add	r7, sp, #0
	return;
    33b8:	46c0      	nop			; (mov r8, r8)
}
    33ba:	46bd      	mov	sp, r7
    33bc:	bd80      	pop	{r7, pc}
	...

000033c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    33c4:	4b06      	ldr	r3, [pc, #24]	; (33e0 <system_init+0x20>)
    33c6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    33c8:	4b06      	ldr	r3, [pc, #24]	; (33e4 <system_init+0x24>)
    33ca:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    33cc:	4b06      	ldr	r3, [pc, #24]	; (33e8 <system_init+0x28>)
    33ce:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    33d0:	4b06      	ldr	r3, [pc, #24]	; (33ec <system_init+0x2c>)
    33d2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    33d4:	4b06      	ldr	r3, [pc, #24]	; (33f0 <system_init+0x30>)
    33d6:	4798      	blx	r3
}
    33d8:	46c0      	nop			; (mov r8, r8)
    33da:	46bd      	mov	sp, r7
    33dc:	bd80      	pop	{r7, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	00002c81 	.word	0x00002c81
    33e4:	00002871 	.word	0x00002871
    33e8:	000033b5 	.word	0x000033b5
    33ec:	000033b5 	.word	0x000033b5
    33f0:	000033b5 	.word	0x000033b5

000033f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b082      	sub	sp, #8
    33f8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    33fa:	4b2f      	ldr	r3, [pc, #188]	; (34b8 <Reset_Handler+0xc4>)
    33fc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    33fe:	4b2f      	ldr	r3, [pc, #188]	; (34bc <Reset_Handler+0xc8>)
    3400:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3402:	687a      	ldr	r2, [r7, #4]
    3404:	683b      	ldr	r3, [r7, #0]
    3406:	429a      	cmp	r2, r3
    3408:	d00c      	beq.n	3424 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    340a:	e007      	b.n	341c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    340c:	683b      	ldr	r3, [r7, #0]
    340e:	1d1a      	adds	r2, r3, #4
    3410:	603a      	str	r2, [r7, #0]
    3412:	687a      	ldr	r2, [r7, #4]
    3414:	1d11      	adds	r1, r2, #4
    3416:	6079      	str	r1, [r7, #4]
    3418:	6812      	ldr	r2, [r2, #0]
    341a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    341c:	683a      	ldr	r2, [r7, #0]
    341e:	4b28      	ldr	r3, [pc, #160]	; (34c0 <Reset_Handler+0xcc>)
    3420:	429a      	cmp	r2, r3
    3422:	d3f3      	bcc.n	340c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3424:	4b27      	ldr	r3, [pc, #156]	; (34c4 <Reset_Handler+0xd0>)
    3426:	603b      	str	r3, [r7, #0]
    3428:	e004      	b.n	3434 <Reset_Handler+0x40>
                *pDest++ = 0;
    342a:	683b      	ldr	r3, [r7, #0]
    342c:	1d1a      	adds	r2, r3, #4
    342e:	603a      	str	r2, [r7, #0]
    3430:	2200      	movs	r2, #0
    3432:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3434:	683a      	ldr	r2, [r7, #0]
    3436:	4b24      	ldr	r3, [pc, #144]	; (34c8 <Reset_Handler+0xd4>)
    3438:	429a      	cmp	r2, r3
    343a:	d3f6      	bcc.n	342a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    343c:	4b23      	ldr	r3, [pc, #140]	; (34cc <Reset_Handler+0xd8>)
    343e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3440:	4b23      	ldr	r3, [pc, #140]	; (34d0 <Reset_Handler+0xdc>)
    3442:	687a      	ldr	r2, [r7, #4]
    3444:	21ff      	movs	r1, #255	; 0xff
    3446:	438a      	bics	r2, r1
    3448:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    344a:	4a22      	ldr	r2, [pc, #136]	; (34d4 <Reset_Handler+0xe0>)
    344c:	2390      	movs	r3, #144	; 0x90
    344e:	005b      	lsls	r3, r3, #1
    3450:	2102      	movs	r1, #2
    3452:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3454:	4a20      	ldr	r2, [pc, #128]	; (34d8 <Reset_Handler+0xe4>)
    3456:	78d3      	ldrb	r3, [r2, #3]
    3458:	2103      	movs	r1, #3
    345a:	438b      	bics	r3, r1
    345c:	1c19      	adds	r1, r3, #0
    345e:	2302      	movs	r3, #2
    3460:	430b      	orrs	r3, r1
    3462:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3464:	4a1c      	ldr	r2, [pc, #112]	; (34d8 <Reset_Handler+0xe4>)
    3466:	78d3      	ldrb	r3, [r2, #3]
    3468:	210c      	movs	r1, #12
    346a:	438b      	bics	r3, r1
    346c:	1c19      	adds	r1, r3, #0
    346e:	2308      	movs	r3, #8
    3470:	430b      	orrs	r3, r1
    3472:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3474:	4a19      	ldr	r2, [pc, #100]	; (34dc <Reset_Handler+0xe8>)
    3476:	7b93      	ldrb	r3, [r2, #14]
    3478:	2130      	movs	r1, #48	; 0x30
    347a:	438b      	bics	r3, r1
    347c:	1c19      	adds	r1, r3, #0
    347e:	2320      	movs	r3, #32
    3480:	430b      	orrs	r3, r1
    3482:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3484:	4a15      	ldr	r2, [pc, #84]	; (34dc <Reset_Handler+0xe8>)
    3486:	7b93      	ldrb	r3, [r2, #14]
    3488:	210c      	movs	r1, #12
    348a:	438b      	bics	r3, r1
    348c:	1c19      	adds	r1, r3, #0
    348e:	2308      	movs	r3, #8
    3490:	430b      	orrs	r3, r1
    3492:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3494:	4a11      	ldr	r2, [pc, #68]	; (34dc <Reset_Handler+0xe8>)
    3496:	7b93      	ldrb	r3, [r2, #14]
    3498:	2103      	movs	r1, #3
    349a:	438b      	bics	r3, r1
    349c:	1c19      	adds	r1, r3, #0
    349e:	2302      	movs	r3, #2
    34a0:	430b      	orrs	r3, r1
    34a2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    34a4:	4a0e      	ldr	r2, [pc, #56]	; (34e0 <Reset_Handler+0xec>)
    34a6:	6853      	ldr	r3, [r2, #4]
    34a8:	2180      	movs	r1, #128	; 0x80
    34aa:	430b      	orrs	r3, r1
    34ac:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    34ae:	4b0d      	ldr	r3, [pc, #52]	; (34e4 <Reset_Handler+0xf0>)
    34b0:	4798      	blx	r3

        /* Branch to main function */
        main();
    34b2:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <Reset_Handler+0xf4>)
    34b4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    34b6:	e7fe      	b.n	34b6 <Reset_Handler+0xc2>
    34b8:	00003a18 	.word	0x00003a18
    34bc:	20000000 	.word	0x20000000
    34c0:	2000000c 	.word	0x2000000c
    34c4:	2000000c 	.word	0x2000000c
    34c8:	200000c4 	.word	0x200000c4
    34cc:	00000000 	.word	0x00000000
    34d0:	e000ed00 	.word	0xe000ed00
    34d4:	41007000 	.word	0x41007000
    34d8:	41005000 	.word	0x41005000
    34dc:	41004800 	.word	0x41004800
    34e0:	41004000 	.word	0x41004000
    34e4:	00003935 	.word	0x00003935
    34e8:	00003611 	.word	0x00003611

000034ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34ec:	b580      	push	{r7, lr}
    34ee:	af00      	add	r7, sp, #0
        while (1) {
    34f0:	e7fe      	b.n	34f0 <Dummy_Handler+0x4>
	...

000034f4 <system_cpu_clock_set_divider>:
{
    34f4:	b580      	push	{r7, lr}
    34f6:	b082      	sub	sp, #8
    34f8:	af00      	add	r7, sp, #0
    34fa:	0002      	movs	r2, r0
    34fc:	1dfb      	adds	r3, r7, #7
    34fe:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    3500:	4a03      	ldr	r2, [pc, #12]	; (3510 <system_cpu_clock_set_divider+0x1c>)
    3502:	1dfb      	adds	r3, r7, #7
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	7213      	strb	r3, [r2, #8]
}
    3508:	46c0      	nop			; (mov r8, r8)
    350a:	46bd      	mov	sp, r7
    350c:	b002      	add	sp, #8
    350e:	bd80      	pop	{r7, pc}
    3510:	40000400 	.word	0x40000400

00003514 <system_pinmux_get_group_from_gpio_pin>:
{
    3514:	b580      	push	{r7, lr}
    3516:	b084      	sub	sp, #16
    3518:	af00      	add	r7, sp, #0
    351a:	0002      	movs	r2, r0
    351c:	1dfb      	adds	r3, r7, #7
    351e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3520:	230f      	movs	r3, #15
    3522:	18fb      	adds	r3, r7, r3
    3524:	1dfa      	adds	r2, r7, #7
    3526:	7812      	ldrb	r2, [r2, #0]
    3528:	09d2      	lsrs	r2, r2, #7
    352a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    352c:	230e      	movs	r3, #14
    352e:	18fb      	adds	r3, r7, r3
    3530:	1dfa      	adds	r2, r7, #7
    3532:	7812      	ldrb	r2, [r2, #0]
    3534:	0952      	lsrs	r2, r2, #5
    3536:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3538:	4b0d      	ldr	r3, [pc, #52]	; (3570 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    353a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    353c:	230f      	movs	r3, #15
    353e:	18fb      	adds	r3, r7, r3
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	2b00      	cmp	r3, #0
    3544:	d10f      	bne.n	3566 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3546:	230f      	movs	r3, #15
    3548:	18fb      	adds	r3, r7, r3
    354a:	781b      	ldrb	r3, [r3, #0]
    354c:	009b      	lsls	r3, r3, #2
    354e:	2210      	movs	r2, #16
    3550:	4694      	mov	ip, r2
    3552:	44bc      	add	ip, r7
    3554:	4463      	add	r3, ip
    3556:	3b08      	subs	r3, #8
    3558:	681a      	ldr	r2, [r3, #0]
    355a:	230e      	movs	r3, #14
    355c:	18fb      	adds	r3, r7, r3
    355e:	781b      	ldrb	r3, [r3, #0]
    3560:	01db      	lsls	r3, r3, #7
    3562:	18d3      	adds	r3, r2, r3
    3564:	e000      	b.n	3568 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3566:	2300      	movs	r3, #0
}
    3568:	0018      	movs	r0, r3
    356a:	46bd      	mov	sp, r7
    356c:	b004      	add	sp, #16
    356e:	bd80      	pop	{r7, pc}
    3570:	41004400 	.word	0x41004400

00003574 <port_get_group_from_gpio_pin>:
{
    3574:	b580      	push	{r7, lr}
    3576:	b082      	sub	sp, #8
    3578:	af00      	add	r7, sp, #0
    357a:	0002      	movs	r2, r0
    357c:	1dfb      	adds	r3, r7, #7
    357e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3580:	1dfb      	adds	r3, r7, #7
    3582:	781b      	ldrb	r3, [r3, #0]
    3584:	0018      	movs	r0, r3
    3586:	4b03      	ldr	r3, [pc, #12]	; (3594 <port_get_group_from_gpio_pin+0x20>)
    3588:	4798      	blx	r3
    358a:	0003      	movs	r3, r0
}
    358c:	0018      	movs	r0, r3
    358e:	46bd      	mov	sp, r7
    3590:	b002      	add	sp, #8
    3592:	bd80      	pop	{r7, pc}
    3594:	00003515 	.word	0x00003515

00003598 <port_get_config_defaults>:
{
    3598:	b580      	push	{r7, lr}
    359a:	b082      	sub	sp, #8
    359c:	af00      	add	r7, sp, #0
    359e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    35a0:	687b      	ldr	r3, [r7, #4]
    35a2:	2200      	movs	r2, #0
    35a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	2201      	movs	r2, #1
    35aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	2200      	movs	r2, #0
    35b0:	709a      	strb	r2, [r3, #2]
}
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	46bd      	mov	sp, r7
    35b6:	b002      	add	sp, #8
    35b8:	bd80      	pop	{r7, pc}
	...

000035bc <port_pin_set_output_level>:
{
    35bc:	b580      	push	{r7, lr}
    35be:	b084      	sub	sp, #16
    35c0:	af00      	add	r7, sp, #0
    35c2:	0002      	movs	r2, r0
    35c4:	1dfb      	adds	r3, r7, #7
    35c6:	701a      	strb	r2, [r3, #0]
    35c8:	1dbb      	adds	r3, r7, #6
    35ca:	1c0a      	adds	r2, r1, #0
    35cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    35ce:	1dfb      	adds	r3, r7, #7
    35d0:	781b      	ldrb	r3, [r3, #0]
    35d2:	0018      	movs	r0, r3
    35d4:	4b0d      	ldr	r3, [pc, #52]	; (360c <port_pin_set_output_level+0x50>)
    35d6:	4798      	blx	r3
    35d8:	0003      	movs	r3, r0
    35da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35dc:	1dfb      	adds	r3, r7, #7
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	221f      	movs	r2, #31
    35e2:	4013      	ands	r3, r2
    35e4:	2201      	movs	r2, #1
    35e6:	409a      	lsls	r2, r3
    35e8:	0013      	movs	r3, r2
    35ea:	60bb      	str	r3, [r7, #8]
	if (level) {
    35ec:	1dbb      	adds	r3, r7, #6
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	2b00      	cmp	r3, #0
    35f2:	d003      	beq.n	35fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    35f4:	68fb      	ldr	r3, [r7, #12]
    35f6:	68ba      	ldr	r2, [r7, #8]
    35f8:	619a      	str	r2, [r3, #24]
}
    35fa:	e002      	b.n	3602 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	68ba      	ldr	r2, [r7, #8]
    3600:	615a      	str	r2, [r3, #20]
}
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	46bd      	mov	sp, r7
    3606:	b004      	add	sp, #16
    3608:	bd80      	pop	{r7, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	00003575 	.word	0x00003575

00003610 <main>:

/************************************************************************/
/*                                      Main                            */
/************************************************************************/
int main (void)
{
    3610:	b580      	push	{r7, lr}
    3612:	b082      	sub	sp, #8
    3614:	af00      	add	r7, sp, #0
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    3616:	1d3b      	adds	r3, r7, #4
    3618:	4a09      	ldr	r2, [pc, #36]	; (3640 <main+0x30>)
    361a:	6812      	ldr	r2, [r2, #0]
    361c:	601a      	str	r2, [r3, #0]

    // initialize all the subsystems on the MCU
    simSysInit();
    361e:	4b09      	ldr	r3, [pc, #36]	; (3644 <main+0x34>)
    3620:	4798      	blx	r3
    
    // init registers for 169MHz
    spi169_tx_init();
    3622:	4b09      	ldr	r3, [pc, #36]	; (3648 <main+0x38>)
    3624:	4798      	blx	r3
//    spi27_tx_init();
	   
    while(1)
    {
        // start a SPI transfer to the FIFO
       spi169_start_xfer(AX5043_FIFODATA, WRT);
    3626:	2101      	movs	r1, #1
    3628:	2029      	movs	r0, #41	; 0x29
    362a:	4b08      	ldr	r3, [pc, #32]	; (364c <main+0x3c>)
    362c:	4798      	blx	r3
        
        // write the preamble
       spi169_write(tx_preamble, 4);
    362e:	1d3b      	adds	r3, r7, #4
    3630:	2104      	movs	r1, #4
    3632:	0018      	movs	r0, r3
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <main+0x40>)
    3636:	4798      	blx	r3

        // stop the SPI transfer to the FIFO
       spi169_stop_xfer();
    3638:	4b06      	ldr	r3, [pc, #24]	; (3654 <main+0x44>)
    363a:	4798      	blx	r3
       spi169_start_xfer(AX5043_FIFODATA, WRT);
    363c:	e7f3      	b.n	3626 <main+0x16>
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	000039f4 	.word	0x000039f4
    3644:	00003659 	.word	0x00003659
    3648:	00000695 	.word	0x00000695
    364c:	00000485 	.word	0x00000485
    3650:	000005dd 	.word	0x000005dd
    3654:	00000531 	.word	0x00000531

00003658 <simSysInit>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes all relevant subsystems.
 */
void simSysInit(void)
{
    3658:	b580      	push	{r7, lr}
    365a:	af00      	add	r7, sp, #0
	system_init();
    365c:	4b07      	ldr	r3, [pc, #28]	; (367c <simSysInit+0x24>)
    365e:	4798      	blx	r3
	sys_clk_init();	
    3660:	4b07      	ldr	r3, [pc, #28]	; (3680 <simSysInit+0x28>)
    3662:	4798      	blx	r3
	conf_port_pin();
    3664:	4b07      	ldr	r3, [pc, #28]	; (3684 <simSysInit+0x2c>)
    3666:	4798      	blx	r3
	
	
	
    spi169_init();
    3668:	4b07      	ldr	r3, [pc, #28]	; (3688 <simSysInit+0x30>)
    366a:	4798      	blx	r3
	port_pin_set_output_level(CONFIG245, true);
    366c:	2101      	movs	r1, #1
    366e:	2006      	movs	r0, #6
    3670:	4b06      	ldr	r3, [pc, #24]	; (368c <simSysInit+0x34>)
    3672:	4798      	blx	r3
    
	
	
	//uart245_init();
//	uart915_init();
}
    3674:	46c0      	nop			; (mov r8, r8)
    3676:	46bd      	mov	sp, r7
    3678:	bd80      	pop	{r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	000033c1 	.word	0x000033c1
    3680:	00003691 	.word	0x00003691
    3684:	000036b5 	.word	0x000036b5
    3688:	000003b9 	.word	0x000003b9
    368c:	000035bd 	.word	0x000035bd

00003690 <sys_clk_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the MCU clocks.
 */
void sys_clk_init(void)
{
    3690:	b580      	push	{r7, lr}
    3692:	af00      	add	r7, sp, #0
	clk_osc8m_init();
    3694:	4b04      	ldr	r3, [pc, #16]	; (36a8 <sys_clk_init+0x18>)
    3696:	4798      	blx	r3
	clk_gclk0_init();
    3698:	4b04      	ldr	r3, [pc, #16]	; (36ac <sys_clk_init+0x1c>)
    369a:	4798      	blx	r3
    delay_init();
    369c:	4b04      	ldr	r3, [pc, #16]	; (36b0 <sys_clk_init+0x20>)
    369e:	4798      	blx	r3
}
    36a0:	46c0      	nop			; (mov r8, r8)
    36a2:	46bd      	mov	sp, r7
    36a4:	bd80      	pop	{r7, pc}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	00003799 	.word	0x00003799
    36ac:	000037c5 	.word	0x000037c5
    36b0:	00000dcd 	.word	0x00000dcd

000036b4 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	b082      	sub	sp, #8
    36b8:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    36ba:	1d3b      	adds	r3, r7, #4
    36bc:	0018      	movs	r0, r3
    36be:	4b33      	ldr	r3, [pc, #204]	; (378c <conf_port_pin+0xd8>)
    36c0:	4798      	blx	r3
	
	/**************config pin for 245*************/

	
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    36c2:	1d3b      	adds	r3, r7, #4
    36c4:	2200      	movs	r2, #0
    36c6:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    36c8:	1d3b      	adds	r3, r7, #4
    36ca:	2201      	movs	r2, #1
    36cc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS245, &config_port_pin);
    36ce:	1d3b      	adds	r3, r7, #4
    36d0:	0019      	movs	r1, r3
    36d2:	200b      	movs	r0, #11
    36d4:	4b2e      	ldr	r3, [pc, #184]	; (3790 <conf_port_pin+0xdc>)
    36d6:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    36d8:	1d3b      	adds	r3, r7, #4
    36da:	2201      	movs	r2, #1
    36dc:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    36de:	1d3b      	adds	r3, r7, #4
    36e0:	0019      	movs	r1, r3
    36e2:	200a      	movs	r0, #10
    36e4:	4b2a      	ldr	r3, [pc, #168]	; (3790 <conf_port_pin+0xdc>)
    36e6:	4798      	blx	r3
	port_pin_set_output_level(RTS245, true);
    36e8:	2101      	movs	r1, #1
    36ea:	200a      	movs	r0, #10
    36ec:	4b29      	ldr	r3, [pc, #164]	; (3794 <conf_port_pin+0xe0>)
    36ee:	4798      	blx	r3
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    36f0:	1d3b      	adds	r3, r7, #4
    36f2:	0019      	movs	r1, r3
    36f4:	2001      	movs	r0, #1
    36f6:	4b26      	ldr	r3, [pc, #152]	; (3790 <conf_port_pin+0xdc>)
    36f8:	4798      	blx	r3
    port_pin_set_output_level(PAEN245, true);
    36fa:	2101      	movs	r1, #1
    36fc:	2001      	movs	r0, #1
    36fe:	4b25      	ldr	r3, [pc, #148]	; (3794 <conf_port_pin+0xe0>)
    3700:	4798      	blx	r3
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    3702:	1d3b      	adds	r3, r7, #4
    3704:	0019      	movs	r1, r3
    3706:	2006      	movs	r0, #6
    3708:	4b21      	ldr	r3, [pc, #132]	; (3790 <conf_port_pin+0xdc>)
    370a:	4798      	blx	r3
    port_pin_set_output_level(CONFIG245, true);
    370c:	2101      	movs	r1, #1
    370e:	2006      	movs	r0, #6
    3710:	4b20      	ldr	r3, [pc, #128]	; (3794 <conf_port_pin+0xe0>)
    3712:	4798      	blx	r3
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    3714:	1d3b      	adds	r3, r7, #4
    3716:	0019      	movs	r1, r3
    3718:	2007      	movs	r0, #7
    371a:	4b1d      	ldr	r3, [pc, #116]	; (3790 <conf_port_pin+0xdc>)
    371c:	4798      	blx	r3
    port_pin_set_output_level(RESET245, true);
    371e:	2101      	movs	r1, #1
    3720:	2007      	movs	r0, #7
    3722:	4b1c      	ldr	r3, [pc, #112]	; (3794 <conf_port_pin+0xe0>)
    3724:	4798      	blx	r3
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    3726:	1d3b      	adds	r3, r7, #4
    3728:	2200      	movs	r2, #0
    372a:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    372c:	1d3b      	adds	r3, r7, #4
    372e:	2201      	movs	r2, #1
    3730:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    3732:	1d3b      	adds	r3, r7, #4
    3734:	0019      	movs	r1, r3
    3736:	200f      	movs	r0, #15
    3738:	4b15      	ldr	r3, [pc, #84]	; (3790 <conf_port_pin+0xdc>)
    373a:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    373c:	1d3b      	adds	r3, r7, #4
    373e:	2201      	movs	r2, #1
    3740:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    3742:	1d3b      	adds	r3, r7, #4
    3744:	0019      	movs	r1, r3
    3746:	200e      	movs	r0, #14
    3748:	4b11      	ldr	r3, [pc, #68]	; (3790 <conf_port_pin+0xdc>)
    374a:	4798      	blx	r3
    port_pin_set_output_level(RTS915, true);
    374c:	2101      	movs	r1, #1
    374e:	200e      	movs	r0, #14
    3750:	4b10      	ldr	r3, [pc, #64]	; (3794 <conf_port_pin+0xe0>)
    3752:	4798      	blx	r3
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3754:	1d3b      	adds	r3, r7, #4
    3756:	2201      	movs	r2, #1
    3758:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    375a:	1d3b      	adds	r3, r7, #4
    375c:	2202      	movs	r2, #2
    375e:	705a      	strb	r2, [r3, #1]
//    port_pin_set_output_level(WAKE915, true);
	
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3760:	1d3b      	adds	r3, r7, #4
    3762:	2201      	movs	r2, #1
    3764:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3766:	1d3b      	adds	r3, r7, #4
    3768:	2201      	movs	r2, #1
    376a:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SS169, &config_port_pin);
    376c:	1d3b      	adds	r3, r7, #4
    376e:	0019      	movs	r1, r3
    3770:	2011      	movs	r0, #17
    3772:	4b07      	ldr	r3, [pc, #28]	; (3790 <conf_port_pin+0xdc>)
    3774:	4798      	blx	r3
    port_pin_set_output_level(SS169, true);
    3776:	2101      	movs	r1, #1
    3778:	2011      	movs	r0, #17
    377a:	4b06      	ldr	r3, [pc, #24]	; (3794 <conf_port_pin+0xe0>)
    377c:	4798      	blx	r3
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    377e:	1d3b      	adds	r3, r7, #4
    3780:	2200      	movs	r2, #0
    3782:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(IRQ169, &config_port_pin);
	
} // end conf_port_pin(void)
    3784:	46c0      	nop			; (mov r8, r8)
    3786:	46bd      	mov	sp, r7
    3788:	b002      	add	sp, #8
    378a:	bd80      	pop	{r7, pc}
    378c:	00003599 	.word	0x00003599
    3790:	00000e7d 	.word	0x00000e7d
    3794:	000035bd 	.word	0x000035bd

00003798 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    3798:	b580      	push	{r7, lr}
    379a:	b082      	sub	sp, #8
    379c:	af00      	add	r7, sp, #0

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    379e:	1d3b      	adds	r3, r7, #4
    37a0:	2200      	movs	r2, #0
    37a2:	701a      	strb	r2, [r3, #0]
	osc8_config.on_demand = true;
    37a4:	1d3b      	adds	r3, r7, #4
    37a6:	2201      	movs	r2, #1
    37a8:	709a      	strb	r2, [r3, #2]
	osc8_config.run_in_standby = false;
    37aa:	1d3b      	adds	r3, r7, #4
    37ac:	2200      	movs	r2, #0
    37ae:	705a      	strb	r2, [r3, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    37b0:	1d3b      	adds	r3, r7, #4
    37b2:	0018      	movs	r0, r3
    37b4:	4b02      	ldr	r3, [pc, #8]	; (37c0 <clk_osc8m_init+0x28>)
    37b6:	4798      	blx	r3
}
    37b8:	46c0      	nop			; (mov r8, r8)
    37ba:	46bd      	mov	sp, r7
    37bc:	b002      	add	sp, #8
    37be:	bd80      	pop	{r7, pc}
    37c0:	00002b25 	.word	0x00002b25

000037c4 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b084      	sub	sp, #16
    37c8:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    37ca:	4b10      	ldr	r3, [pc, #64]	; (380c <clk_gclk0_init+0x48>)
    37cc:	4798      	blx	r3
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    37ce:	2000      	movs	r0, #0
    37d0:	4b0f      	ldr	r3, [pc, #60]	; (3810 <clk_gclk0_init+0x4c>)
    37d2:	4798      	blx	r3
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    37d4:	1d3b      	adds	r3, r7, #4
    37d6:	2206      	movs	r2, #6
    37d8:	701a      	strb	r2, [r3, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    37da:	1d3b      	adds	r3, r7, #4
    37dc:	2200      	movs	r2, #0
    37de:	725a      	strb	r2, [r3, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    37e0:	1d3b      	adds	r3, r7, #4
    37e2:	2200      	movs	r2, #0
    37e4:	705a      	strb	r2, [r3, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    37e6:	1d3b      	adds	r3, r7, #4
    37e8:	2201      	movs	r2, #1
    37ea:	605a      	str	r2, [r3, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    37ec:	1d3b      	adds	r3, r7, #4
    37ee:	2200      	movs	r2, #0
    37f0:	721a      	strb	r2, [r3, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    37f2:	1d3b      	adds	r3, r7, #4
    37f4:	0019      	movs	r1, r3
    37f6:	2000      	movs	r0, #0
    37f8:	4b06      	ldr	r3, [pc, #24]	; (3814 <clk_gclk0_init+0x50>)
    37fa:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    37fc:	2000      	movs	r0, #0
    37fe:	4b06      	ldr	r3, [pc, #24]	; (3818 <clk_gclk0_init+0x54>)
    3800:	4798      	blx	r3
}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	46bd      	mov	sp, r7
    3806:	b004      	add	sp, #16
    3808:	bd80      	pop	{r7, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	00002df9 	.word	0x00002df9
    3810:	000034f5 	.word	0x000034f5
    3814:	00002e29 	.word	0x00002e29
    3818:	00002f4d 	.word	0x00002f4d

0000381c <__udivsi3>:
    381c:	2200      	movs	r2, #0
    381e:	0843      	lsrs	r3, r0, #1
    3820:	428b      	cmp	r3, r1
    3822:	d374      	bcc.n	390e <__udivsi3+0xf2>
    3824:	0903      	lsrs	r3, r0, #4
    3826:	428b      	cmp	r3, r1
    3828:	d35f      	bcc.n	38ea <__udivsi3+0xce>
    382a:	0a03      	lsrs	r3, r0, #8
    382c:	428b      	cmp	r3, r1
    382e:	d344      	bcc.n	38ba <__udivsi3+0x9e>
    3830:	0b03      	lsrs	r3, r0, #12
    3832:	428b      	cmp	r3, r1
    3834:	d328      	bcc.n	3888 <__udivsi3+0x6c>
    3836:	0c03      	lsrs	r3, r0, #16
    3838:	428b      	cmp	r3, r1
    383a:	d30d      	bcc.n	3858 <__udivsi3+0x3c>
    383c:	22ff      	movs	r2, #255	; 0xff
    383e:	0209      	lsls	r1, r1, #8
    3840:	ba12      	rev	r2, r2
    3842:	0c03      	lsrs	r3, r0, #16
    3844:	428b      	cmp	r3, r1
    3846:	d302      	bcc.n	384e <__udivsi3+0x32>
    3848:	1212      	asrs	r2, r2, #8
    384a:	0209      	lsls	r1, r1, #8
    384c:	d065      	beq.n	391a <__udivsi3+0xfe>
    384e:	0b03      	lsrs	r3, r0, #12
    3850:	428b      	cmp	r3, r1
    3852:	d319      	bcc.n	3888 <__udivsi3+0x6c>
    3854:	e000      	b.n	3858 <__udivsi3+0x3c>
    3856:	0a09      	lsrs	r1, r1, #8
    3858:	0bc3      	lsrs	r3, r0, #15
    385a:	428b      	cmp	r3, r1
    385c:	d301      	bcc.n	3862 <__udivsi3+0x46>
    385e:	03cb      	lsls	r3, r1, #15
    3860:	1ac0      	subs	r0, r0, r3
    3862:	4152      	adcs	r2, r2
    3864:	0b83      	lsrs	r3, r0, #14
    3866:	428b      	cmp	r3, r1
    3868:	d301      	bcc.n	386e <__udivsi3+0x52>
    386a:	038b      	lsls	r3, r1, #14
    386c:	1ac0      	subs	r0, r0, r3
    386e:	4152      	adcs	r2, r2
    3870:	0b43      	lsrs	r3, r0, #13
    3872:	428b      	cmp	r3, r1
    3874:	d301      	bcc.n	387a <__udivsi3+0x5e>
    3876:	034b      	lsls	r3, r1, #13
    3878:	1ac0      	subs	r0, r0, r3
    387a:	4152      	adcs	r2, r2
    387c:	0b03      	lsrs	r3, r0, #12
    387e:	428b      	cmp	r3, r1
    3880:	d301      	bcc.n	3886 <__udivsi3+0x6a>
    3882:	030b      	lsls	r3, r1, #12
    3884:	1ac0      	subs	r0, r0, r3
    3886:	4152      	adcs	r2, r2
    3888:	0ac3      	lsrs	r3, r0, #11
    388a:	428b      	cmp	r3, r1
    388c:	d301      	bcc.n	3892 <__udivsi3+0x76>
    388e:	02cb      	lsls	r3, r1, #11
    3890:	1ac0      	subs	r0, r0, r3
    3892:	4152      	adcs	r2, r2
    3894:	0a83      	lsrs	r3, r0, #10
    3896:	428b      	cmp	r3, r1
    3898:	d301      	bcc.n	389e <__udivsi3+0x82>
    389a:	028b      	lsls	r3, r1, #10
    389c:	1ac0      	subs	r0, r0, r3
    389e:	4152      	adcs	r2, r2
    38a0:	0a43      	lsrs	r3, r0, #9
    38a2:	428b      	cmp	r3, r1
    38a4:	d301      	bcc.n	38aa <__udivsi3+0x8e>
    38a6:	024b      	lsls	r3, r1, #9
    38a8:	1ac0      	subs	r0, r0, r3
    38aa:	4152      	adcs	r2, r2
    38ac:	0a03      	lsrs	r3, r0, #8
    38ae:	428b      	cmp	r3, r1
    38b0:	d301      	bcc.n	38b6 <__udivsi3+0x9a>
    38b2:	020b      	lsls	r3, r1, #8
    38b4:	1ac0      	subs	r0, r0, r3
    38b6:	4152      	adcs	r2, r2
    38b8:	d2cd      	bcs.n	3856 <__udivsi3+0x3a>
    38ba:	09c3      	lsrs	r3, r0, #7
    38bc:	428b      	cmp	r3, r1
    38be:	d301      	bcc.n	38c4 <__udivsi3+0xa8>
    38c0:	01cb      	lsls	r3, r1, #7
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	4152      	adcs	r2, r2
    38c6:	0983      	lsrs	r3, r0, #6
    38c8:	428b      	cmp	r3, r1
    38ca:	d301      	bcc.n	38d0 <__udivsi3+0xb4>
    38cc:	018b      	lsls	r3, r1, #6
    38ce:	1ac0      	subs	r0, r0, r3
    38d0:	4152      	adcs	r2, r2
    38d2:	0943      	lsrs	r3, r0, #5
    38d4:	428b      	cmp	r3, r1
    38d6:	d301      	bcc.n	38dc <__udivsi3+0xc0>
    38d8:	014b      	lsls	r3, r1, #5
    38da:	1ac0      	subs	r0, r0, r3
    38dc:	4152      	adcs	r2, r2
    38de:	0903      	lsrs	r3, r0, #4
    38e0:	428b      	cmp	r3, r1
    38e2:	d301      	bcc.n	38e8 <__udivsi3+0xcc>
    38e4:	010b      	lsls	r3, r1, #4
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	4152      	adcs	r2, r2
    38ea:	08c3      	lsrs	r3, r0, #3
    38ec:	428b      	cmp	r3, r1
    38ee:	d301      	bcc.n	38f4 <__udivsi3+0xd8>
    38f0:	00cb      	lsls	r3, r1, #3
    38f2:	1ac0      	subs	r0, r0, r3
    38f4:	4152      	adcs	r2, r2
    38f6:	0883      	lsrs	r3, r0, #2
    38f8:	428b      	cmp	r3, r1
    38fa:	d301      	bcc.n	3900 <__udivsi3+0xe4>
    38fc:	008b      	lsls	r3, r1, #2
    38fe:	1ac0      	subs	r0, r0, r3
    3900:	4152      	adcs	r2, r2
    3902:	0843      	lsrs	r3, r0, #1
    3904:	428b      	cmp	r3, r1
    3906:	d301      	bcc.n	390c <__udivsi3+0xf0>
    3908:	004b      	lsls	r3, r1, #1
    390a:	1ac0      	subs	r0, r0, r3
    390c:	4152      	adcs	r2, r2
    390e:	1a41      	subs	r1, r0, r1
    3910:	d200      	bcs.n	3914 <__udivsi3+0xf8>
    3912:	4601      	mov	r1, r0
    3914:	4152      	adcs	r2, r2
    3916:	4610      	mov	r0, r2
    3918:	4770      	bx	lr
    391a:	e7ff      	b.n	391c <__udivsi3+0x100>
    391c:	b501      	push	{r0, lr}
    391e:	2000      	movs	r0, #0
    3920:	f000 f806 	bl	3930 <__aeabi_idiv0>
    3924:	bd02      	pop	{r1, pc}
    3926:	46c0      	nop			; (mov r8, r8)

00003928 <__aeabi_uidivmod>:
    3928:	2900      	cmp	r1, #0
    392a:	d0f7      	beq.n	391c <__udivsi3+0x100>
    392c:	e776      	b.n	381c <__udivsi3>
    392e:	4770      	bx	lr

00003930 <__aeabi_idiv0>:
    3930:	4770      	bx	lr
    3932:	46c0      	nop			; (mov r8, r8)

00003934 <__libc_init_array>:
    3934:	b570      	push	{r4, r5, r6, lr}
    3936:	2600      	movs	r6, #0
    3938:	4d0c      	ldr	r5, [pc, #48]	; (396c <__libc_init_array+0x38>)
    393a:	4c0d      	ldr	r4, [pc, #52]	; (3970 <__libc_init_array+0x3c>)
    393c:	1b64      	subs	r4, r4, r5
    393e:	10a4      	asrs	r4, r4, #2
    3940:	42a6      	cmp	r6, r4
    3942:	d109      	bne.n	3958 <__libc_init_array+0x24>
    3944:	2600      	movs	r6, #0
    3946:	f000 f857 	bl	39f8 <_init>
    394a:	4d0a      	ldr	r5, [pc, #40]	; (3974 <__libc_init_array+0x40>)
    394c:	4c0a      	ldr	r4, [pc, #40]	; (3978 <__libc_init_array+0x44>)
    394e:	1b64      	subs	r4, r4, r5
    3950:	10a4      	asrs	r4, r4, #2
    3952:	42a6      	cmp	r6, r4
    3954:	d105      	bne.n	3962 <__libc_init_array+0x2e>
    3956:	bd70      	pop	{r4, r5, r6, pc}
    3958:	00b3      	lsls	r3, r6, #2
    395a:	58eb      	ldr	r3, [r5, r3]
    395c:	4798      	blx	r3
    395e:	3601      	adds	r6, #1
    3960:	e7ee      	b.n	3940 <__libc_init_array+0xc>
    3962:	00b3      	lsls	r3, r6, #2
    3964:	58eb      	ldr	r3, [r5, r3]
    3966:	4798      	blx	r3
    3968:	3601      	adds	r6, #1
    396a:	e7f2      	b.n	3952 <__libc_init_array+0x1e>
    396c:	00003a04 	.word	0x00003a04
    3970:	00003a04 	.word	0x00003a04
    3974:	00003a04 	.word	0x00003a04
    3978:	00003a08 	.word	0x00003a08

0000397c <memset>:
    397c:	0003      	movs	r3, r0
    397e:	1882      	adds	r2, r0, r2
    3980:	4293      	cmp	r3, r2
    3982:	d100      	bne.n	3986 <memset+0xa>
    3984:	4770      	bx	lr
    3986:	7019      	strb	r1, [r3, #0]
    3988:	3301      	adds	r3, #1
    398a:	e7f9      	b.n	3980 <memset+0x4>
    398c:	42000800 	.word	0x42000800
    3990:	42000c00 	.word	0x42000c00
    3994:	42001000 	.word	0x42001000
    3998:	42001400 	.word	0x42001400
    399c:	42001800 	.word	0x42001800
    39a0:	42001c00 	.word	0x42001c00
    39a4:	0c0b0a09 	.word	0x0c0b0a09
    39a8:	00000e0d 	.word	0x00000e0d
    39ac:	00002a86 	.word	0x00002a86
    39b0:	00002afe 	.word	0x00002afe
    39b4:	00002afe 	.word	0x00002afe
    39b8:	00002aa4 	.word	0x00002aa4
    39bc:	00002a9e 	.word	0x00002a9e
    39c0:	00002aaa 	.word	0x00002aaa
    39c4:	00002a8c 	.word	0x00002a8c
    39c8:	00002ab0 	.word	0x00002ab0
    39cc:	00002ae4 	.word	0x00002ae4
    39d0:	00002bd8 	.word	0x00002bd8
    39d4:	00002c28 	.word	0x00002c28
    39d8:	00002c28 	.word	0x00002c28
    39dc:	00002c24 	.word	0x00002c24
    39e0:	00002bca 	.word	0x00002bca
    39e4:	00002bea 	.word	0x00002bea
    39e8:	00002bba 	.word	0x00002bba
    39ec:	00002bfc 	.word	0x00002bfc
    39f0:	00002c0e 	.word	0x00002c0e
    39f4:	aa083862 	.word	0xaa083862

000039f8 <_init>:
    39f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39fe:	bc08      	pop	{r3}
    3a00:	469e      	mov	lr, r3
    3a02:	4770      	bx	lr

00003a04 <__init_array_start>:
    3a04:	000000dd 	.word	0x000000dd

00003a08 <_fini>:
    3a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a0e:	bc08      	pop	{r3}
    3a10:	469e      	mov	lr, r3
    3a12:	4770      	bx	lr

00003a14 <__fini_array_start>:
    3a14:	000000b5 	.word	0x000000b5
