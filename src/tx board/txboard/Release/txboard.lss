
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a0c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00003a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  2000001c  00003a28  0002001c  2**2
                  ALLOC
  3 .stack        00002004  2000018c  00003b98  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002b2b0  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032fe  00000000  00000000  0004b34d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000278f  00000000  00000000  0004e64b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000790  00000000  00000000  00050dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000670  00000000  00000000  0005156a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000597b  00000000  00000000  00051bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00006513  00000000  00000000  00057555  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000018a8  00000000  00000000  0005da68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 9d 32 00 00 95 33 00 00 95 33 00 00     .!. .2...3...3..
	...
      2c:	95 33 00 00 00 00 00 00 00 00 00 00 95 33 00 00     .3...........3..
      3c:	95 33 00 00 95 33 00 00 95 33 00 00 95 33 00 00     .3...3...3...3..
      4c:	95 33 00 00 95 33 00 00 95 33 00 00 95 33 00 00     .3...3...3...3..
      5c:	95 33 00 00 95 33 00 00 89 26 00 00 a1 26 00 00     .3...3...&...&..
      6c:	b9 26 00 00 d1 26 00 00 e9 26 00 00 01 27 00 00     .&...&...&...'..
      7c:	95 33 00 00 95 33 00 00 95 33 00 00 95 33 00 00     .3...3...3...3..
      8c:	95 33 00 00 95 33 00 00 95 33 00 00 95 33 00 00     .3...3...3...3..
      9c:	95 33 00 00 95 33 00 00 95 33 00 00 95 33 00 00     .3...3...3...3..
      ac:	95 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00003a0c 	.word	0x00003a0c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00003a0c 	.word	0x00003a0c
     10c:	00003a0c 	.word	0x00003a0c
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <system_interrupt_enter_critical_section+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00002725 	.word	0x00002725

00000128 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     12c:	4b02      	ldr	r3, [pc, #8]	; (138 <system_interrupt_leave_critical_section+0x10>)
     12e:	4798      	blx	r3
}
     130:	46c0      	nop			; (mov r8, r8)
     132:	46bd      	mov	sp, r7
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00002779 	.word	0x00002779

0000013c <ringbuff_clear>:
 * Return Values(s) : int8_t
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
    uint8_t ret_val = -1;
     144:	230f      	movs	r3, #15
     146:	18fb      	adds	r3, r7, r3
     148:	22ff      	movs	r2, #255	; 0xff
     14a:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	2b00      	cmp	r3, #0
     150:	d009      	beq.n	166 <ringbuff_clear+0x2a>
    {
        // clear the read/write values
        pringbuff->write = 0;
     152:	687b      	ldr	r3, [r7, #4]
     154:	2200      	movs	r2, #0
     156:	605a      	str	r2, [r3, #4]
        pringbuff->read = 0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	609a      	str	r2, [r3, #8]
        ret_val = 0;
     15e:	230f      	movs	r3, #15
     160:	18fb      	adds	r3, r7, r3
     162:	2200      	movs	r2, #0
     164:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     166:	230f      	movs	r3, #15
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	b25b      	sxtb	r3, r3
}
     16e:	0018      	movs	r0, r3
     170:	46bd      	mov	sp, r7
     172:	b004      	add	sp, #16
     174:	bd80      	pop	{r7, pc}
	...

00000178 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     178:	b580      	push	{r7, lr}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	000a      	movs	r2, r1
     182:	1cfb      	adds	r3, r7, #3
     184:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val = -1;
     186:	230f      	movs	r3, #15
     188:	18fb      	adds	r3, r7, r3
     18a:	22ff      	movs	r2, #255	; 0xff
     18c:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     18e:	687b      	ldr	r3, [r7, #4]
     190:	2b00      	cmp	r3, #0
     192:	d01b      	beq.n	1cc <ringbuff_put+0x54>
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
     194:	4b11      	ldr	r3, [pc, #68]	; (1dc <ringbuff_put+0x64>)
     196:	4798      	blx	r3
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	681a      	ldr	r2, [r3, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	685b      	ldr	r3, [r3, #4]
     1a0:	18d3      	adds	r3, r2, r3
     1a2:	1cfa      	adds	r2, r7, #3
     1a4:	7812      	ldrb	r2, [r2, #0]
     1a6:	701a      	strb	r2, [r3, #0]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	685b      	ldr	r3, [r3, #4]
     1ac:	1c5a      	adds	r2, r3, #1
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	68d9      	ldr	r1, [r3, #12]
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <ringbuff_put+0x68>)
     1b4:	0010      	movs	r0, r2
     1b6:	4798      	blx	r3
     1b8:	000b      	movs	r3, r1
     1ba:	001a      	movs	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	605a      	str	r2, [r3, #4]
        
        system_interrupt_leave_critical_section();
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <ringbuff_put+0x6c>)
     1c2:	4798      	blx	r3

        ret_val = 0;
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	2200      	movs	r2, #0
     1ca:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	b25b      	sxtb	r3, r3
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115
     1e0:	000037e5 	.word	0x000037e5
     1e4:	00000129 	.word	0x00000129

000001e8 <spi169_start_xfer>:
    spi169_wr8(AX5043_FREQDEV10, 0x00);
    spi169_wr8(AX5043_FREQDEV00, 0x00);
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     1e8:	b5b0      	push	{r4, r5, r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	1dbb      	adds	r3, r7, #6
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     1f2:	801a      	strh	r2, [r3, #0]
     1f4:	1d7b      	adds	r3, r7, #5
     1f6:	1c0a      	adds	r2, r1, #0
     1f8:	701a      	strb	r2, [r3, #0]
     1fa:	1dbb      	adds	r3, r7, #6
     1fc:	881b      	ldrh	r3, [r3, #0]
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     1fe:	4a1f      	ldr	r2, [pc, #124]	; (27c <spi169_start_xfer+0x94>)
     200:	4313      	orrs	r3, r2
     202:	b29a      	uxth	r2, r3
     204:	1dbb      	adds	r3, r7, #6
     206:	801a      	strh	r2, [r3, #0]
     208:	1d7b      	adds	r3, r7, #5
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	2b00      	cmp	r3, #0
     20e:	d106      	bne.n	21e <spi169_start_xfer+0x36>
     210:	1dbb      	adds	r3, r7, #6
     212:	881b      	ldrh	r3, [r3, #0]
     214:	045b      	lsls	r3, r3, #17
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     216:	0c5b      	lsrs	r3, r3, #17
     218:	b29a      	uxth	r2, r3
     21a:	1dbb      	adds	r3, r7, #6
     21c:	801a      	strh	r2, [r3, #0]
     21e:	1dbb      	adds	r3, r7, #6
     220:	881b      	ldrh	r3, [r3, #0]
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     222:	0a1b      	lsrs	r3, r3, #8
     224:	b29b      	uxth	r3, r3
     226:	b21a      	sxth	r2, r3
     228:	1dbb      	adds	r3, r7, #6
     22a:	881b      	ldrh	r3, [r3, #0]
     22c:	021b      	lsls	r3, r3, #8
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     22e:	b21b      	sxth	r3, r3
     230:	4313      	orrs	r3, r2
     232:	b21b      	sxth	r3, r3
     234:	b29a      	uxth	r2, r3
     236:	1dbb      	adds	r3, r7, #6
     238:	801a      	strh	r2, [r3, #0]
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     23a:	230f      	movs	r3, #15
     23c:	18fc      	adds	r4, r7, r3
     23e:	4910      	ldr	r1, [pc, #64]	; (280 <spi169_start_xfer+0x98>)
     240:	4b10      	ldr	r3, [pc, #64]	; (284 <spi169_start_xfer+0x9c>)
     242:	2201      	movs	r2, #1
     244:	0018      	movs	r0, r3
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     246:	4b10      	ldr	r3, [pc, #64]	; (288 <spi169_start_xfer+0xa0>)
     248:	4798      	blx	r3
     24a:	0003      	movs	r3, r0
     24c:	7023      	strb	r3, [r4, #0]
     24e:	230f      	movs	r3, #15
     250:	18fb      	adds	r3, r7, r3
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     252:	781b      	ldrb	r3, [r3, #0]
     254:	2b05      	cmp	r3, #5
     256:	d0f0      	beq.n	23a <spi169_start_xfer+0x52>
     258:	230f      	movs	r3, #15
     25a:	18fc      	adds	r4, r7, r3
     25c:	4a0b      	ldr	r2, [pc, #44]	; (28c <spi169_start_xfer+0xa4>)
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     25e:	1db9      	adds	r1, r7, #6
     260:	4808      	ldr	r0, [pc, #32]	; (284 <spi169_start_xfer+0x9c>)
     262:	2302      	movs	r3, #2
     264:	4d0a      	ldr	r5, [pc, #40]	; (290 <spi169_start_xfer+0xa8>)
     266:	47a8      	blx	r5
     268:	0003      	movs	r3, r0
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     26a:	7023      	strb	r3, [r4, #0]
     26c:	230f      	movs	r3, #15
     26e:	18fb      	adds	r3, r7, r3
     270:	781b      	ldrb	r3, [r3, #0]
     272:	0018      	movs	r0, r3
     274:	46bd      	mov	sp, r7
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     276:	b004      	add	sp, #16
     278:	bdb0      	pop	{r4, r5, r7, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	fffff000 	.word	0xfffff000
     280:	20000170 	.word	0x20000170
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     284:	20000134 	.word	0x20000134
     288:	00001dbd 	.word	0x00001dbd
     28c:	20000038 	.word	0x20000038
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     290:	000021d1 	.word	0x000021d1

00000294 <spi169_stop_xfer>:
     294:	b580      	push	{r7, lr}
     296:	af00      	add	r7, sp, #0
     298:	4904      	ldr	r1, [pc, #16]	; (2ac <spi169_stop_xfer+0x18>)
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     29a:	4b05      	ldr	r3, [pc, #20]	; (2b0 <spi169_stop_xfer+0x1c>)
     29c:	2200      	movs	r2, #0
     29e:	0018      	movs	r0, r3
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <spi169_stop_xfer+0x20>)
     2a2:	4798      	blx	r3
     2a4:	0003      	movs	r3, r0
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     2a6:	0018      	movs	r0, r3
     2a8:	46bd      	mov	sp, r7
     2aa:	bd80      	pop	{r7, pc}
     2ac:	20000170 	.word	0x20000170
     2b0:	20000134 	.word	0x20000134
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     2b4:	00001dbd 	.word	0x00001dbd

000002b8 <spi169_write>:
     2b8:	b590      	push	{r4, r7, lr}
     2ba:	b085      	sub	sp, #20
     2bc:	af00      	add	r7, sp, #0
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     2be:	6078      	str	r0, [r7, #4]
     2c0:	000a      	movs	r2, r1
     2c2:	1cbb      	adds	r3, r7, #2
     2c4:	801a      	strh	r2, [r3, #0]
     2c6:	230f      	movs	r3, #15
     2c8:	18fc      	adds	r4, r7, r3
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     2ca:	1cbb      	adds	r3, r7, #2
     2cc:	881a      	ldrh	r2, [r3, #0]
     2ce:	6879      	ldr	r1, [r7, #4]
     2d0:	4b06      	ldr	r3, [pc, #24]	; (2ec <spi169_write+0x34>)
     2d2:	0018      	movs	r0, r3
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <spi169_write+0x38>)
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     2d6:	4798      	blx	r3
     2d8:	0003      	movs	r3, r0
     2da:	7023      	strb	r3, [r4, #0]
     2dc:	230f      	movs	r3, #15
     2de:	18fb      	adds	r3, r7, r3
     2e0:	781b      	ldrb	r3, [r3, #0]
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     2e2:	0018      	movs	r0, r3
     2e4:	46bd      	mov	sp, r7
     2e6:	b005      	add	sp, #20
     2e8:	bd90      	pop	{r4, r7, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000134 	.word	0x20000134
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     2f0:	00001ead 	.word	0x00001ead

000002f4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	af00      	add	r7, sp, #0
     2fa:	0002      	movs	r2, r0
     2fc:	1dfb      	adds	r3, r7, #7
     2fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     300:	4b06      	ldr	r3, [pc, #24]	; (31c <system_interrupt_enable+0x28>)
     302:	1dfa      	adds	r2, r7, #7
     304:	7812      	ldrb	r2, [r2, #0]
     306:	0011      	movs	r1, r2
     308:	221f      	movs	r2, #31
     30a:	400a      	ands	r2, r1
     30c:	2101      	movs	r1, #1
     30e:	4091      	lsls	r1, r2
     310:	000a      	movs	r2, r1
     312:	601a      	str	r2, [r3, #0]
}
     314:	46c0      	nop			; (mov r8, r8)
     316:	46bd      	mov	sp, r7
     318:	b002      	add	sp, #8
     31a:	bd80      	pop	{r7, pc}
     31c:	e000e100 	.word	0xe000e100

00000320 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     320:	b580      	push	{r7, lr}
     322:	b084      	sub	sp, #16
     324:	af00      	add	r7, sp, #0
     326:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     328:	687b      	ldr	r3, [r7, #4]
     32a:	681b      	ldr	r3, [r3, #0]
     32c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	69db      	ldr	r3, [r3, #28]
     332:	1e5a      	subs	r2, r3, #1
     334:	4193      	sbcs	r3, r2
     336:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     338:	0018      	movs	r0, r3
     33a:	46bd      	mov	sp, r7
     33c:	b004      	add	sp, #16
     33e:	bd80      	pop	{r7, pc}

00000340 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     348:	46c0      	nop			; (mov r8, r8)
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	0018      	movs	r0, r3
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <_usart_wait_for_sync+0x20>)
     350:	4798      	blx	r3
     352:	1e03      	subs	r3, r0, #0
     354:	d1f9      	bne.n	34a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     356:	46c0      	nop			; (mov r8, r8)
     358:	46bd      	mov	sp, r7
     35a:	b002      	add	sp, #8
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000321 	.word	0x00000321

00000364 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2280      	movs	r2, #128	; 0x80
     370:	05d2      	lsls	r2, r2, #23
     372:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     374:	687b      	ldr	r3, [r7, #4]
     376:	2200      	movs	r2, #0
     378:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	22ff      	movs	r2, #255	; 0xff
     37e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     380:	687b      	ldr	r3, [r7, #4]
     382:	2200      	movs	r2, #0
     384:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     386:	687b      	ldr	r3, [r7, #4]
     388:	2200      	movs	r2, #0
     38a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	2296      	movs	r2, #150	; 0x96
     390:	0192      	lsls	r2, r2, #6
     392:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     394:	687b      	ldr	r3, [r7, #4]
     396:	2224      	movs	r2, #36	; 0x24
     398:	2101      	movs	r1, #1
     39a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	2225      	movs	r2, #37	; 0x25
     3a0:	2101      	movs	r1, #1
     3a2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	2226      	movs	r2, #38	; 0x26
     3a8:	2100      	movs	r1, #0
     3aa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	2227      	movs	r2, #39	; 0x27
     3b0:	2100      	movs	r1, #0
     3b2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     3b4:	687b      	ldr	r3, [r7, #4]
     3b6:	2200      	movs	r2, #0
     3b8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	2288      	movs	r2, #136	; 0x88
     3be:	0352      	lsls	r2, r2, #13
     3c0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	222c      	movs	r2, #44	; 0x2c
     3c6:	2100      	movs	r1, #0
     3c8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	222d      	movs	r2, #45	; 0x2d
     3ce:	2100      	movs	r1, #0
     3d0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     3d2:	687b      	ldr	r3, [r7, #4]
     3d4:	2200      	movs	r2, #0
     3d6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	2200      	movs	r2, #0
     3dc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	2200      	movs	r2, #0
     3e2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	2200      	movs	r2, #0
     3e8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	2200      	movs	r2, #0
     3ee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	2200      	movs	r2, #0
     3f4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     3f6:	687b      	ldr	r3, [r7, #4]
     3f8:	2200      	movs	r2, #0
     3fa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	2200      	movs	r2, #0
     400:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     402:	687b      	ldr	r3, [r7, #4]
     404:	2200      	movs	r2, #0
     406:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     408:	687b      	ldr	r3, [r7, #4]
     40a:	2200      	movs	r2, #0
     40c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     40e:	687b      	ldr	r3, [r7, #4]
     410:	2213      	movs	r2, #19
     412:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     414:	687b      	ldr	r3, [r7, #4]
     416:	2200      	movs	r2, #0
     418:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	46bd      	mov	sp, r7
     41e:	b002      	add	sp, #8
     420:	bd80      	pop	{r7, pc}
	...

00000424 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     424:	b580      	push	{r7, lr}
     426:	b084      	sub	sp, #16
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     42c:	687b      	ldr	r3, [r7, #4]
     42e:	681b      	ldr	r3, [r3, #0]
     430:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     432:	687b      	ldr	r3, [r7, #4]
     434:	681b      	ldr	r3, [r3, #0]
     436:	0018      	movs	r0, r3
     438:	4b09      	ldr	r3, [pc, #36]	; (460 <usart_enable+0x3c>)
     43a:	4798      	blx	r3
     43c:	0003      	movs	r3, r0
     43e:	0018      	movs	r0, r3
     440:	4b08      	ldr	r3, [pc, #32]	; (464 <usart_enable+0x40>)
     442:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     444:	687b      	ldr	r3, [r7, #4]
     446:	0018      	movs	r0, r3
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <usart_enable+0x44>)
     44a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	681b      	ldr	r3, [r3, #0]
     450:	2202      	movs	r2, #2
     452:	431a      	orrs	r2, r3
     454:	68fb      	ldr	r3, [r7, #12]
     456:	601a      	str	r2, [r3, #0]
}
     458:	46c0      	nop			; (mov r8, r8)
     45a:	46bd      	mov	sp, r7
     45c:	b004      	add	sp, #16
     45e:	bd80      	pop	{r7, pc}
     460:	00002645 	.word	0x00002645
     464:	000002f5 	.word	0x000002f5
     468:	00000341 	.word	0x00000341

0000046c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     46c:	b580      	push	{r7, lr}
     46e:	b082      	sub	sp, #8
     470:	af00      	add	r7, sp, #0
     472:	6078      	str	r0, [r7, #4]
     474:	000a      	movs	r2, r1
     476:	1cfb      	adds	r3, r7, #3
     478:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	2231      	movs	r2, #49	; 0x31
     47e:	5c9b      	ldrb	r3, [r3, r2]
     480:	b25a      	sxtb	r2, r3
     482:	1cfb      	adds	r3, r7, #3
     484:	781b      	ldrb	r3, [r3, #0]
     486:	2101      	movs	r1, #1
     488:	4099      	lsls	r1, r3
     48a:	000b      	movs	r3, r1
     48c:	b25b      	sxtb	r3, r3
     48e:	4313      	orrs	r3, r2
     490:	b25b      	sxtb	r3, r3
     492:	b2d9      	uxtb	r1, r3
     494:	687b      	ldr	r3, [r7, #4]
     496:	2231      	movs	r2, #49	; 0x31
     498:	5499      	strb	r1, [r3, r2]

}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	46bd      	mov	sp, r7
     49e:	b002      	add	sp, #8
     4a0:	bd80      	pop	{r7, pc}
	...

000004a4 <uart915_init>:
 * Return Values(s) : void
 * Description      : Initializes the SERCOM UART for communication with the
 *  MTXDOT module.
 */
void uart915_init(void)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b090      	sub	sp, #64	; 0x40
     4a8:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     4aa:	003b      	movs	r3, r7
     4ac:	0018      	movs	r0, r3
     4ae:	4b1b      	ldr	r3, [pc, #108]	; (51c <uart915_init+0x78>)
     4b0:	4798      	blx	r3
    
    // configure the UART
    config_usart.baudrate    = UART915_BAUD;
     4b2:	003b      	movs	r3, r7
     4b4:	22e1      	movs	r2, #225	; 0xe1
     4b6:	0252      	lsls	r2, r2, #9
     4b8:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART915_PINMUX;
     4ba:	003b      	movs	r3, r7
     4bc:	2290      	movs	r2, #144	; 0x90
     4be:	0352      	lsls	r2, r2, #13
     4c0:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX915;
     4c2:	003b      	movs	r3, r7
     4c4:	4a16      	ldr	r2, [pc, #88]	; (520 <uart915_init+0x7c>)
     4c6:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     4c8:	003b      	movs	r3, r7
     4ca:	4a16      	ldr	r2, [pc, #88]	; (524 <uart915_init+0x80>)
     4cc:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     4ce:	003b      	movs	r3, r7
     4d0:	2201      	movs	r2, #1
     4d2:	4252      	negs	r2, r2
     4d4:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     4d6:	003b      	movs	r3, r7
     4d8:	2201      	movs	r2, #1
     4da:	4252      	negs	r2, r2
     4dc:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.generator_source = UART245_CLK;
     4de:	003b      	movs	r3, r7
     4e0:	222d      	movs	r2, #45	; 0x2d
     4e2:	2100      	movs	r1, #0
     4e4:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
     4e6:	003b      	movs	r3, r7
     4e8:	2200      	movs	r2, #0
     4ea:	605a      	str	r2, [r3, #4]
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     4ec:	46c0      	nop			; (mov r8, r8)
     4ee:	003a      	movs	r2, r7
     4f0:	490d      	ldr	r1, [pc, #52]	; (528 <uart915_init+0x84>)
     4f2:	4b0e      	ldr	r3, [pc, #56]	; (52c <uart915_init+0x88>)
     4f4:	0018      	movs	r0, r3
     4f6:	4b0e      	ldr	r3, [pc, #56]	; (530 <uart915_init+0x8c>)
     4f8:	4798      	blx	r3
     4fa:	1e03      	subs	r3, r0, #0
     4fc:	d1f7      	bne.n	4ee <uart915_init+0x4a>
    
    // enable the uart
    usart_enable(&uart915_inst);
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <uart915_init+0x88>)
     500:	0018      	movs	r0, r3
     502:	4b0c      	ldr	r3, [pc, #48]	; (534 <uart915_init+0x90>)
     504:	4798      	blx	r3
    
    // configure the callback(s) for this module
    configure_uart915_callbacks();
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <uart915_init+0x94>)
     508:	4798      	blx	r3
	

	uart915_preconnect();
     50a:	4b0c      	ldr	r3, [pc, #48]	; (53c <uart915_init+0x98>)
     50c:	4798      	blx	r3

	 uart915_network_config();
     50e:	4b0c      	ldr	r3, [pc, #48]	; (540 <uart915_init+0x9c>)
     510:	4798      	blx	r3
	

}
     512:	46c0      	nop			; (mov r8, r8)
     514:	46bd      	mov	sp, r7
     516:	b010      	add	sp, #64	; 0x40
     518:	bd80      	pop	{r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	00000365 	.word	0x00000365
     520:	000c0002 	.word	0x000c0002
     524:	000d0002 	.word	0x000d0002
     528:	42001000 	.word	0x42001000
     52c:	2000003c 	.word	0x2000003c
     530:	000012c9 	.word	0x000012c9
     534:	00000425 	.word	0x00000425
     538:	00000545 	.word	0x00000545
     53c:	000007a9 	.word	0x000007a9
     540:	00000719 	.word	0x00000719

00000544 <configure_uart915_callbacks>:
 *  (depending on which callback is registered) receives/transmits a character.
 *  Kind of like an ISR, but executed in the actual ISR for the UART (handled
 *  by the ASF library).
 */
void configure_uart915_callbacks(void)
{
     544:	b580      	push	{r7, lr}
     546:	af00      	add	r7, sp, #0
    // register the callback function
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     548:	4909      	ldr	r1, [pc, #36]	; (570 <configure_uart915_callbacks+0x2c>)
     54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <configure_uart915_callbacks+0x30>)
     54c:	2201      	movs	r2, #1
     54e:	0018      	movs	r0, r3
     550:	4b09      	ldr	r3, [pc, #36]	; (578 <configure_uart915_callbacks+0x34>)
     552:	4798      	blx	r3
    
    // enable callback for the receiver
    usart_enable_callback(&uart915_inst, USART_CALLBACK_BUFFER_RECEIVED);
     554:	4b07      	ldr	r3, [pc, #28]	; (574 <configure_uart915_callbacks+0x30>)
     556:	2101      	movs	r1, #1
     558:	0018      	movs	r0, r3
     55a:	4b08      	ldr	r3, [pc, #32]	; (57c <configure_uart915_callbacks+0x38>)
     55c:	4798      	blx	r3
    
    // start a read buffer job so the receiver is ready
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     55e:	4908      	ldr	r1, [pc, #32]	; (580 <configure_uart915_callbacks+0x3c>)
     560:	4b04      	ldr	r3, [pc, #16]	; (574 <configure_uart915_callbacks+0x30>)
     562:	2201      	movs	r2, #1
     564:	0018      	movs	r0, r3
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <configure_uart915_callbacks+0x40>)
     568:	4798      	blx	r3
}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	46bd      	mov	sp, r7
     56e:	bd80      	pop	{r7, pc}
     570:	00000589 	.word	0x00000589
     574:	2000003c 	.word	0x2000003c
     578:	000017b1 	.word	0x000017b1
     57c:	0000046d 	.word	0x0000046d
     580:	20000070 	.word	0x20000070
     584:	000017f9 	.word	0x000017f9

00000588 <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     588:	b580      	push	{r7, lr}
     58a:	b082      	sub	sp, #8
     58c:	af00      	add	r7, sp, #0
     58e:	6078      	str	r0, [r7, #4]
	 usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     590:	490f      	ldr	r1, [pc, #60]	; (5d0 <uart915_read_callback+0x48>)
     592:	687b      	ldr	r3, [r7, #4]
     594:	2201      	movs	r2, #1
     596:	0018      	movs	r0, r3
     598:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <uart915_read_callback+0x4c>)
     59a:	4798      	blx	r3
	 
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     59c:	4b0c      	ldr	r3, [pc, #48]	; (5d0 <uart915_read_callback+0x48>)
     59e:	781a      	ldrb	r2, [r3, #0]
     5a0:	4b0d      	ldr	r3, [pc, #52]	; (5d8 <uart915_read_callback+0x50>)
     5a2:	0011      	movs	r1, r2
     5a4:	0018      	movs	r0, r3
     5a6:	4b0d      	ldr	r3, [pc, #52]	; (5dc <uart915_read_callback+0x54>)
     5a8:	4798      	blx	r3
    
    /* parse the character to see if it is an "OK\r\n". Set the flag equal to
     * the response parsing function's return value */
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     5aa:	4b09      	ldr	r3, [pc, #36]	; (5d0 <uart915_read_callback+0x48>)
     5ac:	781b      	ldrb	r3, [r3, #0]
     5ae:	0018      	movs	r0, r3
     5b0:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <uart915_read_callback+0x58>)
     5b2:	4798      	blx	r3
     5b4:	0003      	movs	r3, r0
     5b6:	001a      	movs	r2, r3
     5b8:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <uart915_read_callback+0x5c>)
     5ba:	701a      	strb	r2, [r3, #0]
    
    // start another read buffer job
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     5bc:	4904      	ldr	r1, [pc, #16]	; (5d0 <uart915_read_callback+0x48>)
     5be:	687b      	ldr	r3, [r7, #4]
     5c0:	2201      	movs	r2, #1
     5c2:	0018      	movs	r0, r3
     5c4:	4b03      	ldr	r3, [pc, #12]	; (5d4 <uart915_read_callback+0x4c>)
     5c6:	4798      	blx	r3
}
     5c8:	46c0      	nop			; (mov r8, r8)
     5ca:	46bd      	mov	sp, r7
     5cc:	b002      	add	sp, #8
     5ce:	bd80      	pop	{r7, pc}
     5d0:	20000070 	.word	0x20000070
     5d4:	000017f9 	.word	0x000017f9
     5d8:	20000000 	.word	0x20000000
     5dc:	00000179 	.word	0x00000179
     5e0:	000005e9 	.word	0x000005e9
     5e4:	200000f5 	.word	0x200000f5

000005e8 <uart915_parse_response>:
 *  MTXDOT received and responded to a command sent by uart915_write_cmd().
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b082      	sub	sp, #8
     5ec:	af00      	add	r7, sp, #0
     5ee:	0002      	movs	r2, r0
     5f0:	1dfb      	adds	r3, r7, #7
     5f2:	701a      	strb	r2, [r3, #0]
    switch(rx_state)
     5f4:	4b25      	ldr	r3, [pc, #148]	; (68c <uart915_parse_response+0xa4>)
     5f6:	781b      	ldrb	r3, [r3, #0]
     5f8:	b2db      	uxtb	r3, r3
     5fa:	2b01      	cmp	r3, #1
     5fc:	d015      	beq.n	62a <uart915_parse_response+0x42>
     5fe:	dc02      	bgt.n	606 <uart915_parse_response+0x1e>
     600:	2b00      	cmp	r3, #0
     602:	d005      	beq.n	610 <uart915_parse_response+0x28>
     604:	e039      	b.n	67a <uart915_parse_response+0x92>
     606:	2b02      	cmp	r3, #2
     608:	d01c      	beq.n	644 <uart915_parse_response+0x5c>
     60a:	2b03      	cmp	r3, #3
     60c:	d027      	beq.n	65e <uart915_parse_response+0x76>
     60e:	e034      	b.n	67a <uart915_parse_response+0x92>
    {
        case START:
            switch(next_char)
     610:	1dfb      	adds	r3, r7, #7
     612:	781b      	ldrb	r3, [r3, #0]
     614:	2b4f      	cmp	r3, #79	; 0x4f
     616:	d103      	bne.n	620 <uart915_parse_response+0x38>
            {
                case 'O':
                   rx_state = O_RX;
     618:	4b1c      	ldr	r3, [pc, #112]	; (68c <uart915_parse_response+0xa4>)
     61a:	2201      	movs	r2, #1
     61c:	701a      	strb	r2, [r3, #0]
                   break; //end of 'O' case
     61e:	e003      	b.n	628 <uart915_parse_response+0x40>
            
                default:
                    rx_state = START;
     620:	4b1a      	ldr	r3, [pc, #104]	; (68c <uart915_parse_response+0xa4>)
     622:	2200      	movs	r2, #0
     624:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     626:	46c0      	nop			; (mov r8, r8)
            }
            break; //end of START case
     628:	e02b      	b.n	682 <uart915_parse_response+0x9a>
        
        case O_RX:
            switch(next_char)
     62a:	1dfb      	adds	r3, r7, #7
     62c:	781b      	ldrb	r3, [r3, #0]
     62e:	2b4b      	cmp	r3, #75	; 0x4b
     630:	d103      	bne.n	63a <uart915_parse_response+0x52>
            {
                case 'K':
                    rx_state = K_RX;
     632:	4b16      	ldr	r3, [pc, #88]	; (68c <uart915_parse_response+0xa4>)
     634:	2202      	movs	r2, #2
     636:	701a      	strb	r2, [r3, #0]
                    break; //end of 'K' case
     638:	e003      	b.n	642 <uart915_parse_response+0x5a>
            
                default:
                    rx_state = START;
     63a:	4b14      	ldr	r3, [pc, #80]	; (68c <uart915_parse_response+0xa4>)
     63c:	2200      	movs	r2, #0
     63e:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     640:	46c0      	nop			; (mov r8, r8)
            }
            
            break; //end of O_RX case
     642:	e01e      	b.n	682 <uart915_parse_response+0x9a>
        
        case K_RX:
            switch(next_char)
     644:	1dfb      	adds	r3, r7, #7
     646:	781b      	ldrb	r3, [r3, #0]
     648:	2b0d      	cmp	r3, #13
     64a:	d103      	bne.n	654 <uart915_parse_response+0x6c>
            {
                case '\r':
                    rx_state = CR_RX;
     64c:	4b0f      	ldr	r3, [pc, #60]	; (68c <uart915_parse_response+0xa4>)
     64e:	2203      	movs	r2, #3
     650:	701a      	strb	r2, [r3, #0]
                    break; //end of '\r' case
     652:	e003      	b.n	65c <uart915_parse_response+0x74>
            
                default:
                    rx_state = START;
     654:	4b0d      	ldr	r3, [pc, #52]	; (68c <uart915_parse_response+0xa4>)
     656:	2200      	movs	r2, #0
     658:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     65a:	46c0      	nop			; (mov r8, r8)
            }
            
        break; //end of K_RX case
     65c:	e011      	b.n	682 <uart915_parse_response+0x9a>
        
        case CR_RX:
        switch(next_char)
     65e:	1dfb      	adds	r3, r7, #7
     660:	781b      	ldrb	r3, [r3, #0]
     662:	2b0a      	cmp	r3, #10
     664:	d104      	bne.n	670 <uart915_parse_response+0x88>
        {
            case '\n':
                //reset state
                rx_state = START;
     666:	4b09      	ldr	r3, [pc, #36]	; (68c <uart915_parse_response+0xa4>)
     668:	2200      	movs	r2, #0
     66a:	701a      	strb	r2, [r3, #0]
                //return true, because response is OK
                return true;
     66c:	2301      	movs	r3, #1
     66e:	e009      	b.n	684 <uart915_parse_response+0x9c>
                break; //end of '\n' case
            
            default:
                rx_state = START;
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <uart915_parse_response+0xa4>)
     672:	2200      	movs	r2, #0
     674:	701a      	strb	r2, [r3, #0]
                break; //end of default case
     676:	46c0      	nop			; (mov r8, r8)
        }
        break; //end of CR_RX case
     678:	e003      	b.n	682 <uart915_parse_response+0x9a>
        
        default:
            rx_state = START;
     67a:	4b04      	ldr	r3, [pc, #16]	; (68c <uart915_parse_response+0xa4>)
     67c:	2200      	movs	r2, #0
     67e:	701a      	strb	r2, [r3, #0]
            break;
     680:	46c0      	nop			; (mov r8, r8)
    }
    
    return false;
     682:	2300      	movs	r3, #0
}
     684:	0018      	movs	r0, r3
     686:	46bd      	mov	sp, r7
     688:	b002      	add	sp, #8
     68a:	bd80      	pop	{r7, pc}
     68c:	200000f4 	.word	0x200000f4

00000690 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
    // clear the flag
    flag_ok_received = false;
     698:	4b17      	ldr	r3, [pc, #92]	; (6f8 <uart915_write_cmd+0x68>)
     69a:	2200      	movs	r2, #0
     69c:	701a      	strb	r2, [r3, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     69e:	4b17      	ldr	r3, [pc, #92]	; (6fc <uart915_write_cmd+0x6c>)
     6a0:	2200      	movs	r2, #0
     6a2:	701a      	strb	r2, [r3, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     6a4:	4b16      	ldr	r3, [pc, #88]	; (700 <uart915_write_cmd+0x70>)
     6a6:	0018      	movs	r0, r3
     6a8:	4b16      	ldr	r3, [pc, #88]	; (704 <uart915_write_cmd+0x74>)
     6aa:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	0018      	movs	r0, r3
     6b0:	4b15      	ldr	r3, [pc, #84]	; (708 <uart915_write_cmd+0x78>)
     6b2:	4798      	blx	r3
     6b4:	0003      	movs	r3, r0
     6b6:	b29a      	uxth	r2, r3
     6b8:	6879      	ldr	r1, [r7, #4]
     6ba:	4b14      	ldr	r3, [pc, #80]	; (70c <uart915_write_cmd+0x7c>)
     6bc:	0018      	movs	r0, r3
     6be:	4b14      	ldr	r3, [pc, #80]	; (710 <uart915_write_cmd+0x80>)
     6c0:	4798      	blx	r3
    

    while(!flag_ok_received){
     6c2:	e00d      	b.n	6e0 <uart915_write_cmd+0x50>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	0018      	movs	r0, r3
     6c8:	4b0f      	ldr	r3, [pc, #60]	; (708 <uart915_write_cmd+0x78>)
     6ca:	4798      	blx	r3
     6cc:	0003      	movs	r3, r0
     6ce:	b29a      	uxth	r2, r3
     6d0:	6879      	ldr	r1, [r7, #4]
     6d2:	4b0e      	ldr	r3, [pc, #56]	; (70c <uart915_write_cmd+0x7c>)
     6d4:	0018      	movs	r0, r3
     6d6:	4b0e      	ldr	r3, [pc, #56]	; (710 <uart915_write_cmd+0x80>)
     6d8:	4798      	blx	r3
		delay_ms(10);
     6da:	200a      	movs	r0, #10
     6dc:	4b0d      	ldr	r3, [pc, #52]	; (714 <uart915_write_cmd+0x84>)
     6de:	4798      	blx	r3
    while(!flag_ok_received){
     6e0:	4b05      	ldr	r3, [pc, #20]	; (6f8 <uart915_write_cmd+0x68>)
     6e2:	781b      	ldrb	r3, [r3, #0]
     6e4:	b2db      	uxtb	r3, r3
     6e6:	2201      	movs	r2, #1
     6e8:	4053      	eors	r3, r2
     6ea:	b2db      	uxtb	r3, r3
     6ec:	2b00      	cmp	r3, #0
     6ee:	d1e9      	bne.n	6c4 <uart915_write_cmd+0x34>
		};
}
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	46bd      	mov	sp, r7
     6f4:	b002      	add	sp, #8
     6f6:	bd80      	pop	{r7, pc}
     6f8:	200000f5 	.word	0x200000f5
     6fc:	200000f4 	.word	0x200000f4
     700:	20000000 	.word	0x20000000
     704:	0000013d 	.word	0x0000013d
     708:	0000388d 	.word	0x0000388d
     70c:	2000003c 	.word	0x2000003c
     710:	000015a1 	.word	0x000015a1
     714:	00000869 	.word	0x00000869

00000718 <uart915_network_config>:
 * Description      : Configuration for network between Tx and Rx MTXDOTs
 *  AT command sequence obtained from MTXDOT Developer Guide pg. 121 
 */

void uart915_network_config()
{
     718:	b580      	push	{r7, lr}
     71a:	af00      	add	r7, sp, #0
	uart915_write_cmd("AT\r\n");
     71c:	4b17      	ldr	r3, [pc, #92]	; (77c <uart915_network_config+0x64>)
     71e:	0018      	movs	r0, r3
     720:	4b17      	ldr	r3, [pc, #92]	; (780 <uart915_network_config+0x68>)
     722:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     724:	4b17      	ldr	r3, [pc, #92]	; (784 <uart915_network_config+0x6c>)
     726:	0018      	movs	r0, r3
     728:	4b15      	ldr	r3, [pc, #84]	; (780 <uart915_network_config+0x68>)
     72a:	4798      	blx	r3
	uart915_write_cmd("AT+NA=00112233\r\n");
     72c:	4b16      	ldr	r3, [pc, #88]	; (788 <uart915_network_config+0x70>)
     72e:	0018      	movs	r0, r3
     730:	4b13      	ldr	r3, [pc, #76]	; (780 <uart915_network_config+0x68>)
     732:	4798      	blx	r3
	uart915_write_cmd("AT+NSK=00112233001122330011223300112233\r\n");
     734:	4b15      	ldr	r3, [pc, #84]	; (78c <uart915_network_config+0x74>)
     736:	0018      	movs	r0, r3
     738:	4b11      	ldr	r3, [pc, #68]	; (780 <uart915_network_config+0x68>)
     73a:	4798      	blx	r3
	uart915_write_cmd("AT+DSK=33221100332211003322110033221100\r\n");
     73c:	4b14      	ldr	r3, [pc, #80]	; (790 <uart915_network_config+0x78>)
     73e:	0018      	movs	r0, r3
     740:	4b0f      	ldr	r3, [pc, #60]	; (780 <uart915_network_config+0x68>)
     742:	4798      	blx	r3
	uart915_write_cmd("AT+TXDR=DR8\r\n");
     744:	4b13      	ldr	r3, [pc, #76]	; (794 <uart915_network_config+0x7c>)
     746:	0018      	movs	r0, r3
     748:	4b0d      	ldr	r3, [pc, #52]	; (780 <uart915_network_config+0x68>)
     74a:	4798      	blx	r3
	uart915_write_cmd("AT+TXF=915500000\r\n");
     74c:	4b12      	ldr	r3, [pc, #72]	; (798 <uart915_network_config+0x80>)
     74e:	0018      	movs	r0, r3
     750:	4b0b      	ldr	r3, [pc, #44]	; (780 <uart915_network_config+0x68>)
     752:	4798      	blx	r3
	uart915_write_cmd("AT&W\r\n");
     754:	4b11      	ldr	r3, [pc, #68]	; (79c <uart915_network_config+0x84>)
     756:	0018      	movs	r0, r3
     758:	4b09      	ldr	r3, [pc, #36]	; (780 <uart915_network_config+0x68>)
     75a:	4798      	blx	r3
	uart915_write_cmd("ATZ\r\n");
     75c:	4b10      	ldr	r3, [pc, #64]	; (7a0 <uart915_network_config+0x88>)
     75e:	0018      	movs	r0, r3
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <uart915_network_config+0x68>)
     762:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <uart915_network_config+0x6c>)
     766:	0018      	movs	r0, r3
     768:	4b05      	ldr	r3, [pc, #20]	; (780 <uart915_network_config+0x68>)
     76a:	4798      	blx	r3
	uart915_write_cmd("AT+SD\r\n");
     76c:	4b0d      	ldr	r3, [pc, #52]	; (7a4 <uart915_network_config+0x8c>)
     76e:	0018      	movs	r0, r3
     770:	4b03      	ldr	r3, [pc, #12]	; (780 <uart915_network_config+0x68>)
     772:	4798      	blx	r3
	
}
     774:	46c0      	nop			; (mov r8, r8)
     776:	46bd      	mov	sp, r7
     778:	bd80      	pop	{r7, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	0000389c 	.word	0x0000389c
     780:	00000691 	.word	0x00000691
     784:	000038a4 	.word	0x000038a4
     788:	000038b0 	.word	0x000038b0
     78c:	000038c4 	.word	0x000038c4
     790:	000038f0 	.word	0x000038f0
     794:	0000391c 	.word	0x0000391c
     798:	0000392c 	.word	0x0000392c
     79c:	00003940 	.word	0x00003940
     7a0:	00003948 	.word	0x00003948
     7a4:	00003950 	.word	0x00003950

000007a8 <uart915_preconnect>:
    
    // convert the number at the current spot in the string to an int
    return atoi((char*) &rspns_buff[i]);
}

uart915_preconnect(void){
     7a8:	b580      	push	{r7, lr}
     7aa:	b082      	sub	sp, #8
     7ac:	af00      	add	r7, sp, #0
    int i = 0;
     7ae:	2300      	movs	r3, #0
     7b0:	607b      	str	r3, [r7, #4]
    
    /* send 10 "AT" and "AT+SEND" commands to validate conenction
     * between the receiver and transmitter */
    for(; i < 10; i++)
     7b2:	e006      	b.n	7c2 <uart915_preconnect+0x1a>
    {
        uart915_write_cmd("AT+SEND\r\n");
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <uart915_preconnect+0x2c>)
     7b6:	0018      	movs	r0, r3
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <uart915_preconnect+0x30>)
     7ba:	4798      	blx	r3
    for(; i < 10; i++)
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	3301      	adds	r3, #1
     7c0:	607b      	str	r3, [r7, #4]
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	2b09      	cmp	r3, #9
     7c6:	ddf5      	ble.n	7b4 <uart915_preconnect+0xc>
       // uart915_write_cmd("AT+SEND\r\n");  
    }
     7c8:	46c0      	nop			; (mov r8, r8)
     7ca:	0018      	movs	r0, r3
     7cc:	46bd      	mov	sp, r7
     7ce:	b002      	add	sp, #8
     7d0:	bd80      	pop	{r7, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00003964 	.word	0x00003964
     7d8:	00000691 	.word	0x00000691

000007dc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d00c      	beq.n	804 <delay_cycles+0x28>
		SysTick->LOAD = n;
     7ea:	4b08      	ldr	r3, [pc, #32]	; (80c <delay_cycles+0x30>)
     7ec:	687a      	ldr	r2, [r7, #4]
     7ee:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     7f0:	4b06      	ldr	r3, [pc, #24]	; (80c <delay_cycles+0x30>)
     7f2:	2200      	movs	r2, #0
     7f4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	4b04      	ldr	r3, [pc, #16]	; (80c <delay_cycles+0x30>)
     7fa:	681a      	ldr	r2, [r3, #0]
     7fc:	2380      	movs	r3, #128	; 0x80
     7fe:	025b      	lsls	r3, r3, #9
     800:	4013      	ands	r3, r2
     802:	d0f9      	beq.n	7f8 <delay_cycles+0x1c>
		};
	}
}
     804:	46c0      	nop			; (mov r8, r8)
     806:	46bd      	mov	sp, r7
     808:	b002      	add	sp, #8
     80a:	bd80      	pop	{r7, pc}
     80c:	e000e010 	.word	0xe000e010

00000810 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     810:	b580      	push	{r7, lr}
     812:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     814:	2000      	movs	r0, #0
     816:	4b0f      	ldr	r3, [pc, #60]	; (854 <delay_init+0x44>)
     818:	4798      	blx	r3
     81a:	0002      	movs	r2, r0
     81c:	4b0e      	ldr	r3, [pc, #56]	; (858 <delay_init+0x48>)
     81e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     820:	4b0d      	ldr	r3, [pc, #52]	; (858 <delay_init+0x48>)
     822:	6818      	ldr	r0, [r3, #0]
     824:	4b0d      	ldr	r3, [pc, #52]	; (85c <delay_init+0x4c>)
     826:	22fa      	movs	r2, #250	; 0xfa
     828:	0091      	lsls	r1, r2, #2
     82a:	4798      	blx	r3
     82c:	0003      	movs	r3, r0
     82e:	001a      	movs	r2, r3
     830:	4b09      	ldr	r3, [pc, #36]	; (858 <delay_init+0x48>)
     832:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     834:	4b08      	ldr	r3, [pc, #32]	; (858 <delay_init+0x48>)
     836:	6818      	ldr	r0, [r3, #0]
     838:	4b08      	ldr	r3, [pc, #32]	; (85c <delay_init+0x4c>)
     83a:	22fa      	movs	r2, #250	; 0xfa
     83c:	0091      	lsls	r1, r2, #2
     83e:	4798      	blx	r3
     840:	0003      	movs	r3, r0
     842:	001a      	movs	r2, r3
     844:	4b06      	ldr	r3, [pc, #24]	; (860 <delay_init+0x50>)
     846:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <delay_init+0x54>)
     84a:	2205      	movs	r2, #5
     84c:	601a      	str	r2, [r3, #0]
}
     84e:	46c0      	nop			; (mov r8, r8)
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}
     854:	00002e51 	.word	0x00002e51
     858:	20000010 	.word	0x20000010
     85c:	000036d9 	.word	0x000036d9
     860:	20000014 	.word	0x20000014
     864:	e000e010 	.word	0xe000e010

00000868 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     868:	b580      	push	{r7, lr}
     86a:	b082      	sub	sp, #8
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
	while (n--) {
     870:	e004      	b.n	87c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     872:	4b07      	ldr	r3, [pc, #28]	; (890 <delay_cycles_ms+0x28>)
     874:	681b      	ldr	r3, [r3, #0]
     876:	0018      	movs	r0, r3
     878:	4b06      	ldr	r3, [pc, #24]	; (894 <delay_cycles_ms+0x2c>)
     87a:	4798      	blx	r3
	while (n--) {
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	1e5a      	subs	r2, r3, #1
     880:	607a      	str	r2, [r7, #4]
     882:	2b00      	cmp	r3, #0
     884:	d1f5      	bne.n	872 <delay_cycles_ms+0xa>
	}
}
     886:	46c0      	nop			; (mov r8, r8)
     888:	46bd      	mov	sp, r7
     88a:	b002      	add	sp, #8
     88c:	bd80      	pop	{r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	20000010 	.word	0x20000010
     894:	000007dd 	.word	0x000007dd

00000898 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     898:	b580      	push	{r7, lr}
     89a:	b082      	sub	sp, #8
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	2280      	movs	r2, #128	; 0x80
     8a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	2200      	movs	r2, #0
     8aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	2201      	movs	r2, #1
     8b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	2200      	movs	r2, #0
     8b6:	70da      	strb	r2, [r3, #3]
}
     8b8:	46c0      	nop			; (mov r8, r8)
     8ba:	46bd      	mov	sp, r7
     8bc:	b002      	add	sp, #8
     8be:	bd80      	pop	{r7, pc}

000008c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
     8c6:	0002      	movs	r2, r0
     8c8:	6039      	str	r1, [r7, #0]
     8ca:	1dfb      	adds	r3, r7, #7
     8cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     8ce:	230c      	movs	r3, #12
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	0018      	movs	r0, r3
     8d4:	4b10      	ldr	r3, [pc, #64]	; (918 <port_pin_set_config+0x58>)
     8d6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     8d8:	230c      	movs	r3, #12
     8da:	18fb      	adds	r3, r7, r3
     8dc:	2280      	movs	r2, #128	; 0x80
     8de:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8e0:	683b      	ldr	r3, [r7, #0]
     8e2:	781a      	ldrb	r2, [r3, #0]
     8e4:	230c      	movs	r3, #12
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8ea:	683b      	ldr	r3, [r7, #0]
     8ec:	785a      	ldrb	r2, [r3, #1]
     8ee:	230c      	movs	r3, #12
     8f0:	18fb      	adds	r3, r7, r3
     8f2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8f4:	683b      	ldr	r3, [r7, #0]
     8f6:	789a      	ldrb	r2, [r3, #2]
     8f8:	230c      	movs	r3, #12
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8fe:	230c      	movs	r3, #12
     900:	18fa      	adds	r2, r7, r3
     902:	1dfb      	adds	r3, r7, #7
     904:	781b      	ldrb	r3, [r3, #0]
     906:	0011      	movs	r1, r2
     908:	0018      	movs	r0, r3
     90a:	4b04      	ldr	r3, [pc, #16]	; (91c <port_pin_set_config+0x5c>)
     90c:	4798      	blx	r3
}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	46bd      	mov	sp, r7
     912:	b004      	add	sp, #16
     914:	bd80      	pop	{r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	00000899 	.word	0x00000899
     91c:	00003215 	.word	0x00003215

00000920 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
     926:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     928:	687b      	ldr	r3, [r7, #4]
     92a:	2200      	movs	r2, #0
     92c:	701a      	strb	r2, [r3, #0]
}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	46bd      	mov	sp, r7
     932:	b002      	add	sp, #8
     934:	bd80      	pop	{r7, pc}

00000936 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     936:	b5f0      	push	{r4, r5, r6, r7, lr}
     938:	b08d      	sub	sp, #52	; 0x34
     93a:	af00      	add	r7, sp, #0
     93c:	60b8      	str	r0, [r7, #8]
     93e:	60f9      	str	r1, [r7, #12]
     940:	603a      	str	r2, [r7, #0]
     942:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     944:	2300      	movs	r3, #0
     946:	2400      	movs	r4, #0
     948:	623b      	str	r3, [r7, #32]
     94a:	627c      	str	r4, [r7, #36]	; 0x24
     94c:	2300      	movs	r3, #0
     94e:	2400      	movs	r4, #0
     950:	61bb      	str	r3, [r7, #24]
     952:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     954:	233f      	movs	r3, #63	; 0x3f
     956:	62fb      	str	r3, [r7, #44]	; 0x2c
     958:	e053      	b.n	a02 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     95c:	3b20      	subs	r3, #32
     95e:	2b00      	cmp	r3, #0
     960:	db04      	blt.n	96c <long_division+0x36>
     962:	2201      	movs	r2, #1
     964:	409a      	lsls	r2, r3
     966:	0013      	movs	r3, r2
     968:	617b      	str	r3, [r7, #20]
     96a:	e00b      	b.n	984 <long_division+0x4e>
     96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     96e:	2220      	movs	r2, #32
     970:	1ad3      	subs	r3, r2, r3
     972:	2201      	movs	r2, #1
     974:	40da      	lsrs	r2, r3
     976:	0013      	movs	r3, r2
     978:	2100      	movs	r1, #0
     97a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     97c:	4091      	lsls	r1, r2
     97e:	000a      	movs	r2, r1
     980:	4313      	orrs	r3, r2
     982:	617b      	str	r3, [r7, #20]
     984:	2201      	movs	r2, #1
     986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     988:	409a      	lsls	r2, r3
     98a:	0013      	movs	r3, r2
     98c:	613b      	str	r3, [r7, #16]

		r = r << 1;
     98e:	69bb      	ldr	r3, [r7, #24]
     990:	69fc      	ldr	r4, [r7, #28]
     992:	18db      	adds	r3, r3, r3
     994:	4164      	adcs	r4, r4
     996:	61bb      	str	r3, [r7, #24]
     998:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     99a:	68bb      	ldr	r3, [r7, #8]
     99c:	693a      	ldr	r2, [r7, #16]
     99e:	401a      	ands	r2, r3
     9a0:	0015      	movs	r5, r2
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	697a      	ldr	r2, [r7, #20]
     9a6:	401a      	ands	r2, r3
     9a8:	0016      	movs	r6, r2
     9aa:	002b      	movs	r3, r5
     9ac:	4333      	orrs	r3, r6
     9ae:	d007      	beq.n	9c0 <long_division+0x8a>
			r |= 0x01;
     9b0:	69bb      	ldr	r3, [r7, #24]
     9b2:	2201      	movs	r2, #1
     9b4:	4313      	orrs	r3, r2
     9b6:	61bb      	str	r3, [r7, #24]
     9b8:	69fb      	ldr	r3, [r7, #28]
     9ba:	2200      	movs	r2, #0
     9bc:	4313      	orrs	r3, r2
     9be:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     9c0:	687a      	ldr	r2, [r7, #4]
     9c2:	69fb      	ldr	r3, [r7, #28]
     9c4:	429a      	cmp	r2, r3
     9c6:	d819      	bhi.n	9fc <long_division+0xc6>
     9c8:	687a      	ldr	r2, [r7, #4]
     9ca:	69fb      	ldr	r3, [r7, #28]
     9cc:	429a      	cmp	r2, r3
     9ce:	d103      	bne.n	9d8 <long_division+0xa2>
     9d0:	683a      	ldr	r2, [r7, #0]
     9d2:	69bb      	ldr	r3, [r7, #24]
     9d4:	429a      	cmp	r2, r3
     9d6:	d811      	bhi.n	9fc <long_division+0xc6>
			r = r - d;
     9d8:	69b9      	ldr	r1, [r7, #24]
     9da:	69fa      	ldr	r2, [r7, #28]
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	687c      	ldr	r4, [r7, #4]
     9e0:	1ac9      	subs	r1, r1, r3
     9e2:	41a2      	sbcs	r2, r4
     9e4:	000b      	movs	r3, r1
     9e6:	0014      	movs	r4, r2
     9e8:	61bb      	str	r3, [r7, #24]
     9ea:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     9ec:	6a3a      	ldr	r2, [r7, #32]
     9ee:	693b      	ldr	r3, [r7, #16]
     9f0:	4313      	orrs	r3, r2
     9f2:	623b      	str	r3, [r7, #32]
     9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     9f6:	697b      	ldr	r3, [r7, #20]
     9f8:	4313      	orrs	r3, r2
     9fa:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9fe:	3b01      	subs	r3, #1
     a00:	62fb      	str	r3, [r7, #44]	; 0x2c
     a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a04:	2b00      	cmp	r3, #0
     a06:	daa8      	bge.n	95a <long_division+0x24>
		}
	}

	return q;
     a08:	6a3b      	ldr	r3, [r7, #32]
     a0a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     a0c:	0018      	movs	r0, r3
     a0e:	0021      	movs	r1, r4
     a10:	46bd      	mov	sp, r7
     a12:	b00d      	add	sp, #52	; 0x34
     a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a16 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a16:	b580      	push	{r7, lr}
     a18:	b086      	sub	sp, #24
     a1a:	af00      	add	r7, sp, #0
     a1c:	60f8      	str	r0, [r7, #12]
     a1e:	60b9      	str	r1, [r7, #8]
     a20:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     a22:	2316      	movs	r3, #22
     a24:	18fb      	adds	r3, r7, r3
     a26:	2200      	movs	r2, #0
     a28:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     a2a:	68bb      	ldr	r3, [r7, #8]
     a2c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a2e:	68bb      	ldr	r3, [r7, #8]
     a30:	085a      	lsrs	r2, r3, #1
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	429a      	cmp	r2, r3
     a36:	d201      	bcs.n	a3c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a38:	2340      	movs	r3, #64	; 0x40
     a3a:	e026      	b.n	a8a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     a3c:	68bb      	ldr	r3, [r7, #8]
     a3e:	085b      	lsrs	r3, r3, #1
     a40:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     a42:	e00a      	b.n	a5a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     a44:	693a      	ldr	r2, [r7, #16]
     a46:	68fb      	ldr	r3, [r7, #12]
     a48:	1ad3      	subs	r3, r2, r3
     a4a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     a4c:	2316      	movs	r3, #22
     a4e:	18fb      	adds	r3, r7, r3
     a50:	881a      	ldrh	r2, [r3, #0]
     a52:	2316      	movs	r3, #22
     a54:	18fb      	adds	r3, r7, r3
     a56:	3201      	adds	r2, #1
     a58:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     a5a:	693a      	ldr	r2, [r7, #16]
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	429a      	cmp	r2, r3
     a60:	d2f0      	bcs.n	a44 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     a62:	2316      	movs	r3, #22
     a64:	18fb      	adds	r3, r7, r3
     a66:	2216      	movs	r2, #22
     a68:	18ba      	adds	r2, r7, r2
     a6a:	8812      	ldrh	r2, [r2, #0]
     a6c:	3a01      	subs	r2, #1
     a6e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a70:	2316      	movs	r3, #22
     a72:	18fb      	adds	r3, r7, r3
     a74:	881b      	ldrh	r3, [r3, #0]
     a76:	2bff      	cmp	r3, #255	; 0xff
     a78:	d901      	bls.n	a7e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a7a:	2340      	movs	r3, #64	; 0x40
     a7c:	e005      	b.n	a8a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	2216      	movs	r2, #22
     a82:	18ba      	adds	r2, r7, r2
     a84:	8812      	ldrh	r2, [r2, #0]
     a86:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     a88:	2300      	movs	r3, #0
	}
}
     a8a:	0018      	movs	r0, r3
     a8c:	46bd      	mov	sp, r7
     a8e:	b006      	add	sp, #24
     a90:	bd80      	pop	{r7, pc}
	...

00000a94 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a94:	b5f0      	push	{r4, r5, r6, r7, lr}
     a96:	b0a1      	sub	sp, #132	; 0x84
     a98:	af00      	add	r7, sp, #0
     a9a:	64f8      	str	r0, [r7, #76]	; 0x4c
     a9c:	64b9      	str	r1, [r7, #72]	; 0x48
     a9e:	647a      	str	r2, [r7, #68]	; 0x44
     aa0:	2243      	movs	r2, #67	; 0x43
     aa2:	18ba      	adds	r2, r7, r2
     aa4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     aa6:	2300      	movs	r3, #0
     aa8:	2400      	movs	r4, #0
     aaa:	673b      	str	r3, [r7, #112]	; 0x70
     aac:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     aae:	2300      	movs	r3, #0
     ab0:	2400      	movs	r4, #0
     ab2:	66bb      	str	r3, [r7, #104]	; 0x68
     ab4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     ab6:	2300      	movs	r3, #0
     ab8:	2400      	movs	r4, #0
     aba:	67bb      	str	r3, [r7, #120]	; 0x78
     abc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     abe:	2300      	movs	r3, #0
     ac0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ac2:	2358      	movs	r3, #88	; 0x58
     ac4:	2240      	movs	r2, #64	; 0x40
     ac6:	4694      	mov	ip, r2
     ac8:	44bc      	add	ip, r7
     aca:	4463      	add	r3, ip
     acc:	781a      	ldrb	r2, [r3, #0]
     ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ad0:	435a      	muls	r2, r3
     ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     ad4:	429a      	cmp	r2, r3
     ad6:	d901      	bls.n	adc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ad8:	2340      	movs	r3, #64	; 0x40
     ada:	e0b3      	b.n	c44 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     adc:	2343      	movs	r3, #67	; 0x43
     ade:	18fb      	adds	r3, r7, r3
     ae0:	781b      	ldrb	r3, [r3, #0]
     ae2:	2b00      	cmp	r3, #0
     ae4:	d13d      	bne.n	b62 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     ae6:	2358      	movs	r3, #88	; 0x58
     ae8:	2240      	movs	r2, #64	; 0x40
     aea:	4694      	mov	ip, r2
     aec:	44bc      	add	ip, r7
     aee:	4463      	add	r3, ip
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	b2db      	uxtb	r3, r3
     af4:	613b      	str	r3, [r7, #16]
     af6:	2300      	movs	r3, #0
     af8:	617b      	str	r3, [r7, #20]
     afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     afc:	60bb      	str	r3, [r7, #8]
     afe:	2300      	movs	r3, #0
     b00:	60fb      	str	r3, [r7, #12]
     b02:	4c52      	ldr	r4, [pc, #328]	; (c4c <_sercom_get_async_baud_val+0x1b8>)
     b04:	68ba      	ldr	r2, [r7, #8]
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	6938      	ldr	r0, [r7, #16]
     b0a:	6979      	ldr	r1, [r7, #20]
     b0c:	47a0      	blx	r4
     b0e:	0003      	movs	r3, r0
     b10:	000c      	movs	r4, r1
     b12:	001b      	movs	r3, r3
     b14:	65fb      	str	r3, [r7, #92]	; 0x5c
     b16:	2300      	movs	r3, #0
     b18:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     b1c:	603b      	str	r3, [r7, #0]
     b1e:	2300      	movs	r3, #0
     b20:	607b      	str	r3, [r7, #4]
     b22:	6db8      	ldr	r0, [r7, #88]	; 0x58
     b24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     b26:	683a      	ldr	r2, [r7, #0]
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	4c49      	ldr	r4, [pc, #292]	; (c50 <_sercom_get_async_baud_val+0x1bc>)
     b2c:	47a0      	blx	r4
     b2e:	0003      	movs	r3, r0
     b30:	000c      	movs	r4, r1
     b32:	673b      	str	r3, [r7, #112]	; 0x70
     b34:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b36:	2100      	movs	r1, #0
     b38:	2201      	movs	r2, #1
     b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     b3c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     b3e:	1ac9      	subs	r1, r1, r3
     b40:	41a2      	sbcs	r2, r4
     b42:	000b      	movs	r3, r1
     b44:	0014      	movs	r4, r2
     b46:	66bb      	str	r3, [r7, #104]	; 0x68
     b48:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b4c:	0c1b      	lsrs	r3, r3, #16
     b4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     b50:	0416      	lsls	r6, r2, #16
     b52:	431e      	orrs	r6, r3
     b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     b56:	041d      	lsls	r5, r3, #16
     b58:	0033      	movs	r3, r6
     b5a:	67bb      	str	r3, [r7, #120]	; 0x78
     b5c:	2300      	movs	r3, #0
     b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
     b60:	e06a      	b.n	c38 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b62:	2343      	movs	r3, #67	; 0x43
     b64:	18fb      	adds	r3, r7, r3
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	2b01      	cmp	r3, #1
     b6a:	d165      	bne.n	c38 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     b6e:	633b      	str	r3, [r7, #48]	; 0x30
     b70:	2300      	movs	r3, #0
     b72:	637b      	str	r3, [r7, #52]	; 0x34
     b74:	2358      	movs	r3, #88	; 0x58
     b76:	2240      	movs	r2, #64	; 0x40
     b78:	4694      	mov	ip, r2
     b7a:	44bc      	add	ip, r7
     b7c:	4463      	add	r3, ip
     b7e:	781b      	ldrb	r3, [r3, #0]
     b80:	b2db      	uxtb	r3, r3
     b82:	62bb      	str	r3, [r7, #40]	; 0x28
     b84:	2300      	movs	r3, #0
     b86:	62fb      	str	r3, [r7, #44]	; 0x2c
     b88:	4c30      	ldr	r4, [pc, #192]	; (c4c <_sercom_get_async_baud_val+0x1b8>)
     b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
     b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
     b92:	47a0      	blx	r4
     b94:	0003      	movs	r3, r0
     b96:	000c      	movs	r4, r1
     b98:	65bb      	str	r3, [r7, #88]	; 0x58
     b9a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     b9e:	623b      	str	r3, [r7, #32]
     ba0:	2300      	movs	r3, #0
     ba2:	627b      	str	r3, [r7, #36]	; 0x24
     ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     ba6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     ba8:	001a      	movs	r2, r3
     baa:	0023      	movs	r3, r4
     bac:	6a38      	ldr	r0, [r7, #32]
     bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
     bb0:	4c27      	ldr	r4, [pc, #156]	; (c50 <_sercom_get_async_baud_val+0x1bc>)
     bb2:	47a0      	blx	r4
     bb4:	0003      	movs	r3, r0
     bb6:	000c      	movs	r4, r1
     bb8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     bba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     bbc:	2380      	movs	r3, #128	; 0x80
     bbe:	019b      	lsls	r3, r3, #6
     bc0:	429a      	cmp	r2, r3
     bc2:	d901      	bls.n	bc8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bc4:	2340      	movs	r3, #64	; 0x40
     bc6:	e03d      	b.n	c44 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     bca:	61bb      	str	r3, [r7, #24]
     bcc:	2300      	movs	r3, #0
     bce:	61fb      	str	r3, [r7, #28]
     bd0:	69b9      	ldr	r1, [r7, #24]
     bd2:	69fa      	ldr	r2, [r7, #28]
     bd4:	000b      	movs	r3, r1
     bd6:	0f5b      	lsrs	r3, r3, #29
     bd8:	0010      	movs	r0, r2
     bda:	00c0      	lsls	r0, r0, #3
     bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
     bde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     be0:	4318      	orrs	r0, r3
     be2:	63f8      	str	r0, [r7, #60]	; 0x3c
     be4:	000b      	movs	r3, r1
     be6:	00db      	lsls	r3, r3, #3
     be8:	63bb      	str	r3, [r7, #56]	; 0x38
     bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     bec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     bee:	001a      	movs	r2, r3
     bf0:	0023      	movs	r3, r4
     bf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     bf6:	4c16      	ldr	r4, [pc, #88]	; (c50 <_sercom_get_async_baud_val+0x1bc>)
     bf8:	47a0      	blx	r4
     bfa:	0003      	movs	r3, r0
     bfc:	000c      	movs	r4, r1
     bfe:	65bb      	str	r3, [r7, #88]	; 0x58
     c00:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     c04:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     c06:	b2d9      	uxtb	r1, r3
     c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c0a:	b2db      	uxtb	r3, r3
     c0c:	00db      	lsls	r3, r3, #3
     c0e:	b2da      	uxtb	r2, r3
     c10:	2317      	movs	r3, #23
     c12:	2040      	movs	r0, #64	; 0x40
     c14:	4684      	mov	ip, r0
     c16:	44bc      	add	ip, r7
     c18:	4463      	add	r3, ip
     c1a:	1a8a      	subs	r2, r1, r2
     c1c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     c1e:	2317      	movs	r3, #23
     c20:	2240      	movs	r2, #64	; 0x40
     c22:	4694      	mov	ip, r2
     c24:	44bc      	add	ip, r7
     c26:	4463      	add	r3, ip
     c28:	781b      	ldrb	r3, [r3, #0]
     c2a:	035b      	lsls	r3, r3, #13
     c2c:	001a      	movs	r2, r3
     c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c30:	4313      	orrs	r3, r2
     c32:	67bb      	str	r3, [r7, #120]	; 0x78
     c34:	2300      	movs	r3, #0
     c36:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     c3a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     c3c:	b29a      	uxth	r2, r3
     c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c40:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c42:	2300      	movs	r3, #0
}
     c44:	0018      	movs	r0, r3
     c46:	46bd      	mov	sp, r7
     c48:	b021      	add	sp, #132	; 0x84
     c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4c:	000037f1 	.word	0x000037f1
     c50:	00000937 	.word	0x00000937

00000c54 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c54:	b580      	push	{r7, lr}
     c56:	b084      	sub	sp, #16
     c58:	af00      	add	r7, sp, #0
     c5a:	0002      	movs	r2, r0
     c5c:	1dfb      	adds	r3, r7, #7
     c5e:	701a      	strb	r2, [r3, #0]
     c60:	1dbb      	adds	r3, r7, #6
     c62:	1c0a      	adds	r2, r1, #0
     c64:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c66:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <sercom_set_gclk_generator+0x7c>)
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2201      	movs	r2, #1
     c6c:	4053      	eors	r3, r2
     c6e:	b2db      	uxtb	r3, r3
     c70:	2b00      	cmp	r3, #0
     c72:	d103      	bne.n	c7c <sercom_set_gclk_generator+0x28>
     c74:	1dbb      	adds	r3, r7, #6
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b00      	cmp	r3, #0
     c7a:	d01b      	beq.n	cb4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     c7c:	230c      	movs	r3, #12
     c7e:	18fb      	adds	r3, r7, r3
     c80:	0018      	movs	r0, r3
     c82:	4b14      	ldr	r3, [pc, #80]	; (cd4 <sercom_set_gclk_generator+0x80>)
     c84:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     c86:	230c      	movs	r3, #12
     c88:	18fb      	adds	r3, r7, r3
     c8a:	1dfa      	adds	r2, r7, #7
     c8c:	7812      	ldrb	r2, [r2, #0]
     c8e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c90:	230c      	movs	r3, #12
     c92:	18fb      	adds	r3, r7, r3
     c94:	0019      	movs	r1, r3
     c96:	2013      	movs	r0, #19
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <sercom_set_gclk_generator+0x84>)
     c9a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c9c:	2013      	movs	r0, #19
     c9e:	4b0f      	ldr	r3, [pc, #60]	; (cdc <sercom_set_gclk_generator+0x88>)
     ca0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     ca2:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <sercom_set_gclk_generator+0x7c>)
     ca4:	1dfa      	adds	r2, r7, #7
     ca6:	7812      	ldrb	r2, [r2, #0]
     ca8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     caa:	4b09      	ldr	r3, [pc, #36]	; (cd0 <sercom_set_gclk_generator+0x7c>)
     cac:	2201      	movs	r2, #1
     cae:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     cb0:	2300      	movs	r3, #0
     cb2:	e008      	b.n	cc6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     cb4:	4b06      	ldr	r3, [pc, #24]	; (cd0 <sercom_set_gclk_generator+0x7c>)
     cb6:	785b      	ldrb	r3, [r3, #1]
     cb8:	1dfa      	adds	r2, r7, #7
     cba:	7812      	ldrb	r2, [r2, #0]
     cbc:	429a      	cmp	r2, r3
     cbe:	d101      	bne.n	cc4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     cc0:	2300      	movs	r3, #0
     cc2:	e000      	b.n	cc6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     cc4:	231d      	movs	r3, #29
}
     cc6:	0018      	movs	r0, r3
     cc8:	46bd      	mov	sp, r7
     cca:	b004      	add	sp, #16
     ccc:	bd80      	pop	{r7, pc}
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	200000f8 	.word	0x200000f8
     cd4:	00000921 	.word	0x00000921
     cd8:	00002f29 	.word	0x00002f29
     cdc:	00002f6d 	.word	0x00002f6d

00000ce0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	af00      	add	r7, sp, #0
     ce6:	6078      	str	r0, [r7, #4]
     ce8:	000a      	movs	r2, r1
     cea:	1cfb      	adds	r3, r7, #3
     cec:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	4a4d      	ldr	r2, [pc, #308]	; (e28 <_sercom_get_default_pad+0x148>)
     cf2:	4293      	cmp	r3, r2
     cf4:	d03f      	beq.n	d76 <_sercom_get_default_pad+0x96>
     cf6:	4a4c      	ldr	r2, [pc, #304]	; (e28 <_sercom_get_default_pad+0x148>)
     cf8:	4293      	cmp	r3, r2
     cfa:	d806      	bhi.n	d0a <_sercom_get_default_pad+0x2a>
     cfc:	4a4b      	ldr	r2, [pc, #300]	; (e2c <_sercom_get_default_pad+0x14c>)
     cfe:	4293      	cmp	r3, r2
     d00:	d00f      	beq.n	d22 <_sercom_get_default_pad+0x42>
     d02:	4a4b      	ldr	r2, [pc, #300]	; (e30 <_sercom_get_default_pad+0x150>)
     d04:	4293      	cmp	r3, r2
     d06:	d021      	beq.n	d4c <_sercom_get_default_pad+0x6c>
     d08:	e089      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d0a:	4a4a      	ldr	r2, [pc, #296]	; (e34 <_sercom_get_default_pad+0x154>)
     d0c:	4293      	cmp	r3, r2
     d0e:	d100      	bne.n	d12 <_sercom_get_default_pad+0x32>
     d10:	e05b      	b.n	dca <_sercom_get_default_pad+0xea>
     d12:	4a49      	ldr	r2, [pc, #292]	; (e38 <_sercom_get_default_pad+0x158>)
     d14:	4293      	cmp	r3, r2
     d16:	d100      	bne.n	d1a <_sercom_get_default_pad+0x3a>
     d18:	e06c      	b.n	df4 <_sercom_get_default_pad+0x114>
     d1a:	4a48      	ldr	r2, [pc, #288]	; (e3c <_sercom_get_default_pad+0x15c>)
     d1c:	4293      	cmp	r3, r2
     d1e:	d03f      	beq.n	da0 <_sercom_get_default_pad+0xc0>
     d20:	e07d      	b.n	e1e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d22:	1cfb      	adds	r3, r7, #3
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	2b01      	cmp	r3, #1
     d28:	d00a      	beq.n	d40 <_sercom_get_default_pad+0x60>
     d2a:	dc02      	bgt.n	d32 <_sercom_get_default_pad+0x52>
     d2c:	2b00      	cmp	r3, #0
     d2e:	d005      	beq.n	d3c <_sercom_get_default_pad+0x5c>
     d30:	e075      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d32:	2b02      	cmp	r3, #2
     d34:	d006      	beq.n	d44 <_sercom_get_default_pad+0x64>
     d36:	2b03      	cmp	r3, #3
     d38:	d006      	beq.n	d48 <_sercom_get_default_pad+0x68>
     d3a:	e070      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d3c:	4b40      	ldr	r3, [pc, #256]	; (e40 <_sercom_get_default_pad+0x160>)
     d3e:	e06f      	b.n	e20 <_sercom_get_default_pad+0x140>
     d40:	4b40      	ldr	r3, [pc, #256]	; (e44 <_sercom_get_default_pad+0x164>)
     d42:	e06d      	b.n	e20 <_sercom_get_default_pad+0x140>
     d44:	4b40      	ldr	r3, [pc, #256]	; (e48 <_sercom_get_default_pad+0x168>)
     d46:	e06b      	b.n	e20 <_sercom_get_default_pad+0x140>
     d48:	4b40      	ldr	r3, [pc, #256]	; (e4c <_sercom_get_default_pad+0x16c>)
     d4a:	e069      	b.n	e20 <_sercom_get_default_pad+0x140>
     d4c:	1cfb      	adds	r3, r7, #3
     d4e:	781b      	ldrb	r3, [r3, #0]
     d50:	2b01      	cmp	r3, #1
     d52:	d00a      	beq.n	d6a <_sercom_get_default_pad+0x8a>
     d54:	dc02      	bgt.n	d5c <_sercom_get_default_pad+0x7c>
     d56:	2b00      	cmp	r3, #0
     d58:	d005      	beq.n	d66 <_sercom_get_default_pad+0x86>
     d5a:	e060      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d5c:	2b02      	cmp	r3, #2
     d5e:	d006      	beq.n	d6e <_sercom_get_default_pad+0x8e>
     d60:	2b03      	cmp	r3, #3
     d62:	d006      	beq.n	d72 <_sercom_get_default_pad+0x92>
     d64:	e05b      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d66:	2303      	movs	r3, #3
     d68:	e05a      	b.n	e20 <_sercom_get_default_pad+0x140>
     d6a:	4b39      	ldr	r3, [pc, #228]	; (e50 <_sercom_get_default_pad+0x170>)
     d6c:	e058      	b.n	e20 <_sercom_get_default_pad+0x140>
     d6e:	4b39      	ldr	r3, [pc, #228]	; (e54 <_sercom_get_default_pad+0x174>)
     d70:	e056      	b.n	e20 <_sercom_get_default_pad+0x140>
     d72:	4b39      	ldr	r3, [pc, #228]	; (e58 <_sercom_get_default_pad+0x178>)
     d74:	e054      	b.n	e20 <_sercom_get_default_pad+0x140>
     d76:	1cfb      	adds	r3, r7, #3
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	2b01      	cmp	r3, #1
     d7c:	d00a      	beq.n	d94 <_sercom_get_default_pad+0xb4>
     d7e:	dc02      	bgt.n	d86 <_sercom_get_default_pad+0xa6>
     d80:	2b00      	cmp	r3, #0
     d82:	d005      	beq.n	d90 <_sercom_get_default_pad+0xb0>
     d84:	e04b      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d86:	2b02      	cmp	r3, #2
     d88:	d006      	beq.n	d98 <_sercom_get_default_pad+0xb8>
     d8a:	2b03      	cmp	r3, #3
     d8c:	d006      	beq.n	d9c <_sercom_get_default_pad+0xbc>
     d8e:	e046      	b.n	e1e <_sercom_get_default_pad+0x13e>
     d90:	4b32      	ldr	r3, [pc, #200]	; (e5c <_sercom_get_default_pad+0x17c>)
     d92:	e045      	b.n	e20 <_sercom_get_default_pad+0x140>
     d94:	4b32      	ldr	r3, [pc, #200]	; (e60 <_sercom_get_default_pad+0x180>)
     d96:	e043      	b.n	e20 <_sercom_get_default_pad+0x140>
     d98:	4b32      	ldr	r3, [pc, #200]	; (e64 <_sercom_get_default_pad+0x184>)
     d9a:	e041      	b.n	e20 <_sercom_get_default_pad+0x140>
     d9c:	4b32      	ldr	r3, [pc, #200]	; (e68 <_sercom_get_default_pad+0x188>)
     d9e:	e03f      	b.n	e20 <_sercom_get_default_pad+0x140>
     da0:	1cfb      	adds	r3, r7, #3
     da2:	781b      	ldrb	r3, [r3, #0]
     da4:	2b01      	cmp	r3, #1
     da6:	d00a      	beq.n	dbe <_sercom_get_default_pad+0xde>
     da8:	dc02      	bgt.n	db0 <_sercom_get_default_pad+0xd0>
     daa:	2b00      	cmp	r3, #0
     dac:	d005      	beq.n	dba <_sercom_get_default_pad+0xda>
     dae:	e036      	b.n	e1e <_sercom_get_default_pad+0x13e>
     db0:	2b02      	cmp	r3, #2
     db2:	d006      	beq.n	dc2 <_sercom_get_default_pad+0xe2>
     db4:	2b03      	cmp	r3, #3
     db6:	d006      	beq.n	dc6 <_sercom_get_default_pad+0xe6>
     db8:	e031      	b.n	e1e <_sercom_get_default_pad+0x13e>
     dba:	4b2c      	ldr	r3, [pc, #176]	; (e6c <_sercom_get_default_pad+0x18c>)
     dbc:	e030      	b.n	e20 <_sercom_get_default_pad+0x140>
     dbe:	4b2c      	ldr	r3, [pc, #176]	; (e70 <_sercom_get_default_pad+0x190>)
     dc0:	e02e      	b.n	e20 <_sercom_get_default_pad+0x140>
     dc2:	4b2c      	ldr	r3, [pc, #176]	; (e74 <_sercom_get_default_pad+0x194>)
     dc4:	e02c      	b.n	e20 <_sercom_get_default_pad+0x140>
     dc6:	4b2c      	ldr	r3, [pc, #176]	; (e78 <_sercom_get_default_pad+0x198>)
     dc8:	e02a      	b.n	e20 <_sercom_get_default_pad+0x140>
     dca:	1cfb      	adds	r3, r7, #3
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	2b01      	cmp	r3, #1
     dd0:	d00a      	beq.n	de8 <_sercom_get_default_pad+0x108>
     dd2:	dc02      	bgt.n	dda <_sercom_get_default_pad+0xfa>
     dd4:	2b00      	cmp	r3, #0
     dd6:	d005      	beq.n	de4 <_sercom_get_default_pad+0x104>
     dd8:	e021      	b.n	e1e <_sercom_get_default_pad+0x13e>
     dda:	2b02      	cmp	r3, #2
     ddc:	d006      	beq.n	dec <_sercom_get_default_pad+0x10c>
     dde:	2b03      	cmp	r3, #3
     de0:	d006      	beq.n	df0 <_sercom_get_default_pad+0x110>
     de2:	e01c      	b.n	e1e <_sercom_get_default_pad+0x13e>
     de4:	4b25      	ldr	r3, [pc, #148]	; (e7c <_sercom_get_default_pad+0x19c>)
     de6:	e01b      	b.n	e20 <_sercom_get_default_pad+0x140>
     de8:	4b25      	ldr	r3, [pc, #148]	; (e80 <_sercom_get_default_pad+0x1a0>)
     dea:	e019      	b.n	e20 <_sercom_get_default_pad+0x140>
     dec:	4b25      	ldr	r3, [pc, #148]	; (e84 <_sercom_get_default_pad+0x1a4>)
     dee:	e017      	b.n	e20 <_sercom_get_default_pad+0x140>
     df0:	4b25      	ldr	r3, [pc, #148]	; (e88 <_sercom_get_default_pad+0x1a8>)
     df2:	e015      	b.n	e20 <_sercom_get_default_pad+0x140>
     df4:	1cfb      	adds	r3, r7, #3
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	2b01      	cmp	r3, #1
     dfa:	d00a      	beq.n	e12 <_sercom_get_default_pad+0x132>
     dfc:	dc02      	bgt.n	e04 <_sercom_get_default_pad+0x124>
     dfe:	2b00      	cmp	r3, #0
     e00:	d005      	beq.n	e0e <_sercom_get_default_pad+0x12e>
     e02:	e00c      	b.n	e1e <_sercom_get_default_pad+0x13e>
     e04:	2b02      	cmp	r3, #2
     e06:	d006      	beq.n	e16 <_sercom_get_default_pad+0x136>
     e08:	2b03      	cmp	r3, #3
     e0a:	d006      	beq.n	e1a <_sercom_get_default_pad+0x13a>
     e0c:	e007      	b.n	e1e <_sercom_get_default_pad+0x13e>
     e0e:	4b1f      	ldr	r3, [pc, #124]	; (e8c <_sercom_get_default_pad+0x1ac>)
     e10:	e006      	b.n	e20 <_sercom_get_default_pad+0x140>
     e12:	4b1f      	ldr	r3, [pc, #124]	; (e90 <_sercom_get_default_pad+0x1b0>)
     e14:	e004      	b.n	e20 <_sercom_get_default_pad+0x140>
     e16:	4b1f      	ldr	r3, [pc, #124]	; (e94 <_sercom_get_default_pad+0x1b4>)
     e18:	e002      	b.n	e20 <_sercom_get_default_pad+0x140>
     e1a:	4b1f      	ldr	r3, [pc, #124]	; (e98 <_sercom_get_default_pad+0x1b8>)
     e1c:	e000      	b.n	e20 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     e1e:	2300      	movs	r3, #0
}
     e20:	0018      	movs	r0, r3
     e22:	46bd      	mov	sp, r7
     e24:	b002      	add	sp, #8
     e26:	bd80      	pop	{r7, pc}
     e28:	42001000 	.word	0x42001000
     e2c:	42000800 	.word	0x42000800
     e30:	42000c00 	.word	0x42000c00
     e34:	42001800 	.word	0x42001800
     e38:	42001c00 	.word	0x42001c00
     e3c:	42001400 	.word	0x42001400
     e40:	00040003 	.word	0x00040003
     e44:	00050003 	.word	0x00050003
     e48:	00060003 	.word	0x00060003
     e4c:	00070003 	.word	0x00070003
     e50:	00010003 	.word	0x00010003
     e54:	001e0003 	.word	0x001e0003
     e58:	001f0003 	.word	0x001f0003
     e5c:	00080003 	.word	0x00080003
     e60:	00090003 	.word	0x00090003
     e64:	000a0003 	.word	0x000a0003
     e68:	000b0003 	.word	0x000b0003
     e6c:	00100003 	.word	0x00100003
     e70:	00110003 	.word	0x00110003
     e74:	00120003 	.word	0x00120003
     e78:	00130003 	.word	0x00130003
     e7c:	000c0003 	.word	0x000c0003
     e80:	000d0003 	.word	0x000d0003
     e84:	000e0003 	.word	0x000e0003
     e88:	000f0003 	.word	0x000f0003
     e8c:	00160003 	.word	0x00160003
     e90:	00170003 	.word	0x00170003
     e94:	00180003 	.word	0x00180003
     e98:	00190003 	.word	0x00190003

00000e9c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e9c:	b590      	push	{r4, r7, lr}
     e9e:	b08b      	sub	sp, #44	; 0x2c
     ea0:	af00      	add	r7, sp, #0
     ea2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ea4:	230c      	movs	r3, #12
     ea6:	18fb      	adds	r3, r7, r3
     ea8:	4a0f      	ldr	r2, [pc, #60]	; (ee8 <_sercom_get_sercom_inst_index+0x4c>)
     eaa:	ca13      	ldmia	r2!, {r0, r1, r4}
     eac:	c313      	stmia	r3!, {r0, r1, r4}
     eae:	ca13      	ldmia	r2!, {r0, r1, r4}
     eb0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb2:	2300      	movs	r3, #0
     eb4:	627b      	str	r3, [r7, #36]	; 0x24
     eb6:	e00e      	b.n	ed6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     eb8:	230c      	movs	r3, #12
     eba:	18fb      	adds	r3, r7, r3
     ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     ebe:	0092      	lsls	r2, r2, #2
     ec0:	58d3      	ldr	r3, [r2, r3]
     ec2:	001a      	movs	r2, r3
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	429a      	cmp	r2, r3
     ec8:	d102      	bne.n	ed0 <_sercom_get_sercom_inst_index+0x34>
			return i;
     eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ecc:	b2db      	uxtb	r3, r3
     ece:	e006      	b.n	ede <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ed2:	3301      	adds	r3, #1
     ed4:	627b      	str	r3, [r7, #36]	; 0x24
     ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ed8:	2b05      	cmp	r3, #5
     eda:	d9ed      	bls.n	eb8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     edc:	2300      	movs	r3, #0
}
     ede:	0018      	movs	r0, r3
     ee0:	46bd      	mov	sp, r7
     ee2:	b00b      	add	sp, #44	; 0x2c
     ee4:	bd90      	pop	{r4, r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00003970 	.word	0x00003970

00000eec <system_gclk_chan_get_config_defaults>:
{
     eec:	b580      	push	{r7, lr}
     eee:	b082      	sub	sp, #8
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     ef4:	687b      	ldr	r3, [r7, #4]
     ef6:	2200      	movs	r2, #0
     ef8:	701a      	strb	r2, [r3, #0]
}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	46bd      	mov	sp, r7
     efe:	b002      	add	sp, #8
     f00:	bd80      	pop	{r7, pc}
	...

00000f04 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     f04:	b580      	push	{r7, lr}
     f06:	b082      	sub	sp, #8
     f08:	af00      	add	r7, sp, #0
     f0a:	0002      	movs	r2, r0
     f0c:	6039      	str	r1, [r7, #0]
     f0e:	1dfb      	adds	r3, r7, #7
     f10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f12:	1dfb      	adds	r3, r7, #7
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	2b01      	cmp	r3, #1
     f18:	d00a      	beq.n	f30 <system_apb_clock_set_mask+0x2c>
     f1a:	2b02      	cmp	r3, #2
     f1c:	d00f      	beq.n	f3e <system_apb_clock_set_mask+0x3a>
     f1e:	2b00      	cmp	r3, #0
     f20:	d114      	bne.n	f4c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     f22:	4b0e      	ldr	r3, [pc, #56]	; (f5c <system_apb_clock_set_mask+0x58>)
     f24:	4a0d      	ldr	r2, [pc, #52]	; (f5c <system_apb_clock_set_mask+0x58>)
     f26:	6991      	ldr	r1, [r2, #24]
     f28:	683a      	ldr	r2, [r7, #0]
     f2a:	430a      	orrs	r2, r1
     f2c:	619a      	str	r2, [r3, #24]
			break;
     f2e:	e00f      	b.n	f50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     f30:	4b0a      	ldr	r3, [pc, #40]	; (f5c <system_apb_clock_set_mask+0x58>)
     f32:	4a0a      	ldr	r2, [pc, #40]	; (f5c <system_apb_clock_set_mask+0x58>)
     f34:	69d1      	ldr	r1, [r2, #28]
     f36:	683a      	ldr	r2, [r7, #0]
     f38:	430a      	orrs	r2, r1
     f3a:	61da      	str	r2, [r3, #28]
			break;
     f3c:	e008      	b.n	f50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f3e:	4b07      	ldr	r3, [pc, #28]	; (f5c <system_apb_clock_set_mask+0x58>)
     f40:	4a06      	ldr	r2, [pc, #24]	; (f5c <system_apb_clock_set_mask+0x58>)
     f42:	6a11      	ldr	r1, [r2, #32]
     f44:	683a      	ldr	r2, [r7, #0]
     f46:	430a      	orrs	r2, r1
     f48:	621a      	str	r2, [r3, #32]
			break;
     f4a:	e001      	b.n	f50 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     f4c:	2317      	movs	r3, #23
     f4e:	e000      	b.n	f52 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     f50:	2300      	movs	r3, #0
}
     f52:	0018      	movs	r0, r3
     f54:	46bd      	mov	sp, r7
     f56:	b002      	add	sp, #8
     f58:	bd80      	pop	{r7, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	40000400 	.word	0x40000400

00000f60 <system_pinmux_get_config_defaults>:
{
     f60:	b580      	push	{r7, lr}
     f62:	b082      	sub	sp, #8
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f68:	687b      	ldr	r3, [r7, #4]
     f6a:	2280      	movs	r2, #128	; 0x80
     f6c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	2200      	movs	r2, #0
     f72:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f74:	687b      	ldr	r3, [r7, #4]
     f76:	2201      	movs	r2, #1
     f78:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	2200      	movs	r2, #0
     f7e:	70da      	strb	r2, [r3, #3]
}
     f80:	46c0      	nop			; (mov r8, r8)
     f82:	46bd      	mov	sp, r7
     f84:	b002      	add	sp, #8
     f86:	bd80      	pop	{r7, pc}

00000f88 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     f88:	b580      	push	{r7, lr}
     f8a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f8c:	4b05      	ldr	r3, [pc, #20]	; (fa4 <system_is_debugger_present+0x1c>)
     f8e:	789b      	ldrb	r3, [r3, #2]
     f90:	b2db      	uxtb	r3, r3
     f92:	001a      	movs	r2, r3
     f94:	2302      	movs	r3, #2
     f96:	4013      	ands	r3, r2
     f98:	1e5a      	subs	r2, r3, #1
     f9a:	4193      	sbcs	r3, r2
     f9c:	b2db      	uxtb	r3, r3
}
     f9e:	0018      	movs	r0, r3
     fa0:	46bd      	mov	sp, r7
     fa2:	bd80      	pop	{r7, pc}
     fa4:	41002000 	.word	0x41002000

00000fa8 <usart_is_syncing>:
{
     fa8:	b580      	push	{r7, lr}
     faa:	b084      	sub	sp, #16
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
     fb6:	68fb      	ldr	r3, [r7, #12]
     fb8:	69db      	ldr	r3, [r3, #28]
     fba:	1e5a      	subs	r2, r3, #1
     fbc:	4193      	sbcs	r3, r2
     fbe:	b2db      	uxtb	r3, r3
}
     fc0:	0018      	movs	r0, r3
     fc2:	46bd      	mov	sp, r7
     fc4:	b004      	add	sp, #16
     fc6:	bd80      	pop	{r7, pc}

00000fc8 <_usart_wait_for_sync>:
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
     fd0:	46c0      	nop			; (mov r8, r8)
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	0018      	movs	r0, r3
     fd6:	4b04      	ldr	r3, [pc, #16]	; (fe8 <_usart_wait_for_sync+0x20>)
     fd8:	4798      	blx	r3
     fda:	1e03      	subs	r3, r0, #0
     fdc:	d1f9      	bne.n	fd2 <_usart_wait_for_sync+0xa>
}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	46bd      	mov	sp, r7
     fe2:	b002      	add	sp, #8
     fe4:	bd80      	pop	{r7, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	00000fa9 	.word	0x00000fa9

00000fec <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     fec:	b5b0      	push	{r4, r5, r7, lr}
     fee:	b08c      	sub	sp, #48	; 0x30
     ff0:	af02      	add	r7, sp, #8
     ff2:	6078      	str	r0, [r7, #4]
     ff4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	0018      	movs	r0, r3
    1002:	4bab      	ldr	r3, [pc, #684]	; (12b0 <_usart_set_config+0x2c4>)
    1004:	4798      	blx	r3
    1006:	0003      	movs	r3, r0
    1008:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    100a:	697b      	ldr	r3, [r7, #20]
    100c:	3314      	adds	r3, #20
    100e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    1010:	2300      	movs	r3, #0
    1012:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    1014:	2300      	movs	r3, #0
    1016:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1018:	230a      	movs	r3, #10
    101a:	18fb      	adds	r3, r7, r3
    101c:	2200      	movs	r2, #0
    101e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1020:	231f      	movs	r3, #31
    1022:	18fb      	adds	r3, r7, r3
    1024:	2200      	movs	r2, #0
    1026:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1028:	231e      	movs	r3, #30
    102a:	18fb      	adds	r3, r7, r3
    102c:	2210      	movs	r2, #16
    102e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1030:	683b      	ldr	r3, [r7, #0]
    1032:	8a1b      	ldrh	r3, [r3, #16]
    1034:	2280      	movs	r2, #128	; 0x80
    1036:	01d2      	lsls	r2, r2, #7
    1038:	4293      	cmp	r3, r2
    103a:	d01c      	beq.n	1076 <_usart_set_config+0x8a>
    103c:	2280      	movs	r2, #128	; 0x80
    103e:	01d2      	lsls	r2, r2, #7
    1040:	4293      	cmp	r3, r2
    1042:	dc06      	bgt.n	1052 <_usart_set_config+0x66>
    1044:	2b00      	cmp	r3, #0
    1046:	d00d      	beq.n	1064 <_usart_set_config+0x78>
    1048:	2280      	movs	r2, #128	; 0x80
    104a:	0192      	lsls	r2, r2, #6
    104c:	4293      	cmp	r3, r2
    104e:	d024      	beq.n	109a <_usart_set_config+0xae>
    1050:	e035      	b.n	10be <_usart_set_config+0xd2>
    1052:	22c0      	movs	r2, #192	; 0xc0
    1054:	01d2      	lsls	r2, r2, #7
    1056:	4293      	cmp	r3, r2
    1058:	d028      	beq.n	10ac <_usart_set_config+0xc0>
    105a:	2280      	movs	r2, #128	; 0x80
    105c:	0212      	lsls	r2, r2, #8
    105e:	4293      	cmp	r3, r2
    1060:	d012      	beq.n	1088 <_usart_set_config+0x9c>
    1062:	e02c      	b.n	10be <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1064:	231f      	movs	r3, #31
    1066:	18fb      	adds	r3, r7, r3
    1068:	2200      	movs	r2, #0
    106a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    106c:	231e      	movs	r3, #30
    106e:	18fb      	adds	r3, r7, r3
    1070:	2210      	movs	r2, #16
    1072:	701a      	strb	r2, [r3, #0]
			break;
    1074:	e023      	b.n	10be <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1076:	231f      	movs	r3, #31
    1078:	18fb      	adds	r3, r7, r3
    107a:	2200      	movs	r2, #0
    107c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    107e:	231e      	movs	r3, #30
    1080:	18fb      	adds	r3, r7, r3
    1082:	2208      	movs	r2, #8
    1084:	701a      	strb	r2, [r3, #0]
			break;
    1086:	e01a      	b.n	10be <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1088:	231f      	movs	r3, #31
    108a:	18fb      	adds	r3, r7, r3
    108c:	2200      	movs	r2, #0
    108e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1090:	231e      	movs	r3, #30
    1092:	18fb      	adds	r3, r7, r3
    1094:	2203      	movs	r2, #3
    1096:	701a      	strb	r2, [r3, #0]
			break;
    1098:	e011      	b.n	10be <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    109a:	231f      	movs	r3, #31
    109c:	18fb      	adds	r3, r7, r3
    109e:	2201      	movs	r2, #1
    10a0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10a2:	231e      	movs	r3, #30
    10a4:	18fb      	adds	r3, r7, r3
    10a6:	2210      	movs	r2, #16
    10a8:	701a      	strb	r2, [r3, #0]
			break;
    10aa:	e008      	b.n	10be <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10ac:	231f      	movs	r3, #31
    10ae:	18fb      	adds	r3, r7, r3
    10b0:	2201      	movs	r2, #1
    10b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10b4:	231e      	movs	r3, #30
    10b6:	18fb      	adds	r3, r7, r3
    10b8:	2208      	movs	r2, #8
    10ba:	701a      	strb	r2, [r3, #0]
			break;
    10bc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    10c2:	683b      	ldr	r3, [r7, #0]
    10c4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    10c6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    10c8:	683b      	ldr	r3, [r7, #0]
    10ca:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    10cc:	4313      	orrs	r3, r2
		config->sample_rate |
    10ce:	683a      	ldr	r2, [r7, #0]
    10d0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    10d2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10d4:	683a      	ldr	r2, [r7, #0]
    10d6:	7e12      	ldrb	r2, [r2, #24]
    10d8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    10da:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10dc:	683a      	ldr	r2, [r7, #0]
    10de:	2126      	movs	r1, #38	; 0x26
    10e0:	5c52      	ldrb	r2, [r2, r1]
    10e2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    10e4:	4313      	orrs	r3, r2
    10e6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    10e8:	231d      	movs	r3, #29
    10ea:	18fb      	adds	r3, r7, r3
    10ec:	2200      	movs	r2, #0
    10ee:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    10f0:	683b      	ldr	r3, [r7, #0]
    10f2:	685b      	ldr	r3, [r3, #4]
    10f4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    10f6:	68fb      	ldr	r3, [r7, #12]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d01e      	beq.n	113a <_usart_set_config+0x14e>
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	0552      	lsls	r2, r2, #21
    1100:	4293      	cmp	r3, r2
    1102:	d14f      	bne.n	11a4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1104:	683b      	ldr	r3, [r7, #0]
    1106:	2227      	movs	r2, #39	; 0x27
    1108:	5c9b      	ldrb	r3, [r3, r2]
    110a:	2201      	movs	r2, #1
    110c:	4053      	eors	r3, r2
    110e:	b2db      	uxtb	r3, r3
    1110:	2b00      	cmp	r3, #0
    1112:	d046      	beq.n	11a2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1114:	683b      	ldr	r3, [r7, #0]
    1116:	6a1d      	ldr	r5, [r3, #32]
    1118:	693b      	ldr	r3, [r7, #16]
    111a:	b2db      	uxtb	r3, r3
    111c:	0018      	movs	r0, r3
    111e:	4b65      	ldr	r3, [pc, #404]	; (12b4 <_usart_set_config+0x2c8>)
    1120:	4798      	blx	r3
    1122:	0001      	movs	r1, r0
    1124:	231d      	movs	r3, #29
    1126:	18fc      	adds	r4, r7, r3
    1128:	230a      	movs	r3, #10
    112a:	18fb      	adds	r3, r7, r3
    112c:	001a      	movs	r2, r3
    112e:	0028      	movs	r0, r5
    1130:	4b61      	ldr	r3, [pc, #388]	; (12b8 <_usart_set_config+0x2cc>)
    1132:	4798      	blx	r3
    1134:	0003      	movs	r3, r0
    1136:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1138:	e033      	b.n	11a2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	2227      	movs	r2, #39	; 0x27
    113e:	5c9b      	ldrb	r3, [r3, r2]
    1140:	2b00      	cmp	r3, #0
    1142:	d014      	beq.n	116e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1144:	683b      	ldr	r3, [r7, #0]
    1146:	6a18      	ldr	r0, [r3, #32]
    1148:	683b      	ldr	r3, [r7, #0]
    114a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    114c:	231d      	movs	r3, #29
    114e:	18fc      	adds	r4, r7, r3
    1150:	231f      	movs	r3, #31
    1152:	18fb      	adds	r3, r7, r3
    1154:	781d      	ldrb	r5, [r3, #0]
    1156:	230a      	movs	r3, #10
    1158:	18fa      	adds	r2, r7, r3
    115a:	231e      	movs	r3, #30
    115c:	18fb      	adds	r3, r7, r3
    115e:	781b      	ldrb	r3, [r3, #0]
    1160:	9300      	str	r3, [sp, #0]
    1162:	002b      	movs	r3, r5
    1164:	4d55      	ldr	r5, [pc, #340]	; (12bc <_usart_set_config+0x2d0>)
    1166:	47a8      	blx	r5
    1168:	0003      	movs	r3, r0
    116a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    116c:	e01a      	b.n	11a4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    116e:	683b      	ldr	r3, [r7, #0]
    1170:	6a1d      	ldr	r5, [r3, #32]
    1172:	693b      	ldr	r3, [r7, #16]
    1174:	b2db      	uxtb	r3, r3
    1176:	0018      	movs	r0, r3
    1178:	4b4e      	ldr	r3, [pc, #312]	; (12b4 <_usart_set_config+0x2c8>)
    117a:	4798      	blx	r3
				status_code =
    117c:	231d      	movs	r3, #29
    117e:	18fc      	adds	r4, r7, r3
    1180:	231f      	movs	r3, #31
    1182:	18fb      	adds	r3, r7, r3
    1184:	7819      	ldrb	r1, [r3, #0]
    1186:	230a      	movs	r3, #10
    1188:	18fa      	adds	r2, r7, r3
    118a:	231e      	movs	r3, #30
    118c:	18fb      	adds	r3, r7, r3
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	9300      	str	r3, [sp, #0]
    1192:	000b      	movs	r3, r1
    1194:	0001      	movs	r1, r0
    1196:	0028      	movs	r0, r5
    1198:	4d48      	ldr	r5, [pc, #288]	; (12bc <_usart_set_config+0x2d0>)
    119a:	47a8      	blx	r5
    119c:	0003      	movs	r3, r0
    119e:	7023      	strb	r3, [r4, #0]
			break;
    11a0:	e000      	b.n	11a4 <_usart_set_config+0x1b8>
			break;
    11a2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    11a4:	231d      	movs	r3, #29
    11a6:	18fb      	adds	r3, r7, r3
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d003      	beq.n	11b6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    11ae:	231d      	movs	r3, #29
    11b0:	18fb      	adds	r3, r7, r3
    11b2:	781b      	ldrb	r3, [r3, #0]
    11b4:	e077      	b.n	12a6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    11b6:	683b      	ldr	r3, [r7, #0]
    11b8:	7e5b      	ldrb	r3, [r3, #25]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d003      	beq.n	11c6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11be:	683b      	ldr	r3, [r7, #0]
    11c0:	7e9a      	ldrb	r2, [r3, #26]
    11c2:	69bb      	ldr	r3, [r7, #24]
    11c4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    11c6:	687b      	ldr	r3, [r7, #4]
    11c8:	0018      	movs	r0, r3
    11ca:	4b3d      	ldr	r3, [pc, #244]	; (12c0 <_usart_set_config+0x2d4>)
    11cc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    11ce:	230a      	movs	r3, #10
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	881a      	ldrh	r2, [r3, #0]
    11d4:	69bb      	ldr	r3, [r7, #24]
    11d6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    11d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11da:	68fb      	ldr	r3, [r7, #12]
    11dc:	4313      	orrs	r3, r2
    11de:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	2227      	movs	r2, #39	; 0x27
    11e4:	5c9b      	ldrb	r3, [r3, r2]
    11e6:	2201      	movs	r2, #1
    11e8:	4053      	eors	r3, r2
    11ea:	b2db      	uxtb	r3, r3
    11ec:	2b00      	cmp	r3, #0
    11ee:	d003      	beq.n	11f8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    11f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11f2:	2204      	movs	r2, #4
    11f4:	4313      	orrs	r3, r2
    11f6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11f8:	683b      	ldr	r3, [r7, #0]
    11fa:	7e5b      	ldrb	r3, [r3, #25]
    11fc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11fe:	683b      	ldr	r3, [r7, #0]
    1200:	7f1b      	ldrb	r3, [r3, #28]
    1202:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1204:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	7f5b      	ldrb	r3, [r3, #29]
    120a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    120c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    120e:	683b      	ldr	r3, [r7, #0]
    1210:	2124      	movs	r1, #36	; 0x24
    1212:	5c5b      	ldrb	r3, [r3, r1]
    1214:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1216:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1218:	683b      	ldr	r3, [r7, #0]
    121a:	2125      	movs	r1, #37	; 0x25
    121c:	5c5b      	ldrb	r3, [r3, r1]
    121e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1220:	4313      	orrs	r3, r2
	ctrlb =  
    1222:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1224:	683b      	ldr	r3, [r7, #0]
    1226:	7a9b      	ldrb	r3, [r3, #10]
    1228:	001a      	movs	r2, r3
    122a:	6a3b      	ldr	r3, [r7, #32]
    122c:	4313      	orrs	r3, r2
    122e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1230:	683b      	ldr	r3, [r7, #0]
    1232:	7adb      	ldrb	r3, [r3, #11]
    1234:	001a      	movs	r2, r3
    1236:	6a3b      	ldr	r3, [r7, #32]
    1238:	4313      	orrs	r3, r2
    123a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    123c:	683b      	ldr	r3, [r7, #0]
    123e:	891b      	ldrh	r3, [r3, #8]
    1240:	2bff      	cmp	r3, #255	; 0xff
    1242:	d00b      	beq.n	125c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1246:	2280      	movs	r2, #128	; 0x80
    1248:	0452      	lsls	r2, r2, #17
    124a:	4313      	orrs	r3, r2
    124c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    124e:	683b      	ldr	r3, [r7, #0]
    1250:	891b      	ldrh	r3, [r3, #8]
    1252:	001a      	movs	r2, r3
    1254:	6a3b      	ldr	r3, [r7, #32]
    1256:	4313      	orrs	r3, r2
    1258:	623b      	str	r3, [r7, #32]
    125a:	e008      	b.n	126e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    125c:	683b      	ldr	r3, [r7, #0]
    125e:	7edb      	ldrb	r3, [r3, #27]
    1260:	2b00      	cmp	r3, #0
    1262:	d004      	beq.n	126e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1266:	2280      	movs	r2, #128	; 0x80
    1268:	04d2      	lsls	r2, r2, #19
    126a:	4313      	orrs	r3, r2
    126c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    126e:	683b      	ldr	r3, [r7, #0]
    1270:	222c      	movs	r2, #44	; 0x2c
    1272:	5c9b      	ldrb	r3, [r3, r2]
    1274:	2b00      	cmp	r3, #0
    1276:	d103      	bne.n	1280 <_usart_set_config+0x294>
    1278:	4b12      	ldr	r3, [pc, #72]	; (12c4 <_usart_set_config+0x2d8>)
    127a:	4798      	blx	r3
    127c:	1e03      	subs	r3, r0, #0
    127e:	d003      	beq.n	1288 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	4313      	orrs	r3, r2
    1286:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	0018      	movs	r0, r3
    128c:	4b0c      	ldr	r3, [pc, #48]	; (12c0 <_usart_set_config+0x2d4>)
    128e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1290:	69bb      	ldr	r3, [r7, #24]
    1292:	6a3a      	ldr	r2, [r7, #32]
    1294:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	0018      	movs	r0, r3
    129a:	4b09      	ldr	r3, [pc, #36]	; (12c0 <_usart_set_config+0x2d4>)
    129c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    129e:	69bb      	ldr	r3, [r7, #24]
    12a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12a2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    12a4:	2300      	movs	r3, #0
}
    12a6:	0018      	movs	r0, r3
    12a8:	46bd      	mov	sp, r7
    12aa:	b00a      	add	sp, #40	; 0x28
    12ac:	bdb0      	pop	{r4, r5, r7, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	00000e9d 	.word	0x00000e9d
    12b4:	0000304d 	.word	0x0000304d
    12b8:	00000a17 	.word	0x00000a17
    12bc:	00000a95 	.word	0x00000a95
    12c0:	00000fc9 	.word	0x00000fc9
    12c4:	00000f89 	.word	0x00000f89

000012c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12c8:	b590      	push	{r4, r7, lr}
    12ca:	b093      	sub	sp, #76	; 0x4c
    12cc:	af00      	add	r7, sp, #0
    12ce:	60f8      	str	r0, [r7, #12]
    12d0:	60b9      	str	r1, [r7, #8]
    12d2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    12d4:	233b      	movs	r3, #59	; 0x3b
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	2200      	movs	r2, #0
    12da:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    12dc:	68fb      	ldr	r3, [r7, #12]
    12de:	68ba      	ldr	r2, [r7, #8]
    12e0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	681b      	ldr	r3, [r3, #0]
    12e6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12e8:	68fb      	ldr	r3, [r7, #12]
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	0018      	movs	r0, r3
    12ee:	4b86      	ldr	r3, [pc, #536]	; (1508 <usart_init+0x240>)
    12f0:	4798      	blx	r3
    12f2:	0003      	movs	r3, r0
    12f4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12f8:	3302      	adds	r3, #2
    12fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12fe:	3314      	adds	r3, #20
    1300:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	2201      	movs	r2, #1
    1308:	4013      	ands	r3, r2
    130a:	d001      	beq.n	1310 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    130c:	2305      	movs	r3, #5
    130e:	e0f6      	b.n	14fe <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	2202      	movs	r2, #2
    1316:	4013      	ands	r3, r2
    1318:	d001      	beq.n	131e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    131a:	231c      	movs	r3, #28
    131c:	e0ef      	b.n	14fe <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    131e:	2201      	movs	r2, #1
    1320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1322:	409a      	lsls	r2, r3
    1324:	0013      	movs	r3, r2
    1326:	0019      	movs	r1, r3
    1328:	2002      	movs	r0, #2
    132a:	4b78      	ldr	r3, [pc, #480]	; (150c <usart_init+0x244>)
    132c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    132e:	2324      	movs	r3, #36	; 0x24
    1330:	18fb      	adds	r3, r7, r3
    1332:	0018      	movs	r0, r3
    1334:	4b76      	ldr	r3, [pc, #472]	; (1510 <usart_init+0x248>)
    1336:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	222d      	movs	r2, #45	; 0x2d
    133c:	5c9a      	ldrb	r2, [r3, r2]
    133e:	2324      	movs	r3, #36	; 0x24
    1340:	18fb      	adds	r3, r7, r3
    1342:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1344:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1346:	b2db      	uxtb	r3, r3
    1348:	2224      	movs	r2, #36	; 0x24
    134a:	18ba      	adds	r2, r7, r2
    134c:	0011      	movs	r1, r2
    134e:	0018      	movs	r0, r3
    1350:	4b70      	ldr	r3, [pc, #448]	; (1514 <usart_init+0x24c>)
    1352:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1356:	b2db      	uxtb	r3, r3
    1358:	0018      	movs	r0, r3
    135a:	4b6f      	ldr	r3, [pc, #444]	; (1518 <usart_init+0x250>)
    135c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    135e:	687b      	ldr	r3, [r7, #4]
    1360:	222d      	movs	r2, #45	; 0x2d
    1362:	5c9b      	ldrb	r3, [r3, r2]
    1364:	2100      	movs	r1, #0
    1366:	0018      	movs	r0, r3
    1368:	4b6c      	ldr	r3, [pc, #432]	; (151c <usart_init+0x254>)
    136a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	7ada      	ldrb	r2, [r3, #11]
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	2224      	movs	r2, #36	; 0x24
    1378:	5c9a      	ldrb	r2, [r3, r2]
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    137e:	687b      	ldr	r3, [r7, #4]
    1380:	2225      	movs	r2, #37	; 0x25
    1382:	5c9a      	ldrb	r2, [r3, r2]
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	7eda      	ldrb	r2, [r3, #27]
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	7f1a      	ldrb	r2, [r3, #28]
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1398:	233b      	movs	r3, #59	; 0x3b
    139a:	18fc      	adds	r4, r7, r3
    139c:	687a      	ldr	r2, [r7, #4]
    139e:	68fb      	ldr	r3, [r7, #12]
    13a0:	0011      	movs	r1, r2
    13a2:	0018      	movs	r0, r3
    13a4:	4b5e      	ldr	r3, [pc, #376]	; (1520 <usart_init+0x258>)
    13a6:	4798      	blx	r3
    13a8:	0003      	movs	r3, r0
    13aa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    13ac:	233b      	movs	r3, #59	; 0x3b
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	2b00      	cmp	r3, #0
    13b4:	d003      	beq.n	13be <usart_init+0xf6>
		return status_code;
    13b6:	233b      	movs	r3, #59	; 0x3b
    13b8:	18fb      	adds	r3, r7, r3
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	e09f      	b.n	14fe <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    13be:	2320      	movs	r3, #32
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	0018      	movs	r0, r3
    13c4:	4b57      	ldr	r3, [pc, #348]	; (1524 <usart_init+0x25c>)
    13c6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    13c8:	2320      	movs	r3, #32
    13ca:	18fb      	adds	r3, r7, r3
    13cc:	2200      	movs	r2, #0
    13ce:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    13d0:	2320      	movs	r3, #32
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	2200      	movs	r2, #0
    13d6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    13d8:	687b      	ldr	r3, [r7, #4]
    13da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    13dc:	2310      	movs	r3, #16
    13de:	18fb      	adds	r3, r7, r3
    13e0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    13e6:	2310      	movs	r3, #16
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    13f0:	2310      	movs	r3, #16
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    13f6:	687b      	ldr	r3, [r7, #4]
    13f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    13fa:	2310      	movs	r3, #16
    13fc:	18fb      	adds	r3, r7, r3
    13fe:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1400:	2347      	movs	r3, #71	; 0x47
    1402:	18fb      	adds	r3, r7, r3
    1404:	2200      	movs	r2, #0
    1406:	701a      	strb	r2, [r3, #0]
    1408:	e02c      	b.n	1464 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    140a:	2347      	movs	r3, #71	; 0x47
    140c:	18fb      	adds	r3, r7, r3
    140e:	781a      	ldrb	r2, [r3, #0]
    1410:	2310      	movs	r3, #16
    1412:	18fb      	adds	r3, r7, r3
    1414:	0092      	lsls	r2, r2, #2
    1416:	58d3      	ldr	r3, [r2, r3]
    1418:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    141a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    141c:	2b00      	cmp	r3, #0
    141e:	d109      	bne.n	1434 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1420:	2347      	movs	r3, #71	; 0x47
    1422:	18fb      	adds	r3, r7, r3
    1424:	781a      	ldrb	r2, [r3, #0]
    1426:	68bb      	ldr	r3, [r7, #8]
    1428:	0011      	movs	r1, r2
    142a:	0018      	movs	r0, r3
    142c:	4b3e      	ldr	r3, [pc, #248]	; (1528 <usart_init+0x260>)
    142e:	4798      	blx	r3
    1430:	0003      	movs	r3, r0
    1432:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1436:	3301      	adds	r3, #1
    1438:	d00d      	beq.n	1456 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    143c:	b2da      	uxtb	r2, r3
    143e:	2320      	movs	r3, #32
    1440:	18fb      	adds	r3, r7, r3
    1442:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1446:	0c1b      	lsrs	r3, r3, #16
    1448:	b2db      	uxtb	r3, r3
    144a:	2220      	movs	r2, #32
    144c:	18ba      	adds	r2, r7, r2
    144e:	0011      	movs	r1, r2
    1450:	0018      	movs	r0, r3
    1452:	4b36      	ldr	r3, [pc, #216]	; (152c <usart_init+0x264>)
    1454:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1456:	2347      	movs	r3, #71	; 0x47
    1458:	18fb      	adds	r3, r7, r3
    145a:	781a      	ldrb	r2, [r3, #0]
    145c:	2347      	movs	r3, #71	; 0x47
    145e:	18fb      	adds	r3, r7, r3
    1460:	3201      	adds	r2, #1
    1462:	701a      	strb	r2, [r3, #0]
    1464:	2347      	movs	r3, #71	; 0x47
    1466:	18fb      	adds	r3, r7, r3
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	2b03      	cmp	r3, #3
    146c:	d9cd      	bls.n	140a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    146e:	2300      	movs	r3, #0
    1470:	63fb      	str	r3, [r7, #60]	; 0x3c
    1472:	e00a      	b.n	148a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1474:	68fa      	ldr	r2, [r7, #12]
    1476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1478:	3302      	adds	r3, #2
    147a:	009b      	lsls	r3, r3, #2
    147c:	18d3      	adds	r3, r2, r3
    147e:	3304      	adds	r3, #4
    1480:	2200      	movs	r2, #0
    1482:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1486:	3301      	adds	r3, #1
    1488:	63fb      	str	r3, [r7, #60]	; 0x3c
    148a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    148c:	2b05      	cmp	r3, #5
    148e:	d9f1      	bls.n	1474 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    1490:	68fb      	ldr	r3, [r7, #12]
    1492:	2200      	movs	r2, #0
    1494:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	2200      	movs	r2, #0
    149a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    149c:	68fb      	ldr	r3, [r7, #12]
    149e:	2200      	movs	r2, #0
    14a0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    14a2:	68fb      	ldr	r3, [r7, #12]
    14a4:	2200      	movs	r2, #0
    14a6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    14a8:	68fb      	ldr	r3, [r7, #12]
    14aa:	2230      	movs	r2, #48	; 0x30
    14ac:	2100      	movs	r1, #0
    14ae:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	2231      	movs	r2, #49	; 0x31
    14b4:	2100      	movs	r1, #0
    14b6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    14b8:	68fb      	ldr	r3, [r7, #12]
    14ba:	2232      	movs	r2, #50	; 0x32
    14bc:	2100      	movs	r1, #0
    14be:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    14c0:	68fb      	ldr	r3, [r7, #12]
    14c2:	2233      	movs	r2, #51	; 0x33
    14c4:	2100      	movs	r1, #0
    14c6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    14c8:	68fb      	ldr	r3, [r7, #12]
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	2227      	movs	r2, #39	; 0x27
    14ce:	18bc      	adds	r4, r7, r2
    14d0:	0018      	movs	r0, r3
    14d2:	4b0d      	ldr	r3, [pc, #52]	; (1508 <usart_init+0x240>)
    14d4:	4798      	blx	r3
    14d6:	0003      	movs	r3, r0
    14d8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    14da:	4a15      	ldr	r2, [pc, #84]	; (1530 <usart_init+0x268>)
    14dc:	2327      	movs	r3, #39	; 0x27
    14de:	18fb      	adds	r3, r7, r3
    14e0:	781b      	ldrb	r3, [r3, #0]
    14e2:	0011      	movs	r1, r2
    14e4:	0018      	movs	r0, r3
    14e6:	4b13      	ldr	r3, [pc, #76]	; (1534 <usart_init+0x26c>)
    14e8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14ea:	2327      	movs	r3, #39	; 0x27
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	781a      	ldrb	r2, [r3, #0]
    14f0:	4b11      	ldr	r3, [pc, #68]	; (1538 <usart_init+0x270>)
    14f2:	0092      	lsls	r2, r2, #2
    14f4:	68f9      	ldr	r1, [r7, #12]
    14f6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    14f8:	233b      	movs	r3, #59	; 0x3b
    14fa:	18fb      	adds	r3, r7, r3
    14fc:	781b      	ldrb	r3, [r3, #0]
}
    14fe:	0018      	movs	r0, r3
    1500:	46bd      	mov	sp, r7
    1502:	b013      	add	sp, #76	; 0x4c
    1504:	bd90      	pop	{r4, r7, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	00000e9d 	.word	0x00000e9d
    150c:	00000f05 	.word	0x00000f05
    1510:	00000eed 	.word	0x00000eed
    1514:	00002f29 	.word	0x00002f29
    1518:	00002f6d 	.word	0x00002f6d
    151c:	00000c55 	.word	0x00000c55
    1520:	00000fed 	.word	0x00000fed
    1524:	00000f61 	.word	0x00000f61
    1528:	00000ce1 	.word	0x00000ce1
    152c:	00003215 	.word	0x00003215
    1530:	00001841 	.word	0x00001841
    1534:	000025d9 	.word	0x000025d9
    1538:	20000174 	.word	0x20000174

0000153c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    153c:	b580      	push	{r7, lr}
    153e:	b084      	sub	sp, #16
    1540:	af00      	add	r7, sp, #0
    1542:	6078      	str	r0, [r7, #4]
    1544:	000a      	movs	r2, r1
    1546:	1cbb      	adds	r3, r7, #2
    1548:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	79db      	ldrb	r3, [r3, #7]
    1554:	2201      	movs	r2, #1
    1556:	4053      	eors	r3, r2
    1558:	b2db      	uxtb	r3, r3
    155a:	2b00      	cmp	r3, #0
    155c:	d001      	beq.n	1562 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    155e:	231c      	movs	r3, #28
    1560:	e017      	b.n	1592 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1566:	b29b      	uxth	r3, r3
    1568:	2b00      	cmp	r3, #0
    156a:	d001      	beq.n	1570 <usart_write_wait+0x34>
		return STATUS_BUSY;
    156c:	2305      	movs	r3, #5
    156e:	e010      	b.n	1592 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	0018      	movs	r0, r3
    1574:	4b09      	ldr	r3, [pc, #36]	; (159c <usart_write_wait+0x60>)
    1576:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	1cba      	adds	r2, r7, #2
    157c:	8812      	ldrh	r2, [r2, #0]
    157e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1580:	46c0      	nop			; (mov r8, r8)
    1582:	68fb      	ldr	r3, [r7, #12]
    1584:	7e1b      	ldrb	r3, [r3, #24]
    1586:	b2db      	uxtb	r3, r3
    1588:	001a      	movs	r2, r3
    158a:	2302      	movs	r3, #2
    158c:	4013      	ands	r3, r2
    158e:	d0f8      	beq.n	1582 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1590:	2300      	movs	r3, #0
}
    1592:	0018      	movs	r0, r3
    1594:	46bd      	mov	sp, r7
    1596:	b004      	add	sp, #16
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	00000fc9 	.word	0x00000fc9

000015a0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b08a      	sub	sp, #40	; 0x28
    15a4:	af00      	add	r7, sp, #0
    15a6:	60f8      	str	r0, [r7, #12]
    15a8:	60b9      	str	r1, [r7, #8]
    15aa:	1dbb      	adds	r3, r7, #6
    15ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    15ae:	1dbb      	adds	r3, r7, #6
    15b0:	881b      	ldrh	r3, [r3, #0]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d101      	bne.n	15ba <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    15b6:	2317      	movs	r3, #23
    15b8:	e07e      	b.n	16b8 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	79db      	ldrb	r3, [r3, #7]
    15be:	2201      	movs	r2, #1
    15c0:	4053      	eors	r3, r2
    15c2:	b2db      	uxtb	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	d001      	beq.n	15cc <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    15c8:	231c      	movs	r3, #28
    15ca:	e075      	b.n	16b8 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	0018      	movs	r0, r3
    15d6:	4b3a      	ldr	r3, [pc, #232]	; (16c0 <usart_write_buffer_wait+0x120>)
    15d8:	4798      	blx	r3

	uint16_t tx_pos = 0;
    15da:	2326      	movs	r3, #38	; 0x26
    15dc:	18fb      	adds	r3, r7, r3
    15de:	2200      	movs	r2, #0
    15e0:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    15e2:	e048      	b.n	1676 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    15e4:	2300      	movs	r3, #0
    15e6:	623b      	str	r3, [r7, #32]
    15e8:	e00f      	b.n	160a <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    15ea:	697b      	ldr	r3, [r7, #20]
    15ec:	7e1b      	ldrb	r3, [r3, #24]
    15ee:	b2db      	uxtb	r3, r3
    15f0:	001a      	movs	r2, r3
    15f2:	2301      	movs	r3, #1
    15f4:	4013      	ands	r3, r2
    15f6:	d10d      	bne.n	1614 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    15f8:	6a3b      	ldr	r3, [r7, #32]
    15fa:	4a32      	ldr	r2, [pc, #200]	; (16c4 <usart_write_buffer_wait+0x124>)
    15fc:	4293      	cmp	r3, r2
    15fe:	d101      	bne.n	1604 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    1600:	2312      	movs	r3, #18
    1602:	e059      	b.n	16b8 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1604:	6a3b      	ldr	r3, [r7, #32]
    1606:	3301      	adds	r3, #1
    1608:	623b      	str	r3, [r7, #32]
    160a:	6a3b      	ldr	r3, [r7, #32]
    160c:	4a2d      	ldr	r2, [pc, #180]	; (16c4 <usart_write_buffer_wait+0x124>)
    160e:	4293      	cmp	r3, r2
    1610:	d9eb      	bls.n	15ea <usart_write_buffer_wait+0x4a>
    1612:	e000      	b.n	1616 <usart_write_buffer_wait+0x76>
				break;
    1614:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1616:	2326      	movs	r3, #38	; 0x26
    1618:	18fb      	adds	r3, r7, r3
    161a:	881b      	ldrh	r3, [r3, #0]
    161c:	2226      	movs	r2, #38	; 0x26
    161e:	18ba      	adds	r2, r7, r2
    1620:	1c59      	adds	r1, r3, #1
    1622:	8011      	strh	r1, [r2, #0]
    1624:	001a      	movs	r2, r3
    1626:	68bb      	ldr	r3, [r7, #8]
    1628:	189b      	adds	r3, r3, r2
    162a:	781a      	ldrb	r2, [r3, #0]
    162c:	231e      	movs	r3, #30
    162e:	18fb      	adds	r3, r7, r3
    1630:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1632:	68fb      	ldr	r3, [r7, #12]
    1634:	795b      	ldrb	r3, [r3, #5]
    1636:	2b01      	cmp	r3, #1
    1638:	d115      	bne.n	1666 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    163a:	2326      	movs	r3, #38	; 0x26
    163c:	18fb      	adds	r3, r7, r3
    163e:	881b      	ldrh	r3, [r3, #0]
    1640:	2226      	movs	r2, #38	; 0x26
    1642:	18ba      	adds	r2, r7, r2
    1644:	1c59      	adds	r1, r3, #1
    1646:	8011      	strh	r1, [r2, #0]
    1648:	001a      	movs	r2, r3
    164a:	68bb      	ldr	r3, [r7, #8]
    164c:	189b      	adds	r3, r3, r2
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	021b      	lsls	r3, r3, #8
    1652:	b21a      	sxth	r2, r3
    1654:	231e      	movs	r3, #30
    1656:	18fb      	adds	r3, r7, r3
    1658:	2100      	movs	r1, #0
    165a:	5e5b      	ldrsh	r3, [r3, r1]
    165c:	4313      	orrs	r3, r2
    165e:	b21a      	sxth	r2, r3
    1660:	231e      	movs	r3, #30
    1662:	18fb      	adds	r3, r7, r3
    1664:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1666:	231e      	movs	r3, #30
    1668:	18fb      	adds	r3, r7, r3
    166a:	881a      	ldrh	r2, [r3, #0]
    166c:	68fb      	ldr	r3, [r7, #12]
    166e:	0011      	movs	r1, r2
    1670:	0018      	movs	r0, r3
    1672:	4b15      	ldr	r3, [pc, #84]	; (16c8 <usart_write_buffer_wait+0x128>)
    1674:	4798      	blx	r3
	while (length--) {
    1676:	1dbb      	adds	r3, r7, #6
    1678:	881b      	ldrh	r3, [r3, #0]
    167a:	1dba      	adds	r2, r7, #6
    167c:	1e59      	subs	r1, r3, #1
    167e:	8011      	strh	r1, [r2, #0]
    1680:	2b00      	cmp	r3, #0
    1682:	d1af      	bne.n	15e4 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1684:	2300      	movs	r3, #0
    1686:	61bb      	str	r3, [r7, #24]
    1688:	e00f      	b.n	16aa <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    168a:	697b      	ldr	r3, [r7, #20]
    168c:	7e1b      	ldrb	r3, [r3, #24]
    168e:	b2db      	uxtb	r3, r3
    1690:	001a      	movs	r2, r3
    1692:	2302      	movs	r3, #2
    1694:	4013      	ands	r3, r2
    1696:	d10d      	bne.n	16b4 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1698:	69bb      	ldr	r3, [r7, #24]
    169a:	4a0a      	ldr	r2, [pc, #40]	; (16c4 <usart_write_buffer_wait+0x124>)
    169c:	4293      	cmp	r3, r2
    169e:	d101      	bne.n	16a4 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    16a0:	2312      	movs	r3, #18
    16a2:	e009      	b.n	16b8 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    16a4:	69bb      	ldr	r3, [r7, #24]
    16a6:	3301      	adds	r3, #1
    16a8:	61bb      	str	r3, [r7, #24]
    16aa:	69bb      	ldr	r3, [r7, #24]
    16ac:	4a05      	ldr	r2, [pc, #20]	; (16c4 <usart_write_buffer_wait+0x124>)
    16ae:	4293      	cmp	r3, r2
    16b0:	d9eb      	bls.n	168a <usart_write_buffer_wait+0xea>
    16b2:	e000      	b.n	16b6 <usart_write_buffer_wait+0x116>
			break;
    16b4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    16b6:	2300      	movs	r3, #0
}
    16b8:	0018      	movs	r0, r3
    16ba:	46bd      	mov	sp, r7
    16bc:	b00a      	add	sp, #40	; 0x28
    16be:	bd80      	pop	{r7, pc}
    16c0:	00000fc9 	.word	0x00000fc9
    16c4:	0000ffff 	.word	0x0000ffff
    16c8:	0000153d 	.word	0x0000153d

000016cc <system_interrupt_enter_critical_section>:
{
    16cc:	b580      	push	{r7, lr}
    16ce:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    16d0:	4b02      	ldr	r3, [pc, #8]	; (16dc <system_interrupt_enter_critical_section+0x10>)
    16d2:	4798      	blx	r3
}
    16d4:	46c0      	nop			; (mov r8, r8)
    16d6:	46bd      	mov	sp, r7
    16d8:	bd80      	pop	{r7, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00002725 	.word	0x00002725

000016e0 <system_interrupt_leave_critical_section>:
{
    16e0:	b580      	push	{r7, lr}
    16e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    16e4:	4b02      	ldr	r3, [pc, #8]	; (16f0 <system_interrupt_leave_critical_section+0x10>)
    16e6:	4798      	blx	r3
}
    16e8:	46c0      	nop			; (mov r8, r8)
    16ea:	46bd      	mov	sp, r7
    16ec:	bd80      	pop	{r7, pc}
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	00002779 	.word	0x00002779

000016f4 <usart_is_syncing>:
{
    16f4:	b580      	push	{r7, lr}
    16f6:	b084      	sub	sp, #16
    16f8:	af00      	add	r7, sp, #0
    16fa:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    16fc:	687b      	ldr	r3, [r7, #4]
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    1702:	68fb      	ldr	r3, [r7, #12]
    1704:	69db      	ldr	r3, [r3, #28]
    1706:	1e5a      	subs	r2, r3, #1
    1708:	4193      	sbcs	r3, r2
    170a:	b2db      	uxtb	r3, r3
}
    170c:	0018      	movs	r0, r3
    170e:	46bd      	mov	sp, r7
    1710:	b004      	add	sp, #16
    1712:	bd80      	pop	{r7, pc}

00001714 <_usart_wait_for_sync>:
{
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    171c:	46c0      	nop			; (mov r8, r8)
    171e:	687b      	ldr	r3, [r7, #4]
    1720:	0018      	movs	r0, r3
    1722:	4b04      	ldr	r3, [pc, #16]	; (1734 <_usart_wait_for_sync+0x20>)
    1724:	4798      	blx	r3
    1726:	1e03      	subs	r3, r0, #0
    1728:	d1f9      	bne.n	171e <_usart_wait_for_sync+0xa>
}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	46bd      	mov	sp, r7
    172e:	b002      	add	sp, #8
    1730:	bd80      	pop	{r7, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	000016f5 	.word	0x000016f5

00001738 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1738:	b580      	push	{r7, lr}
    173a:	b086      	sub	sp, #24
    173c:	af00      	add	r7, sp, #0
    173e:	60f8      	str	r0, [r7, #12]
    1740:	60b9      	str	r1, [r7, #8]
    1742:	1dbb      	adds	r3, r7, #6
    1744:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	681b      	ldr	r3, [r3, #0]
    174a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    174c:	4b16      	ldr	r3, [pc, #88]	; (17a8 <_usart_read_buffer+0x70>)
    174e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1750:	68fb      	ldr	r3, [r7, #12]
    1752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1754:	b29b      	uxth	r3, r3
    1756:	2b00      	cmp	r3, #0
    1758:	d003      	beq.n	1762 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    175a:	4b14      	ldr	r3, [pc, #80]	; (17ac <_usart_read_buffer+0x74>)
    175c:	4798      	blx	r3
		return STATUS_BUSY;
    175e:	2305      	movs	r3, #5
    1760:	e01e      	b.n	17a0 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	1dba      	adds	r2, r7, #6
    1766:	8812      	ldrh	r2, [r2, #0]
    1768:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    176a:	4b10      	ldr	r3, [pc, #64]	; (17ac <_usart_read_buffer+0x74>)
    176c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	68ba      	ldr	r2, [r7, #8]
    1772:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	2232      	movs	r2, #50	; 0x32
    1778:	2105      	movs	r1, #5
    177a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    177c:	697b      	ldr	r3, [r7, #20]
    177e:	2204      	movs	r2, #4
    1780:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	7a1b      	ldrb	r3, [r3, #8]
    1786:	2b00      	cmp	r3, #0
    1788:	d002      	beq.n	1790 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    178a:	697b      	ldr	r3, [r7, #20]
    178c:	2220      	movs	r2, #32
    178e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	7a5b      	ldrb	r3, [r3, #9]
    1794:	2b00      	cmp	r3, #0
    1796:	d002      	beq.n	179e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1798:	697b      	ldr	r3, [r7, #20]
    179a:	2208      	movs	r2, #8
    179c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    179e:	2300      	movs	r3, #0
}
    17a0:	0018      	movs	r0, r3
    17a2:	46bd      	mov	sp, r7
    17a4:	b006      	add	sp, #24
    17a6:	bd80      	pop	{r7, pc}
    17a8:	000016cd 	.word	0x000016cd
    17ac:	000016e1 	.word	0x000016e1

000017b0 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    17b0:	b580      	push	{r7, lr}
    17b2:	b084      	sub	sp, #16
    17b4:	af00      	add	r7, sp, #0
    17b6:	60f8      	str	r0, [r7, #12]
    17b8:	60b9      	str	r1, [r7, #8]
    17ba:	1dfb      	adds	r3, r7, #7
    17bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17be:	1dfb      	adds	r3, r7, #7
    17c0:	781b      	ldrb	r3, [r3, #0]
    17c2:	68fa      	ldr	r2, [r7, #12]
    17c4:	3302      	adds	r3, #2
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	18d3      	adds	r3, r2, r3
    17ca:	3304      	adds	r3, #4
    17cc:	68ba      	ldr	r2, [r7, #8]
    17ce:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	2230      	movs	r2, #48	; 0x30
    17d4:	5c9b      	ldrb	r3, [r3, r2]
    17d6:	b25a      	sxtb	r2, r3
    17d8:	1dfb      	adds	r3, r7, #7
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2101      	movs	r1, #1
    17de:	4099      	lsls	r1, r3
    17e0:	000b      	movs	r3, r1
    17e2:	b25b      	sxtb	r3, r3
    17e4:	4313      	orrs	r3, r2
    17e6:	b25b      	sxtb	r3, r3
    17e8:	b2d9      	uxtb	r1, r3
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	2230      	movs	r2, #48	; 0x30
    17ee:	5499      	strb	r1, [r3, r2]
}
    17f0:	46c0      	nop			; (mov r8, r8)
    17f2:	46bd      	mov	sp, r7
    17f4:	b004      	add	sp, #16
    17f6:	bd80      	pop	{r7, pc}

000017f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b084      	sub	sp, #16
    17fc:	af00      	add	r7, sp, #0
    17fe:	60f8      	str	r0, [r7, #12]
    1800:	60b9      	str	r1, [r7, #8]
    1802:	1dbb      	adds	r3, r7, #6
    1804:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1806:	1dbb      	adds	r3, r7, #6
    1808:	881b      	ldrh	r3, [r3, #0]
    180a:	2b00      	cmp	r3, #0
    180c:	d101      	bne.n	1812 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    180e:	2317      	movs	r3, #23
    1810:	e010      	b.n	1834 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	799b      	ldrb	r3, [r3, #6]
    1816:	2201      	movs	r2, #1
    1818:	4053      	eors	r3, r2
    181a:	b2db      	uxtb	r3, r3
    181c:	2b00      	cmp	r3, #0
    181e:	d001      	beq.n	1824 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    1820:	231c      	movs	r3, #28
    1822:	e007      	b.n	1834 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    1824:	1dbb      	adds	r3, r7, #6
    1826:	881a      	ldrh	r2, [r3, #0]
    1828:	68b9      	ldr	r1, [r7, #8]
    182a:	68fb      	ldr	r3, [r7, #12]
    182c:	0018      	movs	r0, r3
    182e:	4b03      	ldr	r3, [pc, #12]	; (183c <usart_read_buffer_job+0x44>)
    1830:	4798      	blx	r3
    1832:	0003      	movs	r3, r0
}
    1834:	0018      	movs	r0, r3
    1836:	46bd      	mov	sp, r7
    1838:	b004      	add	sp, #16
    183a:	bd80      	pop	{r7, pc}
    183c:	00001739 	.word	0x00001739

00001840 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1840:	b580      	push	{r7, lr}
    1842:	b088      	sub	sp, #32
    1844:	af00      	add	r7, sp, #0
    1846:	0002      	movs	r2, r0
    1848:	1dfb      	adds	r3, r7, #7
    184a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    184c:	1dfb      	adds	r3, r7, #7
    184e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    1850:	4ba3      	ldr	r3, [pc, #652]	; (1ae0 <_usart_interrupt_handler+0x2a0>)
    1852:	0092      	lsls	r2, r2, #2
    1854:	58d3      	ldr	r3, [r2, r3]
    1856:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1858:	69bb      	ldr	r3, [r7, #24]
    185a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    185c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    185e:	69bb      	ldr	r3, [r7, #24]
    1860:	0018      	movs	r0, r3
    1862:	4ba0      	ldr	r3, [pc, #640]	; (1ae4 <_usart_interrupt_handler+0x2a4>)
    1864:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1866:	697b      	ldr	r3, [r7, #20]
    1868:	7e1b      	ldrb	r3, [r3, #24]
    186a:	b2da      	uxtb	r2, r3
    186c:	2312      	movs	r3, #18
    186e:	18fb      	adds	r3, r7, r3
    1870:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1872:	697b      	ldr	r3, [r7, #20]
    1874:	7d9b      	ldrb	r3, [r3, #22]
    1876:	b2db      	uxtb	r3, r3
    1878:	b29a      	uxth	r2, r3
    187a:	2312      	movs	r3, #18
    187c:	18fb      	adds	r3, r7, r3
    187e:	2112      	movs	r1, #18
    1880:	1879      	adds	r1, r7, r1
    1882:	8809      	ldrh	r1, [r1, #0]
    1884:	400a      	ands	r2, r1
    1886:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1888:	69bb      	ldr	r3, [r7, #24]
    188a:	2230      	movs	r2, #48	; 0x30
    188c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    188e:	69ba      	ldr	r2, [r7, #24]
    1890:	2131      	movs	r1, #49	; 0x31
    1892:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1894:	4013      	ands	r3, r2
    1896:	b2da      	uxtb	r2, r3
    1898:	2310      	movs	r3, #16
    189a:	18fb      	adds	r3, r7, r3
    189c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    189e:	2312      	movs	r3, #18
    18a0:	18fb      	adds	r3, r7, r3
    18a2:	881b      	ldrh	r3, [r3, #0]
    18a4:	2201      	movs	r2, #1
    18a6:	4013      	ands	r3, r2
    18a8:	d044      	beq.n	1934 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    18aa:	69bb      	ldr	r3, [r7, #24]
    18ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    18ae:	b29b      	uxth	r3, r3
    18b0:	2b00      	cmp	r3, #0
    18b2:	d03c      	beq.n	192e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18b4:	69bb      	ldr	r3, [r7, #24]
    18b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b8:	781b      	ldrb	r3, [r3, #0]
    18ba:	b2da      	uxtb	r2, r3
    18bc:	231c      	movs	r3, #28
    18be:	18fb      	adds	r3, r7, r3
    18c0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18c2:	69bb      	ldr	r3, [r7, #24]
    18c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18c6:	1c5a      	adds	r2, r3, #1
    18c8:	69bb      	ldr	r3, [r7, #24]
    18ca:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18cc:	69bb      	ldr	r3, [r7, #24]
    18ce:	795b      	ldrb	r3, [r3, #5]
    18d0:	2b01      	cmp	r3, #1
    18d2:	d113      	bne.n	18fc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18d4:	69bb      	ldr	r3, [r7, #24]
    18d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	b2db      	uxtb	r3, r3
    18dc:	021b      	lsls	r3, r3, #8
    18de:	b21a      	sxth	r2, r3
    18e0:	231c      	movs	r3, #28
    18e2:	18fb      	adds	r3, r7, r3
    18e4:	2100      	movs	r1, #0
    18e6:	5e5b      	ldrsh	r3, [r3, r1]
    18e8:	4313      	orrs	r3, r2
    18ea:	b21a      	sxth	r2, r3
    18ec:	231c      	movs	r3, #28
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    18f2:	69bb      	ldr	r3, [r7, #24]
    18f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18f6:	1c5a      	adds	r2, r3, #1
    18f8:	69bb      	ldr	r3, [r7, #24]
    18fa:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18fc:	231c      	movs	r3, #28
    18fe:	18fb      	adds	r3, r7, r3
    1900:	881b      	ldrh	r3, [r3, #0]
    1902:	05db      	lsls	r3, r3, #23
    1904:	0ddb      	lsrs	r3, r3, #23
    1906:	b29a      	uxth	r2, r3
    1908:	697b      	ldr	r3, [r7, #20]
    190a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    190c:	69bb      	ldr	r3, [r7, #24]
    190e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1910:	b29b      	uxth	r3, r3
    1912:	3b01      	subs	r3, #1
    1914:	b29b      	uxth	r3, r3
    1916:	69ba      	ldr	r2, [r7, #24]
    1918:	1c19      	adds	r1, r3, #0
    191a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    191c:	2b00      	cmp	r3, #0
    191e:	d109      	bne.n	1934 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1920:	697b      	ldr	r3, [r7, #20]
    1922:	2201      	movs	r2, #1
    1924:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1926:	697b      	ldr	r3, [r7, #20]
    1928:	2202      	movs	r2, #2
    192a:	759a      	strb	r2, [r3, #22]
    192c:	e002      	b.n	1934 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    192e:	697b      	ldr	r3, [r7, #20]
    1930:	2201      	movs	r2, #1
    1932:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1934:	2312      	movs	r3, #18
    1936:	18fb      	adds	r3, r7, r3
    1938:	881b      	ldrh	r3, [r3, #0]
    193a:	2202      	movs	r2, #2
    193c:	4013      	ands	r3, r2
    193e:	d011      	beq.n	1964 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1940:	697b      	ldr	r3, [r7, #20]
    1942:	2202      	movs	r2, #2
    1944:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1946:	69bb      	ldr	r3, [r7, #24]
    1948:	2233      	movs	r2, #51	; 0x33
    194a:	2100      	movs	r1, #0
    194c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    194e:	2310      	movs	r3, #16
    1950:	18fb      	adds	r3, r7, r3
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	2201      	movs	r2, #1
    1956:	4013      	ands	r3, r2
    1958:	d004      	beq.n	1964 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    195a:	69bb      	ldr	r3, [r7, #24]
    195c:	68db      	ldr	r3, [r3, #12]
    195e:	69ba      	ldr	r2, [r7, #24]
    1960:	0010      	movs	r0, r2
    1962:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1964:	2312      	movs	r3, #18
    1966:	18fb      	adds	r3, r7, r3
    1968:	881b      	ldrh	r3, [r3, #0]
    196a:	2204      	movs	r2, #4
    196c:	4013      	ands	r3, r2
    196e:	d100      	bne.n	1972 <_usart_interrupt_handler+0x132>
    1970:	e0bd      	b.n	1aee <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    1972:	69bb      	ldr	r3, [r7, #24]
    1974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1976:	b29b      	uxth	r3, r3
    1978:	2b00      	cmp	r3, #0
    197a:	d100      	bne.n	197e <_usart_interrupt_handler+0x13e>
    197c:	e0b4      	b.n	1ae8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    197e:	697b      	ldr	r3, [r7, #20]
    1980:	8b5b      	ldrh	r3, [r3, #26]
    1982:	b29b      	uxth	r3, r3
    1984:	b2da      	uxtb	r2, r3
    1986:	231f      	movs	r3, #31
    1988:	18fb      	adds	r3, r7, r3
    198a:	213f      	movs	r1, #63	; 0x3f
    198c:	400a      	ands	r2, r1
    198e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1990:	231f      	movs	r3, #31
    1992:	18fb      	adds	r3, r7, r3
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	2208      	movs	r2, #8
    1998:	4013      	ands	r3, r2
    199a:	d007      	beq.n	19ac <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    199c:	231f      	movs	r3, #31
    199e:	18fb      	adds	r3, r7, r3
    19a0:	221f      	movs	r2, #31
    19a2:	18ba      	adds	r2, r7, r2
    19a4:	7812      	ldrb	r2, [r2, #0]
    19a6:	2108      	movs	r1, #8
    19a8:	438a      	bics	r2, r1
    19aa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    19ac:	231f      	movs	r3, #31
    19ae:	18fb      	adds	r3, r7, r3
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d050      	beq.n	1a58 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    19b6:	231f      	movs	r3, #31
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	2202      	movs	r2, #2
    19be:	4013      	ands	r3, r2
    19c0:	d007      	beq.n	19d2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    19c2:	69bb      	ldr	r3, [r7, #24]
    19c4:	2232      	movs	r2, #50	; 0x32
    19c6:	211a      	movs	r1, #26
    19c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    19ca:	697b      	ldr	r3, [r7, #20]
    19cc:	2202      	movs	r2, #2
    19ce:	835a      	strh	r2, [r3, #26]
    19d0:	e036      	b.n	1a40 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19d2:	231f      	movs	r3, #31
    19d4:	18fb      	adds	r3, r7, r3
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	2204      	movs	r2, #4
    19da:	4013      	ands	r3, r2
    19dc:	d007      	beq.n	19ee <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    19de:	69bb      	ldr	r3, [r7, #24]
    19e0:	2232      	movs	r2, #50	; 0x32
    19e2:	211e      	movs	r1, #30
    19e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19e6:	697b      	ldr	r3, [r7, #20]
    19e8:	2204      	movs	r2, #4
    19ea:	835a      	strh	r2, [r3, #26]
    19ec:	e028      	b.n	1a40 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19ee:	231f      	movs	r3, #31
    19f0:	18fb      	adds	r3, r7, r3
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	2201      	movs	r2, #1
    19f6:	4013      	ands	r3, r2
    19f8:	d007      	beq.n	1a0a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    19fa:	69bb      	ldr	r3, [r7, #24]
    19fc:	2232      	movs	r2, #50	; 0x32
    19fe:	2113      	movs	r1, #19
    1a00:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1a02:	697b      	ldr	r3, [r7, #20]
    1a04:	2201      	movs	r2, #1
    1a06:	835a      	strh	r2, [r3, #26]
    1a08:	e01a      	b.n	1a40 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1a0a:	231f      	movs	r3, #31
    1a0c:	18fb      	adds	r3, r7, r3
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	2210      	movs	r2, #16
    1a12:	4013      	ands	r3, r2
    1a14:	d007      	beq.n	1a26 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1a16:	69bb      	ldr	r3, [r7, #24]
    1a18:	2232      	movs	r2, #50	; 0x32
    1a1a:	2142      	movs	r1, #66	; 0x42
    1a1c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1a1e:	697b      	ldr	r3, [r7, #20]
    1a20:	2210      	movs	r2, #16
    1a22:	835a      	strh	r2, [r3, #26]
    1a24:	e00c      	b.n	1a40 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1a26:	231f      	movs	r3, #31
    1a28:	18fb      	adds	r3, r7, r3
    1a2a:	781b      	ldrb	r3, [r3, #0]
    1a2c:	2220      	movs	r2, #32
    1a2e:	4013      	ands	r3, r2
    1a30:	d006      	beq.n	1a40 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1a32:	69bb      	ldr	r3, [r7, #24]
    1a34:	2232      	movs	r2, #50	; 0x32
    1a36:	2141      	movs	r1, #65	; 0x41
    1a38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1a3a:	697b      	ldr	r3, [r7, #20]
    1a3c:	2220      	movs	r2, #32
    1a3e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1a40:	2310      	movs	r3, #16
    1a42:	18fb      	adds	r3, r7, r3
    1a44:	881b      	ldrh	r3, [r3, #0]
    1a46:	2204      	movs	r2, #4
    1a48:	4013      	ands	r3, r2
				if (callback_status
    1a4a:	d050      	beq.n	1aee <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1a4c:	69bb      	ldr	r3, [r7, #24]
    1a4e:	695b      	ldr	r3, [r3, #20]
    1a50:	69ba      	ldr	r2, [r7, #24]
    1a52:	0010      	movs	r0, r2
    1a54:	4798      	blx	r3
    1a56:	e04a      	b.n	1aee <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1a58:	697b      	ldr	r3, [r7, #20]
    1a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a5c:	b29a      	uxth	r2, r3
    1a5e:	230e      	movs	r3, #14
    1a60:	18fb      	adds	r3, r7, r3
    1a62:	05d2      	lsls	r2, r2, #23
    1a64:	0dd2      	lsrs	r2, r2, #23
    1a66:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a68:	69bb      	ldr	r3, [r7, #24]
    1a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a6c:	220e      	movs	r2, #14
    1a6e:	18ba      	adds	r2, r7, r2
    1a70:	8812      	ldrh	r2, [r2, #0]
    1a72:	b2d2      	uxtb	r2, r2
    1a74:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a76:	69bb      	ldr	r3, [r7, #24]
    1a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a7a:	1c5a      	adds	r2, r3, #1
    1a7c:	69bb      	ldr	r3, [r7, #24]
    1a7e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a80:	69bb      	ldr	r3, [r7, #24]
    1a82:	795b      	ldrb	r3, [r3, #5]
    1a84:	2b01      	cmp	r3, #1
    1a86:	d10d      	bne.n	1aa4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a88:	69bb      	ldr	r3, [r7, #24]
    1a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a8c:	220e      	movs	r2, #14
    1a8e:	18ba      	adds	r2, r7, r2
    1a90:	8812      	ldrh	r2, [r2, #0]
    1a92:	0a12      	lsrs	r2, r2, #8
    1a94:	b292      	uxth	r2, r2
    1a96:	b2d2      	uxtb	r2, r2
    1a98:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a9a:	69bb      	ldr	r3, [r7, #24]
    1a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a9e:	1c5a      	adds	r2, r3, #1
    1aa0:	69bb      	ldr	r3, [r7, #24]
    1aa2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1aa4:	69bb      	ldr	r3, [r7, #24]
    1aa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	3b01      	subs	r3, #1
    1aac:	b29b      	uxth	r3, r3
    1aae:	69ba      	ldr	r2, [r7, #24]
    1ab0:	1c19      	adds	r1, r3, #0
    1ab2:	8591      	strh	r1, [r2, #44]	; 0x2c
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d11a      	bne.n	1aee <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ab8:	697b      	ldr	r3, [r7, #20]
    1aba:	2204      	movs	r2, #4
    1abc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1abe:	69bb      	ldr	r3, [r7, #24]
    1ac0:	2232      	movs	r2, #50	; 0x32
    1ac2:	2100      	movs	r1, #0
    1ac4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1ac6:	2310      	movs	r3, #16
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	881b      	ldrh	r3, [r3, #0]
    1acc:	2202      	movs	r2, #2
    1ace:	4013      	ands	r3, r2
					if (callback_status
    1ad0:	d00d      	beq.n	1aee <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1ad2:	69bb      	ldr	r3, [r7, #24]
    1ad4:	691b      	ldr	r3, [r3, #16]
    1ad6:	69ba      	ldr	r2, [r7, #24]
    1ad8:	0010      	movs	r0, r2
    1ada:	4798      	blx	r3
    1adc:	e007      	b.n	1aee <_usart_interrupt_handler+0x2ae>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	20000174 	.word	0x20000174
    1ae4:	00001715 	.word	0x00001715
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ae8:	697b      	ldr	r3, [r7, #20]
    1aea:	2204      	movs	r2, #4
    1aec:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1aee:	2312      	movs	r3, #18
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	881b      	ldrh	r3, [r3, #0]
    1af4:	2210      	movs	r2, #16
    1af6:	4013      	ands	r3, r2
    1af8:	d010      	beq.n	1b1c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1afa:	697b      	ldr	r3, [r7, #20]
    1afc:	2210      	movs	r2, #16
    1afe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1b00:	697b      	ldr	r3, [r7, #20]
    1b02:	2210      	movs	r2, #16
    1b04:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1b06:	2310      	movs	r3, #16
    1b08:	18fb      	adds	r3, r7, r3
    1b0a:	881b      	ldrh	r3, [r3, #0]
    1b0c:	2210      	movs	r2, #16
    1b0e:	4013      	ands	r3, r2
    1b10:	d004      	beq.n	1b1c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1b12:	69bb      	ldr	r3, [r7, #24]
    1b14:	69db      	ldr	r3, [r3, #28]
    1b16:	69ba      	ldr	r2, [r7, #24]
    1b18:	0010      	movs	r0, r2
    1b1a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1b1c:	2312      	movs	r3, #18
    1b1e:	18fb      	adds	r3, r7, r3
    1b20:	881b      	ldrh	r3, [r3, #0]
    1b22:	2220      	movs	r2, #32
    1b24:	4013      	ands	r3, r2
    1b26:	d010      	beq.n	1b4a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1b28:	697b      	ldr	r3, [r7, #20]
    1b2a:	2220      	movs	r2, #32
    1b2c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1b2e:	697b      	ldr	r3, [r7, #20]
    1b30:	2220      	movs	r2, #32
    1b32:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1b34:	2310      	movs	r3, #16
    1b36:	18fb      	adds	r3, r7, r3
    1b38:	881b      	ldrh	r3, [r3, #0]
    1b3a:	2208      	movs	r2, #8
    1b3c:	4013      	ands	r3, r2
    1b3e:	d004      	beq.n	1b4a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1b40:	69bb      	ldr	r3, [r7, #24]
    1b42:	699b      	ldr	r3, [r3, #24]
    1b44:	69ba      	ldr	r2, [r7, #24]
    1b46:	0010      	movs	r0, r2
    1b48:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1b4a:	2312      	movs	r3, #18
    1b4c:	18fb      	adds	r3, r7, r3
    1b4e:	881b      	ldrh	r3, [r3, #0]
    1b50:	2208      	movs	r2, #8
    1b52:	4013      	ands	r3, r2
    1b54:	d010      	beq.n	1b78 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1b56:	697b      	ldr	r3, [r7, #20]
    1b58:	2208      	movs	r2, #8
    1b5a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1b5c:	697b      	ldr	r3, [r7, #20]
    1b5e:	2208      	movs	r2, #8
    1b60:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b62:	2310      	movs	r3, #16
    1b64:	18fb      	adds	r3, r7, r3
    1b66:	881b      	ldrh	r3, [r3, #0]
    1b68:	2220      	movs	r2, #32
    1b6a:	4013      	ands	r3, r2
    1b6c:	d004      	beq.n	1b78 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b6e:	69bb      	ldr	r3, [r7, #24]
    1b70:	6a1b      	ldr	r3, [r3, #32]
    1b72:	69ba      	ldr	r2, [r7, #24]
    1b74:	0010      	movs	r0, r2
    1b76:	4798      	blx	r3
		}
	}
#endif
}
    1b78:	46c0      	nop			; (mov r8, r8)
    1b7a:	46bd      	mov	sp, r7
    1b7c:	b008      	add	sp, #32
    1b7e:	bd80      	pop	{r7, pc}

00001b80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	b084      	sub	sp, #16
    1b84:	af00      	add	r7, sp, #0
    1b86:	0002      	movs	r2, r0
    1b88:	1dfb      	adds	r3, r7, #7
    1b8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1b8c:	230f      	movs	r3, #15
    1b8e:	18fb      	adds	r3, r7, r3
    1b90:	1dfa      	adds	r2, r7, #7
    1b92:	7812      	ldrb	r2, [r2, #0]
    1b94:	09d2      	lsrs	r2, r2, #7
    1b96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1b98:	230e      	movs	r3, #14
    1b9a:	18fb      	adds	r3, r7, r3
    1b9c:	1dfa      	adds	r2, r7, #7
    1b9e:	7812      	ldrb	r2, [r2, #0]
    1ba0:	0952      	lsrs	r2, r2, #5
    1ba2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1ba4:	4b0d      	ldr	r3, [pc, #52]	; (1bdc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1ba6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1ba8:	230f      	movs	r3, #15
    1baa:	18fb      	adds	r3, r7, r3
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d10f      	bne.n	1bd2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1bb2:	230f      	movs	r3, #15
    1bb4:	18fb      	adds	r3, r7, r3
    1bb6:	781b      	ldrb	r3, [r3, #0]
    1bb8:	009b      	lsls	r3, r3, #2
    1bba:	2210      	movs	r2, #16
    1bbc:	4694      	mov	ip, r2
    1bbe:	44bc      	add	ip, r7
    1bc0:	4463      	add	r3, ip
    1bc2:	3b08      	subs	r3, #8
    1bc4:	681a      	ldr	r2, [r3, #0]
    1bc6:	230e      	movs	r3, #14
    1bc8:	18fb      	adds	r3, r7, r3
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	01db      	lsls	r3, r3, #7
    1bce:	18d3      	adds	r3, r2, r3
    1bd0:	e000      	b.n	1bd4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1bd2:	2300      	movs	r3, #0
	}
}
    1bd4:	0018      	movs	r0, r3
    1bd6:	46bd      	mov	sp, r7
    1bd8:	b004      	add	sp, #16
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	41004400 	.word	0x41004400

00001be0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1be0:	b580      	push	{r7, lr}
    1be2:	b082      	sub	sp, #8
    1be4:	af00      	add	r7, sp, #0
    1be6:	0002      	movs	r2, r0
    1be8:	1dfb      	adds	r3, r7, #7
    1bea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1bec:	1dfb      	adds	r3, r7, #7
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	0018      	movs	r0, r3
    1bf2:	4b03      	ldr	r3, [pc, #12]	; (1c00 <port_get_group_from_gpio_pin+0x20>)
    1bf4:	4798      	blx	r3
    1bf6:	0003      	movs	r3, r0
}
    1bf8:	0018      	movs	r0, r3
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b002      	add	sp, #8
    1bfe:	bd80      	pop	{r7, pc}
    1c00:	00001b81 	.word	0x00001b81

00001c04 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	b084      	sub	sp, #16
    1c08:	af00      	add	r7, sp, #0
    1c0a:	0002      	movs	r2, r0
    1c0c:	1dfb      	adds	r3, r7, #7
    1c0e:	701a      	strb	r2, [r3, #0]
    1c10:	1dbb      	adds	r3, r7, #6
    1c12:	1c0a      	adds	r2, r1, #0
    1c14:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1c16:	1dfb      	adds	r3, r7, #7
    1c18:	781b      	ldrb	r3, [r3, #0]
    1c1a:	0018      	movs	r0, r3
    1c1c:	4b0d      	ldr	r3, [pc, #52]	; (1c54 <port_pin_set_output_level+0x50>)
    1c1e:	4798      	blx	r3
    1c20:	0003      	movs	r3, r0
    1c22:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1c24:	1dfb      	adds	r3, r7, #7
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	221f      	movs	r2, #31
    1c2a:	4013      	ands	r3, r2
    1c2c:	2201      	movs	r2, #1
    1c2e:	409a      	lsls	r2, r3
    1c30:	0013      	movs	r3, r2
    1c32:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1c34:	1dbb      	adds	r3, r7, #6
    1c36:	781b      	ldrb	r3, [r3, #0]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d003      	beq.n	1c44 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1c3c:	68fb      	ldr	r3, [r7, #12]
    1c3e:	68ba      	ldr	r2, [r7, #8]
    1c40:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1c42:	e002      	b.n	1c4a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1c44:	68fb      	ldr	r3, [r7, #12]
    1c46:	68ba      	ldr	r2, [r7, #8]
    1c48:	615a      	str	r2, [r3, #20]
}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	46bd      	mov	sp, r7
    1c4e:	b004      	add	sp, #16
    1c50:	bd80      	pop	{r7, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	00001be1 	.word	0x00001be1

00001c58 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	b084      	sub	sp, #16
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1c66:	68fb      	ldr	r3, [r7, #12]
    1c68:	7e1b      	ldrb	r3, [r3, #24]
    1c6a:	b2db      	uxtb	r3, r3
    1c6c:	001a      	movs	r2, r3
    1c6e:	2302      	movs	r3, #2
    1c70:	4013      	ands	r3, r2
    1c72:	1e5a      	subs	r2, r3, #1
    1c74:	4193      	sbcs	r3, r2
    1c76:	b2db      	uxtb	r3, r3
}
    1c78:	0018      	movs	r0, r3
    1c7a:	46bd      	mov	sp, r7
    1c7c:	b004      	add	sp, #16
    1c7e:	bd80      	pop	{r7, pc}

00001c80 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1c80:	b580      	push	{r7, lr}
    1c82:	b084      	sub	sp, #16
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c8e:	68fb      	ldr	r3, [r7, #12]
    1c90:	7e1b      	ldrb	r3, [r3, #24]
    1c92:	b2db      	uxtb	r3, r3
    1c94:	001a      	movs	r2, r3
    1c96:	2301      	movs	r3, #1
    1c98:	4013      	ands	r3, r2
    1c9a:	1e5a      	subs	r2, r3, #1
    1c9c:	4193      	sbcs	r3, r2
    1c9e:	b2db      	uxtb	r3, r3
}
    1ca0:	0018      	movs	r0, r3
    1ca2:	46bd      	mov	sp, r7
    1ca4:	b004      	add	sp, #16
    1ca6:	bd80      	pop	{r7, pc}

00001ca8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1cb0:	687b      	ldr	r3, [r7, #4]
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	7e1b      	ldrb	r3, [r3, #24]
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	001a      	movs	r2, r3
    1cbe:	2304      	movs	r3, #4
    1cc0:	4013      	ands	r3, r2
    1cc2:	1e5a      	subs	r2, r3, #1
    1cc4:	4193      	sbcs	r3, r2
    1cc6:	b2db      	uxtb	r3, r3
}
    1cc8:	0018      	movs	r0, r3
    1cca:	46bd      	mov	sp, r7
    1ccc:	b004      	add	sp, #16
    1cce:	bd80      	pop	{r7, pc}

00001cd0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b084      	sub	sp, #16
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	000a      	movs	r2, r1
    1cda:	1cbb      	adds	r3, r7, #2
    1cdc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	0018      	movs	r0, r3
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <spi_write+0x44>)
    1cea:	4798      	blx	r3
    1cec:	0003      	movs	r3, r0
    1cee:	001a      	movs	r2, r3
    1cf0:	2301      	movs	r3, #1
    1cf2:	4053      	eors	r3, r2
    1cf4:	b2db      	uxtb	r3, r3
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d001      	beq.n	1cfe <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    1cfa:	2305      	movs	r3, #5
    1cfc:	e006      	b.n	1d0c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1cfe:	1cbb      	adds	r3, r7, #2
    1d00:	881b      	ldrh	r3, [r3, #0]
    1d02:	05db      	lsls	r3, r3, #23
    1d04:	0dda      	lsrs	r2, r3, #23
    1d06:	68fb      	ldr	r3, [r7, #12]
    1d08:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1d0a:	2300      	movs	r3, #0
}
    1d0c:	0018      	movs	r0, r3
    1d0e:	46bd      	mov	sp, r7
    1d10:	b004      	add	sp, #16
    1d12:	bd80      	pop	{r7, pc}
    1d14:	00001c81 	.word	0x00001c81

00001d18 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b084      	sub	sp, #16
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
    1d20:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b1b      	ldr	r3, [pc, #108]	; (1d9c <spi_read+0x84>)
    1d2e:	4798      	blx	r3
    1d30:	0003      	movs	r3, r0
    1d32:	001a      	movs	r2, r3
    1d34:	2301      	movs	r3, #1
    1d36:	4053      	eors	r3, r2
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d001      	beq.n	1d42 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1d3e:	2310      	movs	r3, #16
    1d40:	e027      	b.n	1d92 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1d42:	230f      	movs	r3, #15
    1d44:	18fb      	adds	r3, r7, r3
    1d46:	2200      	movs	r2, #0
    1d48:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1d4a:	68bb      	ldr	r3, [r7, #8]
    1d4c:	8b5b      	ldrh	r3, [r3, #26]
    1d4e:	b29b      	uxth	r3, r3
    1d50:	001a      	movs	r2, r3
    1d52:	2304      	movs	r3, #4
    1d54:	4013      	ands	r3, r2
    1d56:	d006      	beq.n	1d66 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1d58:	230f      	movs	r3, #15
    1d5a:	18fb      	adds	r3, r7, r3
    1d5c:	221e      	movs	r2, #30
    1d5e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d60:	68bb      	ldr	r3, [r7, #8]
    1d62:	2204      	movs	r2, #4
    1d64:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	799b      	ldrb	r3, [r3, #6]
    1d6a:	2b01      	cmp	r3, #1
    1d6c:	d108      	bne.n	1d80 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1d6e:	68bb      	ldr	r3, [r7, #8]
    1d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d72:	b29b      	uxth	r3, r3
    1d74:	05db      	lsls	r3, r3, #23
    1d76:	0ddb      	lsrs	r3, r3, #23
    1d78:	b29a      	uxth	r2, r3
    1d7a:	683b      	ldr	r3, [r7, #0]
    1d7c:	801a      	strh	r2, [r3, #0]
    1d7e:	e005      	b.n	1d8c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1d80:	68bb      	ldr	r3, [r7, #8]
    1d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1d84:	b2db      	uxtb	r3, r3
    1d86:	b29a      	uxth	r2, r3
    1d88:	683b      	ldr	r3, [r7, #0]
    1d8a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1d8c:	230f      	movs	r3, #15
    1d8e:	18fb      	adds	r3, r7, r3
    1d90:	781b      	ldrb	r3, [r3, #0]
}
    1d92:	0018      	movs	r0, r3
    1d94:	46bd      	mov	sp, r7
    1d96:	b004      	add	sp, #16
    1d98:	bd80      	pop	{r7, pc}
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	00001ca9 	.word	0x00001ca9

00001da0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    1da0:	b580      	push	{r7, lr}
    1da2:	b084      	sub	sp, #16
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1da8:	687b      	ldr	r3, [r7, #4]
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	2202      	movs	r2, #2
    1db2:	761a      	strb	r2, [r3, #24]
}
    1db4:	46c0      	nop			; (mov r8, r8)
    1db6:	46bd      	mov	sp, r7
    1db8:	b004      	add	sp, #16
    1dba:	bd80      	pop	{r7, pc}

00001dbc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b086      	sub	sp, #24
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	60f8      	str	r0, [r7, #12]
    1dc4:	60b9      	str	r1, [r7, #8]
    1dc6:	1dfb      	adds	r3, r7, #7
    1dc8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	795b      	ldrb	r3, [r3, #5]
    1dce:	2b01      	cmp	r3, #1
    1dd0:	d001      	beq.n	1dd6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1dd2:	2315      	movs	r3, #21
    1dd4:	e05c      	b.n	1e90 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1dd6:	68fb      	ldr	r3, [r7, #12]
    1dd8:	7a1b      	ldrb	r3, [r3, #8]
    1dda:	2201      	movs	r2, #1
    1ddc:	4053      	eors	r3, r2
    1dde:	b2db      	uxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	d054      	beq.n	1e8e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1de4:	1dfb      	adds	r3, r7, #7
    1de6:	781b      	ldrb	r3, [r3, #0]
    1de8:	2b00      	cmp	r3, #0
    1dea:	d04a      	beq.n	1e82 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1dec:	68bb      	ldr	r3, [r7, #8]
    1dee:	785b      	ldrb	r3, [r3, #1]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d03f      	beq.n	1e74 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1df4:	68fb      	ldr	r3, [r7, #12]
    1df6:	0018      	movs	r0, r3
    1df8:	4b27      	ldr	r3, [pc, #156]	; (1e98 <spi_select_slave+0xdc>)
    1dfa:	4798      	blx	r3
    1dfc:	0003      	movs	r3, r0
    1dfe:	001a      	movs	r2, r3
    1e00:	2301      	movs	r3, #1
    1e02:	4053      	eors	r3, r2
    1e04:	b2db      	uxtb	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	d007      	beq.n	1e1a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1e0a:	68bb      	ldr	r3, [r7, #8]
    1e0c:	781b      	ldrb	r3, [r3, #0]
    1e0e:	2101      	movs	r1, #1
    1e10:	0018      	movs	r0, r3
    1e12:	4b22      	ldr	r3, [pc, #136]	; (1e9c <spi_select_slave+0xe0>)
    1e14:	4798      	blx	r3
					return STATUS_BUSY;
    1e16:	2305      	movs	r3, #5
    1e18:	e03a      	b.n	1e90 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1e1a:	68bb      	ldr	r3, [r7, #8]
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	2100      	movs	r1, #0
    1e20:	0018      	movs	r0, r3
    1e22:	4b1e      	ldr	r3, [pc, #120]	; (1e9c <spi_select_slave+0xe0>)
    1e24:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    1e26:	68bb      	ldr	r3, [r7, #8]
    1e28:	789b      	ldrb	r3, [r3, #2]
    1e2a:	b29a      	uxth	r2, r3
    1e2c:	68fb      	ldr	r3, [r7, #12]
    1e2e:	0011      	movs	r1, r2
    1e30:	0018      	movs	r0, r3
    1e32:	4b1b      	ldr	r3, [pc, #108]	; (1ea0 <spi_select_slave+0xe4>)
    1e34:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    1e36:	68fb      	ldr	r3, [r7, #12]
    1e38:	79db      	ldrb	r3, [r3, #7]
    1e3a:	2201      	movs	r2, #1
    1e3c:	4053      	eors	r3, r2
    1e3e:	b2db      	uxtb	r3, r3
    1e40:	2b00      	cmp	r3, #0
    1e42:	d024      	beq.n	1e8e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1e44:	46c0      	nop			; (mov r8, r8)
    1e46:	68fb      	ldr	r3, [r7, #12]
    1e48:	0018      	movs	r0, r3
    1e4a:	4b16      	ldr	r3, [pc, #88]	; (1ea4 <spi_select_slave+0xe8>)
    1e4c:	4798      	blx	r3
    1e4e:	0003      	movs	r3, r0
    1e50:	001a      	movs	r2, r3
    1e52:	2301      	movs	r3, #1
    1e54:	4053      	eors	r3, r2
    1e56:	b2db      	uxtb	r3, r3
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d1f4      	bne.n	1e46 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1e5c:	2316      	movs	r3, #22
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	2200      	movs	r2, #0
    1e62:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1e64:	2316      	movs	r3, #22
    1e66:	18fa      	adds	r2, r7, r3
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	0011      	movs	r1, r2
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b0e      	ldr	r3, [pc, #56]	; (1ea8 <spi_select_slave+0xec>)
    1e70:	4798      	blx	r3
    1e72:	e00c      	b.n	1e8e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1e74:	68bb      	ldr	r3, [r7, #8]
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	2100      	movs	r1, #0
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b07      	ldr	r3, [pc, #28]	; (1e9c <spi_select_slave+0xe0>)
    1e7e:	4798      	blx	r3
    1e80:	e005      	b.n	1e8e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1e82:	68bb      	ldr	r3, [r7, #8]
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	2101      	movs	r1, #1
    1e88:	0018      	movs	r0, r3
    1e8a:	4b04      	ldr	r3, [pc, #16]	; (1e9c <spi_select_slave+0xe0>)
    1e8c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1e8e:	2300      	movs	r3, #0
}
    1e90:	0018      	movs	r0, r3
    1e92:	46bd      	mov	sp, r7
    1e94:	b006      	add	sp, #24
    1e96:	bd80      	pop	{r7, pc}
    1e98:	00001c81 	.word	0x00001c81
    1e9c:	00001c05 	.word	0x00001c05
    1ea0:	00001cd1 	.word	0x00001cd1
    1ea4:	00001ca9 	.word	0x00001ca9
    1ea8:	00001d19 	.word	0x00001d19

00001eac <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b08a      	sub	sp, #40	; 0x28
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	60f8      	str	r0, [r7, #12]
    1eb4:	60b9      	str	r1, [r7, #8]
    1eb6:	1dbb      	adds	r3, r7, #6
    1eb8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1eba:	68fb      	ldr	r3, [r7, #12]
    1ebc:	2238      	movs	r2, #56	; 0x38
    1ebe:	5c9b      	ldrb	r3, [r3, r2]
    1ec0:	b2db      	uxtb	r3, r3
    1ec2:	2b05      	cmp	r3, #5
    1ec4:	d101      	bne.n	1eca <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1ec6:	2305      	movs	r3, #5
    1ec8:	e170      	b.n	21ac <STACK_SIZE+0x1ac>
	}
#  endif

	if (length == 0) {
    1eca:	1dbb      	adds	r3, r7, #6
    1ecc:	881b      	ldrh	r3, [r3, #0]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d101      	bne.n	1ed6 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    1ed2:	2317      	movs	r3, #23
    1ed4:	e16a      	b.n	21ac <STACK_SIZE+0x1ac>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	795b      	ldrb	r3, [r3, #5]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d109      	bne.n	1ef2 <spi_write_buffer_wait+0x46>
    1ede:	68fb      	ldr	r3, [r7, #12]
    1ee0:	0018      	movs	r0, r3
    1ee2:	4bb4      	ldr	r3, [pc, #720]	; (21b4 <STACK_SIZE+0x1b4>)
    1ee4:	4798      	blx	r3
    1ee6:	1e03      	subs	r3, r0, #0
    1ee8:	d003      	beq.n	1ef2 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1eea:	68fb      	ldr	r3, [r7, #12]
    1eec:	0018      	movs	r0, r3
    1eee:	4bb2      	ldr	r3, [pc, #712]	; (21b8 <STACK_SIZE+0x1b8>)
    1ef0:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    1ef2:	2326      	movs	r3, #38	; 0x26
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	2200      	movs	r2, #0
    1ef8:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    1efa:	2324      	movs	r3, #36	; 0x24
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	1dba      	adds	r2, r7, #6
    1f00:	8812      	ldrh	r2, [r2, #0]
    1f02:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1f04:	e0fe      	b.n	2104 <STACK_SIZE+0x104>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1f06:	68fb      	ldr	r3, [r7, #12]
    1f08:	795b      	ldrb	r3, [r3, #5]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d12a      	bne.n	1f64 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1f0e:	2300      	movs	r3, #0
    1f10:	623b      	str	r3, [r7, #32]
    1f12:	e008      	b.n	1f26 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	0018      	movs	r0, r3
    1f18:	4ba8      	ldr	r3, [pc, #672]	; (21bc <STACK_SIZE+0x1bc>)
    1f1a:	4798      	blx	r3
    1f1c:	1e03      	subs	r3, r0, #0
    1f1e:	d107      	bne.n	1f30 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1f20:	6a3b      	ldr	r3, [r7, #32]
    1f22:	3301      	adds	r3, #1
    1f24:	623b      	str	r3, [r7, #32]
    1f26:	6a3b      	ldr	r3, [r7, #32]
    1f28:	4aa5      	ldr	r2, [pc, #660]	; (21c0 <STACK_SIZE+0x1c0>)
    1f2a:	4293      	cmp	r3, r2
    1f2c:	d9f2      	bls.n	1f14 <spi_write_buffer_wait+0x68>
    1f2e:	e000      	b.n	1f32 <spi_write_buffer_wait+0x86>
					break;
    1f30:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1f32:	68fb      	ldr	r3, [r7, #12]
    1f34:	0018      	movs	r0, r3
    1f36:	4b9f      	ldr	r3, [pc, #636]	; (21b4 <STACK_SIZE+0x1b4>)
    1f38:	4798      	blx	r3
    1f3a:	1e03      	subs	r3, r0, #0
    1f3c:	d005      	beq.n	1f4a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    1f3e:	68fb      	ldr	r3, [r7, #12]
    1f40:	0018      	movs	r0, r3
    1f42:	4b9d      	ldr	r3, [pc, #628]	; (21b8 <STACK_SIZE+0x1b8>)
    1f44:	4798      	blx	r3
				return STATUS_ABORTED;
    1f46:	2304      	movs	r3, #4
    1f48:	e130      	b.n	21ac <STACK_SIZE+0x1ac>
			}

			if (!spi_is_ready_to_write(module)) {
    1f4a:	68fb      	ldr	r3, [r7, #12]
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b9b      	ldr	r3, [pc, #620]	; (21bc <STACK_SIZE+0x1bc>)
    1f50:	4798      	blx	r3
    1f52:	0003      	movs	r3, r0
    1f54:	001a      	movs	r2, r3
    1f56:	2301      	movs	r3, #1
    1f58:	4053      	eors	r3, r2
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d001      	beq.n	1f64 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1f60:	2312      	movs	r3, #18
    1f62:	e123      	b.n	21ac <STACK_SIZE+0x1ac>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	68fb      	ldr	r3, [r7, #12]
    1f68:	0018      	movs	r0, r3
    1f6a:	4b94      	ldr	r3, [pc, #592]	; (21bc <STACK_SIZE+0x1bc>)
    1f6c:	4798      	blx	r3
    1f6e:	0003      	movs	r3, r0
    1f70:	001a      	movs	r2, r3
    1f72:	2301      	movs	r3, #1
    1f74:	4053      	eors	r3, r2
    1f76:	b2db      	uxtb	r3, r3
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d1f4      	bne.n	1f66 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1f7c:	2326      	movs	r3, #38	; 0x26
    1f7e:	18fb      	adds	r3, r7, r3
    1f80:	881b      	ldrh	r3, [r3, #0]
    1f82:	2226      	movs	r2, #38	; 0x26
    1f84:	18ba      	adds	r2, r7, r2
    1f86:	1c59      	adds	r1, r3, #1
    1f88:	8011      	strh	r1, [r2, #0]
    1f8a:	001a      	movs	r2, r3
    1f8c:	68bb      	ldr	r3, [r7, #8]
    1f8e:	189b      	adds	r3, r3, r2
    1f90:	781a      	ldrb	r2, [r3, #0]
    1f92:	231e      	movs	r3, #30
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	799b      	ldrb	r3, [r3, #6]
    1f9c:	2b01      	cmp	r3, #1
    1f9e:	d115      	bne.n	1fcc <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1fa0:	2326      	movs	r3, #38	; 0x26
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	881b      	ldrh	r3, [r3, #0]
    1fa6:	2226      	movs	r2, #38	; 0x26
    1fa8:	18ba      	adds	r2, r7, r2
    1faa:	1c59      	adds	r1, r3, #1
    1fac:	8011      	strh	r1, [r2, #0]
    1fae:	001a      	movs	r2, r3
    1fb0:	68bb      	ldr	r3, [r7, #8]
    1fb2:	189b      	adds	r3, r3, r2
    1fb4:	781b      	ldrb	r3, [r3, #0]
    1fb6:	021b      	lsls	r3, r3, #8
    1fb8:	b21a      	sxth	r2, r3
    1fba:	231e      	movs	r3, #30
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	2100      	movs	r1, #0
    1fc0:	5e5b      	ldrsh	r3, [r3, r1]
    1fc2:	4313      	orrs	r3, r2
    1fc4:	b21a      	sxth	r2, r3
    1fc6:	231e      	movs	r3, #30
    1fc8:	18fb      	adds	r3, r7, r3
    1fca:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1fcc:	231e      	movs	r3, #30
    1fce:	18fb      	adds	r3, r7, r3
    1fd0:	881a      	ldrh	r2, [r3, #0]
    1fd2:	68fb      	ldr	r3, [r7, #12]
    1fd4:	0011      	movs	r1, r2
    1fd6:	0018      	movs	r0, r3
    1fd8:	4b7a      	ldr	r3, [pc, #488]	; (21c4 <STACK_SIZE+0x1c4>)
    1fda:	4798      	blx	r3

		if (module->receiver_enabled) {
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	79db      	ldrb	r3, [r3, #7]
    1fe0:	2224      	movs	r2, #36	; 0x24
    1fe2:	18ba      	adds	r2, r7, r2
    1fe4:	2124      	movs	r1, #36	; 0x24
    1fe6:	1879      	adds	r1, r7, r1
    1fe8:	8809      	ldrh	r1, [r1, #0]
    1fea:	8011      	strh	r1, [r2, #0]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d100      	bne.n	1ff2 <spi_write_buffer_wait+0x146>
    1ff0:	e088      	b.n	2104 <STACK_SIZE+0x104>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	795b      	ldrb	r3, [r3, #5]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d000      	beq.n	1ffc <spi_write_buffer_wait+0x150>
    1ffa:	e069      	b.n	20d0 <STACK_SIZE+0xd0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1ffc:	2300      	movs	r3, #0
    1ffe:	61bb      	str	r3, [r7, #24]
    2000:	e047      	b.n	2092 <STACK_SIZE+0x92>
					if (length && spi_is_ready_to_write(module)) {
    2002:	1dbb      	adds	r3, r7, #6
    2004:	881b      	ldrh	r3, [r3, #0]
    2006:	2b00      	cmp	r3, #0
    2008:	d03a      	beq.n	2080 <STACK_SIZE+0x80>
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	0018      	movs	r0, r3
    200e:	4b6b      	ldr	r3, [pc, #428]	; (21bc <STACK_SIZE+0x1bc>)
    2010:	4798      	blx	r3
    2012:	1e03      	subs	r3, r0, #0
    2014:	d034      	beq.n	2080 <STACK_SIZE+0x80>
						data_to_send = tx_data[tx_pos++];
    2016:	2326      	movs	r3, #38	; 0x26
    2018:	18fb      	adds	r3, r7, r3
    201a:	881b      	ldrh	r3, [r3, #0]
    201c:	2226      	movs	r2, #38	; 0x26
    201e:	18ba      	adds	r2, r7, r2
    2020:	1c59      	adds	r1, r3, #1
    2022:	8011      	strh	r1, [r2, #0]
    2024:	001a      	movs	r2, r3
    2026:	68bb      	ldr	r3, [r7, #8]
    2028:	189b      	adds	r3, r3, r2
    202a:	781a      	ldrb	r2, [r3, #0]
    202c:	231e      	movs	r3, #30
    202e:	18fb      	adds	r3, r7, r3
    2030:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2032:	68fb      	ldr	r3, [r7, #12]
    2034:	799b      	ldrb	r3, [r3, #6]
    2036:	2b01      	cmp	r3, #1
    2038:	d115      	bne.n	2066 <STACK_SIZE+0x66>
							data_to_send |= (tx_data[tx_pos++] << 8);
    203a:	2326      	movs	r3, #38	; 0x26
    203c:	18fb      	adds	r3, r7, r3
    203e:	881b      	ldrh	r3, [r3, #0]
    2040:	2226      	movs	r2, #38	; 0x26
    2042:	18ba      	adds	r2, r7, r2
    2044:	1c59      	adds	r1, r3, #1
    2046:	8011      	strh	r1, [r2, #0]
    2048:	001a      	movs	r2, r3
    204a:	68bb      	ldr	r3, [r7, #8]
    204c:	189b      	adds	r3, r3, r2
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	021b      	lsls	r3, r3, #8
    2052:	b21a      	sxth	r2, r3
    2054:	231e      	movs	r3, #30
    2056:	18fb      	adds	r3, r7, r3
    2058:	2100      	movs	r1, #0
    205a:	5e5b      	ldrsh	r3, [r3, r1]
    205c:	4313      	orrs	r3, r2
    205e:	b21a      	sxth	r2, r3
    2060:	231e      	movs	r3, #30
    2062:	18fb      	adds	r3, r7, r3
    2064:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    2066:	231e      	movs	r3, #30
    2068:	18fb      	adds	r3, r7, r3
    206a:	881a      	ldrh	r2, [r3, #0]
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	0011      	movs	r1, r2
    2070:	0018      	movs	r0, r3
    2072:	4b54      	ldr	r3, [pc, #336]	; (21c4 <STACK_SIZE+0x1c4>)
    2074:	4798      	blx	r3
						length--;
    2076:	1dbb      	adds	r3, r7, #6
    2078:	881a      	ldrh	r2, [r3, #0]
    207a:	1dbb      	adds	r3, r7, #6
    207c:	3a01      	subs	r2, #1
    207e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    2080:	68fb      	ldr	r3, [r7, #12]
    2082:	0018      	movs	r0, r3
    2084:	4b50      	ldr	r3, [pc, #320]	; (21c8 <STACK_SIZE+0x1c8>)
    2086:	4798      	blx	r3
    2088:	1e03      	subs	r3, r0, #0
    208a:	d107      	bne.n	209c <STACK_SIZE+0x9c>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    208c:	69bb      	ldr	r3, [r7, #24]
    208e:	3301      	adds	r3, #1
    2090:	61bb      	str	r3, [r7, #24]
    2092:	69bb      	ldr	r3, [r7, #24]
    2094:	4a4a      	ldr	r2, [pc, #296]	; (21c0 <STACK_SIZE+0x1c0>)
    2096:	4293      	cmp	r3, r2
    2098:	d9b3      	bls.n	2002 <STACK_SIZE+0x2>
    209a:	e000      	b.n	209e <STACK_SIZE+0x9e>
						break;
    209c:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	0018      	movs	r0, r3
    20a2:	4b44      	ldr	r3, [pc, #272]	; (21b4 <STACK_SIZE+0x1b4>)
    20a4:	4798      	blx	r3
    20a6:	1e03      	subs	r3, r0, #0
    20a8:	d005      	beq.n	20b6 <STACK_SIZE+0xb6>
					_spi_clear_tx_complete_flag(module);
    20aa:	68fb      	ldr	r3, [r7, #12]
    20ac:	0018      	movs	r0, r3
    20ae:	4b42      	ldr	r3, [pc, #264]	; (21b8 <STACK_SIZE+0x1b8>)
    20b0:	4798      	blx	r3
					return STATUS_ABORTED;
    20b2:	2304      	movs	r3, #4
    20b4:	e07a      	b.n	21ac <STACK_SIZE+0x1ac>
				}

				if (!spi_is_ready_to_read(module)) {
    20b6:	68fb      	ldr	r3, [r7, #12]
    20b8:	0018      	movs	r0, r3
    20ba:	4b43      	ldr	r3, [pc, #268]	; (21c8 <STACK_SIZE+0x1c8>)
    20bc:	4798      	blx	r3
    20be:	0003      	movs	r3, r0
    20c0:	001a      	movs	r2, r3
    20c2:	2301      	movs	r3, #1
    20c4:	4053      	eors	r3, r2
    20c6:	b2db      	uxtb	r3, r3
    20c8:	2b00      	cmp	r3, #0
    20ca:	d001      	beq.n	20d0 <STACK_SIZE+0xd0>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    20cc:	2312      	movs	r3, #18
    20ce:	e06d      	b.n	21ac <STACK_SIZE+0x1ac>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    20d0:	46c0      	nop			; (mov r8, r8)
    20d2:	68fb      	ldr	r3, [r7, #12]
    20d4:	0018      	movs	r0, r3
    20d6:	4b3c      	ldr	r3, [pc, #240]	; (21c8 <STACK_SIZE+0x1c8>)
    20d8:	4798      	blx	r3
    20da:	0003      	movs	r3, r0
    20dc:	001a      	movs	r2, r3
    20de:	2301      	movs	r3, #1
    20e0:	4053      	eors	r3, r2
    20e2:	b2db      	uxtb	r3, r3
    20e4:	2b00      	cmp	r3, #0
    20e6:	d1f4      	bne.n	20d2 <STACK_SIZE+0xd2>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    20e8:	2312      	movs	r3, #18
    20ea:	18fa      	adds	r2, r7, r3
    20ec:	68fb      	ldr	r3, [r7, #12]
    20ee:	0011      	movs	r1, r2
    20f0:	0018      	movs	r0, r3
    20f2:	4b36      	ldr	r3, [pc, #216]	; (21cc <STACK_SIZE+0x1cc>)
    20f4:	4798      	blx	r3
			flush_length--;
    20f6:	2324      	movs	r3, #36	; 0x24
    20f8:	18fb      	adds	r3, r7, r3
    20fa:	881a      	ldrh	r2, [r3, #0]
    20fc:	2324      	movs	r3, #36	; 0x24
    20fe:	18fb      	adds	r3, r7, r3
    2100:	3a01      	subs	r2, #1
    2102:	801a      	strh	r2, [r3, #0]
	while (length--) {
    2104:	1dbb      	adds	r3, r7, #6
    2106:	881b      	ldrh	r3, [r3, #0]
    2108:	1dba      	adds	r2, r7, #6
    210a:	1e59      	subs	r1, r3, #1
    210c:	8011      	strh	r1, [r2, #0]
    210e:	2b00      	cmp	r3, #0
    2110:	d000      	beq.n	2114 <STACK_SIZE+0x114>
    2112:	e6f8      	b.n	1f06 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	795b      	ldrb	r3, [r3, #5]
    2118:	2b01      	cmp	r3, #1
    211a:	d10b      	bne.n	2134 <STACK_SIZE+0x134>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	68fb      	ldr	r3, [r7, #12]
    2120:	0018      	movs	r0, r3
    2122:	4b24      	ldr	r3, [pc, #144]	; (21b4 <STACK_SIZE+0x1b4>)
    2124:	4798      	blx	r3
    2126:	0003      	movs	r3, r0
    2128:	001a      	movs	r2, r3
    212a:	2301      	movs	r3, #1
    212c:	4053      	eors	r3, r2
    212e:	b2db      	uxtb	r3, r3
    2130:	2b00      	cmp	r3, #0
    2132:	d1f4      	bne.n	211e <STACK_SIZE+0x11e>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    2134:	68fb      	ldr	r3, [r7, #12]
    2136:	795b      	ldrb	r3, [r3, #5]
    2138:	2b00      	cmp	r3, #0
    213a:	d136      	bne.n	21aa <STACK_SIZE+0x1aa>
		if (module->receiver_enabled) {
    213c:	68fb      	ldr	r3, [r7, #12]
    213e:	79db      	ldrb	r3, [r3, #7]
    2140:	2b00      	cmp	r3, #0
    2142:	d032      	beq.n	21aa <STACK_SIZE+0x1aa>
			while (flush_length) {
    2144:	e02c      	b.n	21a0 <STACK_SIZE+0x1a0>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2146:	2300      	movs	r3, #0
    2148:	617b      	str	r3, [r7, #20]
    214a:	e008      	b.n	215e <STACK_SIZE+0x15e>
					if (spi_is_ready_to_read(module)) {
    214c:	68fb      	ldr	r3, [r7, #12]
    214e:	0018      	movs	r0, r3
    2150:	4b1d      	ldr	r3, [pc, #116]	; (21c8 <STACK_SIZE+0x1c8>)
    2152:	4798      	blx	r3
    2154:	1e03      	subs	r3, r0, #0
    2156:	d107      	bne.n	2168 <STACK_SIZE+0x168>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2158:	697b      	ldr	r3, [r7, #20]
    215a:	3301      	adds	r3, #1
    215c:	617b      	str	r3, [r7, #20]
    215e:	697b      	ldr	r3, [r7, #20]
    2160:	4a17      	ldr	r2, [pc, #92]	; (21c0 <STACK_SIZE+0x1c0>)
    2162:	4293      	cmp	r3, r2
    2164:	d9f2      	bls.n	214c <STACK_SIZE+0x14c>
    2166:	e000      	b.n	216a <STACK_SIZE+0x16a>
						break;
    2168:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	0018      	movs	r0, r3
    216e:	4b16      	ldr	r3, [pc, #88]	; (21c8 <STACK_SIZE+0x1c8>)
    2170:	4798      	blx	r3
    2172:	0003      	movs	r3, r0
    2174:	001a      	movs	r2, r3
    2176:	2301      	movs	r3, #1
    2178:	4053      	eors	r3, r2
    217a:	b2db      	uxtb	r3, r3
    217c:	2b00      	cmp	r3, #0
    217e:	d001      	beq.n	2184 <STACK_SIZE+0x184>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    2180:	2312      	movs	r3, #18
    2182:	e013      	b.n	21ac <STACK_SIZE+0x1ac>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    2184:	2310      	movs	r3, #16
    2186:	18fa      	adds	r2, r7, r3
    2188:	68fb      	ldr	r3, [r7, #12]
    218a:	0011      	movs	r1, r2
    218c:	0018      	movs	r0, r3
    218e:	4b0f      	ldr	r3, [pc, #60]	; (21cc <STACK_SIZE+0x1cc>)
    2190:	4798      	blx	r3
				flush_length--;
    2192:	2324      	movs	r3, #36	; 0x24
    2194:	18fb      	adds	r3, r7, r3
    2196:	881a      	ldrh	r2, [r3, #0]
    2198:	2324      	movs	r3, #36	; 0x24
    219a:	18fb      	adds	r3, r7, r3
    219c:	3a01      	subs	r2, #1
    219e:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    21a0:	2324      	movs	r3, #36	; 0x24
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	881b      	ldrh	r3, [r3, #0]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d1cd      	bne.n	2146 <STACK_SIZE+0x146>
			}
		}
	}
#  endif
	return STATUS_OK;
    21aa:	2300      	movs	r3, #0
}
    21ac:	0018      	movs	r0, r3
    21ae:	46bd      	mov	sp, r7
    21b0:	b00a      	add	sp, #40	; 0x28
    21b2:	bd80      	pop	{r7, pc}
    21b4:	00001c59 	.word	0x00001c59
    21b8:	00001da1 	.word	0x00001da1
    21bc:	00001c81 	.word	0x00001c81
    21c0:	00002710 	.word	0x00002710
    21c4:	00001cd1 	.word	0x00001cd1
    21c8:	00001ca9 	.word	0x00001ca9
    21cc:	00001d19 	.word	0x00001d19

000021d0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    21d0:	b590      	push	{r4, r7, lr}
    21d2:	b08d      	sub	sp, #52	; 0x34
    21d4:	af00      	add	r7, sp, #0
    21d6:	60f8      	str	r0, [r7, #12]
    21d8:	60b9      	str	r1, [r7, #8]
    21da:	607a      	str	r2, [r7, #4]
    21dc:	001a      	movs	r2, r3
    21de:	1cbb      	adds	r3, r7, #2
    21e0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	2238      	movs	r2, #56	; 0x38
    21e6:	5c9b      	ldrb	r3, [r3, r2]
    21e8:	b2db      	uxtb	r3, r3
    21ea:	2b05      	cmp	r3, #5
    21ec:	d101      	bne.n	21f2 <spi_transceive_buffer_wait+0x22>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    21ee:	2305      	movs	r3, #5
    21f0:	e1e3      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    21f2:	1cbb      	adds	r3, r7, #2
    21f4:	881b      	ldrh	r3, [r3, #0]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d101      	bne.n	21fe <spi_transceive_buffer_wait+0x2e>
		return STATUS_ERR_INVALID_ARG;
    21fa:	2317      	movs	r3, #23
    21fc:	e1dd      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
	}

	if (!(module->receiver_enabled)) {
    21fe:	68fb      	ldr	r3, [r7, #12]
    2200:	79db      	ldrb	r3, [r3, #7]
    2202:	2201      	movs	r2, #1
    2204:	4053      	eors	r3, r2
    2206:	b2db      	uxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	d001      	beq.n	2210 <spi_transceive_buffer_wait+0x40>
		return STATUS_ERR_DENIED;
    220c:	231c      	movs	r3, #28
    220e:	e1d4      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	795b      	ldrb	r3, [r3, #5]
    2214:	2b00      	cmp	r3, #0
    2216:	d109      	bne.n	222c <spi_transceive_buffer_wait+0x5c>
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	0018      	movs	r0, r3
    221c:	4bca      	ldr	r3, [pc, #808]	; (2548 <spi_transceive_buffer_wait+0x378>)
    221e:	4798      	blx	r3
    2220:	1e03      	subs	r3, r0, #0
    2222:	d003      	beq.n	222c <spi_transceive_buffer_wait+0x5c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	0018      	movs	r0, r3
    2228:	4bc8      	ldr	r3, [pc, #800]	; (254c <spi_transceive_buffer_wait+0x37c>)
    222a:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    222c:	232e      	movs	r3, #46	; 0x2e
    222e:	18fb      	adds	r3, r7, r3
    2230:	2200      	movs	r2, #0
    2232:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
    2234:	232c      	movs	r3, #44	; 0x2c
    2236:	18fb      	adds	r3, r7, r3
    2238:	2200      	movs	r2, #0
    223a:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
    223c:	232a      	movs	r3, #42	; 0x2a
    223e:	18fb      	adds	r3, r7, r3
    2240:	1cba      	adds	r2, r7, #2
    2242:	8812      	ldrh	r2, [r2, #0]
    2244:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
    2246:	e123      	b.n	2490 <spi_transceive_buffer_wait+0x2c0>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    2248:	68fb      	ldr	r3, [r7, #12]
    224a:	795b      	ldrb	r3, [r3, #5]
    224c:	2b00      	cmp	r3, #0
    224e:	d12a      	bne.n	22a6 <spi_transceive_buffer_wait+0xd6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2250:	2300      	movs	r3, #0
    2252:	627b      	str	r3, [r7, #36]	; 0x24
    2254:	e008      	b.n	2268 <spi_transceive_buffer_wait+0x98>
				if (spi_is_ready_to_write(module)) {
    2256:	68fb      	ldr	r3, [r7, #12]
    2258:	0018      	movs	r0, r3
    225a:	4bbd      	ldr	r3, [pc, #756]	; (2550 <spi_transceive_buffer_wait+0x380>)
    225c:	4798      	blx	r3
    225e:	1e03      	subs	r3, r0, #0
    2260:	d107      	bne.n	2272 <spi_transceive_buffer_wait+0xa2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2264:	3301      	adds	r3, #1
    2266:	627b      	str	r3, [r7, #36]	; 0x24
    2268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    226a:	4aba      	ldr	r2, [pc, #744]	; (2554 <spi_transceive_buffer_wait+0x384>)
    226c:	4293      	cmp	r3, r2
    226e:	d9f2      	bls.n	2256 <spi_transceive_buffer_wait+0x86>
    2270:	e000      	b.n	2274 <spi_transceive_buffer_wait+0xa4>
					break;
    2272:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    2274:	68fb      	ldr	r3, [r7, #12]
    2276:	0018      	movs	r0, r3
    2278:	4bb3      	ldr	r3, [pc, #716]	; (2548 <spi_transceive_buffer_wait+0x378>)
    227a:	4798      	blx	r3
    227c:	1e03      	subs	r3, r0, #0
    227e:	d005      	beq.n	228c <spi_transceive_buffer_wait+0xbc>
				_spi_clear_tx_complete_flag(module);
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	0018      	movs	r0, r3
    2284:	4bb1      	ldr	r3, [pc, #708]	; (254c <spi_transceive_buffer_wait+0x37c>)
    2286:	4798      	blx	r3
				return STATUS_ABORTED;
    2288:	2304      	movs	r3, #4
    228a:	e196      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_write(module)) {
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	0018      	movs	r0, r3
    2290:	4baf      	ldr	r3, [pc, #700]	; (2550 <spi_transceive_buffer_wait+0x380>)
    2292:	4798      	blx	r3
    2294:	0003      	movs	r3, r0
    2296:	001a      	movs	r2, r3
    2298:	2301      	movs	r3, #1
    229a:	4053      	eors	r3, r2
    229c:	b2db      	uxtb	r3, r3
    229e:	2b00      	cmp	r3, #0
    22a0:	d001      	beq.n	22a6 <spi_transceive_buffer_wait+0xd6>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    22a2:	2312      	movs	r3, #18
    22a4:	e189      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	68fb      	ldr	r3, [r7, #12]
    22aa:	0018      	movs	r0, r3
    22ac:	4ba8      	ldr	r3, [pc, #672]	; (2550 <spi_transceive_buffer_wait+0x380>)
    22ae:	4798      	blx	r3
    22b0:	0003      	movs	r3, r0
    22b2:	001a      	movs	r2, r3
    22b4:	2301      	movs	r3, #1
    22b6:	4053      	eors	r3, r2
    22b8:	b2db      	uxtb	r3, r3
    22ba:	2b00      	cmp	r3, #0
    22bc:	d1f4      	bne.n	22a8 <spi_transceive_buffer_wait+0xd8>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    22be:	232e      	movs	r3, #46	; 0x2e
    22c0:	18fb      	adds	r3, r7, r3
    22c2:	881b      	ldrh	r3, [r3, #0]
    22c4:	222e      	movs	r2, #46	; 0x2e
    22c6:	18ba      	adds	r2, r7, r2
    22c8:	1c59      	adds	r1, r3, #1
    22ca:	8011      	strh	r1, [r2, #0]
    22cc:	001a      	movs	r2, r3
    22ce:	68bb      	ldr	r3, [r7, #8]
    22d0:	189b      	adds	r3, r3, r2
    22d2:	781a      	ldrb	r2, [r3, #0]
    22d4:	2322      	movs	r3, #34	; 0x22
    22d6:	18fb      	adds	r3, r7, r3
    22d8:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    22da:	68fb      	ldr	r3, [r7, #12]
    22dc:	799b      	ldrb	r3, [r3, #6]
    22de:	2b01      	cmp	r3, #1
    22e0:	d115      	bne.n	230e <spi_transceive_buffer_wait+0x13e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    22e2:	232e      	movs	r3, #46	; 0x2e
    22e4:	18fb      	adds	r3, r7, r3
    22e6:	881b      	ldrh	r3, [r3, #0]
    22e8:	222e      	movs	r2, #46	; 0x2e
    22ea:	18ba      	adds	r2, r7, r2
    22ec:	1c59      	adds	r1, r3, #1
    22ee:	8011      	strh	r1, [r2, #0]
    22f0:	001a      	movs	r2, r3
    22f2:	68bb      	ldr	r3, [r7, #8]
    22f4:	189b      	adds	r3, r3, r2
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	021b      	lsls	r3, r3, #8
    22fa:	b21a      	sxth	r2, r3
    22fc:	2322      	movs	r3, #34	; 0x22
    22fe:	18fb      	adds	r3, r7, r3
    2300:	2100      	movs	r1, #0
    2302:	5e5b      	ldrsh	r3, [r3, r1]
    2304:	4313      	orrs	r3, r2
    2306:	b21a      	sxth	r2, r3
    2308:	2322      	movs	r3, #34	; 0x22
    230a:	18fb      	adds	r3, r7, r3
    230c:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    230e:	2322      	movs	r3, #34	; 0x22
    2310:	18fb      	adds	r3, r7, r3
    2312:	881a      	ldrh	r2, [r3, #0]
    2314:	68fb      	ldr	r3, [r7, #12]
    2316:	0011      	movs	r1, r2
    2318:	0018      	movs	r0, r3
    231a:	4b8f      	ldr	r3, [pc, #572]	; (2558 <spi_transceive_buffer_wait+0x388>)
    231c:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    231e:	68fb      	ldr	r3, [r7, #12]
    2320:	795b      	ldrb	r3, [r3, #5]
    2322:	2b00      	cmp	r3, #0
    2324:	d165      	bne.n	23f2 <spi_transceive_buffer_wait+0x222>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    2326:	2300      	movs	r3, #0
    2328:	61fb      	str	r3, [r7, #28]
    232a:	e043      	b.n	23b4 <spi_transceive_buffer_wait+0x1e4>
				if (spi_is_ready_to_write(module)) {
    232c:	68fb      	ldr	r3, [r7, #12]
    232e:	0018      	movs	r0, r3
    2330:	4b87      	ldr	r3, [pc, #540]	; (2550 <spi_transceive_buffer_wait+0x380>)
    2332:	4798      	blx	r3
    2334:	1e03      	subs	r3, r0, #0
    2336:	d034      	beq.n	23a2 <spi_transceive_buffer_wait+0x1d2>
					data_to_send = tx_data[tx_pos++];
    2338:	232e      	movs	r3, #46	; 0x2e
    233a:	18fb      	adds	r3, r7, r3
    233c:	881b      	ldrh	r3, [r3, #0]
    233e:	222e      	movs	r2, #46	; 0x2e
    2340:	18ba      	adds	r2, r7, r2
    2342:	1c59      	adds	r1, r3, #1
    2344:	8011      	strh	r1, [r2, #0]
    2346:	001a      	movs	r2, r3
    2348:	68bb      	ldr	r3, [r7, #8]
    234a:	189b      	adds	r3, r3, r2
    234c:	781a      	ldrb	r2, [r3, #0]
    234e:	2322      	movs	r3, #34	; 0x22
    2350:	18fb      	adds	r3, r7, r3
    2352:	801a      	strh	r2, [r3, #0]
					/* If 9-bit data, get next byte to send from the buffer */
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2354:	68fb      	ldr	r3, [r7, #12]
    2356:	799b      	ldrb	r3, [r3, #6]
    2358:	2b01      	cmp	r3, #1
    235a:	d115      	bne.n	2388 <spi_transceive_buffer_wait+0x1b8>
						data_to_send |= (tx_data[tx_pos++] << 8);
    235c:	232e      	movs	r3, #46	; 0x2e
    235e:	18fb      	adds	r3, r7, r3
    2360:	881b      	ldrh	r3, [r3, #0]
    2362:	222e      	movs	r2, #46	; 0x2e
    2364:	18ba      	adds	r2, r7, r2
    2366:	1c59      	adds	r1, r3, #1
    2368:	8011      	strh	r1, [r2, #0]
    236a:	001a      	movs	r2, r3
    236c:	68bb      	ldr	r3, [r7, #8]
    236e:	189b      	adds	r3, r3, r2
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	021b      	lsls	r3, r3, #8
    2374:	b21a      	sxth	r2, r3
    2376:	2322      	movs	r3, #34	; 0x22
    2378:	18fb      	adds	r3, r7, r3
    237a:	2100      	movs	r1, #0
    237c:	5e5b      	ldrsh	r3, [r3, r1]
    237e:	4313      	orrs	r3, r2
    2380:	b21a      	sxth	r2, r3
    2382:	2322      	movs	r3, #34	; 0x22
    2384:	18fb      	adds	r3, r7, r3
    2386:	801a      	strh	r2, [r3, #0]
					}

					/* Write the data to send */
					spi_write(module, data_to_send);
    2388:	2322      	movs	r3, #34	; 0x22
    238a:	18fb      	adds	r3, r7, r3
    238c:	881a      	ldrh	r2, [r3, #0]
    238e:	68fb      	ldr	r3, [r7, #12]
    2390:	0011      	movs	r1, r2
    2392:	0018      	movs	r0, r3
    2394:	4b70      	ldr	r3, [pc, #448]	; (2558 <spi_transceive_buffer_wait+0x388>)
    2396:	4798      	blx	r3
					length--;
    2398:	1cbb      	adds	r3, r7, #2
    239a:	881a      	ldrh	r2, [r3, #0]
    239c:	1cbb      	adds	r3, r7, #2
    239e:	3a01      	subs	r2, #1
    23a0:	801a      	strh	r2, [r3, #0]
				}
				if (spi_is_ready_to_read(module)) {
    23a2:	68fb      	ldr	r3, [r7, #12]
    23a4:	0018      	movs	r0, r3
    23a6:	4b6d      	ldr	r3, [pc, #436]	; (255c <spi_transceive_buffer_wait+0x38c>)
    23a8:	4798      	blx	r3
    23aa:	1e03      	subs	r3, r0, #0
    23ac:	d107      	bne.n	23be <spi_transceive_buffer_wait+0x1ee>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    23ae:	69fb      	ldr	r3, [r7, #28]
    23b0:	3301      	adds	r3, #1
    23b2:	61fb      	str	r3, [r7, #28]
    23b4:	69fb      	ldr	r3, [r7, #28]
    23b6:	4a67      	ldr	r2, [pc, #412]	; (2554 <spi_transceive_buffer_wait+0x384>)
    23b8:	4293      	cmp	r3, r2
    23ba:	d9b7      	bls.n	232c <spi_transceive_buffer_wait+0x15c>
    23bc:	e000      	b.n	23c0 <spi_transceive_buffer_wait+0x1f0>
					break;
    23be:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    23c0:	68fb      	ldr	r3, [r7, #12]
    23c2:	0018      	movs	r0, r3
    23c4:	4b60      	ldr	r3, [pc, #384]	; (2548 <spi_transceive_buffer_wait+0x378>)
    23c6:	4798      	blx	r3
    23c8:	1e03      	subs	r3, r0, #0
    23ca:	d005      	beq.n	23d8 <spi_transceive_buffer_wait+0x208>
				_spi_clear_tx_complete_flag(module);
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	0018      	movs	r0, r3
    23d0:	4b5e      	ldr	r3, [pc, #376]	; (254c <spi_transceive_buffer_wait+0x37c>)
    23d2:	4798      	blx	r3
				return STATUS_ABORTED;
    23d4:	2304      	movs	r3, #4
    23d6:	e0f0      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
			}

			if (!spi_is_ready_to_read(module)) {
    23d8:	68fb      	ldr	r3, [r7, #12]
    23da:	0018      	movs	r0, r3
    23dc:	4b5f      	ldr	r3, [pc, #380]	; (255c <spi_transceive_buffer_wait+0x38c>)
    23de:	4798      	blx	r3
    23e0:	0003      	movs	r3, r0
    23e2:	001a      	movs	r2, r3
    23e4:	2301      	movs	r3, #1
    23e6:	4053      	eors	r3, r2
    23e8:	b2db      	uxtb	r3, r3
    23ea:	2b00      	cmp	r3, #0
    23ec:	d001      	beq.n	23f2 <spi_transceive_buffer_wait+0x222>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    23ee:	2312      	movs	r3, #18
    23f0:	e0e3      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	68fb      	ldr	r3, [r7, #12]
    23f6:	0018      	movs	r0, r3
    23f8:	4b58      	ldr	r3, [pc, #352]	; (255c <spi_transceive_buffer_wait+0x38c>)
    23fa:	4798      	blx	r3
    23fc:	0003      	movs	r3, r0
    23fe:	001a      	movs	r2, r3
    2400:	2301      	movs	r3, #1
    2402:	4053      	eors	r3, r2
    2404:	b2db      	uxtb	r3, r3
    2406:	2b00      	cmp	r3, #0
    2408:	d1f4      	bne.n	23f4 <spi_transceive_buffer_wait+0x224>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    240a:	2314      	movs	r3, #20
    240c:	18fb      	adds	r3, r7, r3
    240e:	2200      	movs	r2, #0
    2410:	801a      	strh	r2, [r3, #0]
		rx_length--;
    2412:	232a      	movs	r3, #42	; 0x2a
    2414:	18fb      	adds	r3, r7, r3
    2416:	881a      	ldrh	r2, [r3, #0]
    2418:	232a      	movs	r3, #42	; 0x2a
    241a:	18fb      	adds	r3, r7, r3
    241c:	3a01      	subs	r2, #1
    241e:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    2420:	2317      	movs	r3, #23
    2422:	18fc      	adds	r4, r7, r3
    2424:	2314      	movs	r3, #20
    2426:	18fa      	adds	r2, r7, r3
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	0011      	movs	r1, r2
    242c:	0018      	movs	r0, r3
    242e:	4b4c      	ldr	r3, [pc, #304]	; (2560 <spi_transceive_buffer_wait+0x390>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    2436:	2317      	movs	r3, #23
    2438:	18fb      	adds	r3, r7, r3
    243a:	781b      	ldrb	r3, [r3, #0]
    243c:	2b00      	cmp	r3, #0
    243e:	d003      	beq.n	2448 <spi_transceive_buffer_wait+0x278>
			/* Overflow, abort */
			return retval;
    2440:	2317      	movs	r3, #23
    2442:	18fb      	adds	r3, r7, r3
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	e0b8      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2448:	232c      	movs	r3, #44	; 0x2c
    244a:	18fb      	adds	r3, r7, r3
    244c:	881b      	ldrh	r3, [r3, #0]
    244e:	222c      	movs	r2, #44	; 0x2c
    2450:	18ba      	adds	r2, r7, r2
    2452:	1c59      	adds	r1, r3, #1
    2454:	8011      	strh	r1, [r2, #0]
    2456:	001a      	movs	r2, r3
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	189b      	adds	r3, r3, r2
    245c:	2214      	movs	r2, #20
    245e:	18ba      	adds	r2, r7, r2
    2460:	8812      	ldrh	r2, [r2, #0]
    2462:	b2d2      	uxtb	r2, r2
    2464:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	799b      	ldrb	r3, [r3, #6]
    246a:	2b01      	cmp	r3, #1
    246c:	d110      	bne.n	2490 <spi_transceive_buffer_wait+0x2c0>
			rx_data[rx_pos++] = (received_data >> 8);
    246e:	232c      	movs	r3, #44	; 0x2c
    2470:	18fb      	adds	r3, r7, r3
    2472:	881b      	ldrh	r3, [r3, #0]
    2474:	222c      	movs	r2, #44	; 0x2c
    2476:	18ba      	adds	r2, r7, r2
    2478:	1c59      	adds	r1, r3, #1
    247a:	8011      	strh	r1, [r2, #0]
    247c:	001a      	movs	r2, r3
    247e:	687b      	ldr	r3, [r7, #4]
    2480:	189b      	adds	r3, r3, r2
    2482:	2214      	movs	r2, #20
    2484:	18ba      	adds	r2, r7, r2
    2486:	8812      	ldrh	r2, [r2, #0]
    2488:	0a12      	lsrs	r2, r2, #8
    248a:	b292      	uxth	r2, r2
    248c:	b2d2      	uxtb	r2, r2
    248e:	701a      	strb	r2, [r3, #0]
	while (length--) {
    2490:	1cbb      	adds	r3, r7, #2
    2492:	881b      	ldrh	r3, [r3, #0]
    2494:	1cba      	adds	r2, r7, #2
    2496:	1e59      	subs	r1, r3, #1
    2498:	8011      	strh	r1, [r2, #0]
    249a:	2b00      	cmp	r3, #0
    249c:	d000      	beq.n	24a0 <spi_transceive_buffer_wait+0x2d0>
    249e:	e6d3      	b.n	2248 <spi_transceive_buffer_wait+0x78>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    24a0:	68fb      	ldr	r3, [r7, #12]
    24a2:	795b      	ldrb	r3, [r3, #5]
    24a4:	2b01      	cmp	r3, #1
    24a6:	d10b      	bne.n	24c0 <spi_transceive_buffer_wait+0x2f0>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    24a8:	46c0      	nop			; (mov r8, r8)
    24aa:	68fb      	ldr	r3, [r7, #12]
    24ac:	0018      	movs	r0, r3
    24ae:	4b26      	ldr	r3, [pc, #152]	; (2548 <spi_transceive_buffer_wait+0x378>)
    24b0:	4798      	blx	r3
    24b2:	0003      	movs	r3, r0
    24b4:	001a      	movs	r2, r3
    24b6:	2301      	movs	r3, #1
    24b8:	4053      	eors	r3, r2
    24ba:	b2db      	uxtb	r3, r3
    24bc:	2b00      	cmp	r3, #0
    24be:	d1f4      	bne.n	24aa <spi_transceive_buffer_wait+0x2da>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    24c0:	68fb      	ldr	r3, [r7, #12]
    24c2:	795b      	ldrb	r3, [r3, #5]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d000      	beq.n	24ca <spi_transceive_buffer_wait+0x2fa>
    24c8:	e076      	b.n	25b8 <spi_transceive_buffer_wait+0x3e8>
		while (rx_length) {
    24ca:	e06f      	b.n	25ac <spi_transceive_buffer_wait+0x3dc>
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    24cc:	2300      	movs	r3, #0
    24ce:	61bb      	str	r3, [r7, #24]
    24d0:	e008      	b.n	24e4 <spi_transceive_buffer_wait+0x314>
				if (spi_is_ready_to_read(module)) {
    24d2:	68fb      	ldr	r3, [r7, #12]
    24d4:	0018      	movs	r0, r3
    24d6:	4b21      	ldr	r3, [pc, #132]	; (255c <spi_transceive_buffer_wait+0x38c>)
    24d8:	4798      	blx	r3
    24da:	1e03      	subs	r3, r0, #0
    24dc:	d107      	bne.n	24ee <spi_transceive_buffer_wait+0x31e>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    24de:	69bb      	ldr	r3, [r7, #24]
    24e0:	3301      	adds	r3, #1
    24e2:	61bb      	str	r3, [r7, #24]
    24e4:	69bb      	ldr	r3, [r7, #24]
    24e6:	4a1b      	ldr	r2, [pc, #108]	; (2554 <spi_transceive_buffer_wait+0x384>)
    24e8:	4293      	cmp	r3, r2
    24ea:	d9f2      	bls.n	24d2 <spi_transceive_buffer_wait+0x302>
    24ec:	e000      	b.n	24f0 <spi_transceive_buffer_wait+0x320>
					break;
    24ee:	46c0      	nop			; (mov r8, r8)
				}
			}
			if (!spi_is_ready_to_read(module)) {
    24f0:	68fb      	ldr	r3, [r7, #12]
    24f2:	0018      	movs	r0, r3
    24f4:	4b19      	ldr	r3, [pc, #100]	; (255c <spi_transceive_buffer_wait+0x38c>)
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
    24fa:	001a      	movs	r2, r3
    24fc:	2301      	movs	r3, #1
    24fe:	4053      	eors	r3, r2
    2500:	b2db      	uxtb	r3, r3
    2502:	2b00      	cmp	r3, #0
    2504:	d001      	beq.n	250a <spi_transceive_buffer_wait+0x33a>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    2506:	2312      	movs	r3, #18
    2508:	e057      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
			}
			enum status_code retval;
			uint16_t received_data = 0;
    250a:	2312      	movs	r3, #18
    250c:	18fb      	adds	r3, r7, r3
    250e:	2200      	movs	r2, #0
    2510:	801a      	strh	r2, [r3, #0]
			rx_length--;
    2512:	232a      	movs	r3, #42	; 0x2a
    2514:	18fb      	adds	r3, r7, r3
    2516:	881a      	ldrh	r2, [r3, #0]
    2518:	232a      	movs	r3, #42	; 0x2a
    251a:	18fb      	adds	r3, r7, r3
    251c:	3a01      	subs	r2, #1
    251e:	801a      	strh	r2, [r3, #0]

			retval = spi_read(module, &received_data);
    2520:	2316      	movs	r3, #22
    2522:	18fc      	adds	r4, r7, r3
    2524:	2312      	movs	r3, #18
    2526:	18fa      	adds	r2, r7, r3
    2528:	68fb      	ldr	r3, [r7, #12]
    252a:	0011      	movs	r1, r2
    252c:	0018      	movs	r0, r3
    252e:	4b0c      	ldr	r3, [pc, #48]	; (2560 <spi_transceive_buffer_wait+0x390>)
    2530:	4798      	blx	r3
    2532:	0003      	movs	r3, r0
    2534:	7023      	strb	r3, [r4, #0]

			if (retval != STATUS_OK) {
    2536:	2316      	movs	r3, #22
    2538:	18fb      	adds	r3, r7, r3
    253a:	781b      	ldrb	r3, [r3, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	d011      	beq.n	2564 <spi_transceive_buffer_wait+0x394>
				/* Overflow, abort */
				return retval;
    2540:	2316      	movs	r3, #22
    2542:	18fb      	adds	r3, r7, r3
    2544:	781b      	ldrb	r3, [r3, #0]
    2546:	e038      	b.n	25ba <spi_transceive_buffer_wait+0x3ea>
    2548:	00001c59 	.word	0x00001c59
    254c:	00001da1 	.word	0x00001da1
    2550:	00001c81 	.word	0x00001c81
    2554:	00002710 	.word	0x00002710
    2558:	00001cd1 	.word	0x00001cd1
    255c:	00001ca9 	.word	0x00001ca9
    2560:	00001d19 	.word	0x00001d19
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
    2564:	232c      	movs	r3, #44	; 0x2c
    2566:	18fb      	adds	r3, r7, r3
    2568:	881b      	ldrh	r3, [r3, #0]
    256a:	222c      	movs	r2, #44	; 0x2c
    256c:	18ba      	adds	r2, r7, r2
    256e:	1c59      	adds	r1, r3, #1
    2570:	8011      	strh	r1, [r2, #0]
    2572:	001a      	movs	r2, r3
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	189b      	adds	r3, r3, r2
    2578:	2212      	movs	r2, #18
    257a:	18ba      	adds	r2, r7, r2
    257c:	8812      	ldrh	r2, [r2, #0]
    257e:	b2d2      	uxtb	r2, r2
    2580:	701a      	strb	r2, [r3, #0]

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2582:	68fb      	ldr	r3, [r7, #12]
    2584:	799b      	ldrb	r3, [r3, #6]
    2586:	2b01      	cmp	r3, #1
    2588:	d110      	bne.n	25ac <spi_transceive_buffer_wait+0x3dc>
				rx_data[rx_pos++] = (received_data >> 8);
    258a:	232c      	movs	r3, #44	; 0x2c
    258c:	18fb      	adds	r3, r7, r3
    258e:	881b      	ldrh	r3, [r3, #0]
    2590:	222c      	movs	r2, #44	; 0x2c
    2592:	18ba      	adds	r2, r7, r2
    2594:	1c59      	adds	r1, r3, #1
    2596:	8011      	strh	r1, [r2, #0]
    2598:	001a      	movs	r2, r3
    259a:	687b      	ldr	r3, [r7, #4]
    259c:	189b      	adds	r3, r3, r2
    259e:	2212      	movs	r2, #18
    25a0:	18ba      	adds	r2, r7, r2
    25a2:	8812      	ldrh	r2, [r2, #0]
    25a4:	0a12      	lsrs	r2, r2, #8
    25a6:	b292      	uxth	r2, r2
    25a8:	b2d2      	uxtb	r2, r2
    25aa:	701a      	strb	r2, [r3, #0]
		while (rx_length) {
    25ac:	232a      	movs	r3, #42	; 0x2a
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	881b      	ldrh	r3, [r3, #0]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d000      	beq.n	25b8 <spi_transceive_buffer_wait+0x3e8>
    25b6:	e789      	b.n	24cc <spi_transceive_buffer_wait+0x2fc>
			}
		}
	}
#  endif
	return STATUS_OK;
    25b8:	2300      	movs	r3, #0
}
    25ba:	0018      	movs	r0, r3
    25bc:	46bd      	mov	sp, r7
    25be:	b00d      	add	sp, #52	; 0x34
    25c0:	bd90      	pop	{r4, r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)

000025c4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    25c4:	b580      	push	{r7, lr}
    25c6:	b082      	sub	sp, #8
    25c8:	af00      	add	r7, sp, #0
    25ca:	0002      	movs	r2, r0
    25cc:	1dfb      	adds	r3, r7, #7
    25ce:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    25d0:	46c0      	nop			; (mov r8, r8)
    25d2:	46bd      	mov	sp, r7
    25d4:	b002      	add	sp, #8
    25d6:	bd80      	pop	{r7, pc}

000025d8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    25d8:	b580      	push	{r7, lr}
    25da:	b084      	sub	sp, #16
    25dc:	af00      	add	r7, sp, #0
    25de:	0002      	movs	r2, r0
    25e0:	6039      	str	r1, [r7, #0]
    25e2:	1dfb      	adds	r3, r7, #7
    25e4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    25e6:	4b13      	ldr	r3, [pc, #76]	; (2634 <_sercom_set_handler+0x5c>)
    25e8:	781b      	ldrb	r3, [r3, #0]
    25ea:	2201      	movs	r2, #1
    25ec:	4053      	eors	r3, r2
    25ee:	b2db      	uxtb	r3, r3
    25f0:	2b00      	cmp	r3, #0
    25f2:	d015      	beq.n	2620 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    25f4:	2300      	movs	r3, #0
    25f6:	60fb      	str	r3, [r7, #12]
    25f8:	e00c      	b.n	2614 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25fa:	4b0f      	ldr	r3, [pc, #60]	; (2638 <_sercom_set_handler+0x60>)
    25fc:	68fa      	ldr	r2, [r7, #12]
    25fe:	0092      	lsls	r2, r2, #2
    2600:	490e      	ldr	r1, [pc, #56]	; (263c <_sercom_set_handler+0x64>)
    2602:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2604:	4b0e      	ldr	r3, [pc, #56]	; (2640 <_sercom_set_handler+0x68>)
    2606:	68fa      	ldr	r2, [r7, #12]
    2608:	0092      	lsls	r2, r2, #2
    260a:	2100      	movs	r1, #0
    260c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    260e:	68fb      	ldr	r3, [r7, #12]
    2610:	3301      	adds	r3, #1
    2612:	60fb      	str	r3, [r7, #12]
    2614:	68fb      	ldr	r3, [r7, #12]
    2616:	2b05      	cmp	r3, #5
    2618:	d9ef      	bls.n	25fa <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    261a:	4b06      	ldr	r3, [pc, #24]	; (2634 <_sercom_set_handler+0x5c>)
    261c:	2201      	movs	r2, #1
    261e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2620:	1dfb      	adds	r3, r7, #7
    2622:	781a      	ldrb	r2, [r3, #0]
    2624:	4b04      	ldr	r3, [pc, #16]	; (2638 <_sercom_set_handler+0x60>)
    2626:	0092      	lsls	r2, r2, #2
    2628:	6839      	ldr	r1, [r7, #0]
    262a:	50d1      	str	r1, [r2, r3]
}
    262c:	46c0      	nop			; (mov r8, r8)
    262e:	46bd      	mov	sp, r7
    2630:	b004      	add	sp, #16
    2632:	bd80      	pop	{r7, pc}
    2634:	200000fa 	.word	0x200000fa
    2638:	200000fc 	.word	0x200000fc
    263c:	000025c5 	.word	0x000025c5
    2640:	20000174 	.word	0x20000174

00002644 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2644:	b590      	push	{r4, r7, lr}
    2646:	b085      	sub	sp, #20
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    264c:	2308      	movs	r3, #8
    264e:	18fb      	adds	r3, r7, r3
    2650:	4a0b      	ldr	r2, [pc, #44]	; (2680 <_sercom_get_interrupt_vector+0x3c>)
    2652:	6811      	ldr	r1, [r2, #0]
    2654:	6019      	str	r1, [r3, #0]
    2656:	8892      	ldrh	r2, [r2, #4]
    2658:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    265a:	230f      	movs	r3, #15
    265c:	18fc      	adds	r4, r7, r3
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	0018      	movs	r0, r3
    2662:	4b08      	ldr	r3, [pc, #32]	; (2684 <_sercom_get_interrupt_vector+0x40>)
    2664:	4798      	blx	r3
    2666:	0003      	movs	r3, r0
    2668:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    266a:	230f      	movs	r3, #15
    266c:	18fb      	adds	r3, r7, r3
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	2208      	movs	r2, #8
    2672:	18ba      	adds	r2, r7, r2
    2674:	5cd3      	ldrb	r3, [r2, r3]
    2676:	b25b      	sxtb	r3, r3
}
    2678:	0018      	movs	r0, r3
    267a:	46bd      	mov	sp, r7
    267c:	b005      	add	sp, #20
    267e:	bd90      	pop	{r4, r7, pc}
    2680:	00003988 	.word	0x00003988
    2684:	00000e9d 	.word	0x00000e9d

00002688 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2688:	b580      	push	{r7, lr}
    268a:	af00      	add	r7, sp, #0
    268c:	4b03      	ldr	r3, [pc, #12]	; (269c <SERCOM0_Handler+0x14>)
    268e:	681b      	ldr	r3, [r3, #0]
    2690:	2000      	movs	r0, #0
    2692:	4798      	blx	r3
    2694:	46c0      	nop			; (mov r8, r8)
    2696:	46bd      	mov	sp, r7
    2698:	bd80      	pop	{r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	200000fc 	.word	0x200000fc

000026a0 <SERCOM1_Handler>:
    26a0:	b580      	push	{r7, lr}
    26a2:	af00      	add	r7, sp, #0
    26a4:	4b03      	ldr	r3, [pc, #12]	; (26b4 <SERCOM1_Handler+0x14>)
    26a6:	685b      	ldr	r3, [r3, #4]
    26a8:	2001      	movs	r0, #1
    26aa:	4798      	blx	r3
    26ac:	46c0      	nop			; (mov r8, r8)
    26ae:	46bd      	mov	sp, r7
    26b0:	bd80      	pop	{r7, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	200000fc 	.word	0x200000fc

000026b8 <SERCOM2_Handler>:
    26b8:	b580      	push	{r7, lr}
    26ba:	af00      	add	r7, sp, #0
    26bc:	4b03      	ldr	r3, [pc, #12]	; (26cc <SERCOM2_Handler+0x14>)
    26be:	689b      	ldr	r3, [r3, #8]
    26c0:	2002      	movs	r0, #2
    26c2:	4798      	blx	r3
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	46bd      	mov	sp, r7
    26c8:	bd80      	pop	{r7, pc}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	200000fc 	.word	0x200000fc

000026d0 <SERCOM3_Handler>:
    26d0:	b580      	push	{r7, lr}
    26d2:	af00      	add	r7, sp, #0
    26d4:	4b03      	ldr	r3, [pc, #12]	; (26e4 <SERCOM3_Handler+0x14>)
    26d6:	68db      	ldr	r3, [r3, #12]
    26d8:	2003      	movs	r0, #3
    26da:	4798      	blx	r3
    26dc:	46c0      	nop			; (mov r8, r8)
    26de:	46bd      	mov	sp, r7
    26e0:	bd80      	pop	{r7, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	200000fc 	.word	0x200000fc

000026e8 <SERCOM4_Handler>:
    26e8:	b580      	push	{r7, lr}
    26ea:	af00      	add	r7, sp, #0
    26ec:	4b03      	ldr	r3, [pc, #12]	; (26fc <SERCOM4_Handler+0x14>)
    26ee:	691b      	ldr	r3, [r3, #16]
    26f0:	2004      	movs	r0, #4
    26f2:	4798      	blx	r3
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	46bd      	mov	sp, r7
    26f8:	bd80      	pop	{r7, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	200000fc 	.word	0x200000fc

00002700 <SERCOM5_Handler>:
    2700:	b580      	push	{r7, lr}
    2702:	af00      	add	r7, sp, #0
    2704:	4b03      	ldr	r3, [pc, #12]	; (2714 <SERCOM5_Handler+0x14>)
    2706:	695b      	ldr	r3, [r3, #20]
    2708:	2005      	movs	r0, #5
    270a:	4798      	blx	r3
    270c:	46c0      	nop			; (mov r8, r8)
    270e:	46bd      	mov	sp, r7
    2710:	bd80      	pop	{r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	200000fc 	.word	0x200000fc

00002718 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2718:	b580      	push	{r7, lr}
    271a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    271c:	46c0      	nop			; (mov r8, r8)
    271e:	46bd      	mov	sp, r7
    2720:	bd80      	pop	{r7, pc}
	...

00002724 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2724:	b580      	push	{r7, lr}
    2726:	b082      	sub	sp, #8
    2728:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    272a:	4b10      	ldr	r3, [pc, #64]	; (276c <cpu_irq_enter_critical+0x48>)
    272c:	681b      	ldr	r3, [r3, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d112      	bne.n	2758 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2732:	f3ef 8310 	mrs	r3, PRIMASK
    2736:	607b      	str	r3, [r7, #4]
  return(result);
    2738:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    273a:	2b00      	cmp	r3, #0
    273c:	d109      	bne.n	2752 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    273e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2740:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2744:	4b0a      	ldr	r3, [pc, #40]	; (2770 <cpu_irq_enter_critical+0x4c>)
    2746:	2200      	movs	r2, #0
    2748:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    274a:	4b0a      	ldr	r3, [pc, #40]	; (2774 <cpu_irq_enter_critical+0x50>)
    274c:	2201      	movs	r2, #1
    274e:	701a      	strb	r2, [r3, #0]
    2750:	e002      	b.n	2758 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2752:	4b08      	ldr	r3, [pc, #32]	; (2774 <cpu_irq_enter_critical+0x50>)
    2754:	2200      	movs	r2, #0
    2756:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2758:	4b04      	ldr	r3, [pc, #16]	; (276c <cpu_irq_enter_critical+0x48>)
    275a:	681b      	ldr	r3, [r3, #0]
    275c:	1c5a      	adds	r2, r3, #1
    275e:	4b03      	ldr	r3, [pc, #12]	; (276c <cpu_irq_enter_critical+0x48>)
    2760:	601a      	str	r2, [r3, #0]
}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	46bd      	mov	sp, r7
    2766:	b002      	add	sp, #8
    2768:	bd80      	pop	{r7, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	20000114 	.word	0x20000114
    2770:	20000018 	.word	0x20000018
    2774:	20000118 	.word	0x20000118

00002778 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2778:	b580      	push	{r7, lr}
    277a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    277c:	4b0b      	ldr	r3, [pc, #44]	; (27ac <cpu_irq_leave_critical+0x34>)
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	1e5a      	subs	r2, r3, #1
    2782:	4b0a      	ldr	r3, [pc, #40]	; (27ac <cpu_irq_leave_critical+0x34>)
    2784:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2786:	4b09      	ldr	r3, [pc, #36]	; (27ac <cpu_irq_leave_critical+0x34>)
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	d10a      	bne.n	27a4 <cpu_irq_leave_critical+0x2c>
    278e:	4b08      	ldr	r3, [pc, #32]	; (27b0 <cpu_irq_leave_critical+0x38>)
    2790:	781b      	ldrb	r3, [r3, #0]
    2792:	b2db      	uxtb	r3, r3
    2794:	2b00      	cmp	r3, #0
    2796:	d005      	beq.n	27a4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2798:	4b06      	ldr	r3, [pc, #24]	; (27b4 <cpu_irq_leave_critical+0x3c>)
    279a:	2201      	movs	r2, #1
    279c:	701a      	strb	r2, [r3, #0]
    279e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    27a2:	b662      	cpsie	i
	}
}
    27a4:	46c0      	nop			; (mov r8, r8)
    27a6:	46bd      	mov	sp, r7
    27a8:	bd80      	pop	{r7, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	20000114 	.word	0x20000114
    27b0:	20000118 	.word	0x20000118
    27b4:	20000018 	.word	0x20000018

000027b8 <system_gclk_gen_get_config_defaults>:
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	2201      	movs	r2, #1
    27c4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	2200      	movs	r2, #0
    27ca:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	2206      	movs	r2, #6
    27d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	2200      	movs	r2, #0
    27d6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	2200      	movs	r2, #0
    27dc:	725a      	strb	r2, [r3, #9]
}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	46bd      	mov	sp, r7
    27e2:	b002      	add	sp, #8
    27e4:	bd80      	pop	{r7, pc}

000027e6 <system_clock_source_osc8m_get_config_defaults>:
{
    27e6:	b580      	push	{r7, lr}
    27e8:	b082      	sub	sp, #8
    27ea:	af00      	add	r7, sp, #0
    27ec:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	2203      	movs	r2, #3
    27f2:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	2200      	movs	r2, #0
    27f8:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	2201      	movs	r2, #1
    27fe:	709a      	strb	r2, [r3, #2]
}
    2800:	46c0      	nop			; (mov r8, r8)
    2802:	46bd      	mov	sp, r7
    2804:	b002      	add	sp, #8
    2806:	bd80      	pop	{r7, pc}

00002808 <system_cpu_clock_set_divider>:
{
    2808:	b580      	push	{r7, lr}
    280a:	b082      	sub	sp, #8
    280c:	af00      	add	r7, sp, #0
    280e:	0002      	movs	r2, r0
    2810:	1dfb      	adds	r3, r7, #7
    2812:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2814:	4a03      	ldr	r2, [pc, #12]	; (2824 <system_cpu_clock_set_divider+0x1c>)
    2816:	1dfb      	adds	r3, r7, #7
    2818:	781b      	ldrb	r3, [r3, #0]
    281a:	7213      	strb	r3, [r2, #8]
}
    281c:	46c0      	nop			; (mov r8, r8)
    281e:	46bd      	mov	sp, r7
    2820:	b002      	add	sp, #8
    2822:	bd80      	pop	{r7, pc}
    2824:	40000400 	.word	0x40000400

00002828 <system_apb_clock_set_divider>:
{
    2828:	b580      	push	{r7, lr}
    282a:	b082      	sub	sp, #8
    282c:	af00      	add	r7, sp, #0
    282e:	0002      	movs	r2, r0
    2830:	1dfb      	adds	r3, r7, #7
    2832:	701a      	strb	r2, [r3, #0]
    2834:	1dbb      	adds	r3, r7, #6
    2836:	1c0a      	adds	r2, r1, #0
    2838:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    283a:	1dfb      	adds	r3, r7, #7
    283c:	781b      	ldrb	r3, [r3, #0]
    283e:	2b01      	cmp	r3, #1
    2840:	d008      	beq.n	2854 <system_apb_clock_set_divider+0x2c>
    2842:	2b02      	cmp	r3, #2
    2844:	d00b      	beq.n	285e <system_apb_clock_set_divider+0x36>
    2846:	2b00      	cmp	r3, #0
    2848:	d10e      	bne.n	2868 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    284a:	4a0b      	ldr	r2, [pc, #44]	; (2878 <system_apb_clock_set_divider+0x50>)
    284c:	1dbb      	adds	r3, r7, #6
    284e:	781b      	ldrb	r3, [r3, #0]
    2850:	7253      	strb	r3, [r2, #9]
			break;
    2852:	e00b      	b.n	286c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    2854:	4a08      	ldr	r2, [pc, #32]	; (2878 <system_apb_clock_set_divider+0x50>)
    2856:	1dbb      	adds	r3, r7, #6
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	7293      	strb	r3, [r2, #10]
			break;
    285c:	e006      	b.n	286c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    285e:	4a06      	ldr	r2, [pc, #24]	; (2878 <system_apb_clock_set_divider+0x50>)
    2860:	1dbb      	adds	r3, r7, #6
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	72d3      	strb	r3, [r2, #11]
			break;
    2866:	e001      	b.n	286c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    2868:	2317      	movs	r3, #23
    286a:	e000      	b.n	286e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    286c:	2300      	movs	r3, #0
}
    286e:	0018      	movs	r0, r3
    2870:	46bd      	mov	sp, r7
    2872:	b002      	add	sp, #8
    2874:	bd80      	pop	{r7, pc}
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	40000400 	.word	0x40000400

0000287c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
    2882:	0002      	movs	r2, r0
    2884:	1dfb      	adds	r3, r7, #7
    2886:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2888:	4a08      	ldr	r2, [pc, #32]	; (28ac <system_flash_set_waitstates+0x30>)
    288a:	1dfb      	adds	r3, r7, #7
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	210f      	movs	r1, #15
    2890:	400b      	ands	r3, r1
    2892:	b2d9      	uxtb	r1, r3
    2894:	6853      	ldr	r3, [r2, #4]
    2896:	200f      	movs	r0, #15
    2898:	4001      	ands	r1, r0
    289a:	0049      	lsls	r1, r1, #1
    289c:	201e      	movs	r0, #30
    289e:	4383      	bics	r3, r0
    28a0:	430b      	orrs	r3, r1
    28a2:	6053      	str	r3, [r2, #4]
}
    28a4:	46c0      	nop			; (mov r8, r8)
    28a6:	46bd      	mov	sp, r7
    28a8:	b002      	add	sp, #8
    28aa:	bd80      	pop	{r7, pc}
    28ac:	41004000 	.word	0x41004000

000028b0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    28b0:	b580      	push	{r7, lr}
    28b2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28b4:	46c0      	nop			; (mov r8, r8)
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <_system_dfll_wait_for_sync+0x18>)
    28b8:	68db      	ldr	r3, [r3, #12]
    28ba:	2210      	movs	r2, #16
    28bc:	4013      	ands	r3, r2
    28be:	d0fa      	beq.n	28b6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    28c0:	46c0      	nop			; (mov r8, r8)
    28c2:	46bd      	mov	sp, r7
    28c4:	bd80      	pop	{r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	40000800 	.word	0x40000800

000028cc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    28d0:	4b0c      	ldr	r3, [pc, #48]	; (2904 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    28d2:	2202      	movs	r2, #2
    28d4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    28d6:	4b0c      	ldr	r3, [pc, #48]	; (2908 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    28d8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    28da:	4a0a      	ldr	r2, [pc, #40]	; (2904 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    28dc:	4b0b      	ldr	r3, [pc, #44]	; (290c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    28de:	689b      	ldr	r3, [r3, #8]
    28e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    28e2:	4a08      	ldr	r2, [pc, #32]	; (2904 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    28e4:	4b09      	ldr	r3, [pc, #36]	; (290c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    28e6:	685b      	ldr	r3, [r3, #4]
    28e8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    28ea:	4b06      	ldr	r3, [pc, #24]	; (2904 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    28ec:	2200      	movs	r2, #0
    28ee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    28f0:	4b05      	ldr	r3, [pc, #20]	; (2908 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    28f2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    28f4:	4a03      	ldr	r2, [pc, #12]	; (2904 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    28f6:	4b05      	ldr	r3, [pc, #20]	; (290c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	b29b      	uxth	r3, r3
    28fc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	46bd      	mov	sp, r7
    2902:	bd80      	pop	{r7, pc}
    2904:	40000800 	.word	0x40000800
    2908:	000028b1 	.word	0x000028b1
    290c:	2000011c 	.word	0x2000011c

00002910 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2910:	b580      	push	{r7, lr}
    2912:	b082      	sub	sp, #8
    2914:	af00      	add	r7, sp, #0
    2916:	0002      	movs	r2, r0
    2918:	1dfb      	adds	r3, r7, #7
    291a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    291c:	1dfb      	adds	r3, r7, #7
    291e:	781b      	ldrb	r3, [r3, #0]
    2920:	2b08      	cmp	r3, #8
    2922:	d840      	bhi.n	29a6 <system_clock_source_get_hz+0x96>
    2924:	009a      	lsls	r2, r3, #2
    2926:	4b22      	ldr	r3, [pc, #136]	; (29b0 <system_clock_source_get_hz+0xa0>)
    2928:	18d3      	adds	r3, r2, r3
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    292e:	4b21      	ldr	r3, [pc, #132]	; (29b4 <system_clock_source_get_hz+0xa4>)
    2930:	691b      	ldr	r3, [r3, #16]
    2932:	e039      	b.n	29a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2934:	4b20      	ldr	r3, [pc, #128]	; (29b8 <system_clock_source_get_hz+0xa8>)
    2936:	6a1b      	ldr	r3, [r3, #32]
    2938:	059b      	lsls	r3, r3, #22
    293a:	0f9b      	lsrs	r3, r3, #30
    293c:	b2db      	uxtb	r3, r3
    293e:	001a      	movs	r2, r3
    2940:	4b1e      	ldr	r3, [pc, #120]	; (29bc <system_clock_source_get_hz+0xac>)
    2942:	40d3      	lsrs	r3, r2
    2944:	e030      	b.n	29a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2946:	2380      	movs	r3, #128	; 0x80
    2948:	021b      	lsls	r3, r3, #8
    294a:	e02d      	b.n	29a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    294c:	2380      	movs	r3, #128	; 0x80
    294e:	021b      	lsls	r3, r3, #8
    2950:	e02a      	b.n	29a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2952:	4b18      	ldr	r3, [pc, #96]	; (29b4 <system_clock_source_get_hz+0xa4>)
    2954:	695b      	ldr	r3, [r3, #20]
    2956:	e027      	b.n	29a8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2958:	4b16      	ldr	r3, [pc, #88]	; (29b4 <system_clock_source_get_hz+0xa4>)
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	2202      	movs	r2, #2
    295e:	4013      	ands	r3, r2
    2960:	d101      	bne.n	2966 <system_clock_source_get_hz+0x56>
			return 0;
    2962:	2300      	movs	r3, #0
    2964:	e020      	b.n	29a8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    2966:	4b16      	ldr	r3, [pc, #88]	; (29c0 <system_clock_source_get_hz+0xb0>)
    2968:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    296a:	4b12      	ldr	r3, [pc, #72]	; (29b4 <system_clock_source_get_hz+0xa4>)
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	2204      	movs	r2, #4
    2970:	4013      	ands	r3, r2
    2972:	d009      	beq.n	2988 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2974:	2000      	movs	r0, #0
    2976:	4b13      	ldr	r3, [pc, #76]	; (29c4 <system_clock_source_get_hz+0xb4>)
    2978:	4798      	blx	r3
    297a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    297c:	4b0d      	ldr	r3, [pc, #52]	; (29b4 <system_clock_source_get_hz+0xa4>)
    297e:	689b      	ldr	r3, [r3, #8]
    2980:	041b      	lsls	r3, r3, #16
    2982:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2984:	4353      	muls	r3, r2
    2986:	e00f      	b.n	29a8 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    2988:	4b0f      	ldr	r3, [pc, #60]	; (29c8 <system_clock_source_get_hz+0xb8>)
    298a:	e00d      	b.n	29a8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    298c:	4a0a      	ldr	r2, [pc, #40]	; (29b8 <system_clock_source_get_hz+0xa8>)
    298e:	2350      	movs	r3, #80	; 0x50
    2990:	5cd3      	ldrb	r3, [r2, r3]
    2992:	b2db      	uxtb	r3, r3
    2994:	001a      	movs	r2, r3
    2996:	2304      	movs	r3, #4
    2998:	4013      	ands	r3, r2
    299a:	d101      	bne.n	29a0 <system_clock_source_get_hz+0x90>
			return 0;
    299c:	2300      	movs	r3, #0
    299e:	e003      	b.n	29a8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    29a0:	4b04      	ldr	r3, [pc, #16]	; (29b4 <system_clock_source_get_hz+0xa4>)
    29a2:	68db      	ldr	r3, [r3, #12]
    29a4:	e000      	b.n	29a8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    29a6:	2300      	movs	r3, #0
	}
}
    29a8:	0018      	movs	r0, r3
    29aa:	46bd      	mov	sp, r7
    29ac:	b002      	add	sp, #8
    29ae:	bd80      	pop	{r7, pc}
    29b0:	00003990 	.word	0x00003990
    29b4:	2000011c 	.word	0x2000011c
    29b8:	40000800 	.word	0x40000800
    29bc:	007a1200 	.word	0x007a1200
    29c0:	000028b1 	.word	0x000028b1
    29c4:	0000304d 	.word	0x0000304d
    29c8:	02dc6c00 	.word	0x02dc6c00

000029cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    29cc:	b580      	push	{r7, lr}
    29ce:	b084      	sub	sp, #16
    29d0:	af00      	add	r7, sp, #0
    29d2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    29d4:	4b1a      	ldr	r3, [pc, #104]	; (2a40 <system_clock_source_osc8m_set_config+0x74>)
    29d6:	6a1b      	ldr	r3, [r3, #32]
    29d8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	1c1a      	adds	r2, r3, #0
    29e0:	2303      	movs	r3, #3
    29e2:	4013      	ands	r3, r2
    29e4:	b2da      	uxtb	r2, r3
    29e6:	230d      	movs	r3, #13
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	2103      	movs	r1, #3
    29ec:	400a      	ands	r2, r1
    29ee:	0010      	movs	r0, r2
    29f0:	781a      	ldrb	r2, [r3, #0]
    29f2:	2103      	movs	r1, #3
    29f4:	438a      	bics	r2, r1
    29f6:	1c11      	adds	r1, r2, #0
    29f8:	1c02      	adds	r2, r0, #0
    29fa:	430a      	orrs	r2, r1
    29fc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	789a      	ldrb	r2, [r3, #2]
    2a02:	230c      	movs	r3, #12
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	01d0      	lsls	r0, r2, #7
    2a08:	781a      	ldrb	r2, [r3, #0]
    2a0a:	217f      	movs	r1, #127	; 0x7f
    2a0c:	400a      	ands	r2, r1
    2a0e:	1c11      	adds	r1, r2, #0
    2a10:	1c02      	adds	r2, r0, #0
    2a12:	430a      	orrs	r2, r1
    2a14:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	785a      	ldrb	r2, [r3, #1]
    2a1a:	230c      	movs	r3, #12
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	2101      	movs	r1, #1
    2a20:	400a      	ands	r2, r1
    2a22:	0190      	lsls	r0, r2, #6
    2a24:	781a      	ldrb	r2, [r3, #0]
    2a26:	2140      	movs	r1, #64	; 0x40
    2a28:	438a      	bics	r2, r1
    2a2a:	1c11      	adds	r1, r2, #0
    2a2c:	1c02      	adds	r2, r0, #0
    2a2e:	430a      	orrs	r2, r1
    2a30:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2a32:	4b03      	ldr	r3, [pc, #12]	; (2a40 <system_clock_source_osc8m_set_config+0x74>)
    2a34:	68fa      	ldr	r2, [r7, #12]
    2a36:	621a      	str	r2, [r3, #32]
}
    2a38:	46c0      	nop			; (mov r8, r8)
    2a3a:	46bd      	mov	sp, r7
    2a3c:	b004      	add	sp, #16
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	40000800 	.word	0x40000800

00002a44 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2a44:	b580      	push	{r7, lr}
    2a46:	b082      	sub	sp, #8
    2a48:	af00      	add	r7, sp, #0
    2a4a:	0002      	movs	r2, r0
    2a4c:	1dfb      	adds	r3, r7, #7
    2a4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2a50:	1dfb      	adds	r3, r7, #7
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	2b08      	cmp	r3, #8
    2a56:	d83b      	bhi.n	2ad0 <system_clock_source_enable+0x8c>
    2a58:	009a      	lsls	r2, r3, #2
    2a5a:	4b21      	ldr	r3, [pc, #132]	; (2ae0 <system_clock_source_enable+0x9c>)
    2a5c:	18d3      	adds	r3, r2, r3
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2a62:	4b20      	ldr	r3, [pc, #128]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a64:	4a1f      	ldr	r2, [pc, #124]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a66:	6a12      	ldr	r2, [r2, #32]
    2a68:	2102      	movs	r1, #2
    2a6a:	430a      	orrs	r2, r1
    2a6c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    2a6e:	2300      	movs	r3, #0
    2a70:	e031      	b.n	2ad6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2a72:	4b1c      	ldr	r3, [pc, #112]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a74:	4a1b      	ldr	r2, [pc, #108]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a76:	6992      	ldr	r2, [r2, #24]
    2a78:	2102      	movs	r1, #2
    2a7a:	430a      	orrs	r2, r1
    2a7c:	619a      	str	r2, [r3, #24]
		break;
    2a7e:	e029      	b.n	2ad4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2a80:	4a18      	ldr	r2, [pc, #96]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a82:	4b18      	ldr	r3, [pc, #96]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a84:	8a1b      	ldrh	r3, [r3, #16]
    2a86:	b29b      	uxth	r3, r3
    2a88:	2102      	movs	r1, #2
    2a8a:	430b      	orrs	r3, r1
    2a8c:	b29b      	uxth	r3, r3
    2a8e:	8213      	strh	r3, [r2, #16]
		break;
    2a90:	e020      	b.n	2ad4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2a92:	4a14      	ldr	r2, [pc, #80]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a94:	4b13      	ldr	r3, [pc, #76]	; (2ae4 <system_clock_source_enable+0xa0>)
    2a96:	8a9b      	ldrh	r3, [r3, #20]
    2a98:	b29b      	uxth	r3, r3
    2a9a:	2102      	movs	r1, #2
    2a9c:	430b      	orrs	r3, r1
    2a9e:	b29b      	uxth	r3, r3
    2aa0:	8293      	strh	r3, [r2, #20]
		break;
    2aa2:	e017      	b.n	2ad4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2aa4:	4b10      	ldr	r3, [pc, #64]	; (2ae8 <system_clock_source_enable+0xa4>)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	2202      	movs	r2, #2
    2aaa:	431a      	orrs	r2, r3
    2aac:	4b0e      	ldr	r3, [pc, #56]	; (2ae8 <system_clock_source_enable+0xa4>)
    2aae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    2ab0:	4b0e      	ldr	r3, [pc, #56]	; (2aec <system_clock_source_enable+0xa8>)
    2ab2:	4798      	blx	r3
		break;
    2ab4:	e00e      	b.n	2ad4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2ab6:	4a0b      	ldr	r2, [pc, #44]	; (2ae4 <system_clock_source_enable+0xa0>)
    2ab8:	490a      	ldr	r1, [pc, #40]	; (2ae4 <system_clock_source_enable+0xa0>)
    2aba:	2344      	movs	r3, #68	; 0x44
    2abc:	5ccb      	ldrb	r3, [r1, r3]
    2abe:	b2db      	uxtb	r3, r3
    2ac0:	2102      	movs	r1, #2
    2ac2:	430b      	orrs	r3, r1
    2ac4:	b2d9      	uxtb	r1, r3
    2ac6:	2344      	movs	r3, #68	; 0x44
    2ac8:	54d1      	strb	r1, [r2, r3]
		break;
    2aca:	e003      	b.n	2ad4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2acc:	2300      	movs	r3, #0
    2ace:	e002      	b.n	2ad6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2ad0:	2317      	movs	r3, #23
    2ad2:	e000      	b.n	2ad6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    2ad4:	2300      	movs	r3, #0
}
    2ad6:	0018      	movs	r0, r3
    2ad8:	46bd      	mov	sp, r7
    2ada:	b002      	add	sp, #8
    2adc:	bd80      	pop	{r7, pc}
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	000039b4 	.word	0x000039b4
    2ae4:	40000800 	.word	0x40000800
    2ae8:	2000011c 	.word	0x2000011c
    2aec:	000028cd 	.word	0x000028cd

00002af0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2af0:	b580      	push	{r7, lr}
    2af2:	b082      	sub	sp, #8
    2af4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2af6:	003b      	movs	r3, r7
    2af8:	2201      	movs	r2, #1
    2afa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2afc:	2300      	movs	r3, #0
    2afe:	607b      	str	r3, [r7, #4]
    2b00:	e009      	b.n	2b16 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	b2db      	uxtb	r3, r3
    2b06:	003a      	movs	r2, r7
    2b08:	0011      	movs	r1, r2
    2b0a:	0018      	movs	r0, r3
    2b0c:	4b05      	ldr	r3, [pc, #20]	; (2b24 <_switch_peripheral_gclk+0x34>)
    2b0e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	3301      	adds	r3, #1
    2b14:	607b      	str	r3, [r7, #4]
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	2b24      	cmp	r3, #36	; 0x24
    2b1a:	d9f2      	bls.n	2b02 <_switch_peripheral_gclk+0x12>
	}
}
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46bd      	mov	sp, r7
    2b20:	b002      	add	sp, #8
    2b22:	bd80      	pop	{r7, pc}
    2b24:	00002f29 	.word	0x00002f29

00002b28 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b0a0      	sub	sp, #128	; 0x80
    2b2c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2b2e:	4b27      	ldr	r3, [pc, #156]	; (2bcc <system_clock_init+0xa4>)
    2b30:	22c2      	movs	r2, #194	; 0xc2
    2b32:	00d2      	lsls	r2, r2, #3
    2b34:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    2b36:	2000      	movs	r0, #0
    2b38:	4b25      	ldr	r3, [pc, #148]	; (2bd0 <system_clock_init+0xa8>)
    2b3a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2b3c:	4b25      	ldr	r3, [pc, #148]	; (2bd4 <system_clock_init+0xac>)
    2b3e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2b40:	237c      	movs	r3, #124	; 0x7c
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	0018      	movs	r0, r3
    2b46:	4b24      	ldr	r3, [pc, #144]	; (2bd8 <system_clock_init+0xb0>)
    2b48:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2b4a:	237c      	movs	r3, #124	; 0x7c
    2b4c:	18fb      	adds	r3, r7, r3
    2b4e:	2200      	movs	r2, #0
    2b50:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    2b52:	237c      	movs	r3, #124	; 0x7c
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	2201      	movs	r2, #1
    2b58:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2b5a:	237c      	movs	r3, #124	; 0x7c
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	2200      	movs	r2, #0
    2b60:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2b62:	237c      	movs	r3, #124	; 0x7c
    2b64:	18fb      	adds	r3, r7, r3
    2b66:	0018      	movs	r0, r3
    2b68:	4b1c      	ldr	r3, [pc, #112]	; (2bdc <system_clock_init+0xb4>)
    2b6a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2b6c:	2006      	movs	r0, #6
    2b6e:	4b1c      	ldr	r3, [pc, #112]	; (2be0 <system_clock_init+0xb8>)
    2b70:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2b72:	4b1c      	ldr	r3, [pc, #112]	; (2be4 <system_clock_init+0xbc>)
    2b74:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    2b76:	2000      	movs	r0, #0
    2b78:	4b1b      	ldr	r3, [pc, #108]	; (2be8 <system_clock_init+0xc0>)
    2b7a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2b7c:	2100      	movs	r1, #0
    2b7e:	2000      	movs	r0, #0
    2b80:	4b1a      	ldr	r3, [pc, #104]	; (2bec <system_clock_init+0xc4>)
    2b82:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    2b84:	2100      	movs	r1, #0
    2b86:	2001      	movs	r0, #1
    2b88:	4b18      	ldr	r3, [pc, #96]	; (2bec <system_clock_init+0xc4>)
    2b8a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2b8c:	2100      	movs	r1, #0
    2b8e:	2002      	movs	r0, #2
    2b90:	4b16      	ldr	r3, [pc, #88]	; (2bec <system_clock_init+0xc4>)
    2b92:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2b94:	1d3b      	adds	r3, r7, #4
    2b96:	0018      	movs	r0, r3
    2b98:	4b15      	ldr	r3, [pc, #84]	; (2bf0 <system_clock_init+0xc8>)
    2b9a:	4798      	blx	r3
    2b9c:	1d3b      	adds	r3, r7, #4
    2b9e:	2206      	movs	r2, #6
    2ba0:	701a      	strb	r2, [r3, #0]
    2ba2:	1d3b      	adds	r3, r7, #4
    2ba4:	2201      	movs	r2, #1
    2ba6:	605a      	str	r2, [r3, #4]
    2ba8:	1d3b      	adds	r3, r7, #4
    2baa:	2200      	movs	r2, #0
    2bac:	721a      	strb	r2, [r3, #8]
    2bae:	1d3b      	adds	r3, r7, #4
    2bb0:	2200      	movs	r2, #0
    2bb2:	725a      	strb	r2, [r3, #9]
    2bb4:	1d3b      	adds	r3, r7, #4
    2bb6:	0019      	movs	r1, r3
    2bb8:	2000      	movs	r0, #0
    2bba:	4b0e      	ldr	r3, [pc, #56]	; (2bf4 <system_clock_init+0xcc>)
    2bbc:	4798      	blx	r3
    2bbe:	2000      	movs	r0, #0
    2bc0:	4b0d      	ldr	r3, [pc, #52]	; (2bf8 <system_clock_init+0xd0>)
    2bc2:	4798      	blx	r3
#endif
}
    2bc4:	46c0      	nop			; (mov r8, r8)
    2bc6:	46bd      	mov	sp, r7
    2bc8:	b020      	add	sp, #128	; 0x80
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	40000800 	.word	0x40000800
    2bd0:	0000287d 	.word	0x0000287d
    2bd4:	00002af1 	.word	0x00002af1
    2bd8:	000027e7 	.word	0x000027e7
    2bdc:	000029cd 	.word	0x000029cd
    2be0:	00002a45 	.word	0x00002a45
    2be4:	00002ca1 	.word	0x00002ca1
    2be8:	00002809 	.word	0x00002809
    2bec:	00002829 	.word	0x00002829
    2bf0:	000027b9 	.word	0x000027b9
    2bf4:	00002cd1 	.word	0x00002cd1
    2bf8:	00002df5 	.word	0x00002df5

00002bfc <system_apb_clock_set_mask>:
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b082      	sub	sp, #8
    2c00:	af00      	add	r7, sp, #0
    2c02:	0002      	movs	r2, r0
    2c04:	6039      	str	r1, [r7, #0]
    2c06:	1dfb      	adds	r3, r7, #7
    2c08:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2c0a:	1dfb      	adds	r3, r7, #7
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	2b01      	cmp	r3, #1
    2c10:	d00a      	beq.n	2c28 <system_apb_clock_set_mask+0x2c>
    2c12:	2b02      	cmp	r3, #2
    2c14:	d00f      	beq.n	2c36 <system_apb_clock_set_mask+0x3a>
    2c16:	2b00      	cmp	r3, #0
    2c18:	d114      	bne.n	2c44 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2c1a:	4b0e      	ldr	r3, [pc, #56]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c1c:	4a0d      	ldr	r2, [pc, #52]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c1e:	6991      	ldr	r1, [r2, #24]
    2c20:	683a      	ldr	r2, [r7, #0]
    2c22:	430a      	orrs	r2, r1
    2c24:	619a      	str	r2, [r3, #24]
			break;
    2c26:	e00f      	b.n	2c48 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2c28:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c2a:	4a0a      	ldr	r2, [pc, #40]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c2c:	69d1      	ldr	r1, [r2, #28]
    2c2e:	683a      	ldr	r2, [r7, #0]
    2c30:	430a      	orrs	r2, r1
    2c32:	61da      	str	r2, [r3, #28]
			break;
    2c34:	e008      	b.n	2c48 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2c36:	4b07      	ldr	r3, [pc, #28]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c38:	4a06      	ldr	r2, [pc, #24]	; (2c54 <system_apb_clock_set_mask+0x58>)
    2c3a:	6a11      	ldr	r1, [r2, #32]
    2c3c:	683a      	ldr	r2, [r7, #0]
    2c3e:	430a      	orrs	r2, r1
    2c40:	621a      	str	r2, [r3, #32]
			break;
    2c42:	e001      	b.n	2c48 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2c44:	2317      	movs	r3, #23
    2c46:	e000      	b.n	2c4a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2c48:	2300      	movs	r3, #0
}
    2c4a:	0018      	movs	r0, r3
    2c4c:	46bd      	mov	sp, r7
    2c4e:	b002      	add	sp, #8
    2c50:	bd80      	pop	{r7, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	40000400 	.word	0x40000400

00002c58 <system_interrupt_enter_critical_section>:
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2c5c:	4b02      	ldr	r3, [pc, #8]	; (2c68 <system_interrupt_enter_critical_section+0x10>)
    2c5e:	4798      	blx	r3
}
    2c60:	46c0      	nop			; (mov r8, r8)
    2c62:	46bd      	mov	sp, r7
    2c64:	bd80      	pop	{r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	00002725 	.word	0x00002725

00002c6c <system_interrupt_leave_critical_section>:
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2c70:	4b02      	ldr	r3, [pc, #8]	; (2c7c <system_interrupt_leave_critical_section+0x10>)
    2c72:	4798      	blx	r3
}
    2c74:	46c0      	nop			; (mov r8, r8)
    2c76:	46bd      	mov	sp, r7
    2c78:	bd80      	pop	{r7, pc}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	00002779 	.word	0x00002779

00002c80 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c84:	4b05      	ldr	r3, [pc, #20]	; (2c9c <system_gclk_is_syncing+0x1c>)
    2c86:	785b      	ldrb	r3, [r3, #1]
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	b25b      	sxtb	r3, r3
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	da01      	bge.n	2c94 <system_gclk_is_syncing+0x14>
		return true;
    2c90:	2301      	movs	r3, #1
    2c92:	e000      	b.n	2c96 <system_gclk_is_syncing+0x16>
	}

	return false;
    2c94:	2300      	movs	r3, #0
}
    2c96:	0018      	movs	r0, r3
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	40000c00 	.word	0x40000c00

00002ca0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2ca0:	b580      	push	{r7, lr}
    2ca2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    2ca4:	2108      	movs	r1, #8
    2ca6:	2000      	movs	r0, #0
    2ca8:	4b07      	ldr	r3, [pc, #28]	; (2cc8 <system_gclk_init+0x28>)
    2caa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2cac:	4b07      	ldr	r3, [pc, #28]	; (2ccc <system_gclk_init+0x2c>)
    2cae:	2201      	movs	r2, #1
    2cb0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	4b05      	ldr	r3, [pc, #20]	; (2ccc <system_gclk_init+0x2c>)
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	b2db      	uxtb	r3, r3
    2cba:	001a      	movs	r2, r3
    2cbc:	2301      	movs	r3, #1
    2cbe:	4013      	ands	r3, r2
    2cc0:	d1f8      	bne.n	2cb4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	46bd      	mov	sp, r7
    2cc6:	bd80      	pop	{r7, pc}
    2cc8:	00002bfd 	.word	0x00002bfd
    2ccc:	40000c00 	.word	0x40000c00

00002cd0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2cd0:	b580      	push	{r7, lr}
    2cd2:	b086      	sub	sp, #24
    2cd4:	af00      	add	r7, sp, #0
    2cd6:	0002      	movs	r2, r0
    2cd8:	6039      	str	r1, [r7, #0]
    2cda:	1dfb      	adds	r3, r7, #7
    2cdc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2cde:	1dfb      	adds	r3, r7, #7
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    2ce4:	1dfb      	adds	r3, r7, #7
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	781b      	ldrb	r3, [r3, #0]
    2cee:	021b      	lsls	r3, r3, #8
    2cf0:	001a      	movs	r2, r3
    2cf2:	697b      	ldr	r3, [r7, #20]
    2cf4:	4313      	orrs	r3, r2
    2cf6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	785b      	ldrb	r3, [r3, #1]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d004      	beq.n	2d0a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d00:	697b      	ldr	r3, [r7, #20]
    2d02:	2280      	movs	r2, #128	; 0x80
    2d04:	02d2      	lsls	r2, r2, #11
    2d06:	4313      	orrs	r3, r2
    2d08:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2d0a:	683b      	ldr	r3, [r7, #0]
    2d0c:	7a5b      	ldrb	r3, [r3, #9]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d004      	beq.n	2d1c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2d12:	697b      	ldr	r3, [r7, #20]
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	0312      	lsls	r2, r2, #12
    2d18:	4313      	orrs	r3, r2
    2d1a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2d1c:	683b      	ldr	r3, [r7, #0]
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	2b01      	cmp	r3, #1
    2d22:	d92c      	bls.n	2d7e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	685a      	ldr	r2, [r3, #4]
    2d28:	683b      	ldr	r3, [r7, #0]
    2d2a:	685b      	ldr	r3, [r3, #4]
    2d2c:	3b01      	subs	r3, #1
    2d2e:	4013      	ands	r3, r2
    2d30:	d11a      	bne.n	2d68 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    2d32:	2300      	movs	r3, #0
    2d34:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2d36:	2302      	movs	r3, #2
    2d38:	60bb      	str	r3, [r7, #8]
    2d3a:	e005      	b.n	2d48 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2d3c:	68fb      	ldr	r3, [r7, #12]
    2d3e:	3301      	adds	r3, #1
    2d40:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    2d42:	68bb      	ldr	r3, [r7, #8]
    2d44:	005b      	lsls	r3, r3, #1
    2d46:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2d48:	683b      	ldr	r3, [r7, #0]
    2d4a:	685a      	ldr	r2, [r3, #4]
    2d4c:	68bb      	ldr	r3, [r7, #8]
    2d4e:	429a      	cmp	r2, r3
    2d50:	d8f4      	bhi.n	2d3c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2d52:	68fb      	ldr	r3, [r7, #12]
    2d54:	021b      	lsls	r3, r3, #8
    2d56:	693a      	ldr	r2, [r7, #16]
    2d58:	4313      	orrs	r3, r2
    2d5a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2d5c:	697b      	ldr	r3, [r7, #20]
    2d5e:	2280      	movs	r2, #128	; 0x80
    2d60:	0352      	lsls	r2, r2, #13
    2d62:	4313      	orrs	r3, r2
    2d64:	617b      	str	r3, [r7, #20]
    2d66:	e00a      	b.n	2d7e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2d68:	683b      	ldr	r3, [r7, #0]
    2d6a:	685b      	ldr	r3, [r3, #4]
    2d6c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2d6e:	693a      	ldr	r2, [r7, #16]
    2d70:	4313      	orrs	r3, r2
    2d72:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2d74:	697b      	ldr	r3, [r7, #20]
    2d76:	2280      	movs	r2, #128	; 0x80
    2d78:	0292      	lsls	r2, r2, #10
    2d7a:	4313      	orrs	r3, r2
    2d7c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	7a1b      	ldrb	r3, [r3, #8]
    2d82:	2b00      	cmp	r3, #0
    2d84:	d004      	beq.n	2d90 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2d86:	697b      	ldr	r3, [r7, #20]
    2d88:	2280      	movs	r2, #128	; 0x80
    2d8a:	0392      	lsls	r2, r2, #14
    2d8c:	4313      	orrs	r3, r2
    2d8e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2d90:	46c0      	nop			; (mov r8, r8)
    2d92:	4b13      	ldr	r3, [pc, #76]	; (2de0 <system_gclk_gen_set_config+0x110>)
    2d94:	4798      	blx	r3
    2d96:	1e03      	subs	r3, r0, #0
    2d98:	d1fb      	bne.n	2d92 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2d9a:	4b12      	ldr	r3, [pc, #72]	; (2de4 <system_gclk_gen_set_config+0x114>)
    2d9c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d9e:	4a12      	ldr	r2, [pc, #72]	; (2de8 <system_gclk_gen_set_config+0x118>)
    2da0:	1dfb      	adds	r3, r7, #7
    2da2:	781b      	ldrb	r3, [r3, #0]
    2da4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	4b0d      	ldr	r3, [pc, #52]	; (2de0 <system_gclk_gen_set_config+0x110>)
    2daa:	4798      	blx	r3
    2dac:	1e03      	subs	r3, r0, #0
    2dae:	d1fb      	bne.n	2da8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2db0:	4b0e      	ldr	r3, [pc, #56]	; (2dec <system_gclk_gen_set_config+0x11c>)
    2db2:	693a      	ldr	r2, [r7, #16]
    2db4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	4b09      	ldr	r3, [pc, #36]	; (2de0 <system_gclk_gen_set_config+0x110>)
    2dba:	4798      	blx	r3
    2dbc:	1e03      	subs	r3, r0, #0
    2dbe:	d1fb      	bne.n	2db8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2dc0:	4b0a      	ldr	r3, [pc, #40]	; (2dec <system_gclk_gen_set_config+0x11c>)
    2dc2:	4a0a      	ldr	r2, [pc, #40]	; (2dec <system_gclk_gen_set_config+0x11c>)
    2dc4:	6851      	ldr	r1, [r2, #4]
    2dc6:	2280      	movs	r2, #128	; 0x80
    2dc8:	0252      	lsls	r2, r2, #9
    2dca:	4011      	ands	r1, r2
    2dcc:	697a      	ldr	r2, [r7, #20]
    2dce:	430a      	orrs	r2, r1
    2dd0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2dd2:	4b07      	ldr	r3, [pc, #28]	; (2df0 <system_gclk_gen_set_config+0x120>)
    2dd4:	4798      	blx	r3
}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	46bd      	mov	sp, r7
    2dda:	b006      	add	sp, #24
    2ddc:	bd80      	pop	{r7, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00002c81 	.word	0x00002c81
    2de4:	00002c59 	.word	0x00002c59
    2de8:	40000c08 	.word	0x40000c08
    2dec:	40000c00 	.word	0x40000c00
    2df0:	00002c6d 	.word	0x00002c6d

00002df4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2df4:	b580      	push	{r7, lr}
    2df6:	b082      	sub	sp, #8
    2df8:	af00      	add	r7, sp, #0
    2dfa:	0002      	movs	r2, r0
    2dfc:	1dfb      	adds	r3, r7, #7
    2dfe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2e00:	46c0      	nop			; (mov r8, r8)
    2e02:	4b0e      	ldr	r3, [pc, #56]	; (2e3c <system_gclk_gen_enable+0x48>)
    2e04:	4798      	blx	r3
    2e06:	1e03      	subs	r3, r0, #0
    2e08:	d1fb      	bne.n	2e02 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2e0a:	4b0d      	ldr	r3, [pc, #52]	; (2e40 <system_gclk_gen_enable+0x4c>)
    2e0c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e0e:	4a0d      	ldr	r2, [pc, #52]	; (2e44 <system_gclk_gen_enable+0x50>)
    2e10:	1dfb      	adds	r3, r7, #7
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	4b08      	ldr	r3, [pc, #32]	; (2e3c <system_gclk_gen_enable+0x48>)
    2e1a:	4798      	blx	r3
    2e1c:	1e03      	subs	r3, r0, #0
    2e1e:	d1fb      	bne.n	2e18 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2e20:	4b09      	ldr	r3, [pc, #36]	; (2e48 <system_gclk_gen_enable+0x54>)
    2e22:	4a09      	ldr	r2, [pc, #36]	; (2e48 <system_gclk_gen_enable+0x54>)
    2e24:	6852      	ldr	r2, [r2, #4]
    2e26:	2180      	movs	r1, #128	; 0x80
    2e28:	0249      	lsls	r1, r1, #9
    2e2a:	430a      	orrs	r2, r1
    2e2c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2e2e:	4b07      	ldr	r3, [pc, #28]	; (2e4c <system_gclk_gen_enable+0x58>)
    2e30:	4798      	blx	r3
}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	46bd      	mov	sp, r7
    2e36:	b002      	add	sp, #8
    2e38:	bd80      	pop	{r7, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	00002c81 	.word	0x00002c81
    2e40:	00002c59 	.word	0x00002c59
    2e44:	40000c04 	.word	0x40000c04
    2e48:	40000c00 	.word	0x40000c00
    2e4c:	00002c6d 	.word	0x00002c6d

00002e50 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b086      	sub	sp, #24
    2e54:	af00      	add	r7, sp, #0
    2e56:	0002      	movs	r2, r0
    2e58:	1dfb      	adds	r3, r7, #7
    2e5a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2e5c:	46c0      	nop			; (mov r8, r8)
    2e5e:	4b2a      	ldr	r3, [pc, #168]	; (2f08 <system_gclk_gen_get_hz+0xb8>)
    2e60:	4798      	blx	r3
    2e62:	1e03      	subs	r3, r0, #0
    2e64:	d1fb      	bne.n	2e5e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2e66:	4b29      	ldr	r3, [pc, #164]	; (2f0c <system_gclk_gen_get_hz+0xbc>)
    2e68:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e6a:	4a29      	ldr	r2, [pc, #164]	; (2f10 <system_gclk_gen_get_hz+0xc0>)
    2e6c:	1dfb      	adds	r3, r7, #7
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	4b24      	ldr	r3, [pc, #144]	; (2f08 <system_gclk_gen_get_hz+0xb8>)
    2e76:	4798      	blx	r3
    2e78:	1e03      	subs	r3, r0, #0
    2e7a:	d1fb      	bne.n	2e74 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2e7c:	4b25      	ldr	r3, [pc, #148]	; (2f14 <system_gclk_gen_get_hz+0xc4>)
    2e7e:	685b      	ldr	r3, [r3, #4]
    2e80:	04db      	lsls	r3, r3, #19
    2e82:	0edb      	lsrs	r3, r3, #27
    2e84:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2e86:	0018      	movs	r0, r3
    2e88:	4b23      	ldr	r3, [pc, #140]	; (2f18 <system_gclk_gen_get_hz+0xc8>)
    2e8a:	4798      	blx	r3
    2e8c:	0003      	movs	r3, r0
    2e8e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e90:	4a1f      	ldr	r2, [pc, #124]	; (2f10 <system_gclk_gen_get_hz+0xc0>)
    2e92:	1dfb      	adds	r3, r7, #7
    2e94:	781b      	ldrb	r3, [r3, #0]
    2e96:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2e98:	4b1e      	ldr	r3, [pc, #120]	; (2f14 <system_gclk_gen_get_hz+0xc4>)
    2e9a:	685b      	ldr	r3, [r3, #4]
    2e9c:	02db      	lsls	r3, r3, #11
    2e9e:	0fdb      	lsrs	r3, r3, #31
    2ea0:	b2da      	uxtb	r2, r3
    2ea2:	2313      	movs	r3, #19
    2ea4:	18fb      	adds	r3, r7, r3
    2ea6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ea8:	4a1c      	ldr	r2, [pc, #112]	; (2f1c <system_gclk_gen_get_hz+0xcc>)
    2eaa:	1dfb      	adds	r3, r7, #7
    2eac:	781b      	ldrb	r3, [r3, #0]
    2eae:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	4b15      	ldr	r3, [pc, #84]	; (2f08 <system_gclk_gen_get_hz+0xb8>)
    2eb4:	4798      	blx	r3
    2eb6:	1e03      	subs	r3, r0, #0
    2eb8:	d1fb      	bne.n	2eb2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2eba:	4b16      	ldr	r3, [pc, #88]	; (2f14 <system_gclk_gen_get_hz+0xc4>)
    2ebc:	689b      	ldr	r3, [r3, #8]
    2ebe:	021b      	lsls	r3, r3, #8
    2ec0:	0c1b      	lsrs	r3, r3, #16
    2ec2:	b29b      	uxth	r3, r3
    2ec4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2ec6:	4b16      	ldr	r3, [pc, #88]	; (2f20 <system_gclk_gen_get_hz+0xd0>)
    2ec8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2eca:	2313      	movs	r3, #19
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d109      	bne.n	2ee8 <system_gclk_gen_get_hz+0x98>
    2ed4:	68fb      	ldr	r3, [r7, #12]
    2ed6:	2b01      	cmp	r3, #1
    2ed8:	d906      	bls.n	2ee8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2eda:	4b12      	ldr	r3, [pc, #72]	; (2f24 <system_gclk_gen_get_hz+0xd4>)
    2edc:	68f9      	ldr	r1, [r7, #12]
    2ede:	6978      	ldr	r0, [r7, #20]
    2ee0:	4798      	blx	r3
    2ee2:	0003      	movs	r3, r0
    2ee4:	617b      	str	r3, [r7, #20]
    2ee6:	e00a      	b.n	2efe <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2ee8:	2313      	movs	r3, #19
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d005      	beq.n	2efe <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	3301      	adds	r3, #1
    2ef6:	697a      	ldr	r2, [r7, #20]
    2ef8:	40da      	lsrs	r2, r3
    2efa:	0013      	movs	r3, r2
    2efc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2efe:	697b      	ldr	r3, [r7, #20]
}
    2f00:	0018      	movs	r0, r3
    2f02:	46bd      	mov	sp, r7
    2f04:	b006      	add	sp, #24
    2f06:	bd80      	pop	{r7, pc}
    2f08:	00002c81 	.word	0x00002c81
    2f0c:	00002c59 	.word	0x00002c59
    2f10:	40000c04 	.word	0x40000c04
    2f14:	40000c00 	.word	0x40000c00
    2f18:	00002911 	.word	0x00002911
    2f1c:	40000c08 	.word	0x40000c08
    2f20:	00002c6d 	.word	0x00002c6d
    2f24:	000036d9 	.word	0x000036d9

00002f28 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2f28:	b580      	push	{r7, lr}
    2f2a:	b084      	sub	sp, #16
    2f2c:	af00      	add	r7, sp, #0
    2f2e:	0002      	movs	r2, r0
    2f30:	6039      	str	r1, [r7, #0]
    2f32:	1dfb      	adds	r3, r7, #7
    2f34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2f36:	1dfb      	adds	r3, r7, #7
    2f38:	781b      	ldrb	r3, [r3, #0]
    2f3a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2f3c:	683b      	ldr	r3, [r7, #0]
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	021b      	lsls	r3, r3, #8
    2f42:	001a      	movs	r2, r3
    2f44:	68fb      	ldr	r3, [r7, #12]
    2f46:	4313      	orrs	r3, r2
    2f48:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2f4a:	1dfb      	adds	r3, r7, #7
    2f4c:	781b      	ldrb	r3, [r3, #0]
    2f4e:	0018      	movs	r0, r3
    2f50:	4b04      	ldr	r3, [pc, #16]	; (2f64 <system_gclk_chan_set_config+0x3c>)
    2f52:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2f54:	4b04      	ldr	r3, [pc, #16]	; (2f68 <system_gclk_chan_set_config+0x40>)
    2f56:	68fa      	ldr	r2, [r7, #12]
    2f58:	b292      	uxth	r2, r2
    2f5a:	805a      	strh	r2, [r3, #2]
}
    2f5c:	46c0      	nop			; (mov r8, r8)
    2f5e:	46bd      	mov	sp, r7
    2f60:	b004      	add	sp, #16
    2f62:	bd80      	pop	{r7, pc}
    2f64:	00002fb5 	.word	0x00002fb5
    2f68:	40000c00 	.word	0x40000c00

00002f6c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2f6c:	b580      	push	{r7, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	af00      	add	r7, sp, #0
    2f72:	0002      	movs	r2, r0
    2f74:	1dfb      	adds	r3, r7, #7
    2f76:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2f78:	4b0a      	ldr	r3, [pc, #40]	; (2fa4 <system_gclk_chan_enable+0x38>)
    2f7a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f7c:	4a0a      	ldr	r2, [pc, #40]	; (2fa8 <system_gclk_chan_enable+0x3c>)
    2f7e:	1dfb      	adds	r3, r7, #7
    2f80:	781b      	ldrb	r3, [r3, #0]
    2f82:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2f84:	4909      	ldr	r1, [pc, #36]	; (2fac <system_gclk_chan_enable+0x40>)
    2f86:	4b09      	ldr	r3, [pc, #36]	; (2fac <system_gclk_chan_enable+0x40>)
    2f88:	885b      	ldrh	r3, [r3, #2]
    2f8a:	b29b      	uxth	r3, r3
    2f8c:	2280      	movs	r2, #128	; 0x80
    2f8e:	01d2      	lsls	r2, r2, #7
    2f90:	4313      	orrs	r3, r2
    2f92:	b29b      	uxth	r3, r3
    2f94:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    2f96:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <system_gclk_chan_enable+0x44>)
    2f98:	4798      	blx	r3
}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	46bd      	mov	sp, r7
    2f9e:	b002      	add	sp, #8
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	00002c59 	.word	0x00002c59
    2fa8:	40000c02 	.word	0x40000c02
    2fac:	40000c00 	.word	0x40000c00
    2fb0:	00002c6d 	.word	0x00002c6d

00002fb4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b084      	sub	sp, #16
    2fb8:	af00      	add	r7, sp, #0
    2fba:	0002      	movs	r2, r0
    2fbc:	1dfb      	adds	r3, r7, #7
    2fbe:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2fc0:	4b1c      	ldr	r3, [pc, #112]	; (3034 <system_gclk_chan_disable+0x80>)
    2fc2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2fc4:	4a1c      	ldr	r2, [pc, #112]	; (3038 <system_gclk_chan_disable+0x84>)
    2fc6:	1dfb      	adds	r3, r7, #7
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2fcc:	4b1b      	ldr	r3, [pc, #108]	; (303c <system_gclk_chan_disable+0x88>)
    2fce:	885b      	ldrh	r3, [r3, #2]
    2fd0:	051b      	lsls	r3, r3, #20
    2fd2:	0f1b      	lsrs	r3, r3, #28
    2fd4:	b2db      	uxtb	r3, r3
    2fd6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2fd8:	4a18      	ldr	r2, [pc, #96]	; (303c <system_gclk_chan_disable+0x88>)
    2fda:	8853      	ldrh	r3, [r2, #2]
    2fdc:	4918      	ldr	r1, [pc, #96]	; (3040 <system_gclk_chan_disable+0x8c>)
    2fde:	400b      	ands	r3, r1
    2fe0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2fe2:	4a16      	ldr	r2, [pc, #88]	; (303c <system_gclk_chan_disable+0x88>)
    2fe4:	4b15      	ldr	r3, [pc, #84]	; (303c <system_gclk_chan_disable+0x88>)
    2fe6:	885b      	ldrh	r3, [r3, #2]
    2fe8:	b29b      	uxth	r3, r3
    2fea:	4916      	ldr	r1, [pc, #88]	; (3044 <system_gclk_chan_disable+0x90>)
    2fec:	400b      	ands	r3, r1
    2fee:	b29b      	uxth	r3, r3
    2ff0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <system_gclk_chan_disable+0x88>)
    2ff6:	885b      	ldrh	r3, [r3, #2]
    2ff8:	b29b      	uxth	r3, r3
    2ffa:	001a      	movs	r2, r3
    2ffc:	2380      	movs	r3, #128	; 0x80
    2ffe:	01db      	lsls	r3, r3, #7
    3000:	4013      	ands	r3, r2
    3002:	d1f7      	bne.n	2ff4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3004:	4a0d      	ldr	r2, [pc, #52]	; (303c <system_gclk_chan_disable+0x88>)
    3006:	68fb      	ldr	r3, [r7, #12]
    3008:	b2db      	uxtb	r3, r3
    300a:	1c19      	adds	r1, r3, #0
    300c:	230f      	movs	r3, #15
    300e:	400b      	ands	r3, r1
    3010:	b2d9      	uxtb	r1, r3
    3012:	8853      	ldrh	r3, [r2, #2]
    3014:	1c08      	adds	r0, r1, #0
    3016:	210f      	movs	r1, #15
    3018:	4001      	ands	r1, r0
    301a:	0208      	lsls	r0, r1, #8
    301c:	4908      	ldr	r1, [pc, #32]	; (3040 <system_gclk_chan_disable+0x8c>)
    301e:	400b      	ands	r3, r1
    3020:	1c19      	adds	r1, r3, #0
    3022:	1c03      	adds	r3, r0, #0
    3024:	430b      	orrs	r3, r1
    3026:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3028:	4b07      	ldr	r3, [pc, #28]	; (3048 <system_gclk_chan_disable+0x94>)
    302a:	4798      	blx	r3
}
    302c:	46c0      	nop			; (mov r8, r8)
    302e:	46bd      	mov	sp, r7
    3030:	b004      	add	sp, #16
    3032:	bd80      	pop	{r7, pc}
    3034:	00002c59 	.word	0x00002c59
    3038:	40000c02 	.word	0x40000c02
    303c:	40000c00 	.word	0x40000c00
    3040:	fffff0ff 	.word	0xfffff0ff
    3044:	ffffbfff 	.word	0xffffbfff
    3048:	00002c6d 	.word	0x00002c6d

0000304c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	0002      	movs	r2, r0
    3054:	1dfb      	adds	r3, r7, #7
    3056:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3058:	4b0d      	ldr	r3, [pc, #52]	; (3090 <system_gclk_chan_get_hz+0x44>)
    305a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    305c:	4a0d      	ldr	r2, [pc, #52]	; (3094 <system_gclk_chan_get_hz+0x48>)
    305e:	1dfb      	adds	r3, r7, #7
    3060:	781b      	ldrb	r3, [r3, #0]
    3062:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3064:	4b0c      	ldr	r3, [pc, #48]	; (3098 <system_gclk_chan_get_hz+0x4c>)
    3066:	885b      	ldrh	r3, [r3, #2]
    3068:	051b      	lsls	r3, r3, #20
    306a:	0f1b      	lsrs	r3, r3, #28
    306c:	b2da      	uxtb	r2, r3
    306e:	230f      	movs	r3, #15
    3070:	18fb      	adds	r3, r7, r3
    3072:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3074:	4b09      	ldr	r3, [pc, #36]	; (309c <system_gclk_chan_get_hz+0x50>)
    3076:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3078:	230f      	movs	r3, #15
    307a:	18fb      	adds	r3, r7, r3
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	0018      	movs	r0, r3
    3080:	4b07      	ldr	r3, [pc, #28]	; (30a0 <system_gclk_chan_get_hz+0x54>)
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
}
    3086:	0018      	movs	r0, r3
    3088:	46bd      	mov	sp, r7
    308a:	b004      	add	sp, #16
    308c:	bd80      	pop	{r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	00002c59 	.word	0x00002c59
    3094:	40000c02 	.word	0x40000c02
    3098:	40000c00 	.word	0x40000c00
    309c:	00002c6d 	.word	0x00002c6d
    30a0:	00002e51 	.word	0x00002e51

000030a4 <system_pinmux_get_group_from_gpio_pin>:
{
    30a4:	b580      	push	{r7, lr}
    30a6:	b084      	sub	sp, #16
    30a8:	af00      	add	r7, sp, #0
    30aa:	0002      	movs	r2, r0
    30ac:	1dfb      	adds	r3, r7, #7
    30ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    30b0:	230f      	movs	r3, #15
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	1dfa      	adds	r2, r7, #7
    30b6:	7812      	ldrb	r2, [r2, #0]
    30b8:	09d2      	lsrs	r2, r2, #7
    30ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    30bc:	230e      	movs	r3, #14
    30be:	18fb      	adds	r3, r7, r3
    30c0:	1dfa      	adds	r2, r7, #7
    30c2:	7812      	ldrb	r2, [r2, #0]
    30c4:	0952      	lsrs	r2, r2, #5
    30c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    30c8:	4b0d      	ldr	r3, [pc, #52]	; (3100 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    30ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    30cc:	230f      	movs	r3, #15
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	2b00      	cmp	r3, #0
    30d4:	d10f      	bne.n	30f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    30d6:	230f      	movs	r3, #15
    30d8:	18fb      	adds	r3, r7, r3
    30da:	781b      	ldrb	r3, [r3, #0]
    30dc:	009b      	lsls	r3, r3, #2
    30de:	2210      	movs	r2, #16
    30e0:	4694      	mov	ip, r2
    30e2:	44bc      	add	ip, r7
    30e4:	4463      	add	r3, ip
    30e6:	3b08      	subs	r3, #8
    30e8:	681a      	ldr	r2, [r3, #0]
    30ea:	230e      	movs	r3, #14
    30ec:	18fb      	adds	r3, r7, r3
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	01db      	lsls	r3, r3, #7
    30f2:	18d3      	adds	r3, r2, r3
    30f4:	e000      	b.n	30f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    30f6:	2300      	movs	r3, #0
}
    30f8:	0018      	movs	r0, r3
    30fa:	46bd      	mov	sp, r7
    30fc:	b004      	add	sp, #16
    30fe:	bd80      	pop	{r7, pc}
    3100:	41004400 	.word	0x41004400

00003104 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3104:	b580      	push	{r7, lr}
    3106:	b088      	sub	sp, #32
    3108:	af00      	add	r7, sp, #0
    310a:	60f8      	str	r0, [r7, #12]
    310c:	60b9      	str	r1, [r7, #8]
    310e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3110:	2300      	movs	r3, #0
    3112:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	78db      	ldrb	r3, [r3, #3]
    3118:	2201      	movs	r2, #1
    311a:	4053      	eors	r3, r2
    311c:	b2db      	uxtb	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	d035      	beq.n	318e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	781b      	ldrb	r3, [r3, #0]
    3126:	2b80      	cmp	r3, #128	; 0x80
    3128:	d00b      	beq.n	3142 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    312a:	69fb      	ldr	r3, [r7, #28]
    312c:	2280      	movs	r2, #128	; 0x80
    312e:	0252      	lsls	r2, r2, #9
    3130:	4313      	orrs	r3, r2
    3132:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3134:	687b      	ldr	r3, [r7, #4]
    3136:	781b      	ldrb	r3, [r3, #0]
    3138:	061b      	lsls	r3, r3, #24
    313a:	001a      	movs	r2, r3
    313c:	69fb      	ldr	r3, [r7, #28]
    313e:	4313      	orrs	r3, r2
    3140:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	785b      	ldrb	r3, [r3, #1]
    3146:	2b00      	cmp	r3, #0
    3148:	d003      	beq.n	3152 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    314e:	2b02      	cmp	r3, #2
    3150:	d110      	bne.n	3174 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3152:	69fb      	ldr	r3, [r7, #28]
    3154:	2280      	movs	r2, #128	; 0x80
    3156:	0292      	lsls	r2, r2, #10
    3158:	4313      	orrs	r3, r2
    315a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	789b      	ldrb	r3, [r3, #2]
    3160:	2b00      	cmp	r3, #0
    3162:	d004      	beq.n	316e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3164:	69fb      	ldr	r3, [r7, #28]
    3166:	2280      	movs	r2, #128	; 0x80
    3168:	02d2      	lsls	r2, r2, #11
    316a:	4313      	orrs	r3, r2
    316c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	68ba      	ldr	r2, [r7, #8]
    3172:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	785b      	ldrb	r3, [r3, #1]
    3178:	2b01      	cmp	r3, #1
    317a:	d003      	beq.n	3184 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    317c:	687b      	ldr	r3, [r7, #4]
    317e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3180:	2b02      	cmp	r3, #2
    3182:	d107      	bne.n	3194 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3184:	69fb      	ldr	r3, [r7, #28]
    3186:	4a22      	ldr	r2, [pc, #136]	; (3210 <_system_pinmux_config+0x10c>)
    3188:	4013      	ands	r3, r2
    318a:	61fb      	str	r3, [r7, #28]
    318c:	e002      	b.n	3194 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    318e:	68fb      	ldr	r3, [r7, #12]
    3190:	68ba      	ldr	r2, [r7, #8]
    3192:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3194:	68bb      	ldr	r3, [r7, #8]
    3196:	041b      	lsls	r3, r3, #16
    3198:	0c1b      	lsrs	r3, r3, #16
    319a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    319c:	68bb      	ldr	r3, [r7, #8]
    319e:	0c1b      	lsrs	r3, r3, #16
    31a0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31a2:	69ba      	ldr	r2, [r7, #24]
    31a4:	69fb      	ldr	r3, [r7, #28]
    31a6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31a8:	22a0      	movs	r2, #160	; 0xa0
    31aa:	05d2      	lsls	r2, r2, #23
    31ac:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31ae:	68fb      	ldr	r3, [r7, #12]
    31b0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31b2:	697a      	ldr	r2, [r7, #20]
    31b4:	69fb      	ldr	r3, [r7, #28]
    31b6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    31b8:	22d0      	movs	r2, #208	; 0xd0
    31ba:	0612      	lsls	r2, r2, #24
    31bc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31be:	68fb      	ldr	r3, [r7, #12]
    31c0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	78db      	ldrb	r3, [r3, #3]
    31c6:	2201      	movs	r2, #1
    31c8:	4053      	eors	r3, r2
    31ca:	b2db      	uxtb	r3, r3
    31cc:	2b00      	cmp	r3, #0
    31ce:	d01a      	beq.n	3206 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    31d0:	69fa      	ldr	r2, [r7, #28]
    31d2:	2380      	movs	r3, #128	; 0x80
    31d4:	02db      	lsls	r3, r3, #11
    31d6:	4013      	ands	r3, r2
    31d8:	d00a      	beq.n	31f0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	789b      	ldrb	r3, [r3, #2]
    31de:	2b01      	cmp	r3, #1
    31e0:	d103      	bne.n	31ea <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    31e2:	68fb      	ldr	r3, [r7, #12]
    31e4:	68ba      	ldr	r2, [r7, #8]
    31e6:	619a      	str	r2, [r3, #24]
    31e8:	e002      	b.n	31f0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    31ea:	68fb      	ldr	r3, [r7, #12]
    31ec:	68ba      	ldr	r2, [r7, #8]
    31ee:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	785b      	ldrb	r3, [r3, #1]
    31f4:	2b01      	cmp	r3, #1
    31f6:	d003      	beq.n	3200 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31fc:	2b02      	cmp	r3, #2
    31fe:	d102      	bne.n	3206 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3200:	68fb      	ldr	r3, [r7, #12]
    3202:	68ba      	ldr	r2, [r7, #8]
    3204:	609a      	str	r2, [r3, #8]
		}
	}
}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	46bd      	mov	sp, r7
    320a:	b008      	add	sp, #32
    320c:	bd80      	pop	{r7, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	fffbffff 	.word	0xfffbffff

00003214 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3214:	b580      	push	{r7, lr}
    3216:	b084      	sub	sp, #16
    3218:	af00      	add	r7, sp, #0
    321a:	0002      	movs	r2, r0
    321c:	6039      	str	r1, [r7, #0]
    321e:	1dfb      	adds	r3, r7, #7
    3220:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3222:	1dfb      	adds	r3, r7, #7
    3224:	781b      	ldrb	r3, [r3, #0]
    3226:	0018      	movs	r0, r3
    3228:	4b0a      	ldr	r3, [pc, #40]	; (3254 <system_pinmux_pin_set_config+0x40>)
    322a:	4798      	blx	r3
    322c:	0003      	movs	r3, r0
    322e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3230:	1dfb      	adds	r3, r7, #7
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	221f      	movs	r2, #31
    3236:	4013      	ands	r3, r2
    3238:	2201      	movs	r2, #1
    323a:	409a      	lsls	r2, r3
    323c:	0013      	movs	r3, r2
    323e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3240:	683a      	ldr	r2, [r7, #0]
    3242:	68b9      	ldr	r1, [r7, #8]
    3244:	68fb      	ldr	r3, [r7, #12]
    3246:	0018      	movs	r0, r3
    3248:	4b03      	ldr	r3, [pc, #12]	; (3258 <system_pinmux_pin_set_config+0x44>)
    324a:	4798      	blx	r3
}
    324c:	46c0      	nop			; (mov r8, r8)
    324e:	46bd      	mov	sp, r7
    3250:	b004      	add	sp, #16
    3252:	bd80      	pop	{r7, pc}
    3254:	000030a5 	.word	0x000030a5
    3258:	00003105 	.word	0x00003105

0000325c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    325c:	b580      	push	{r7, lr}
    325e:	af00      	add	r7, sp, #0
	return;
    3260:	46c0      	nop			; (mov r8, r8)
}
    3262:	46bd      	mov	sp, r7
    3264:	bd80      	pop	{r7, pc}
	...

00003268 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3268:	b580      	push	{r7, lr}
    326a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    326c:	4b06      	ldr	r3, [pc, #24]	; (3288 <system_init+0x20>)
    326e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3270:	4b06      	ldr	r3, [pc, #24]	; (328c <system_init+0x24>)
    3272:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <system_init+0x28>)
    3276:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3278:	4b06      	ldr	r3, [pc, #24]	; (3294 <system_init+0x2c>)
    327a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    327c:	4b06      	ldr	r3, [pc, #24]	; (3298 <system_init+0x30>)
    327e:	4798      	blx	r3
}
    3280:	46c0      	nop			; (mov r8, r8)
    3282:	46bd      	mov	sp, r7
    3284:	bd80      	pop	{r7, pc}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	00002b29 	.word	0x00002b29
    328c:	00002719 	.word	0x00002719
    3290:	0000325d 	.word	0x0000325d
    3294:	0000325d 	.word	0x0000325d
    3298:	0000325d 	.word	0x0000325d

0000329c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    32a2:	4b2f      	ldr	r3, [pc, #188]	; (3360 <Reset_Handler+0xc4>)
    32a4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    32a6:	4b2f      	ldr	r3, [pc, #188]	; (3364 <Reset_Handler+0xc8>)
    32a8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    32aa:	687a      	ldr	r2, [r7, #4]
    32ac:	683b      	ldr	r3, [r7, #0]
    32ae:	429a      	cmp	r2, r3
    32b0:	d00c      	beq.n	32cc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    32b2:	e007      	b.n	32c4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    32b4:	683b      	ldr	r3, [r7, #0]
    32b6:	1d1a      	adds	r2, r3, #4
    32b8:	603a      	str	r2, [r7, #0]
    32ba:	687a      	ldr	r2, [r7, #4]
    32bc:	1d11      	adds	r1, r2, #4
    32be:	6079      	str	r1, [r7, #4]
    32c0:	6812      	ldr	r2, [r2, #0]
    32c2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    32c4:	683a      	ldr	r2, [r7, #0]
    32c6:	4b28      	ldr	r3, [pc, #160]	; (3368 <Reset_Handler+0xcc>)
    32c8:	429a      	cmp	r2, r3
    32ca:	d3f3      	bcc.n	32b4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    32cc:	4b27      	ldr	r3, [pc, #156]	; (336c <Reset_Handler+0xd0>)
    32ce:	603b      	str	r3, [r7, #0]
    32d0:	e004      	b.n	32dc <Reset_Handler+0x40>
                *pDest++ = 0;
    32d2:	683b      	ldr	r3, [r7, #0]
    32d4:	1d1a      	adds	r2, r3, #4
    32d6:	603a      	str	r2, [r7, #0]
    32d8:	2200      	movs	r2, #0
    32da:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    32dc:	683a      	ldr	r2, [r7, #0]
    32de:	4b24      	ldr	r3, [pc, #144]	; (3370 <Reset_Handler+0xd4>)
    32e0:	429a      	cmp	r2, r3
    32e2:	d3f6      	bcc.n	32d2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    32e4:	4b23      	ldr	r3, [pc, #140]	; (3374 <Reset_Handler+0xd8>)
    32e6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    32e8:	4b23      	ldr	r3, [pc, #140]	; (3378 <Reset_Handler+0xdc>)
    32ea:	687a      	ldr	r2, [r7, #4]
    32ec:	21ff      	movs	r1, #255	; 0xff
    32ee:	438a      	bics	r2, r1
    32f0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    32f2:	4a22      	ldr	r2, [pc, #136]	; (337c <Reset_Handler+0xe0>)
    32f4:	2390      	movs	r3, #144	; 0x90
    32f6:	005b      	lsls	r3, r3, #1
    32f8:	2102      	movs	r1, #2
    32fa:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    32fc:	4a20      	ldr	r2, [pc, #128]	; (3380 <Reset_Handler+0xe4>)
    32fe:	78d3      	ldrb	r3, [r2, #3]
    3300:	2103      	movs	r1, #3
    3302:	438b      	bics	r3, r1
    3304:	1c19      	adds	r1, r3, #0
    3306:	2302      	movs	r3, #2
    3308:	430b      	orrs	r3, r1
    330a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    330c:	4a1c      	ldr	r2, [pc, #112]	; (3380 <Reset_Handler+0xe4>)
    330e:	78d3      	ldrb	r3, [r2, #3]
    3310:	210c      	movs	r1, #12
    3312:	438b      	bics	r3, r1
    3314:	1c19      	adds	r1, r3, #0
    3316:	2308      	movs	r3, #8
    3318:	430b      	orrs	r3, r1
    331a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    331c:	4a19      	ldr	r2, [pc, #100]	; (3384 <Reset_Handler+0xe8>)
    331e:	7b93      	ldrb	r3, [r2, #14]
    3320:	2130      	movs	r1, #48	; 0x30
    3322:	438b      	bics	r3, r1
    3324:	1c19      	adds	r1, r3, #0
    3326:	2320      	movs	r3, #32
    3328:	430b      	orrs	r3, r1
    332a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    332c:	4a15      	ldr	r2, [pc, #84]	; (3384 <Reset_Handler+0xe8>)
    332e:	7b93      	ldrb	r3, [r2, #14]
    3330:	210c      	movs	r1, #12
    3332:	438b      	bics	r3, r1
    3334:	1c19      	adds	r1, r3, #0
    3336:	2308      	movs	r3, #8
    3338:	430b      	orrs	r3, r1
    333a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    333c:	4a11      	ldr	r2, [pc, #68]	; (3384 <Reset_Handler+0xe8>)
    333e:	7b93      	ldrb	r3, [r2, #14]
    3340:	2103      	movs	r1, #3
    3342:	438b      	bics	r3, r1
    3344:	1c19      	adds	r1, r3, #0
    3346:	2302      	movs	r3, #2
    3348:	430b      	orrs	r3, r1
    334a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    334c:	4a0e      	ldr	r2, [pc, #56]	; (3388 <Reset_Handler+0xec>)
    334e:	6853      	ldr	r3, [r2, #4]
    3350:	2180      	movs	r1, #128	; 0x80
    3352:	430b      	orrs	r3, r1
    3354:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3356:	4b0d      	ldr	r3, [pc, #52]	; (338c <Reset_Handler+0xf0>)
    3358:	4798      	blx	r3

        /* Branch to main function */
        main();
    335a:	4b0d      	ldr	r3, [pc, #52]	; (3390 <Reset_Handler+0xf4>)
    335c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    335e:	e7fe      	b.n	335e <Reset_Handler+0xc2>
    3360:	00003a0c 	.word	0x00003a0c
    3364:	20000000 	.word	0x20000000
    3368:	2000001c 	.word	0x2000001c
    336c:	2000001c 	.word	0x2000001c
    3370:	2000018c 	.word	0x2000018c
    3374:	00000000 	.word	0x00000000
    3378:	e000ed00 	.word	0xe000ed00
    337c:	41007000 	.word	0x41007000
    3380:	41005000 	.word	0x41005000
    3384:	41004800 	.word	0x41004800
    3388:	41004000 	.word	0x41004000
    338c:	00003845 	.word	0x00003845
    3390:	000034b9 	.word	0x000034b9

00003394 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3394:	b580      	push	{r7, lr}
    3396:	af00      	add	r7, sp, #0
        while (1) {
    3398:	e7fe      	b.n	3398 <Dummy_Handler+0x4>
	...

0000339c <system_cpu_clock_set_divider>:
{
    339c:	b580      	push	{r7, lr}
    339e:	b082      	sub	sp, #8
    33a0:	af00      	add	r7, sp, #0
    33a2:	0002      	movs	r2, r0
    33a4:	1dfb      	adds	r3, r7, #7
    33a6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    33a8:	4a03      	ldr	r2, [pc, #12]	; (33b8 <system_cpu_clock_set_divider+0x1c>)
    33aa:	1dfb      	adds	r3, r7, #7
    33ac:	781b      	ldrb	r3, [r3, #0]
    33ae:	7213      	strb	r3, [r2, #8]
}
    33b0:	46c0      	nop			; (mov r8, r8)
    33b2:	46bd      	mov	sp, r7
    33b4:	b002      	add	sp, #8
    33b6:	bd80      	pop	{r7, pc}
    33b8:	40000400 	.word	0x40000400

000033bc <system_pinmux_get_group_from_gpio_pin>:
{
    33bc:	b580      	push	{r7, lr}
    33be:	b084      	sub	sp, #16
    33c0:	af00      	add	r7, sp, #0
    33c2:	0002      	movs	r2, r0
    33c4:	1dfb      	adds	r3, r7, #7
    33c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    33c8:	230f      	movs	r3, #15
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	1dfa      	adds	r2, r7, #7
    33ce:	7812      	ldrb	r2, [r2, #0]
    33d0:	09d2      	lsrs	r2, r2, #7
    33d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    33d4:	230e      	movs	r3, #14
    33d6:	18fb      	adds	r3, r7, r3
    33d8:	1dfa      	adds	r2, r7, #7
    33da:	7812      	ldrb	r2, [r2, #0]
    33dc:	0952      	lsrs	r2, r2, #5
    33de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    33e0:	4b0d      	ldr	r3, [pc, #52]	; (3418 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    33e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    33e4:	230f      	movs	r3, #15
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	781b      	ldrb	r3, [r3, #0]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d10f      	bne.n	340e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    33ee:	230f      	movs	r3, #15
    33f0:	18fb      	adds	r3, r7, r3
    33f2:	781b      	ldrb	r3, [r3, #0]
    33f4:	009b      	lsls	r3, r3, #2
    33f6:	2210      	movs	r2, #16
    33f8:	4694      	mov	ip, r2
    33fa:	44bc      	add	ip, r7
    33fc:	4463      	add	r3, ip
    33fe:	3b08      	subs	r3, #8
    3400:	681a      	ldr	r2, [r3, #0]
    3402:	230e      	movs	r3, #14
    3404:	18fb      	adds	r3, r7, r3
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	01db      	lsls	r3, r3, #7
    340a:	18d3      	adds	r3, r2, r3
    340c:	e000      	b.n	3410 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    340e:	2300      	movs	r3, #0
}
    3410:	0018      	movs	r0, r3
    3412:	46bd      	mov	sp, r7
    3414:	b004      	add	sp, #16
    3416:	bd80      	pop	{r7, pc}
    3418:	41004400 	.word	0x41004400

0000341c <port_get_group_from_gpio_pin>:
{
    341c:	b580      	push	{r7, lr}
    341e:	b082      	sub	sp, #8
    3420:	af00      	add	r7, sp, #0
    3422:	0002      	movs	r2, r0
    3424:	1dfb      	adds	r3, r7, #7
    3426:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3428:	1dfb      	adds	r3, r7, #7
    342a:	781b      	ldrb	r3, [r3, #0]
    342c:	0018      	movs	r0, r3
    342e:	4b03      	ldr	r3, [pc, #12]	; (343c <port_get_group_from_gpio_pin+0x20>)
    3430:	4798      	blx	r3
    3432:	0003      	movs	r3, r0
}
    3434:	0018      	movs	r0, r3
    3436:	46bd      	mov	sp, r7
    3438:	b002      	add	sp, #8
    343a:	bd80      	pop	{r7, pc}
    343c:	000033bd 	.word	0x000033bd

00003440 <port_get_config_defaults>:
{
    3440:	b580      	push	{r7, lr}
    3442:	b082      	sub	sp, #8
    3444:	af00      	add	r7, sp, #0
    3446:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	2200      	movs	r2, #0
    344c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	2201      	movs	r2, #1
    3452:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	2200      	movs	r2, #0
    3458:	709a      	strb	r2, [r3, #2]
}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}
	...

00003464 <port_pin_set_output_level>:
{
    3464:	b580      	push	{r7, lr}
    3466:	b084      	sub	sp, #16
    3468:	af00      	add	r7, sp, #0
    346a:	0002      	movs	r2, r0
    346c:	1dfb      	adds	r3, r7, #7
    346e:	701a      	strb	r2, [r3, #0]
    3470:	1dbb      	adds	r3, r7, #6
    3472:	1c0a      	adds	r2, r1, #0
    3474:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3476:	1dfb      	adds	r3, r7, #7
    3478:	781b      	ldrb	r3, [r3, #0]
    347a:	0018      	movs	r0, r3
    347c:	4b0d      	ldr	r3, [pc, #52]	; (34b4 <port_pin_set_output_level+0x50>)
    347e:	4798      	blx	r3
    3480:	0003      	movs	r3, r0
    3482:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3484:	1dfb      	adds	r3, r7, #7
    3486:	781b      	ldrb	r3, [r3, #0]
    3488:	221f      	movs	r2, #31
    348a:	4013      	ands	r3, r2
    348c:	2201      	movs	r2, #1
    348e:	409a      	lsls	r2, r3
    3490:	0013      	movs	r3, r2
    3492:	60bb      	str	r3, [r7, #8]
	if (level) {
    3494:	1dbb      	adds	r3, r7, #6
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	2b00      	cmp	r3, #0
    349a:	d003      	beq.n	34a4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    349c:	68fb      	ldr	r3, [r7, #12]
    349e:	68ba      	ldr	r2, [r7, #8]
    34a0:	619a      	str	r2, [r3, #24]
}
    34a2:	e002      	b.n	34aa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	68ba      	ldr	r2, [r7, #8]
    34a8:	615a      	str	r2, [r3, #20]
}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	46bd      	mov	sp, r7
    34ae:	b004      	add	sp, #16
    34b0:	bd80      	pop	{r7, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	0000341d 	.word	0x0000341d

000034b8 <main>:

/************************************************************************/
/*                                      Main                            */
/************************************************************************/
int main (void)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b082      	sub	sp, #8
    34bc:	af00      	add	r7, sp, #0
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    34be:	1d3b      	adds	r3, r7, #4
    34c0:	4a0a      	ldr	r2, [pc, #40]	; (34ec <main+0x34>)
    34c2:	6812      	ldr	r2, [r2, #0]
    34c4:	601a      	str	r2, [r3, #0]

    // initialize all the subsystems on the MCU
    simSysInit();
    34c6:	4b0a      	ldr	r3, [pc, #40]	; (34f0 <main+0x38>)
    34c8:	4798      	blx	r3
      //  spi169_write(tx_preamble, 4);

        // stop the SPI transfer to the FIFO
       // spi169_stop_xfer();

       spi169_start_xfer(AX5043_FIFODATA, WRT);
    34ca:	2101      	movs	r1, #1
    34cc:	2029      	movs	r0, #41	; 0x29
    34ce:	4b09      	ldr	r3, [pc, #36]	; (34f4 <main+0x3c>)
    34d0:	4798      	blx	r3
        
        // write the preamble
       spi169_write(tx_preamble, 4);
    34d2:	1d3b      	adds	r3, r7, #4
    34d4:	2104      	movs	r1, #4
    34d6:	0018      	movs	r0, r3
    34d8:	4b07      	ldr	r3, [pc, #28]	; (34f8 <main+0x40>)
    34da:	4798      	blx	r3

        // stop the SPI transfer to the FIFO
       spi169_stop_xfer();
    34dc:	4b07      	ldr	r3, [pc, #28]	; (34fc <main+0x44>)
    34de:	4798      	blx	r3

      
		
	
        // send an AT command to the 915 MHz module
        uart915_write_cmd("AT+SEND=test\r\n");
    34e0:	4b07      	ldr	r3, [pc, #28]	; (3500 <main+0x48>)
    34e2:	0018      	movs	r0, r3
    34e4:	4b07      	ldr	r3, [pc, #28]	; (3504 <main+0x4c>)
    34e6:	4798      	blx	r3
       spi169_start_xfer(AX5043_FIFODATA, WRT);
    34e8:	e7ef      	b.n	34ca <main+0x12>
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	000039e8 	.word	0x000039e8
    34f0:	00003509 	.word	0x00003509
    34f4:	000001e9 	.word	0x000001e9
    34f8:	000002b9 	.word	0x000002b9
    34fc:	00000295 	.word	0x00000295
    3500:	000039d8 	.word	0x000039d8
    3504:	00000691 	.word	0x00000691

00003508 <simSysInit>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes all relevant subsystems.
 */
void simSysInit(void)
{
    3508:	b580      	push	{r7, lr}
    350a:	af00      	add	r7, sp, #0
	system_init();
    350c:	4b07      	ldr	r3, [pc, #28]	; (352c <simSysInit+0x24>)
    350e:	4798      	blx	r3
	sys_clk_init();	
    3510:	4b07      	ldr	r3, [pc, #28]	; (3530 <simSysInit+0x28>)
    3512:	4798      	blx	r3
	conf_port_pin();
    3514:	4b07      	ldr	r3, [pc, #28]	; (3534 <simSysInit+0x2c>)
    3516:	4798      	blx	r3
//    spi169_init();
  //  uart245_init();
    uart915_init();
    3518:	4b07      	ldr	r3, [pc, #28]	; (3538 <simSysInit+0x30>)
    351a:	4798      	blx	r3

	port_pin_set_output_level(CONFIG245, true);
    351c:	2101      	movs	r1, #1
    351e:	2006      	movs	r0, #6
    3520:	4b06      	ldr	r3, [pc, #24]	; (353c <simSysInit+0x34>)
    3522:	4798      	blx	r3
	
	
	//uart245_init();


}
    3524:	46c0      	nop			; (mov r8, r8)
    3526:	46bd      	mov	sp, r7
    3528:	bd80      	pop	{r7, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	00003269 	.word	0x00003269
    3530:	00003541 	.word	0x00003541
    3534:	00003565 	.word	0x00003565
    3538:	000004a5 	.word	0x000004a5
    353c:	00003465 	.word	0x00003465

00003540 <sys_clk_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the MCU clocks.
 */
void sys_clk_init(void)
{
    3540:	b580      	push	{r7, lr}
    3542:	af00      	add	r7, sp, #0
	clk_osc8m_init();
    3544:	4b04      	ldr	r3, [pc, #16]	; (3558 <sys_clk_init+0x18>)
    3546:	4798      	blx	r3
	clk_gclk0_init();
    3548:	4b04      	ldr	r3, [pc, #16]	; (355c <sys_clk_init+0x1c>)
    354a:	4798      	blx	r3
    delay_init();
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <sys_clk_init+0x20>)
    354e:	4798      	blx	r3
}
    3550:	46c0      	nop			; (mov r8, r8)
    3552:	46bd      	mov	sp, r7
    3554:	bd80      	pop	{r7, pc}
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	00003655 	.word	0x00003655
    355c:	00003681 	.word	0x00003681
    3560:	00000811 	.word	0x00000811

00003564 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    3564:	b580      	push	{r7, lr}
    3566:	b082      	sub	sp, #8
    3568:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    356a:	1d3b      	adds	r3, r7, #4
    356c:	0018      	movs	r0, r3
    356e:	4b36      	ldr	r3, [pc, #216]	; (3648 <conf_port_pin+0xe4>)
    3570:	4798      	blx	r3
	
	/**************config pin for 245*************/

	
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    3572:	1d3b      	adds	r3, r7, #4
    3574:	2200      	movs	r2, #0
    3576:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3578:	1d3b      	adds	r3, r7, #4
    357a:	2201      	movs	r2, #1
    357c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS245, &config_port_pin);
    357e:	1d3b      	adds	r3, r7, #4
    3580:	0019      	movs	r1, r3
    3582:	200b      	movs	r0, #11
    3584:	4b31      	ldr	r3, [pc, #196]	; (364c <conf_port_pin+0xe8>)
    3586:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3588:	1d3b      	adds	r3, r7, #4
    358a:	2201      	movs	r2, #1
    358c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    358e:	1d3b      	adds	r3, r7, #4
    3590:	0019      	movs	r1, r3
    3592:	200a      	movs	r0, #10
    3594:	4b2d      	ldr	r3, [pc, #180]	; (364c <conf_port_pin+0xe8>)
    3596:	4798      	blx	r3
	port_pin_set_output_level(RTS245, true);
    3598:	2101      	movs	r1, #1
    359a:	200a      	movs	r0, #10
    359c:	4b2c      	ldr	r3, [pc, #176]	; (3650 <conf_port_pin+0xec>)
    359e:	4798      	blx	r3
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    35a0:	1d3b      	adds	r3, r7, #4
    35a2:	0019      	movs	r1, r3
    35a4:	2001      	movs	r0, #1
    35a6:	4b29      	ldr	r3, [pc, #164]	; (364c <conf_port_pin+0xe8>)
    35a8:	4798      	blx	r3
    port_pin_set_output_level(PAEN245, true);
    35aa:	2101      	movs	r1, #1
    35ac:	2001      	movs	r0, #1
    35ae:	4b28      	ldr	r3, [pc, #160]	; (3650 <conf_port_pin+0xec>)
    35b0:	4798      	blx	r3
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    35b2:	1d3b      	adds	r3, r7, #4
    35b4:	0019      	movs	r1, r3
    35b6:	2006      	movs	r0, #6
    35b8:	4b24      	ldr	r3, [pc, #144]	; (364c <conf_port_pin+0xe8>)
    35ba:	4798      	blx	r3
    port_pin_set_output_level(CONFIG245, true);
    35bc:	2101      	movs	r1, #1
    35be:	2006      	movs	r0, #6
    35c0:	4b23      	ldr	r3, [pc, #140]	; (3650 <conf_port_pin+0xec>)
    35c2:	4798      	blx	r3
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    35c4:	1d3b      	adds	r3, r7, #4
    35c6:	0019      	movs	r1, r3
    35c8:	2007      	movs	r0, #7
    35ca:	4b20      	ldr	r3, [pc, #128]	; (364c <conf_port_pin+0xe8>)
    35cc:	4798      	blx	r3
    port_pin_set_output_level(RESET245, true);
    35ce:	2101      	movs	r1, #1
    35d0:	2007      	movs	r0, #7
    35d2:	4b1f      	ldr	r3, [pc, #124]	; (3650 <conf_port_pin+0xec>)
    35d4:	4798      	blx	r3
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    35d6:	1d3b      	adds	r3, r7, #4
    35d8:	2200      	movs	r2, #0
    35da:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    35dc:	1d3b      	adds	r3, r7, #4
    35de:	2201      	movs	r2, #1
    35e0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    35e2:	1d3b      	adds	r3, r7, #4
    35e4:	0019      	movs	r1, r3
    35e6:	200f      	movs	r0, #15
    35e8:	4b18      	ldr	r3, [pc, #96]	; (364c <conf_port_pin+0xe8>)
    35ea:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    35ec:	1d3b      	adds	r3, r7, #4
    35ee:	2201      	movs	r2, #1
    35f0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    35f2:	1d3b      	adds	r3, r7, #4
    35f4:	0019      	movs	r1, r3
    35f6:	200e      	movs	r0, #14
    35f8:	4b14      	ldr	r3, [pc, #80]	; (364c <conf_port_pin+0xe8>)
    35fa:	4798      	blx	r3
   // port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    35fc:	1d3b      	adds	r3, r7, #4
    35fe:	2201      	movs	r2, #1
    3600:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    3602:	1d3b      	adds	r3, r7, #4
    3604:	2202      	movs	r2, #2
    3606:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(WAKE915, &config_port_pin);	
    3608:	1d3b      	adds	r3, r7, #4
    360a:	0019      	movs	r1, r3
    360c:	202f      	movs	r0, #47	; 0x2f
    360e:	4b0f      	ldr	r3, [pc, #60]	; (364c <conf_port_pin+0xe8>)
    3610:	4798      	blx	r3
    port_pin_set_output_level(WAKE915, true);
    3612:	2101      	movs	r1, #1
    3614:	202f      	movs	r0, #47	; 0x2f
    3616:	4b0e      	ldr	r3, [pc, #56]	; (3650 <conf_port_pin+0xec>)
    3618:	4798      	blx	r3

	
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    361a:	1d3b      	adds	r3, r7, #4
    361c:	2201      	movs	r2, #1
    361e:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    3620:	1d3b      	adds	r3, r7, #4
    3622:	2201      	movs	r2, #1
    3624:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SS169, &config_port_pin);
    3626:	1d3b      	adds	r3, r7, #4
    3628:	0019      	movs	r1, r3
    362a:	2011      	movs	r0, #17
    362c:	4b07      	ldr	r3, [pc, #28]	; (364c <conf_port_pin+0xe8>)
    362e:	4798      	blx	r3
    port_pin_set_output_level(SS169, true);
    3630:	2101      	movs	r1, #1
    3632:	2011      	movs	r0, #17
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <conf_port_pin+0xec>)
    3636:	4798      	blx	r3
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    3638:	1d3b      	adds	r3, r7, #4
    363a:	2200      	movs	r2, #0
    363c:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(IRQ169, &config_port_pin);
	
} // end conf_port_pin(void)
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	46bd      	mov	sp, r7
    3642:	b002      	add	sp, #8
    3644:	bd80      	pop	{r7, pc}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	00003441 	.word	0x00003441
    364c:	000008c1 	.word	0x000008c1
    3650:	00003465 	.word	0x00003465

00003654 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    3654:	b580      	push	{r7, lr}
    3656:	b082      	sub	sp, #8
    3658:	af00      	add	r7, sp, #0

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    365a:	1d3b      	adds	r3, r7, #4
    365c:	2200      	movs	r2, #0
    365e:	701a      	strb	r2, [r3, #0]
	osc8_config.on_demand = true;
    3660:	1d3b      	adds	r3, r7, #4
    3662:	2201      	movs	r2, #1
    3664:	709a      	strb	r2, [r3, #2]
	osc8_config.run_in_standby = false;
    3666:	1d3b      	adds	r3, r7, #4
    3668:	2200      	movs	r2, #0
    366a:	705a      	strb	r2, [r3, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    366c:	1d3b      	adds	r3, r7, #4
    366e:	0018      	movs	r0, r3
    3670:	4b02      	ldr	r3, [pc, #8]	; (367c <clk_osc8m_init+0x28>)
    3672:	4798      	blx	r3
}
    3674:	46c0      	nop			; (mov r8, r8)
    3676:	46bd      	mov	sp, r7
    3678:	b002      	add	sp, #8
    367a:	bd80      	pop	{r7, pc}
    367c:	000029cd 	.word	0x000029cd

00003680 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    3680:	b580      	push	{r7, lr}
    3682:	b084      	sub	sp, #16
    3684:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    3686:	4b10      	ldr	r3, [pc, #64]	; (36c8 <clk_gclk0_init+0x48>)
    3688:	4798      	blx	r3
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    368a:	2000      	movs	r0, #0
    368c:	4b0f      	ldr	r3, [pc, #60]	; (36cc <clk_gclk0_init+0x4c>)
    368e:	4798      	blx	r3
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    3690:	1d3b      	adds	r3, r7, #4
    3692:	2206      	movs	r2, #6
    3694:	701a      	strb	r2, [r3, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    3696:	1d3b      	adds	r3, r7, #4
    3698:	2200      	movs	r2, #0
    369a:	725a      	strb	r2, [r3, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    369c:	1d3b      	adds	r3, r7, #4
    369e:	2200      	movs	r2, #0
    36a0:	705a      	strb	r2, [r3, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    36a2:	1d3b      	adds	r3, r7, #4
    36a4:	2201      	movs	r2, #1
    36a6:	605a      	str	r2, [r3, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    36a8:	1d3b      	adds	r3, r7, #4
    36aa:	2200      	movs	r2, #0
    36ac:	721a      	strb	r2, [r3, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    36ae:	1d3b      	adds	r3, r7, #4
    36b0:	0019      	movs	r1, r3
    36b2:	2000      	movs	r0, #0
    36b4:	4b06      	ldr	r3, [pc, #24]	; (36d0 <clk_gclk0_init+0x50>)
    36b6:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    36b8:	2000      	movs	r0, #0
    36ba:	4b06      	ldr	r3, [pc, #24]	; (36d4 <clk_gclk0_init+0x54>)
    36bc:	4798      	blx	r3
}
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	46bd      	mov	sp, r7
    36c2:	b004      	add	sp, #16
    36c4:	bd80      	pop	{r7, pc}
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	00002ca1 	.word	0x00002ca1
    36cc:	0000339d 	.word	0x0000339d
    36d0:	00002cd1 	.word	0x00002cd1
    36d4:	00002df5 	.word	0x00002df5

000036d8 <__udivsi3>:
    36d8:	2200      	movs	r2, #0
    36da:	0843      	lsrs	r3, r0, #1
    36dc:	428b      	cmp	r3, r1
    36de:	d374      	bcc.n	37ca <__udivsi3+0xf2>
    36e0:	0903      	lsrs	r3, r0, #4
    36e2:	428b      	cmp	r3, r1
    36e4:	d35f      	bcc.n	37a6 <__udivsi3+0xce>
    36e6:	0a03      	lsrs	r3, r0, #8
    36e8:	428b      	cmp	r3, r1
    36ea:	d344      	bcc.n	3776 <__udivsi3+0x9e>
    36ec:	0b03      	lsrs	r3, r0, #12
    36ee:	428b      	cmp	r3, r1
    36f0:	d328      	bcc.n	3744 <__udivsi3+0x6c>
    36f2:	0c03      	lsrs	r3, r0, #16
    36f4:	428b      	cmp	r3, r1
    36f6:	d30d      	bcc.n	3714 <__udivsi3+0x3c>
    36f8:	22ff      	movs	r2, #255	; 0xff
    36fa:	0209      	lsls	r1, r1, #8
    36fc:	ba12      	rev	r2, r2
    36fe:	0c03      	lsrs	r3, r0, #16
    3700:	428b      	cmp	r3, r1
    3702:	d302      	bcc.n	370a <__udivsi3+0x32>
    3704:	1212      	asrs	r2, r2, #8
    3706:	0209      	lsls	r1, r1, #8
    3708:	d065      	beq.n	37d6 <__udivsi3+0xfe>
    370a:	0b03      	lsrs	r3, r0, #12
    370c:	428b      	cmp	r3, r1
    370e:	d319      	bcc.n	3744 <__udivsi3+0x6c>
    3710:	e000      	b.n	3714 <__udivsi3+0x3c>
    3712:	0a09      	lsrs	r1, r1, #8
    3714:	0bc3      	lsrs	r3, r0, #15
    3716:	428b      	cmp	r3, r1
    3718:	d301      	bcc.n	371e <__udivsi3+0x46>
    371a:	03cb      	lsls	r3, r1, #15
    371c:	1ac0      	subs	r0, r0, r3
    371e:	4152      	adcs	r2, r2
    3720:	0b83      	lsrs	r3, r0, #14
    3722:	428b      	cmp	r3, r1
    3724:	d301      	bcc.n	372a <__udivsi3+0x52>
    3726:	038b      	lsls	r3, r1, #14
    3728:	1ac0      	subs	r0, r0, r3
    372a:	4152      	adcs	r2, r2
    372c:	0b43      	lsrs	r3, r0, #13
    372e:	428b      	cmp	r3, r1
    3730:	d301      	bcc.n	3736 <__udivsi3+0x5e>
    3732:	034b      	lsls	r3, r1, #13
    3734:	1ac0      	subs	r0, r0, r3
    3736:	4152      	adcs	r2, r2
    3738:	0b03      	lsrs	r3, r0, #12
    373a:	428b      	cmp	r3, r1
    373c:	d301      	bcc.n	3742 <__udivsi3+0x6a>
    373e:	030b      	lsls	r3, r1, #12
    3740:	1ac0      	subs	r0, r0, r3
    3742:	4152      	adcs	r2, r2
    3744:	0ac3      	lsrs	r3, r0, #11
    3746:	428b      	cmp	r3, r1
    3748:	d301      	bcc.n	374e <__udivsi3+0x76>
    374a:	02cb      	lsls	r3, r1, #11
    374c:	1ac0      	subs	r0, r0, r3
    374e:	4152      	adcs	r2, r2
    3750:	0a83      	lsrs	r3, r0, #10
    3752:	428b      	cmp	r3, r1
    3754:	d301      	bcc.n	375a <__udivsi3+0x82>
    3756:	028b      	lsls	r3, r1, #10
    3758:	1ac0      	subs	r0, r0, r3
    375a:	4152      	adcs	r2, r2
    375c:	0a43      	lsrs	r3, r0, #9
    375e:	428b      	cmp	r3, r1
    3760:	d301      	bcc.n	3766 <__udivsi3+0x8e>
    3762:	024b      	lsls	r3, r1, #9
    3764:	1ac0      	subs	r0, r0, r3
    3766:	4152      	adcs	r2, r2
    3768:	0a03      	lsrs	r3, r0, #8
    376a:	428b      	cmp	r3, r1
    376c:	d301      	bcc.n	3772 <__udivsi3+0x9a>
    376e:	020b      	lsls	r3, r1, #8
    3770:	1ac0      	subs	r0, r0, r3
    3772:	4152      	adcs	r2, r2
    3774:	d2cd      	bcs.n	3712 <__udivsi3+0x3a>
    3776:	09c3      	lsrs	r3, r0, #7
    3778:	428b      	cmp	r3, r1
    377a:	d301      	bcc.n	3780 <__udivsi3+0xa8>
    377c:	01cb      	lsls	r3, r1, #7
    377e:	1ac0      	subs	r0, r0, r3
    3780:	4152      	adcs	r2, r2
    3782:	0983      	lsrs	r3, r0, #6
    3784:	428b      	cmp	r3, r1
    3786:	d301      	bcc.n	378c <__udivsi3+0xb4>
    3788:	018b      	lsls	r3, r1, #6
    378a:	1ac0      	subs	r0, r0, r3
    378c:	4152      	adcs	r2, r2
    378e:	0943      	lsrs	r3, r0, #5
    3790:	428b      	cmp	r3, r1
    3792:	d301      	bcc.n	3798 <__udivsi3+0xc0>
    3794:	014b      	lsls	r3, r1, #5
    3796:	1ac0      	subs	r0, r0, r3
    3798:	4152      	adcs	r2, r2
    379a:	0903      	lsrs	r3, r0, #4
    379c:	428b      	cmp	r3, r1
    379e:	d301      	bcc.n	37a4 <__udivsi3+0xcc>
    37a0:	010b      	lsls	r3, r1, #4
    37a2:	1ac0      	subs	r0, r0, r3
    37a4:	4152      	adcs	r2, r2
    37a6:	08c3      	lsrs	r3, r0, #3
    37a8:	428b      	cmp	r3, r1
    37aa:	d301      	bcc.n	37b0 <__udivsi3+0xd8>
    37ac:	00cb      	lsls	r3, r1, #3
    37ae:	1ac0      	subs	r0, r0, r3
    37b0:	4152      	adcs	r2, r2
    37b2:	0883      	lsrs	r3, r0, #2
    37b4:	428b      	cmp	r3, r1
    37b6:	d301      	bcc.n	37bc <__udivsi3+0xe4>
    37b8:	008b      	lsls	r3, r1, #2
    37ba:	1ac0      	subs	r0, r0, r3
    37bc:	4152      	adcs	r2, r2
    37be:	0843      	lsrs	r3, r0, #1
    37c0:	428b      	cmp	r3, r1
    37c2:	d301      	bcc.n	37c8 <__udivsi3+0xf0>
    37c4:	004b      	lsls	r3, r1, #1
    37c6:	1ac0      	subs	r0, r0, r3
    37c8:	4152      	adcs	r2, r2
    37ca:	1a41      	subs	r1, r0, r1
    37cc:	d200      	bcs.n	37d0 <__udivsi3+0xf8>
    37ce:	4601      	mov	r1, r0
    37d0:	4152      	adcs	r2, r2
    37d2:	4610      	mov	r0, r2
    37d4:	4770      	bx	lr
    37d6:	e7ff      	b.n	37d8 <__udivsi3+0x100>
    37d8:	b501      	push	{r0, lr}
    37da:	2000      	movs	r0, #0
    37dc:	f000 f806 	bl	37ec <__aeabi_idiv0>
    37e0:	bd02      	pop	{r1, pc}
    37e2:	46c0      	nop			; (mov r8, r8)

000037e4 <__aeabi_uidivmod>:
    37e4:	2900      	cmp	r1, #0
    37e6:	d0f7      	beq.n	37d8 <__udivsi3+0x100>
    37e8:	e776      	b.n	36d8 <__udivsi3>
    37ea:	4770      	bx	lr

000037ec <__aeabi_idiv0>:
    37ec:	4770      	bx	lr
    37ee:	46c0      	nop			; (mov r8, r8)

000037f0 <__aeabi_lmul>:
    37f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37f2:	46ce      	mov	lr, r9
    37f4:	4647      	mov	r7, r8
    37f6:	0415      	lsls	r5, r2, #16
    37f8:	0c2d      	lsrs	r5, r5, #16
    37fa:	002e      	movs	r6, r5
    37fc:	b580      	push	{r7, lr}
    37fe:	0407      	lsls	r7, r0, #16
    3800:	0c14      	lsrs	r4, r2, #16
    3802:	0c3f      	lsrs	r7, r7, #16
    3804:	4699      	mov	r9, r3
    3806:	0c03      	lsrs	r3, r0, #16
    3808:	437e      	muls	r6, r7
    380a:	435d      	muls	r5, r3
    380c:	4367      	muls	r7, r4
    380e:	4363      	muls	r3, r4
    3810:	197f      	adds	r7, r7, r5
    3812:	0c34      	lsrs	r4, r6, #16
    3814:	19e4      	adds	r4, r4, r7
    3816:	469c      	mov	ip, r3
    3818:	42a5      	cmp	r5, r4
    381a:	d903      	bls.n	3824 <__aeabi_lmul+0x34>
    381c:	2380      	movs	r3, #128	; 0x80
    381e:	025b      	lsls	r3, r3, #9
    3820:	4698      	mov	r8, r3
    3822:	44c4      	add	ip, r8
    3824:	464b      	mov	r3, r9
    3826:	4351      	muls	r1, r2
    3828:	4343      	muls	r3, r0
    382a:	0436      	lsls	r6, r6, #16
    382c:	0c36      	lsrs	r6, r6, #16
    382e:	0c25      	lsrs	r5, r4, #16
    3830:	0424      	lsls	r4, r4, #16
    3832:	4465      	add	r5, ip
    3834:	19a4      	adds	r4, r4, r6
    3836:	1859      	adds	r1, r3, r1
    3838:	1949      	adds	r1, r1, r5
    383a:	0020      	movs	r0, r4
    383c:	bc0c      	pop	{r2, r3}
    383e:	4690      	mov	r8, r2
    3840:	4699      	mov	r9, r3
    3842:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003844 <__libc_init_array>:
    3844:	b570      	push	{r4, r5, r6, lr}
    3846:	2600      	movs	r6, #0
    3848:	4d0c      	ldr	r5, [pc, #48]	; (387c <__libc_init_array+0x38>)
    384a:	4c0d      	ldr	r4, [pc, #52]	; (3880 <__libc_init_array+0x3c>)
    384c:	1b64      	subs	r4, r4, r5
    384e:	10a4      	asrs	r4, r4, #2
    3850:	42a6      	cmp	r6, r4
    3852:	d109      	bne.n	3868 <__libc_init_array+0x24>
    3854:	2600      	movs	r6, #0
    3856:	f000 f8c9 	bl	39ec <_init>
    385a:	4d0a      	ldr	r5, [pc, #40]	; (3884 <__libc_init_array+0x40>)
    385c:	4c0a      	ldr	r4, [pc, #40]	; (3888 <__libc_init_array+0x44>)
    385e:	1b64      	subs	r4, r4, r5
    3860:	10a4      	asrs	r4, r4, #2
    3862:	42a6      	cmp	r6, r4
    3864:	d105      	bne.n	3872 <__libc_init_array+0x2e>
    3866:	bd70      	pop	{r4, r5, r6, pc}
    3868:	00b3      	lsls	r3, r6, #2
    386a:	58eb      	ldr	r3, [r5, r3]
    386c:	4798      	blx	r3
    386e:	3601      	adds	r6, #1
    3870:	e7ee      	b.n	3850 <__libc_init_array+0xc>
    3872:	00b3      	lsls	r3, r6, #2
    3874:	58eb      	ldr	r3, [r5, r3]
    3876:	4798      	blx	r3
    3878:	3601      	adds	r6, #1
    387a:	e7f2      	b.n	3862 <__libc_init_array+0x1e>
    387c:	000039f8 	.word	0x000039f8
    3880:	000039f8 	.word	0x000039f8
    3884:	000039f8 	.word	0x000039f8
    3888:	000039fc 	.word	0x000039fc

0000388c <strlen>:
    388c:	2300      	movs	r3, #0
    388e:	5cc2      	ldrb	r2, [r0, r3]
    3890:	3301      	adds	r3, #1
    3892:	2a00      	cmp	r2, #0
    3894:	d1fb      	bne.n	388e <strlen+0x2>
    3896:	1e58      	subs	r0, r3, #1
    3898:	4770      	bx	lr
    389a:	0000      	movs	r0, r0
    389c:	0a0d5441 	.word	0x0a0d5441
    38a0:	00000000 	.word	0x00000000
    38a4:	4e2b5441 	.word	0x4e2b5441
    38a8:	333d4d4a 	.word	0x333d4d4a
    38ac:	00000a0d 	.word	0x00000a0d
    38b0:	4e2b5441 	.word	0x4e2b5441
    38b4:	30303d41 	.word	0x30303d41
    38b8:	32323131 	.word	0x32323131
    38bc:	0a0d3333 	.word	0x0a0d3333
    38c0:	00000000 	.word	0x00000000
    38c4:	4e2b5441 	.word	0x4e2b5441
    38c8:	303d4b53 	.word	0x303d4b53
    38cc:	32313130 	.word	0x32313130
    38d0:	30333332 	.word	0x30333332
    38d4:	32313130 	.word	0x32313130
    38d8:	30333332 	.word	0x30333332
    38dc:	32313130 	.word	0x32313130
    38e0:	30333332 	.word	0x30333332
    38e4:	32313130 	.word	0x32313130
    38e8:	0d333332 	.word	0x0d333332
    38ec:	0000000a 	.word	0x0000000a
    38f0:	442b5441 	.word	0x442b5441
    38f4:	333d4b53 	.word	0x333d4b53
    38f8:	31323233 	.word	0x31323233
    38fc:	33303031 	.word	0x33303031
    3900:	31323233 	.word	0x31323233
    3904:	33303031 	.word	0x33303031
    3908:	31323233 	.word	0x31323233
    390c:	33303031 	.word	0x33303031
    3910:	31323233 	.word	0x31323233
    3914:	0d303031 	.word	0x0d303031
    3918:	0000000a 	.word	0x0000000a
    391c:	542b5441 	.word	0x542b5441
    3920:	3d524458 	.word	0x3d524458
    3924:	0d385244 	.word	0x0d385244
    3928:	0000000a 	.word	0x0000000a
    392c:	542b5441 	.word	0x542b5441
    3930:	393d4658 	.word	0x393d4658
    3934:	30353531 	.word	0x30353531
    3938:	30303030 	.word	0x30303030
    393c:	00000a0d 	.word	0x00000a0d
    3940:	57265441 	.word	0x57265441
    3944:	00000a0d 	.word	0x00000a0d
    3948:	0d5a5441 	.word	0x0d5a5441
    394c:	0000000a 	.word	0x0000000a
    3950:	532b5441 	.word	0x532b5441
    3954:	000a0d44 	.word	0x000a0d44
    3958:	522b5441 	.word	0x522b5441
    395c:	0d495353 	.word	0x0d495353
    3960:	0000000a 	.word	0x0000000a
    3964:	532b5441 	.word	0x532b5441
    3968:	0d444e45 	.word	0x0d444e45
    396c:	0000000a 	.word	0x0000000a
    3970:	42000800 	.word	0x42000800
    3974:	42000c00 	.word	0x42000c00
    3978:	42001000 	.word	0x42001000
    397c:	42001400 	.word	0x42001400
    3980:	42001800 	.word	0x42001800
    3984:	42001c00 	.word	0x42001c00
    3988:	0c0b0a09 	.word	0x0c0b0a09
    398c:	00000e0d 	.word	0x00000e0d
    3990:	0000292e 	.word	0x0000292e
    3994:	000029a6 	.word	0x000029a6
    3998:	000029a6 	.word	0x000029a6
    399c:	0000294c 	.word	0x0000294c
    39a0:	00002946 	.word	0x00002946
    39a4:	00002952 	.word	0x00002952
    39a8:	00002934 	.word	0x00002934
    39ac:	00002958 	.word	0x00002958
    39b0:	0000298c 	.word	0x0000298c
    39b4:	00002a80 	.word	0x00002a80
    39b8:	00002ad0 	.word	0x00002ad0
    39bc:	00002ad0 	.word	0x00002ad0
    39c0:	00002acc 	.word	0x00002acc
    39c4:	00002a72 	.word	0x00002a72
    39c8:	00002a92 	.word	0x00002a92
    39cc:	00002a62 	.word	0x00002a62
    39d0:	00002aa4 	.word	0x00002aa4
    39d4:	00002ab6 	.word	0x00002ab6
    39d8:	532b5441 	.word	0x532b5441
    39dc:	3d444e45 	.word	0x3d444e45
    39e0:	74736574 	.word	0x74736574
    39e4:	00000a0d 	.word	0x00000a0d
    39e8:	aa083862 	.word	0xaa083862

000039ec <_init>:
    39ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    39f2:	bc08      	pop	{r3}
    39f4:	469e      	mov	lr, r3
    39f6:	4770      	bx	lr

000039f8 <__init_array_start>:
    39f8:	000000dd 	.word	0x000000dd

000039fc <_fini>:
    39fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a02:	bc08      	pop	{r3}
    3a04:	469e      	mov	lr, r3
    3a06:	4770      	bx	lr

00003a08 <__fini_array_start>:
    3a08:	000000b5 	.word	0x000000b5
