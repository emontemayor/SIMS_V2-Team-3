
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e64  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  2000001c  00002e80  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000148  00002fac  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021439  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ba6  00000000  00000000  000414d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001c39  00000000  00000000  0004407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b8  00000000  00000000  00045cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004b8  00000000  00000000  0004626d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000046c9  00000000  00000000  00046725  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005bd4  00000000  00000000  0004adee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000011f8  00000000  00000000  000509c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 21 00 20 15 27 00 00 0d 28 00 00 0d 28 00 00     H!. .'...(...(..
	...
      2c:	0d 28 00 00 00 00 00 00 00 00 00 00 0d 28 00 00     .(...........(..
      3c:	0d 28 00 00 0d 28 00 00 0d 28 00 00 0d 28 00 00     .(...(...(...(..
      4c:	0d 28 00 00 0d 28 00 00 0d 28 00 00 0d 28 00 00     .(...(...(...(..
      5c:	0d 28 00 00 0d 28 00 00 01 1b 00 00 19 1b 00 00     .(...(..........
      6c:	31 1b 00 00 49 1b 00 00 61 1b 00 00 79 1b 00 00     1...I...a...y...
      7c:	0d 28 00 00 0d 28 00 00 0d 28 00 00 0d 28 00 00     .(...(...(...(..
      8c:	0d 28 00 00 0d 28 00 00 0d 28 00 00 0d 28 00 00     .(...(...(...(..
      9c:	0d 28 00 00 0d 28 00 00 0d 28 00 00 0d 28 00 00     .(...(...(...(..
      ac:	0d 28 00 00 00 00 00 00                             .(......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00002e64 	.word	0x00002e64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00002e64 	.word	0x00002e64
     10c:	00002e64 	.word	0x00002e64
     110:	00000000 	.word	0x00000000

00000114 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <system_interrupt_enter_critical_section+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00001b9d 	.word	0x00001b9d

00000128 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     12c:	4b02      	ldr	r3, [pc, #8]	; (138 <system_interrupt_leave_critical_section+0x10>)
     12e:	4798      	blx	r3
}
     130:	46c0      	nop			; (mov r8, r8)
     132:	46bd      	mov	sp, r7
     134:	bd80      	pop	{r7, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00001bf1 	.word	0x00001bf1

0000013c <ringbuff_clear>:
 * Return Values(s) : int8_t
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
    uint8_t ret_val = -1;
     144:	230f      	movs	r3, #15
     146:	18fb      	adds	r3, r7, r3
     148:	22ff      	movs	r2, #255	; 0xff
     14a:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	2b00      	cmp	r3, #0
     150:	d009      	beq.n	166 <ringbuff_clear+0x2a>
    {
        // clear the read/write values
        pringbuff->write = 0;
     152:	687b      	ldr	r3, [r7, #4]
     154:	2200      	movs	r2, #0
     156:	605a      	str	r2, [r3, #4]
        pringbuff->read = 0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	609a      	str	r2, [r3, #8]
        ret_val = 0;
     15e:	230f      	movs	r3, #15
     160:	18fb      	adds	r3, r7, r3
     162:	2200      	movs	r2, #0
     164:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     166:	230f      	movs	r3, #15
     168:	18fb      	adds	r3, r7, r3
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	b25b      	sxtb	r3, r3
}
     16e:	0018      	movs	r0, r3
     170:	46bd      	mov	sp, r7
     172:	b004      	add	sp, #16
     174:	bd80      	pop	{r7, pc}
	...

00000178 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     178:	b580      	push	{r7, lr}
     17a:	b084      	sub	sp, #16
     17c:	af00      	add	r7, sp, #0
     17e:	6078      	str	r0, [r7, #4]
     180:	000a      	movs	r2, r1
     182:	1cfb      	adds	r3, r7, #3
     184:	701a      	strb	r2, [r3, #0]
    uint8_t ret_val = -1;
     186:	230f      	movs	r3, #15
     188:	18fb      	adds	r3, r7, r3
     18a:	22ff      	movs	r2, #255	; 0xff
     18c:	701a      	strb	r2, [r3, #0]
    
    // NULL pointer check
    if(pringbuff)
     18e:	687b      	ldr	r3, [r7, #4]
     190:	2b00      	cmp	r3, #0
     192:	d01b      	beq.n	1cc <ringbuff_put+0x54>
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
     194:	4b11      	ldr	r3, [pc, #68]	; (1dc <ringbuff_put+0x64>)
     196:	4798      	blx	r3
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     198:	687b      	ldr	r3, [r7, #4]
     19a:	681a      	ldr	r2, [r3, #0]
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	685b      	ldr	r3, [r3, #4]
     1a0:	18d3      	adds	r3, r2, r3
     1a2:	1cfa      	adds	r2, r7, #3
     1a4:	7812      	ldrb	r2, [r2, #0]
     1a6:	701a      	strb	r2, [r3, #0]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	685b      	ldr	r3, [r3, #4]
     1ac:	1c5a      	adds	r2, r3, #1
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	68d9      	ldr	r1, [r3, #12]
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <ringbuff_put+0x68>)
     1b4:	0010      	movs	r0, r2
     1b6:	4798      	blx	r3
     1b8:	000b      	movs	r3, r1
     1ba:	001a      	movs	r2, r3
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	605a      	str	r2, [r3, #4]
        
        system_interrupt_leave_critical_section();
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <ringbuff_put+0x6c>)
     1c2:	4798      	blx	r3

        ret_val = 0;
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	2200      	movs	r2, #0
     1ca:	701a      	strb	r2, [r3, #0]
    }
    
    return ret_val;
     1cc:	230f      	movs	r3, #15
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	b25b      	sxtb	r3, r3
}
     1d4:	0018      	movs	r0, r3
     1d6:	46bd      	mov	sp, r7
     1d8:	b004      	add	sp, #16
     1da:	bd80      	pop	{r7, pc}
     1dc:	00000115 	.word	0x00000115
     1e0:	00002c49 	.word	0x00002c49
     1e4:	00000129 	.word	0x00000129

000001e8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b082      	sub	sp, #8
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	1dfb      	adds	r3, r7, #7
     1f2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1f4:	4b06      	ldr	r3, [pc, #24]	; (210 <system_interrupt_enable+0x28>)
     1f6:	1dfa      	adds	r2, r7, #7
     1f8:	7812      	ldrb	r2, [r2, #0]
     1fa:	0011      	movs	r1, r2
     1fc:	221f      	movs	r2, #31
     1fe:	400a      	ands	r2, r1
     200:	2101      	movs	r1, #1
     202:	4091      	lsls	r1, r2
     204:	000a      	movs	r2, r1
     206:	601a      	str	r2, [r3, #0]
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}
     210:	e000e100 	.word	0xe000e100

00000214 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	681b      	ldr	r3, [r3, #0]
     220:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     222:	68fb      	ldr	r3, [r7, #12]
     224:	69db      	ldr	r3, [r3, #28]
     226:	1e5a      	subs	r2, r3, #1
     228:	4193      	sbcs	r3, r2
     22a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b004      	add	sp, #16
     232:	bd80      	pop	{r7, pc}

00000234 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     234:	b580      	push	{r7, lr}
     236:	b082      	sub	sp, #8
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	687b      	ldr	r3, [r7, #4]
     240:	0018      	movs	r0, r3
     242:	4b04      	ldr	r3, [pc, #16]	; (254 <_usart_wait_for_sync+0x20>)
     244:	4798      	blx	r3
     246:	1e03      	subs	r3, r0, #0
     248:	d1f9      	bne.n	23e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46bd      	mov	sp, r7
     24e:	b002      	add	sp, #8
     250:	bd80      	pop	{r7, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	00000215 	.word	0x00000215

00000258 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     258:	b580      	push	{r7, lr}
     25a:	b082      	sub	sp, #8
     25c:	af00      	add	r7, sp, #0
     25e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     260:	687b      	ldr	r3, [r7, #4]
     262:	2280      	movs	r2, #128	; 0x80
     264:	05d2      	lsls	r2, r2, #23
     266:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2200      	movs	r2, #0
     26c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     26e:	687b      	ldr	r3, [r7, #4]
     270:	22ff      	movs	r2, #255	; 0xff
     272:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     274:	687b      	ldr	r3, [r7, #4]
     276:	2200      	movs	r2, #0
     278:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	2200      	movs	r2, #0
     27e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     280:	687b      	ldr	r3, [r7, #4]
     282:	2296      	movs	r2, #150	; 0x96
     284:	0192      	lsls	r2, r2, #6
     286:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2224      	movs	r2, #36	; 0x24
     28c:	2101      	movs	r1, #1
     28e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2225      	movs	r2, #37	; 0x25
     294:	2101      	movs	r1, #1
     296:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2226      	movs	r2, #38	; 0x26
     29c:	2100      	movs	r1, #0
     29e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	2227      	movs	r2, #39	; 0x27
     2a4:	2100      	movs	r1, #0
     2a6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	2200      	movs	r2, #0
     2ac:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	2288      	movs	r2, #136	; 0x88
     2b2:	0352      	lsls	r2, r2, #13
     2b4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     2b6:	687b      	ldr	r3, [r7, #4]
     2b8:	222c      	movs	r2, #44	; 0x2c
     2ba:	2100      	movs	r1, #0
     2bc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     2be:	687b      	ldr	r3, [r7, #4]
     2c0:	222d      	movs	r2, #45	; 0x2d
     2c2:	2100      	movs	r1, #0
     2c4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     2c6:	687b      	ldr	r3, [r7, #4]
     2c8:	2200      	movs	r2, #0
     2ca:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	2200      	movs	r2, #0
     2d0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	2200      	movs	r2, #0
     2d6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	2200      	movs	r2, #0
     2dc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	2200      	movs	r2, #0
     2e2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2200      	movs	r2, #0
     2e8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     2ea:	687b      	ldr	r3, [r7, #4]
     2ec:	2200      	movs	r2, #0
     2ee:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	2200      	movs	r2, #0
     2f4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	2200      	movs	r2, #0
     2fa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2213      	movs	r2, #19
     306:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     308:	687b      	ldr	r3, [r7, #4]
     30a:	2200      	movs	r2, #0
     30c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	46bd      	mov	sp, r7
     312:	b002      	add	sp, #8
     314:	bd80      	pop	{r7, pc}
	...

00000318 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     318:	b580      	push	{r7, lr}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     320:	687b      	ldr	r3, [r7, #4]
     322:	681b      	ldr	r3, [r3, #0]
     324:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     326:	687b      	ldr	r3, [r7, #4]
     328:	681b      	ldr	r3, [r3, #0]
     32a:	0018      	movs	r0, r3
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <usart_enable+0x3c>)
     32e:	4798      	blx	r3
     330:	0003      	movs	r3, r0
     332:	0018      	movs	r0, r3
     334:	4b08      	ldr	r3, [pc, #32]	; (358 <usart_enable+0x40>)
     336:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     338:	687b      	ldr	r3, [r7, #4]
     33a:	0018      	movs	r0, r3
     33c:	4b07      	ldr	r3, [pc, #28]	; (35c <usart_enable+0x44>)
     33e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     340:	68fb      	ldr	r3, [r7, #12]
     342:	681b      	ldr	r3, [r3, #0]
     344:	2202      	movs	r2, #2
     346:	431a      	orrs	r2, r3
     348:	68fb      	ldr	r3, [r7, #12]
     34a:	601a      	str	r2, [r3, #0]
}
     34c:	46c0      	nop			; (mov r8, r8)
     34e:	46bd      	mov	sp, r7
     350:	b004      	add	sp, #16
     352:	bd80      	pop	{r7, pc}
     354:	00001abd 	.word	0x00001abd
     358:	000001e9 	.word	0x000001e9
     35c:	00000235 	.word	0x00000235

00000360 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     360:	b580      	push	{r7, lr}
     362:	b082      	sub	sp, #8
     364:	af00      	add	r7, sp, #0
     366:	6078      	str	r0, [r7, #4]
     368:	000a      	movs	r2, r1
     36a:	1cfb      	adds	r3, r7, #3
     36c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     36e:	687b      	ldr	r3, [r7, #4]
     370:	2231      	movs	r2, #49	; 0x31
     372:	5c9b      	ldrb	r3, [r3, r2]
     374:	b25a      	sxtb	r2, r3
     376:	1cfb      	adds	r3, r7, #3
     378:	781b      	ldrb	r3, [r3, #0]
     37a:	2101      	movs	r1, #1
     37c:	4099      	lsls	r1, r3
     37e:	000b      	movs	r3, r1
     380:	b25b      	sxtb	r3, r3
     382:	4313      	orrs	r3, r2
     384:	b25b      	sxtb	r3, r3
     386:	b2d9      	uxtb	r1, r3
     388:	687b      	ldr	r3, [r7, #4]
     38a:	2231      	movs	r2, #49	; 0x31
     38c:	5499      	strb	r1, [r3, r2]

}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	46bd      	mov	sp, r7
     392:	b002      	add	sp, #8
     394:	bd80      	pop	{r7, pc}
	...

00000398 <uart915_init>:
 * Return Values(s) : void
 * Description      : Initializes the SERCOM UART for communication with the
 *  MTXDOT module.
 */
void uart915_init(void)
{
     398:	b580      	push	{r7, lr}
     39a:	b090      	sub	sp, #64	; 0x40
     39c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
     39e:	003b      	movs	r3, r7
     3a0:	0018      	movs	r0, r3
     3a2:	4b1a      	ldr	r3, [pc, #104]	; (40c <uart915_init+0x74>)
     3a4:	4798      	blx	r3
    
    // configure the UART
    config_usart.baudrate    = UART915_BAUD;
     3a6:	003b      	movs	r3, r7
     3a8:	22e1      	movs	r2, #225	; 0xe1
     3aa:	0252      	lsls	r2, r2, #9
     3ac:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = UART915_PINMUX;
     3ae:	003b      	movs	r3, r7
     3b0:	2290      	movs	r2, #144	; 0x90
     3b2:	0352      	lsls	r2, r2, #13
     3b4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = UTX915;
     3b6:	003b      	movs	r3, r7
     3b8:	4a15      	ldr	r2, [pc, #84]	; (410 <uart915_init+0x78>)
     3ba:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     3bc:	003b      	movs	r3, r7
     3be:	4a15      	ldr	r2, [pc, #84]	; (414 <uart915_init+0x7c>)
     3c0:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3c2:	003b      	movs	r3, r7
     3c4:	2201      	movs	r2, #1
     3c6:	4252      	negs	r2, r2
     3c8:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3ca:	003b      	movs	r3, r7
     3cc:	2201      	movs	r2, #1
     3ce:	4252      	negs	r2, r2
     3d0:	63da      	str	r2, [r3, #60]	; 0x3c
    config_usart.generator_source = UART245_CLK;
     3d2:	003b      	movs	r3, r7
     3d4:	222d      	movs	r2, #45	; 0x2d
     3d6:	2100      	movs	r1, #0
     3d8:	5499      	strb	r1, [r3, r2]
    config_usart.transfer_mode = USART_TRANSFER_ASYNCHRONOUSLY;
     3da:	003b      	movs	r3, r7
     3dc:	2200      	movs	r2, #0
     3de:	605a      	str	r2, [r3, #4]
    
    // initialize the uart module until an STATUS_OK is returned
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     3e0:	46c0      	nop			; (mov r8, r8)
     3e2:	003a      	movs	r2, r7
     3e4:	490c      	ldr	r1, [pc, #48]	; (418 <uart915_init+0x80>)
     3e6:	4b0d      	ldr	r3, [pc, #52]	; (41c <uart915_init+0x84>)
     3e8:	0018      	movs	r0, r3
     3ea:	4b0d      	ldr	r3, [pc, #52]	; (420 <uart915_init+0x88>)
     3ec:	4798      	blx	r3
     3ee:	1e03      	subs	r3, r0, #0
     3f0:	d1f7      	bne.n	3e2 <uart915_init+0x4a>
    
    // enable the uart
    usart_enable(&uart915_inst);
     3f2:	4b0a      	ldr	r3, [pc, #40]	; (41c <uart915_init+0x84>)
     3f4:	0018      	movs	r0, r3
     3f6:	4b0b      	ldr	r3, [pc, #44]	; (424 <uart915_init+0x8c>)
     3f8:	4798      	blx	r3
    
    // configure the callback(s) for this module
    configure_uart915_callbacks();
     3fa:	4b0b      	ldr	r3, [pc, #44]	; (428 <uart915_init+0x90>)
     3fc:	4798      	blx	r3
	
	 uart915_network_config();
     3fe:	4b0b      	ldr	r3, [pc, #44]	; (42c <uart915_init+0x94>)
     400:	4798      	blx	r3
	
}
     402:	46c0      	nop			; (mov r8, r8)
     404:	46bd      	mov	sp, r7
     406:	b010      	add	sp, #64	; 0x40
     408:	bd80      	pop	{r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	00000259 	.word	0x00000259
     410:	000c0002 	.word	0x000c0002
     414:	000d0002 	.word	0x000d0002
     418:	42001000 	.word	0x42001000
     41c:	20000038 	.word	0x20000038
     420:	00001185 	.word	0x00001185
     424:	00000319 	.word	0x00000319
     428:	00000431 	.word	0x00000431
     42c:	00000609 	.word	0x00000609

00000430 <configure_uart915_callbacks>:
 *  (depending on which callback is registered) receives/transmits a character.
 *  Kind of like an ISR, but executed in the actual ISR for the UART (handled
 *  by the ASF library).
 */
void configure_uart915_callbacks(void)
{
     430:	b580      	push	{r7, lr}
     432:	af00      	add	r7, sp, #0
    // register the callback function
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     434:	4909      	ldr	r1, [pc, #36]	; (45c <configure_uart915_callbacks+0x2c>)
     436:	4b0a      	ldr	r3, [pc, #40]	; (460 <configure_uart915_callbacks+0x30>)
     438:	2201      	movs	r2, #1
     43a:	0018      	movs	r0, r3
     43c:	4b09      	ldr	r3, [pc, #36]	; (464 <configure_uart915_callbacks+0x34>)
     43e:	4798      	blx	r3
    
    // enable callback for the receiver
    usart_enable_callback(&uart915_inst, USART_CALLBACK_BUFFER_RECEIVED);
     440:	4b07      	ldr	r3, [pc, #28]	; (460 <configure_uart915_callbacks+0x30>)
     442:	2101      	movs	r1, #1
     444:	0018      	movs	r0, r3
     446:	4b08      	ldr	r3, [pc, #32]	; (468 <configure_uart915_callbacks+0x38>)
     448:	4798      	blx	r3
    
    // start a read buffer job so the receiver is ready
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     44a:	4908      	ldr	r1, [pc, #32]	; (46c <configure_uart915_callbacks+0x3c>)
     44c:	4b04      	ldr	r3, [pc, #16]	; (460 <configure_uart915_callbacks+0x30>)
     44e:	2201      	movs	r2, #1
     450:	0018      	movs	r0, r3
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <configure_uart915_callbacks+0x40>)
     454:	4798      	blx	r3
}
     456:	46c0      	nop			; (mov r8, r8)
     458:	46bd      	mov	sp, r7
     45a:	bd80      	pop	{r7, pc}
     45c:	00000475 	.word	0x00000475
     460:	20000038 	.word	0x20000038
     464:	0000166d 	.word	0x0000166d
     468:	00000361 	.word	0x00000361
     46c:	2000006c 	.word	0x2000006c
     470:	000016b5 	.word	0x000016b5

00000474 <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     474:	b580      	push	{r7, lr}
     476:	b082      	sub	sp, #8
     478:	af00      	add	r7, sp, #0
     47a:	6078      	str	r0, [r7, #4]
	 usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     47c:	490f      	ldr	r1, [pc, #60]	; (4bc <uart915_read_callback+0x48>)
     47e:	687b      	ldr	r3, [r7, #4]
     480:	2201      	movs	r2, #1
     482:	0018      	movs	r0, r3
     484:	4b0e      	ldr	r3, [pc, #56]	; (4c0 <uart915_read_callback+0x4c>)
     486:	4798      	blx	r3
	 
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     488:	4b0c      	ldr	r3, [pc, #48]	; (4bc <uart915_read_callback+0x48>)
     48a:	781a      	ldrb	r2, [r3, #0]
     48c:	4b0d      	ldr	r3, [pc, #52]	; (4c4 <uart915_read_callback+0x50>)
     48e:	0011      	movs	r1, r2
     490:	0018      	movs	r0, r3
     492:	4b0d      	ldr	r3, [pc, #52]	; (4c8 <uart915_read_callback+0x54>)
     494:	4798      	blx	r3
    
    /* parse the character to see if it is an "OK\r\n". Set the flag equal to
     * the response parsing function's return value */
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     496:	4b09      	ldr	r3, [pc, #36]	; (4bc <uart915_read_callback+0x48>)
     498:	781b      	ldrb	r3, [r3, #0]
     49a:	0018      	movs	r0, r3
     49c:	4b0b      	ldr	r3, [pc, #44]	; (4cc <uart915_read_callback+0x58>)
     49e:	4798      	blx	r3
     4a0:	0003      	movs	r3, r0
     4a2:	001a      	movs	r2, r3
     4a4:	4b0a      	ldr	r3, [pc, #40]	; (4d0 <uart915_read_callback+0x5c>)
     4a6:	701a      	strb	r2, [r3, #0]
    
    // start another read buffer job
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     4a8:	4904      	ldr	r1, [pc, #16]	; (4bc <uart915_read_callback+0x48>)
     4aa:	687b      	ldr	r3, [r7, #4]
     4ac:	2201      	movs	r2, #1
     4ae:	0018      	movs	r0, r3
     4b0:	4b03      	ldr	r3, [pc, #12]	; (4c0 <uart915_read_callback+0x4c>)
     4b2:	4798      	blx	r3
}
     4b4:	46c0      	nop			; (mov r8, r8)
     4b6:	46bd      	mov	sp, r7
     4b8:	b002      	add	sp, #8
     4ba:	bd80      	pop	{r7, pc}
     4bc:	2000006c 	.word	0x2000006c
     4c0:	000016b5 	.word	0x000016b5
     4c4:	20000000 	.word	0x20000000
     4c8:	00000179 	.word	0x00000179
     4cc:	000004d5 	.word	0x000004d5
     4d0:	200000f1 	.word	0x200000f1

000004d4 <uart915_parse_response>:
 *  MTXDOT received and responded to a command sent by uart915_write_cmd().
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
     4d4:	b580      	push	{r7, lr}
     4d6:	b082      	sub	sp, #8
     4d8:	af00      	add	r7, sp, #0
     4da:	0002      	movs	r2, r0
     4dc:	1dfb      	adds	r3, r7, #7
     4de:	701a      	strb	r2, [r3, #0]
    switch(rx_state)
     4e0:	4b25      	ldr	r3, [pc, #148]	; (578 <uart915_parse_response+0xa4>)
     4e2:	781b      	ldrb	r3, [r3, #0]
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b01      	cmp	r3, #1
     4e8:	d015      	beq.n	516 <uart915_parse_response+0x42>
     4ea:	dc02      	bgt.n	4f2 <uart915_parse_response+0x1e>
     4ec:	2b00      	cmp	r3, #0
     4ee:	d005      	beq.n	4fc <uart915_parse_response+0x28>
     4f0:	e039      	b.n	566 <uart915_parse_response+0x92>
     4f2:	2b02      	cmp	r3, #2
     4f4:	d01c      	beq.n	530 <uart915_parse_response+0x5c>
     4f6:	2b03      	cmp	r3, #3
     4f8:	d027      	beq.n	54a <uart915_parse_response+0x76>
     4fa:	e034      	b.n	566 <uart915_parse_response+0x92>
    {
        case START:
            switch(next_char)
     4fc:	1dfb      	adds	r3, r7, #7
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	2b4f      	cmp	r3, #79	; 0x4f
     502:	d103      	bne.n	50c <uart915_parse_response+0x38>
            {
                case 'O':
                   rx_state = O_RX;
     504:	4b1c      	ldr	r3, [pc, #112]	; (578 <uart915_parse_response+0xa4>)
     506:	2201      	movs	r2, #1
     508:	701a      	strb	r2, [r3, #0]
                   break; //end of 'O' case
     50a:	e003      	b.n	514 <uart915_parse_response+0x40>
            
                default:
                    rx_state = START;
     50c:	4b1a      	ldr	r3, [pc, #104]	; (578 <uart915_parse_response+0xa4>)
     50e:	2200      	movs	r2, #0
     510:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     512:	46c0      	nop			; (mov r8, r8)
            }
            break; //end of START case
     514:	e02b      	b.n	56e <uart915_parse_response+0x9a>
        
        case O_RX:
            switch(next_char)
     516:	1dfb      	adds	r3, r7, #7
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	2b4b      	cmp	r3, #75	; 0x4b
     51c:	d103      	bne.n	526 <uart915_parse_response+0x52>
            {
                case 'K':
                    rx_state = K_RX;
     51e:	4b16      	ldr	r3, [pc, #88]	; (578 <uart915_parse_response+0xa4>)
     520:	2202      	movs	r2, #2
     522:	701a      	strb	r2, [r3, #0]
                    break; //end of 'K' case
     524:	e003      	b.n	52e <uart915_parse_response+0x5a>
            
                default:
                    rx_state = START;
     526:	4b14      	ldr	r3, [pc, #80]	; (578 <uart915_parse_response+0xa4>)
     528:	2200      	movs	r2, #0
     52a:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     52c:	46c0      	nop			; (mov r8, r8)
            }
            
            break; //end of O_RX case
     52e:	e01e      	b.n	56e <uart915_parse_response+0x9a>
        
        case K_RX:
            switch(next_char)
     530:	1dfb      	adds	r3, r7, #7
     532:	781b      	ldrb	r3, [r3, #0]
     534:	2b0d      	cmp	r3, #13
     536:	d103      	bne.n	540 <uart915_parse_response+0x6c>
            {
                case '\r':
                    rx_state = CR_RX;
     538:	4b0f      	ldr	r3, [pc, #60]	; (578 <uart915_parse_response+0xa4>)
     53a:	2203      	movs	r2, #3
     53c:	701a      	strb	r2, [r3, #0]
                    break; //end of '\r' case
     53e:	e003      	b.n	548 <uart915_parse_response+0x74>
            
                default:
                    rx_state = START;
     540:	4b0d      	ldr	r3, [pc, #52]	; (578 <uart915_parse_response+0xa4>)
     542:	2200      	movs	r2, #0
     544:	701a      	strb	r2, [r3, #0]
                    break; //end of default case
     546:	46c0      	nop			; (mov r8, r8)
            }
            
        break; //end of K_RX case
     548:	e011      	b.n	56e <uart915_parse_response+0x9a>
        
        case CR_RX:
        switch(next_char)
     54a:	1dfb      	adds	r3, r7, #7
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2b0a      	cmp	r3, #10
     550:	d104      	bne.n	55c <uart915_parse_response+0x88>
        {
            case '\n':
                //reset state
                rx_state = START;
     552:	4b09      	ldr	r3, [pc, #36]	; (578 <uart915_parse_response+0xa4>)
     554:	2200      	movs	r2, #0
     556:	701a      	strb	r2, [r3, #0]
                //return true, because response is OK
                return true;
     558:	2301      	movs	r3, #1
     55a:	e009      	b.n	570 <uart915_parse_response+0x9c>
                break; //end of '\n' case
            
            default:
                rx_state = START;
     55c:	4b06      	ldr	r3, [pc, #24]	; (578 <uart915_parse_response+0xa4>)
     55e:	2200      	movs	r2, #0
     560:	701a      	strb	r2, [r3, #0]
                break; //end of default case
     562:	46c0      	nop			; (mov r8, r8)
        }
        break; //end of CR_RX case
     564:	e003      	b.n	56e <uart915_parse_response+0x9a>
        
        default:
            rx_state = START;
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <uart915_parse_response+0xa4>)
     568:	2200      	movs	r2, #0
     56a:	701a      	strb	r2, [r3, #0]
            break;
     56c:	46c0      	nop			; (mov r8, r8)
    }
    
    return false;
     56e:	2300      	movs	r3, #0
}
     570:	0018      	movs	r0, r3
     572:	46bd      	mov	sp, r7
     574:	b002      	add	sp, #8
     576:	bd80      	pop	{r7, pc}
     578:	200000f0 	.word	0x200000f0

0000057c <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     57c:	b580      	push	{r7, lr}
     57e:	b082      	sub	sp, #8
     580:	af00      	add	r7, sp, #0
     582:	6078      	str	r0, [r7, #4]
    // clear the flag
    flag_ok_received = false;
     584:	4b18      	ldr	r3, [pc, #96]	; (5e8 <uart915_write_cmd+0x6c>)
     586:	2200      	movs	r2, #0
     588:	701a      	strb	r2, [r3, #0]
    
    // reset state machine for determining okay_received
    rx_state = START;
     58a:	4b18      	ldr	r3, [pc, #96]	; (5ec <uart915_write_cmd+0x70>)
     58c:	2200      	movs	r2, #0
     58e:	701a      	strb	r2, [r3, #0]
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     590:	4b17      	ldr	r3, [pc, #92]	; (5f0 <uart915_write_cmd+0x74>)
     592:	0018      	movs	r0, r3
     594:	4b17      	ldr	r3, [pc, #92]	; (5f4 <uart915_write_cmd+0x78>)
     596:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     598:	687b      	ldr	r3, [r7, #4]
     59a:	0018      	movs	r0, r3
     59c:	4b16      	ldr	r3, [pc, #88]	; (5f8 <uart915_write_cmd+0x7c>)
     59e:	4798      	blx	r3
     5a0:	0003      	movs	r3, r0
     5a2:	b29a      	uxth	r2, r3
     5a4:	6879      	ldr	r1, [r7, #4]
     5a6:	4b15      	ldr	r3, [pc, #84]	; (5fc <uart915_write_cmd+0x80>)
     5a8:	0018      	movs	r0, r3
     5aa:	4b15      	ldr	r3, [pc, #84]	; (600 <uart915_write_cmd+0x84>)
     5ac:	4798      	blx	r3
    
	//continue writing commands until a response is received. Configured this way
	//because single commands were not providing a response. 
	while(!flag_ok_received){ 
     5ae:	e00f      	b.n	5d0 <uart915_write_cmd+0x54>
			delay_cycles_us(2000);
     5b0:	23fa      	movs	r3, #250	; 0xfa
     5b2:	00db      	lsls	r3, r3, #3
     5b4:	0018      	movs	r0, r3
     5b6:	4b13      	ldr	r3, [pc, #76]	; (604 <uart915_write_cmd+0x88>)
     5b8:	4798      	blx	r3
		   usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	0018      	movs	r0, r3
     5be:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <uart915_write_cmd+0x7c>)
     5c0:	4798      	blx	r3
     5c2:	0003      	movs	r3, r0
     5c4:	b29a      	uxth	r2, r3
     5c6:	6879      	ldr	r1, [r7, #4]
     5c8:	4b0c      	ldr	r3, [pc, #48]	; (5fc <uart915_write_cmd+0x80>)
     5ca:	0018      	movs	r0, r3
     5cc:	4b0c      	ldr	r3, [pc, #48]	; (600 <uart915_write_cmd+0x84>)
     5ce:	4798      	blx	r3
	while(!flag_ok_received){ 
     5d0:	4b05      	ldr	r3, [pc, #20]	; (5e8 <uart915_write_cmd+0x6c>)
     5d2:	781b      	ldrb	r3, [r3, #0]
     5d4:	b2db      	uxtb	r3, r3
     5d6:	2201      	movs	r2, #1
     5d8:	4053      	eors	r3, r2
     5da:	b2db      	uxtb	r3, r3
     5dc:	2b00      	cmp	r3, #0
     5de:	d1e7      	bne.n	5b0 <uart915_write_cmd+0x34>
	};
}
     5e0:	46c0      	nop			; (mov r8, r8)
     5e2:	46bd      	mov	sp, r7
     5e4:	b002      	add	sp, #8
     5e6:	bd80      	pop	{r7, pc}
     5e8:	200000f1 	.word	0x200000f1
     5ec:	200000f0 	.word	0x200000f0
     5f0:	20000000 	.word	0x20000000
     5f4:	0000013d 	.word	0x0000013d
     5f8:	00002cf1 	.word	0x00002cf1
     5fc:	20000038 	.word	0x20000038
     600:	0000145d 	.word	0x0000145d
     604:	00000725 	.word	0x00000725

00000608 <uart915_network_config>:
 * Description      : Configuration for network between Tx and Rx MTXDOTs
 *  AT command sequence obtained from MTXDOT Developer Guide pg. 121 
 */

void uart915_network_config()
{
     608:	b580      	push	{r7, lr}
     60a:	af00      	add	r7, sp, #0
	uart915_write_cmd("AT\r\n");
     60c:	4b17      	ldr	r3, [pc, #92]	; (66c <uart915_network_config+0x64>)
     60e:	0018      	movs	r0, r3
     610:	4b17      	ldr	r3, [pc, #92]	; (670 <uart915_network_config+0x68>)
     612:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     614:	4b17      	ldr	r3, [pc, #92]	; (674 <uart915_network_config+0x6c>)
     616:	0018      	movs	r0, r3
     618:	4b15      	ldr	r3, [pc, #84]	; (670 <uart915_network_config+0x68>)
     61a:	4798      	blx	r3
	uart915_write_cmd("AT+NA=00112233\r\n");
     61c:	4b16      	ldr	r3, [pc, #88]	; (678 <uart915_network_config+0x70>)
     61e:	0018      	movs	r0, r3
     620:	4b13      	ldr	r3, [pc, #76]	; (670 <uart915_network_config+0x68>)
     622:	4798      	blx	r3
	uart915_write_cmd("AT+NSK=00112233001122330011223300112233\r\n");
     624:	4b15      	ldr	r3, [pc, #84]	; (67c <uart915_network_config+0x74>)
     626:	0018      	movs	r0, r3
     628:	4b11      	ldr	r3, [pc, #68]	; (670 <uart915_network_config+0x68>)
     62a:	4798      	blx	r3
	uart915_write_cmd("AT+DSK=33221100332211003322110033221100\r\n");
     62c:	4b14      	ldr	r3, [pc, #80]	; (680 <uart915_network_config+0x78>)
     62e:	0018      	movs	r0, r3
     630:	4b0f      	ldr	r3, [pc, #60]	; (670 <uart915_network_config+0x68>)
     632:	4798      	blx	r3
	uart915_write_cmd("AT+TXDR=DR8\r\n");
     634:	4b13      	ldr	r3, [pc, #76]	; (684 <uart915_network_config+0x7c>)
     636:	0018      	movs	r0, r3
     638:	4b0d      	ldr	r3, [pc, #52]	; (670 <uart915_network_config+0x68>)
     63a:	4798      	blx	r3
	uart915_write_cmd("AT+TXF=915500000\r\n");
     63c:	4b12      	ldr	r3, [pc, #72]	; (688 <uart915_network_config+0x80>)
     63e:	0018      	movs	r0, r3
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <uart915_network_config+0x68>)
     642:	4798      	blx	r3
	uart915_write_cmd("AT&W\r\n");
     644:	4b11      	ldr	r3, [pc, #68]	; (68c <uart915_network_config+0x84>)
     646:	0018      	movs	r0, r3
     648:	4b09      	ldr	r3, [pc, #36]	; (670 <uart915_network_config+0x68>)
     64a:	4798      	blx	r3
	uart915_write_cmd("ATZ\r\n");
     64c:	4b10      	ldr	r3, [pc, #64]	; (690 <uart915_network_config+0x88>)
     64e:	0018      	movs	r0, r3
     650:	4b07      	ldr	r3, [pc, #28]	; (670 <uart915_network_config+0x68>)
     652:	4798      	blx	r3
	uart915_write_cmd("AT+NJM=3\r\n");
     654:	4b07      	ldr	r3, [pc, #28]	; (674 <uart915_network_config+0x6c>)
     656:	0018      	movs	r0, r3
     658:	4b05      	ldr	r3, [pc, #20]	; (670 <uart915_network_config+0x68>)
     65a:	4798      	blx	r3
	uart915_write_cmd("AT+SD\r\n");
     65c:	4b0d      	ldr	r3, [pc, #52]	; (694 <uart915_network_config+0x8c>)
     65e:	0018      	movs	r0, r3
     660:	4b03      	ldr	r3, [pc, #12]	; (670 <uart915_network_config+0x68>)
     662:	4798      	blx	r3
	
}
     664:	46c0      	nop			; (mov r8, r8)
     666:	46bd      	mov	sp, r7
     668:	bd80      	pop	{r7, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00002d00 	.word	0x00002d00
     670:	0000057d 	.word	0x0000057d
     674:	00002d08 	.word	0x00002d08
     678:	00002d14 	.word	0x00002d14
     67c:	00002d28 	.word	0x00002d28
     680:	00002d54 	.word	0x00002d54
     684:	00002d80 	.word	0x00002d80
     688:	00002d90 	.word	0x00002d90
     68c:	00002da4 	.word	0x00002da4
     690:	00002dac 	.word	0x00002dac
     694:	00002db4 	.word	0x00002db4

00000698 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     698:	b580      	push	{r7, lr}
     69a:	b082      	sub	sp, #8
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	2b00      	cmp	r3, #0
     6a4:	d00c      	beq.n	6c0 <delay_cycles+0x28>
		SysTick->LOAD = n;
     6a6:	4b08      	ldr	r3, [pc, #32]	; (6c8 <delay_cycles+0x30>)
     6a8:	687a      	ldr	r2, [r7, #4]
     6aa:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     6ac:	4b06      	ldr	r3, [pc, #24]	; (6c8 <delay_cycles+0x30>)
     6ae:	2200      	movs	r2, #0
     6b0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	4b04      	ldr	r3, [pc, #16]	; (6c8 <delay_cycles+0x30>)
     6b6:	681a      	ldr	r2, [r3, #0]
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	025b      	lsls	r3, r3, #9
     6bc:	4013      	ands	r3, r2
     6be:	d0f9      	beq.n	6b4 <delay_cycles+0x1c>
		};
	}
}
     6c0:	46c0      	nop			; (mov r8, r8)
     6c2:	46bd      	mov	sp, r7
     6c4:	b002      	add	sp, #8
     6c6:	bd80      	pop	{r7, pc}
     6c8:	e000e010 	.word	0xe000e010

000006cc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     6cc:	b580      	push	{r7, lr}
     6ce:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     6d0:	2000      	movs	r0, #0
     6d2:	4b0f      	ldr	r3, [pc, #60]	; (710 <delay_init+0x44>)
     6d4:	4798      	blx	r3
     6d6:	0002      	movs	r2, r0
     6d8:	4b0e      	ldr	r3, [pc, #56]	; (714 <delay_init+0x48>)
     6da:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     6dc:	4b0d      	ldr	r3, [pc, #52]	; (714 <delay_init+0x48>)
     6de:	6818      	ldr	r0, [r3, #0]
     6e0:	4b0d      	ldr	r3, [pc, #52]	; (718 <delay_init+0x4c>)
     6e2:	22fa      	movs	r2, #250	; 0xfa
     6e4:	0091      	lsls	r1, r2, #2
     6e6:	4798      	blx	r3
     6e8:	0003      	movs	r3, r0
     6ea:	001a      	movs	r2, r3
     6ec:	4b09      	ldr	r3, [pc, #36]	; (714 <delay_init+0x48>)
     6ee:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     6f0:	4b08      	ldr	r3, [pc, #32]	; (714 <delay_init+0x48>)
     6f2:	6818      	ldr	r0, [r3, #0]
     6f4:	4b08      	ldr	r3, [pc, #32]	; (718 <delay_init+0x4c>)
     6f6:	22fa      	movs	r2, #250	; 0xfa
     6f8:	0091      	lsls	r1, r2, #2
     6fa:	4798      	blx	r3
     6fc:	0003      	movs	r3, r0
     6fe:	001a      	movs	r2, r3
     700:	4b06      	ldr	r3, [pc, #24]	; (71c <delay_init+0x50>)
     702:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     704:	4b06      	ldr	r3, [pc, #24]	; (720 <delay_init+0x54>)
     706:	2205      	movs	r2, #5
     708:	601a      	str	r2, [r3, #0]
}
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	46bd      	mov	sp, r7
     70e:	bd80      	pop	{r7, pc}
     710:	000022c9 	.word	0x000022c9
     714:	20000010 	.word	0x20000010
     718:	00002b3d 	.word	0x00002b3d
     71c:	20000014 	.word	0x20000014
     720:	e000e010 	.word	0xe000e010

00000724 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     724:	b580      	push	{r7, lr}
     726:	b082      	sub	sp, #8
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
	while (n--) {
     72c:	e004      	b.n	738 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     72e:	4b07      	ldr	r3, [pc, #28]	; (74c <delay_cycles_us+0x28>)
     730:	681b      	ldr	r3, [r3, #0]
     732:	0018      	movs	r0, r3
     734:	4b06      	ldr	r3, [pc, #24]	; (750 <delay_cycles_us+0x2c>)
     736:	4798      	blx	r3
	while (n--) {
     738:	687b      	ldr	r3, [r7, #4]
     73a:	1e5a      	subs	r2, r3, #1
     73c:	607a      	str	r2, [r7, #4]
     73e:	2b00      	cmp	r3, #0
     740:	d1f5      	bne.n	72e <delay_cycles_us+0xa>
	}
}
     742:	46c0      	nop			; (mov r8, r8)
     744:	46bd      	mov	sp, r7
     746:	b002      	add	sp, #8
     748:	bd80      	pop	{r7, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	20000014 	.word	0x20000014
     750:	00000699 	.word	0x00000699

00000754 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     754:	b580      	push	{r7, lr}
     756:	b082      	sub	sp, #8
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	2280      	movs	r2, #128	; 0x80
     760:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     762:	687b      	ldr	r3, [r7, #4]
     764:	2200      	movs	r2, #0
     766:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     768:	687b      	ldr	r3, [r7, #4]
     76a:	2201      	movs	r2, #1
     76c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     76e:	687b      	ldr	r3, [r7, #4]
     770:	2200      	movs	r2, #0
     772:	70da      	strb	r2, [r3, #3]
}
     774:	46c0      	nop			; (mov r8, r8)
     776:	46bd      	mov	sp, r7
     778:	b002      	add	sp, #8
     77a:	bd80      	pop	{r7, pc}

0000077c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     77c:	b580      	push	{r7, lr}
     77e:	b084      	sub	sp, #16
     780:	af00      	add	r7, sp, #0
     782:	0002      	movs	r2, r0
     784:	6039      	str	r1, [r7, #0]
     786:	1dfb      	adds	r3, r7, #7
     788:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     78a:	230c      	movs	r3, #12
     78c:	18fb      	adds	r3, r7, r3
     78e:	0018      	movs	r0, r3
     790:	4b10      	ldr	r3, [pc, #64]	; (7d4 <port_pin_set_config+0x58>)
     792:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     794:	230c      	movs	r3, #12
     796:	18fb      	adds	r3, r7, r3
     798:	2280      	movs	r2, #128	; 0x80
     79a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     79c:	683b      	ldr	r3, [r7, #0]
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	230c      	movs	r3, #12
     7a2:	18fb      	adds	r3, r7, r3
     7a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     7a6:	683b      	ldr	r3, [r7, #0]
     7a8:	785a      	ldrb	r2, [r3, #1]
     7aa:	230c      	movs	r3, #12
     7ac:	18fb      	adds	r3, r7, r3
     7ae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	789a      	ldrb	r2, [r3, #2]
     7b4:	230c      	movs	r3, #12
     7b6:	18fb      	adds	r3, r7, r3
     7b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     7ba:	230c      	movs	r3, #12
     7bc:	18fa      	adds	r2, r7, r3
     7be:	1dfb      	adds	r3, r7, #7
     7c0:	781b      	ldrb	r3, [r3, #0]
     7c2:	0011      	movs	r1, r2
     7c4:	0018      	movs	r0, r3
     7c6:	4b04      	ldr	r3, [pc, #16]	; (7d8 <port_pin_set_config+0x5c>)
     7c8:	4798      	blx	r3
}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	46bd      	mov	sp, r7
     7ce:	b004      	add	sp, #16
     7d0:	bd80      	pop	{r7, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000755 	.word	0x00000755
     7d8:	0000268d 	.word	0x0000268d

000007dc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	2200      	movs	r2, #0
     7e8:	701a      	strb	r2, [r3, #0]
}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	46bd      	mov	sp, r7
     7ee:	b002      	add	sp, #8
     7f0:	bd80      	pop	{r7, pc}

000007f2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f4:	b08d      	sub	sp, #52	; 0x34
     7f6:	af00      	add	r7, sp, #0
     7f8:	60b8      	str	r0, [r7, #8]
     7fa:	60f9      	str	r1, [r7, #12]
     7fc:	603a      	str	r2, [r7, #0]
     7fe:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     800:	2300      	movs	r3, #0
     802:	2400      	movs	r4, #0
     804:	623b      	str	r3, [r7, #32]
     806:	627c      	str	r4, [r7, #36]	; 0x24
     808:	2300      	movs	r3, #0
     80a:	2400      	movs	r4, #0
     80c:	61bb      	str	r3, [r7, #24]
     80e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     810:	233f      	movs	r3, #63	; 0x3f
     812:	62fb      	str	r3, [r7, #44]	; 0x2c
     814:	e053      	b.n	8be <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     818:	3b20      	subs	r3, #32
     81a:	2b00      	cmp	r3, #0
     81c:	db04      	blt.n	828 <long_division+0x36>
     81e:	2201      	movs	r2, #1
     820:	409a      	lsls	r2, r3
     822:	0013      	movs	r3, r2
     824:	617b      	str	r3, [r7, #20]
     826:	e00b      	b.n	840 <long_division+0x4e>
     828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     82a:	2220      	movs	r2, #32
     82c:	1ad3      	subs	r3, r2, r3
     82e:	2201      	movs	r2, #1
     830:	40da      	lsrs	r2, r3
     832:	0013      	movs	r3, r2
     834:	2100      	movs	r1, #0
     836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     838:	4091      	lsls	r1, r2
     83a:	000a      	movs	r2, r1
     83c:	4313      	orrs	r3, r2
     83e:	617b      	str	r3, [r7, #20]
     840:	2201      	movs	r2, #1
     842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     844:	409a      	lsls	r2, r3
     846:	0013      	movs	r3, r2
     848:	613b      	str	r3, [r7, #16]

		r = r << 1;
     84a:	69bb      	ldr	r3, [r7, #24]
     84c:	69fc      	ldr	r4, [r7, #28]
     84e:	18db      	adds	r3, r3, r3
     850:	4164      	adcs	r4, r4
     852:	61bb      	str	r3, [r7, #24]
     854:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     856:	68bb      	ldr	r3, [r7, #8]
     858:	693a      	ldr	r2, [r7, #16]
     85a:	401a      	ands	r2, r3
     85c:	0015      	movs	r5, r2
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	697a      	ldr	r2, [r7, #20]
     862:	401a      	ands	r2, r3
     864:	0016      	movs	r6, r2
     866:	002b      	movs	r3, r5
     868:	4333      	orrs	r3, r6
     86a:	d007      	beq.n	87c <long_division+0x8a>
			r |= 0x01;
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	2201      	movs	r2, #1
     870:	4313      	orrs	r3, r2
     872:	61bb      	str	r3, [r7, #24]
     874:	69fb      	ldr	r3, [r7, #28]
     876:	2200      	movs	r2, #0
     878:	4313      	orrs	r3, r2
     87a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     87c:	687a      	ldr	r2, [r7, #4]
     87e:	69fb      	ldr	r3, [r7, #28]
     880:	429a      	cmp	r2, r3
     882:	d819      	bhi.n	8b8 <long_division+0xc6>
     884:	687a      	ldr	r2, [r7, #4]
     886:	69fb      	ldr	r3, [r7, #28]
     888:	429a      	cmp	r2, r3
     88a:	d103      	bne.n	894 <long_division+0xa2>
     88c:	683a      	ldr	r2, [r7, #0]
     88e:	69bb      	ldr	r3, [r7, #24]
     890:	429a      	cmp	r2, r3
     892:	d811      	bhi.n	8b8 <long_division+0xc6>
			r = r - d;
     894:	69b9      	ldr	r1, [r7, #24]
     896:	69fa      	ldr	r2, [r7, #28]
     898:	683b      	ldr	r3, [r7, #0]
     89a:	687c      	ldr	r4, [r7, #4]
     89c:	1ac9      	subs	r1, r1, r3
     89e:	41a2      	sbcs	r2, r4
     8a0:	000b      	movs	r3, r1
     8a2:	0014      	movs	r4, r2
     8a4:	61bb      	str	r3, [r7, #24]
     8a6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     8a8:	6a3a      	ldr	r2, [r7, #32]
     8aa:	693b      	ldr	r3, [r7, #16]
     8ac:	4313      	orrs	r3, r2
     8ae:	623b      	str	r3, [r7, #32]
     8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     8b2:	697b      	ldr	r3, [r7, #20]
     8b4:	4313      	orrs	r3, r2
     8b6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8ba:	3b01      	subs	r3, #1
     8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
     8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8c0:	2b00      	cmp	r3, #0
     8c2:	daa8      	bge.n	816 <long_division+0x24>
		}
	}

	return q;
     8c4:	6a3b      	ldr	r3, [r7, #32]
     8c6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     8c8:	0018      	movs	r0, r3
     8ca:	0021      	movs	r1, r4
     8cc:	46bd      	mov	sp, r7
     8ce:	b00d      	add	sp, #52	; 0x34
     8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008d2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8d2:	b580      	push	{r7, lr}
     8d4:	b086      	sub	sp, #24
     8d6:	af00      	add	r7, sp, #0
     8d8:	60f8      	str	r0, [r7, #12]
     8da:	60b9      	str	r1, [r7, #8]
     8dc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     8de:	2316      	movs	r3, #22
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	2200      	movs	r2, #0
     8e4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     8e6:	68bb      	ldr	r3, [r7, #8]
     8e8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8ea:	68bb      	ldr	r3, [r7, #8]
     8ec:	085a      	lsrs	r2, r3, #1
     8ee:	68fb      	ldr	r3, [r7, #12]
     8f0:	429a      	cmp	r2, r3
     8f2:	d201      	bcs.n	8f8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8f4:	2340      	movs	r3, #64	; 0x40
     8f6:	e026      	b.n	946 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     8f8:	68bb      	ldr	r3, [r7, #8]
     8fa:	085b      	lsrs	r3, r3, #1
     8fc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     8fe:	e00a      	b.n	916 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     900:	693a      	ldr	r2, [r7, #16]
     902:	68fb      	ldr	r3, [r7, #12]
     904:	1ad3      	subs	r3, r2, r3
     906:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     908:	2316      	movs	r3, #22
     90a:	18fb      	adds	r3, r7, r3
     90c:	881a      	ldrh	r2, [r3, #0]
     90e:	2316      	movs	r3, #22
     910:	18fb      	adds	r3, r7, r3
     912:	3201      	adds	r2, #1
     914:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     916:	693a      	ldr	r2, [r7, #16]
     918:	68fb      	ldr	r3, [r7, #12]
     91a:	429a      	cmp	r2, r3
     91c:	d2f0      	bcs.n	900 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
     91e:	2316      	movs	r3, #22
     920:	18fb      	adds	r3, r7, r3
     922:	2216      	movs	r2, #22
     924:	18ba      	adds	r2, r7, r2
     926:	8812      	ldrh	r2, [r2, #0]
     928:	3a01      	subs	r2, #1
     92a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     92c:	2316      	movs	r3, #22
     92e:	18fb      	adds	r3, r7, r3
     930:	881b      	ldrh	r3, [r3, #0]
     932:	2bff      	cmp	r3, #255	; 0xff
     934:	d901      	bls.n	93a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     936:	2340      	movs	r3, #64	; 0x40
     938:	e005      	b.n	946 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	2216      	movs	r2, #22
     93e:	18ba      	adds	r2, r7, r2
     940:	8812      	ldrh	r2, [r2, #0]
     942:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     944:	2300      	movs	r3, #0
	}
}
     946:	0018      	movs	r0, r3
     948:	46bd      	mov	sp, r7
     94a:	b006      	add	sp, #24
     94c:	bd80      	pop	{r7, pc}
	...

00000950 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     950:	b5f0      	push	{r4, r5, r6, r7, lr}
     952:	b0a1      	sub	sp, #132	; 0x84
     954:	af00      	add	r7, sp, #0
     956:	64f8      	str	r0, [r7, #76]	; 0x4c
     958:	64b9      	str	r1, [r7, #72]	; 0x48
     95a:	647a      	str	r2, [r7, #68]	; 0x44
     95c:	2243      	movs	r2, #67	; 0x43
     95e:	18ba      	adds	r2, r7, r2
     960:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     962:	2300      	movs	r3, #0
     964:	2400      	movs	r4, #0
     966:	673b      	str	r3, [r7, #112]	; 0x70
     968:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     96a:	2300      	movs	r3, #0
     96c:	2400      	movs	r4, #0
     96e:	66bb      	str	r3, [r7, #104]	; 0x68
     970:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     972:	2300      	movs	r3, #0
     974:	2400      	movs	r4, #0
     976:	67bb      	str	r3, [r7, #120]	; 0x78
     978:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     97a:	2300      	movs	r3, #0
     97c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     97e:	2358      	movs	r3, #88	; 0x58
     980:	2240      	movs	r2, #64	; 0x40
     982:	4694      	mov	ip, r2
     984:	44bc      	add	ip, r7
     986:	4463      	add	r3, ip
     988:	781a      	ldrb	r2, [r3, #0]
     98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     98c:	435a      	muls	r2, r3
     98e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     990:	429a      	cmp	r2, r3
     992:	d901      	bls.n	998 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     994:	2340      	movs	r3, #64	; 0x40
     996:	e0b3      	b.n	b00 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     998:	2343      	movs	r3, #67	; 0x43
     99a:	18fb      	adds	r3, r7, r3
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	2b00      	cmp	r3, #0
     9a0:	d13d      	bne.n	a1e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     9a2:	2358      	movs	r3, #88	; 0x58
     9a4:	2240      	movs	r2, #64	; 0x40
     9a6:	4694      	mov	ip, r2
     9a8:	44bc      	add	ip, r7
     9aa:	4463      	add	r3, ip
     9ac:	781b      	ldrb	r3, [r3, #0]
     9ae:	b2db      	uxtb	r3, r3
     9b0:	613b      	str	r3, [r7, #16]
     9b2:	2300      	movs	r3, #0
     9b4:	617b      	str	r3, [r7, #20]
     9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     9b8:	60bb      	str	r3, [r7, #8]
     9ba:	2300      	movs	r3, #0
     9bc:	60fb      	str	r3, [r7, #12]
     9be:	4c52      	ldr	r4, [pc, #328]	; (b08 <_sercom_get_async_baud_val+0x1b8>)
     9c0:	68ba      	ldr	r2, [r7, #8]
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	6938      	ldr	r0, [r7, #16]
     9c6:	6979      	ldr	r1, [r7, #20]
     9c8:	47a0      	blx	r4
     9ca:	0003      	movs	r3, r0
     9cc:	000c      	movs	r4, r1
     9ce:	001b      	movs	r3, r3
     9d0:	65fb      	str	r3, [r7, #92]	; 0x5c
     9d2:	2300      	movs	r3, #0
     9d4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     9d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     9d8:	603b      	str	r3, [r7, #0]
     9da:	2300      	movs	r3, #0
     9dc:	607b      	str	r3, [r7, #4]
     9de:	6db8      	ldr	r0, [r7, #88]	; 0x58
     9e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     9e2:	683a      	ldr	r2, [r7, #0]
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	4c49      	ldr	r4, [pc, #292]	; (b0c <_sercom_get_async_baud_val+0x1bc>)
     9e8:	47a0      	blx	r4
     9ea:	0003      	movs	r3, r0
     9ec:	000c      	movs	r4, r1
     9ee:	673b      	str	r3, [r7, #112]	; 0x70
     9f0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     9f2:	2100      	movs	r1, #0
     9f4:	2201      	movs	r2, #1
     9f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     9f8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     9fa:	1ac9      	subs	r1, r1, r3
     9fc:	41a2      	sbcs	r2, r4
     9fe:	000b      	movs	r3, r1
     a00:	0014      	movs	r4, r2
     a02:	66bb      	str	r3, [r7, #104]	; 0x68
     a04:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     a06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     a08:	0c1b      	lsrs	r3, r3, #16
     a0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     a0c:	0416      	lsls	r6, r2, #16
     a0e:	431e      	orrs	r6, r3
     a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     a12:	041d      	lsls	r5, r3, #16
     a14:	0033      	movs	r3, r6
     a16:	67bb      	str	r3, [r7, #120]	; 0x78
     a18:	2300      	movs	r3, #0
     a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
     a1c:	e06a      	b.n	af4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a1e:	2343      	movs	r3, #67	; 0x43
     a20:	18fb      	adds	r3, r7, r3
     a22:	781b      	ldrb	r3, [r3, #0]
     a24:	2b01      	cmp	r3, #1
     a26:	d165      	bne.n	af4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     a2a:	633b      	str	r3, [r7, #48]	; 0x30
     a2c:	2300      	movs	r3, #0
     a2e:	637b      	str	r3, [r7, #52]	; 0x34
     a30:	2358      	movs	r3, #88	; 0x58
     a32:	2240      	movs	r2, #64	; 0x40
     a34:	4694      	mov	ip, r2
     a36:	44bc      	add	ip, r7
     a38:	4463      	add	r3, ip
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	b2db      	uxtb	r3, r3
     a3e:	62bb      	str	r3, [r7, #40]	; 0x28
     a40:	2300      	movs	r3, #0
     a42:	62fb      	str	r3, [r7, #44]	; 0x2c
     a44:	4c30      	ldr	r4, [pc, #192]	; (b08 <_sercom_get_async_baud_val+0x1b8>)
     a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
     a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
     a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
     a4e:	47a0      	blx	r4
     a50:	0003      	movs	r3, r0
     a52:	000c      	movs	r4, r1
     a54:	65bb      	str	r3, [r7, #88]	; 0x58
     a56:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a5a:	623b      	str	r3, [r7, #32]
     a5c:	2300      	movs	r3, #0
     a5e:	627b      	str	r3, [r7, #36]	; 0x24
     a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a62:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     a64:	001a      	movs	r2, r3
     a66:	0023      	movs	r3, r4
     a68:	6a38      	ldr	r0, [r7, #32]
     a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     a6c:	4c27      	ldr	r4, [pc, #156]	; (b0c <_sercom_get_async_baud_val+0x1bc>)
     a6e:	47a0      	blx	r4
     a70:	0003      	movs	r3, r0
     a72:	000c      	movs	r4, r1
     a74:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     a76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     a78:	2380      	movs	r3, #128	; 0x80
     a7a:	019b      	lsls	r3, r3, #6
     a7c:	429a      	cmp	r2, r3
     a7e:	d901      	bls.n	a84 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a80:	2340      	movs	r3, #64	; 0x40
     a82:	e03d      	b.n	b00 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a86:	61bb      	str	r3, [r7, #24]
     a88:	2300      	movs	r3, #0
     a8a:	61fb      	str	r3, [r7, #28]
     a8c:	69b9      	ldr	r1, [r7, #24]
     a8e:	69fa      	ldr	r2, [r7, #28]
     a90:	000b      	movs	r3, r1
     a92:	0f5b      	lsrs	r3, r3, #29
     a94:	0010      	movs	r0, r2
     a96:	00c0      	lsls	r0, r0, #3
     a98:	63f8      	str	r0, [r7, #60]	; 0x3c
     a9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     a9c:	4318      	orrs	r0, r3
     a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
     aa0:	000b      	movs	r3, r1
     aa2:	00db      	lsls	r3, r3, #3
     aa4:	63bb      	str	r3, [r7, #56]	; 0x38
     aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     aa8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     aaa:	001a      	movs	r2, r3
     aac:	0023      	movs	r3, r4
     aae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     ab2:	4c16      	ldr	r4, [pc, #88]	; (b0c <_sercom_get_async_baud_val+0x1bc>)
     ab4:	47a0      	blx	r4
     ab6:	0003      	movs	r3, r0
     ab8:	000c      	movs	r4, r1
     aba:	65bb      	str	r3, [r7, #88]	; 0x58
     abc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     ac0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     ac2:	b2d9      	uxtb	r1, r3
     ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     ac6:	b2db      	uxtb	r3, r3
     ac8:	00db      	lsls	r3, r3, #3
     aca:	b2da      	uxtb	r2, r3
     acc:	2317      	movs	r3, #23
     ace:	2040      	movs	r0, #64	; 0x40
     ad0:	4684      	mov	ip, r0
     ad2:	44bc      	add	ip, r7
     ad4:	4463      	add	r3, ip
     ad6:	1a8a      	subs	r2, r1, r2
     ad8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     ada:	2317      	movs	r3, #23
     adc:	2240      	movs	r2, #64	; 0x40
     ade:	4694      	mov	ip, r2
     ae0:	44bc      	add	ip, r7
     ae2:	4463      	add	r3, ip
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	035b      	lsls	r3, r3, #13
     ae8:	001a      	movs	r2, r3
     aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     aec:	4313      	orrs	r3, r2
     aee:	67bb      	str	r3, [r7, #120]	; 0x78
     af0:	2300      	movs	r3, #0
     af2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     af6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     af8:	b29a      	uxth	r2, r3
     afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     afc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     afe:	2300      	movs	r3, #0
}
     b00:	0018      	movs	r0, r3
     b02:	46bd      	mov	sp, r7
     b04:	b021      	add	sp, #132	; 0x84
     b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b08:	00002c55 	.word	0x00002c55
     b0c:	000007f3 	.word	0x000007f3

00000b10 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     b10:	b580      	push	{r7, lr}
     b12:	b084      	sub	sp, #16
     b14:	af00      	add	r7, sp, #0
     b16:	0002      	movs	r2, r0
     b18:	1dfb      	adds	r3, r7, #7
     b1a:	701a      	strb	r2, [r3, #0]
     b1c:	1dbb      	adds	r3, r7, #6
     b1e:	1c0a      	adds	r2, r1, #0
     b20:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     b22:	4b1a      	ldr	r3, [pc, #104]	; (b8c <sercom_set_gclk_generator+0x7c>)
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	2201      	movs	r2, #1
     b28:	4053      	eors	r3, r2
     b2a:	b2db      	uxtb	r3, r3
     b2c:	2b00      	cmp	r3, #0
     b2e:	d103      	bne.n	b38 <sercom_set_gclk_generator+0x28>
     b30:	1dbb      	adds	r3, r7, #6
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d01b      	beq.n	b70 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     b38:	230c      	movs	r3, #12
     b3a:	18fb      	adds	r3, r7, r3
     b3c:	0018      	movs	r0, r3
     b3e:	4b14      	ldr	r3, [pc, #80]	; (b90 <sercom_set_gclk_generator+0x80>)
     b40:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     b42:	230c      	movs	r3, #12
     b44:	18fb      	adds	r3, r7, r3
     b46:	1dfa      	adds	r2, r7, #7
     b48:	7812      	ldrb	r2, [r2, #0]
     b4a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b4c:	230c      	movs	r3, #12
     b4e:	18fb      	adds	r3, r7, r3
     b50:	0019      	movs	r1, r3
     b52:	2013      	movs	r0, #19
     b54:	4b0f      	ldr	r3, [pc, #60]	; (b94 <sercom_set_gclk_generator+0x84>)
     b56:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b58:	2013      	movs	r0, #19
     b5a:	4b0f      	ldr	r3, [pc, #60]	; (b98 <sercom_set_gclk_generator+0x88>)
     b5c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     b5e:	4b0b      	ldr	r3, [pc, #44]	; (b8c <sercom_set_gclk_generator+0x7c>)
     b60:	1dfa      	adds	r2, r7, #7
     b62:	7812      	ldrb	r2, [r2, #0]
     b64:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     b66:	4b09      	ldr	r3, [pc, #36]	; (b8c <sercom_set_gclk_generator+0x7c>)
     b68:	2201      	movs	r2, #1
     b6a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     b6c:	2300      	movs	r3, #0
     b6e:	e008      	b.n	b82 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     b70:	4b06      	ldr	r3, [pc, #24]	; (b8c <sercom_set_gclk_generator+0x7c>)
     b72:	785b      	ldrb	r3, [r3, #1]
     b74:	1dfa      	adds	r2, r7, #7
     b76:	7812      	ldrb	r2, [r2, #0]
     b78:	429a      	cmp	r2, r3
     b7a:	d101      	bne.n	b80 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     b7c:	2300      	movs	r3, #0
     b7e:	e000      	b.n	b82 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b80:	231d      	movs	r3, #29
}
     b82:	0018      	movs	r0, r3
     b84:	46bd      	mov	sp, r7
     b86:	b004      	add	sp, #16
     b88:	bd80      	pop	{r7, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	200000f4 	.word	0x200000f4
     b90:	000007dd 	.word	0x000007dd
     b94:	000023a1 	.word	0x000023a1
     b98:	000023e5 	.word	0x000023e5

00000b9c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     b9c:	b580      	push	{r7, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	af00      	add	r7, sp, #0
     ba2:	6078      	str	r0, [r7, #4]
     ba4:	000a      	movs	r2, r1
     ba6:	1cfb      	adds	r3, r7, #3
     ba8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	4a4d      	ldr	r2, [pc, #308]	; (ce4 <_sercom_get_default_pad+0x148>)
     bae:	4293      	cmp	r3, r2
     bb0:	d03f      	beq.n	c32 <_sercom_get_default_pad+0x96>
     bb2:	4a4c      	ldr	r2, [pc, #304]	; (ce4 <_sercom_get_default_pad+0x148>)
     bb4:	4293      	cmp	r3, r2
     bb6:	d806      	bhi.n	bc6 <_sercom_get_default_pad+0x2a>
     bb8:	4a4b      	ldr	r2, [pc, #300]	; (ce8 <_sercom_get_default_pad+0x14c>)
     bba:	4293      	cmp	r3, r2
     bbc:	d00f      	beq.n	bde <_sercom_get_default_pad+0x42>
     bbe:	4a4b      	ldr	r2, [pc, #300]	; (cec <_sercom_get_default_pad+0x150>)
     bc0:	4293      	cmp	r3, r2
     bc2:	d021      	beq.n	c08 <_sercom_get_default_pad+0x6c>
     bc4:	e089      	b.n	cda <_sercom_get_default_pad+0x13e>
     bc6:	4a4a      	ldr	r2, [pc, #296]	; (cf0 <_sercom_get_default_pad+0x154>)
     bc8:	4293      	cmp	r3, r2
     bca:	d100      	bne.n	bce <_sercom_get_default_pad+0x32>
     bcc:	e05b      	b.n	c86 <_sercom_get_default_pad+0xea>
     bce:	4a49      	ldr	r2, [pc, #292]	; (cf4 <_sercom_get_default_pad+0x158>)
     bd0:	4293      	cmp	r3, r2
     bd2:	d100      	bne.n	bd6 <_sercom_get_default_pad+0x3a>
     bd4:	e06c      	b.n	cb0 <_sercom_get_default_pad+0x114>
     bd6:	4a48      	ldr	r2, [pc, #288]	; (cf8 <_sercom_get_default_pad+0x15c>)
     bd8:	4293      	cmp	r3, r2
     bda:	d03f      	beq.n	c5c <_sercom_get_default_pad+0xc0>
     bdc:	e07d      	b.n	cda <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bde:	1cfb      	adds	r3, r7, #3
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b01      	cmp	r3, #1
     be4:	d00a      	beq.n	bfc <_sercom_get_default_pad+0x60>
     be6:	dc02      	bgt.n	bee <_sercom_get_default_pad+0x52>
     be8:	2b00      	cmp	r3, #0
     bea:	d005      	beq.n	bf8 <_sercom_get_default_pad+0x5c>
     bec:	e075      	b.n	cda <_sercom_get_default_pad+0x13e>
     bee:	2b02      	cmp	r3, #2
     bf0:	d006      	beq.n	c00 <_sercom_get_default_pad+0x64>
     bf2:	2b03      	cmp	r3, #3
     bf4:	d006      	beq.n	c04 <_sercom_get_default_pad+0x68>
     bf6:	e070      	b.n	cda <_sercom_get_default_pad+0x13e>
     bf8:	4b40      	ldr	r3, [pc, #256]	; (cfc <_sercom_get_default_pad+0x160>)
     bfa:	e06f      	b.n	cdc <_sercom_get_default_pad+0x140>
     bfc:	4b40      	ldr	r3, [pc, #256]	; (d00 <_sercom_get_default_pad+0x164>)
     bfe:	e06d      	b.n	cdc <_sercom_get_default_pad+0x140>
     c00:	4b40      	ldr	r3, [pc, #256]	; (d04 <_sercom_get_default_pad+0x168>)
     c02:	e06b      	b.n	cdc <_sercom_get_default_pad+0x140>
     c04:	4b40      	ldr	r3, [pc, #256]	; (d08 <_sercom_get_default_pad+0x16c>)
     c06:	e069      	b.n	cdc <_sercom_get_default_pad+0x140>
     c08:	1cfb      	adds	r3, r7, #3
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	2b01      	cmp	r3, #1
     c0e:	d00a      	beq.n	c26 <_sercom_get_default_pad+0x8a>
     c10:	dc02      	bgt.n	c18 <_sercom_get_default_pad+0x7c>
     c12:	2b00      	cmp	r3, #0
     c14:	d005      	beq.n	c22 <_sercom_get_default_pad+0x86>
     c16:	e060      	b.n	cda <_sercom_get_default_pad+0x13e>
     c18:	2b02      	cmp	r3, #2
     c1a:	d006      	beq.n	c2a <_sercom_get_default_pad+0x8e>
     c1c:	2b03      	cmp	r3, #3
     c1e:	d006      	beq.n	c2e <_sercom_get_default_pad+0x92>
     c20:	e05b      	b.n	cda <_sercom_get_default_pad+0x13e>
     c22:	2303      	movs	r3, #3
     c24:	e05a      	b.n	cdc <_sercom_get_default_pad+0x140>
     c26:	4b39      	ldr	r3, [pc, #228]	; (d0c <_sercom_get_default_pad+0x170>)
     c28:	e058      	b.n	cdc <_sercom_get_default_pad+0x140>
     c2a:	4b39      	ldr	r3, [pc, #228]	; (d10 <_sercom_get_default_pad+0x174>)
     c2c:	e056      	b.n	cdc <_sercom_get_default_pad+0x140>
     c2e:	4b39      	ldr	r3, [pc, #228]	; (d14 <_sercom_get_default_pad+0x178>)
     c30:	e054      	b.n	cdc <_sercom_get_default_pad+0x140>
     c32:	1cfb      	adds	r3, r7, #3
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b01      	cmp	r3, #1
     c38:	d00a      	beq.n	c50 <_sercom_get_default_pad+0xb4>
     c3a:	dc02      	bgt.n	c42 <_sercom_get_default_pad+0xa6>
     c3c:	2b00      	cmp	r3, #0
     c3e:	d005      	beq.n	c4c <_sercom_get_default_pad+0xb0>
     c40:	e04b      	b.n	cda <_sercom_get_default_pad+0x13e>
     c42:	2b02      	cmp	r3, #2
     c44:	d006      	beq.n	c54 <_sercom_get_default_pad+0xb8>
     c46:	2b03      	cmp	r3, #3
     c48:	d006      	beq.n	c58 <_sercom_get_default_pad+0xbc>
     c4a:	e046      	b.n	cda <_sercom_get_default_pad+0x13e>
     c4c:	4b32      	ldr	r3, [pc, #200]	; (d18 <_sercom_get_default_pad+0x17c>)
     c4e:	e045      	b.n	cdc <_sercom_get_default_pad+0x140>
     c50:	4b32      	ldr	r3, [pc, #200]	; (d1c <_sercom_get_default_pad+0x180>)
     c52:	e043      	b.n	cdc <_sercom_get_default_pad+0x140>
     c54:	4b32      	ldr	r3, [pc, #200]	; (d20 <_sercom_get_default_pad+0x184>)
     c56:	e041      	b.n	cdc <_sercom_get_default_pad+0x140>
     c58:	4b32      	ldr	r3, [pc, #200]	; (d24 <_sercom_get_default_pad+0x188>)
     c5a:	e03f      	b.n	cdc <_sercom_get_default_pad+0x140>
     c5c:	1cfb      	adds	r3, r7, #3
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	2b01      	cmp	r3, #1
     c62:	d00a      	beq.n	c7a <_sercom_get_default_pad+0xde>
     c64:	dc02      	bgt.n	c6c <_sercom_get_default_pad+0xd0>
     c66:	2b00      	cmp	r3, #0
     c68:	d005      	beq.n	c76 <_sercom_get_default_pad+0xda>
     c6a:	e036      	b.n	cda <_sercom_get_default_pad+0x13e>
     c6c:	2b02      	cmp	r3, #2
     c6e:	d006      	beq.n	c7e <_sercom_get_default_pad+0xe2>
     c70:	2b03      	cmp	r3, #3
     c72:	d006      	beq.n	c82 <_sercom_get_default_pad+0xe6>
     c74:	e031      	b.n	cda <_sercom_get_default_pad+0x13e>
     c76:	4b2c      	ldr	r3, [pc, #176]	; (d28 <_sercom_get_default_pad+0x18c>)
     c78:	e030      	b.n	cdc <_sercom_get_default_pad+0x140>
     c7a:	4b2c      	ldr	r3, [pc, #176]	; (d2c <_sercom_get_default_pad+0x190>)
     c7c:	e02e      	b.n	cdc <_sercom_get_default_pad+0x140>
     c7e:	4b2c      	ldr	r3, [pc, #176]	; (d30 <_sercom_get_default_pad+0x194>)
     c80:	e02c      	b.n	cdc <_sercom_get_default_pad+0x140>
     c82:	4b2c      	ldr	r3, [pc, #176]	; (d34 <_sercom_get_default_pad+0x198>)
     c84:	e02a      	b.n	cdc <_sercom_get_default_pad+0x140>
     c86:	1cfb      	adds	r3, r7, #3
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	2b01      	cmp	r3, #1
     c8c:	d00a      	beq.n	ca4 <_sercom_get_default_pad+0x108>
     c8e:	dc02      	bgt.n	c96 <_sercom_get_default_pad+0xfa>
     c90:	2b00      	cmp	r3, #0
     c92:	d005      	beq.n	ca0 <_sercom_get_default_pad+0x104>
     c94:	e021      	b.n	cda <_sercom_get_default_pad+0x13e>
     c96:	2b02      	cmp	r3, #2
     c98:	d006      	beq.n	ca8 <_sercom_get_default_pad+0x10c>
     c9a:	2b03      	cmp	r3, #3
     c9c:	d006      	beq.n	cac <_sercom_get_default_pad+0x110>
     c9e:	e01c      	b.n	cda <_sercom_get_default_pad+0x13e>
     ca0:	4b25      	ldr	r3, [pc, #148]	; (d38 <_sercom_get_default_pad+0x19c>)
     ca2:	e01b      	b.n	cdc <_sercom_get_default_pad+0x140>
     ca4:	4b25      	ldr	r3, [pc, #148]	; (d3c <_sercom_get_default_pad+0x1a0>)
     ca6:	e019      	b.n	cdc <_sercom_get_default_pad+0x140>
     ca8:	4b25      	ldr	r3, [pc, #148]	; (d40 <_sercom_get_default_pad+0x1a4>)
     caa:	e017      	b.n	cdc <_sercom_get_default_pad+0x140>
     cac:	4b25      	ldr	r3, [pc, #148]	; (d44 <_sercom_get_default_pad+0x1a8>)
     cae:	e015      	b.n	cdc <_sercom_get_default_pad+0x140>
     cb0:	1cfb      	adds	r3, r7, #3
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	2b01      	cmp	r3, #1
     cb6:	d00a      	beq.n	cce <_sercom_get_default_pad+0x132>
     cb8:	dc02      	bgt.n	cc0 <_sercom_get_default_pad+0x124>
     cba:	2b00      	cmp	r3, #0
     cbc:	d005      	beq.n	cca <_sercom_get_default_pad+0x12e>
     cbe:	e00c      	b.n	cda <_sercom_get_default_pad+0x13e>
     cc0:	2b02      	cmp	r3, #2
     cc2:	d006      	beq.n	cd2 <_sercom_get_default_pad+0x136>
     cc4:	2b03      	cmp	r3, #3
     cc6:	d006      	beq.n	cd6 <_sercom_get_default_pad+0x13a>
     cc8:	e007      	b.n	cda <_sercom_get_default_pad+0x13e>
     cca:	4b1f      	ldr	r3, [pc, #124]	; (d48 <_sercom_get_default_pad+0x1ac>)
     ccc:	e006      	b.n	cdc <_sercom_get_default_pad+0x140>
     cce:	4b1f      	ldr	r3, [pc, #124]	; (d4c <_sercom_get_default_pad+0x1b0>)
     cd0:	e004      	b.n	cdc <_sercom_get_default_pad+0x140>
     cd2:	4b1f      	ldr	r3, [pc, #124]	; (d50 <_sercom_get_default_pad+0x1b4>)
     cd4:	e002      	b.n	cdc <_sercom_get_default_pad+0x140>
     cd6:	4b1f      	ldr	r3, [pc, #124]	; (d54 <_sercom_get_default_pad+0x1b8>)
     cd8:	e000      	b.n	cdc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     cda:	2300      	movs	r3, #0
}
     cdc:	0018      	movs	r0, r3
     cde:	46bd      	mov	sp, r7
     ce0:	b002      	add	sp, #8
     ce2:	bd80      	pop	{r7, pc}
     ce4:	42001000 	.word	0x42001000
     ce8:	42000800 	.word	0x42000800
     cec:	42000c00 	.word	0x42000c00
     cf0:	42001800 	.word	0x42001800
     cf4:	42001c00 	.word	0x42001c00
     cf8:	42001400 	.word	0x42001400
     cfc:	00040003 	.word	0x00040003
     d00:	00050003 	.word	0x00050003
     d04:	00060003 	.word	0x00060003
     d08:	00070003 	.word	0x00070003
     d0c:	00010003 	.word	0x00010003
     d10:	001e0003 	.word	0x001e0003
     d14:	001f0003 	.word	0x001f0003
     d18:	00080003 	.word	0x00080003
     d1c:	00090003 	.word	0x00090003
     d20:	000a0003 	.word	0x000a0003
     d24:	000b0003 	.word	0x000b0003
     d28:	00100003 	.word	0x00100003
     d2c:	00110003 	.word	0x00110003
     d30:	00120003 	.word	0x00120003
     d34:	00130003 	.word	0x00130003
     d38:	000c0003 	.word	0x000c0003
     d3c:	000d0003 	.word	0x000d0003
     d40:	000e0003 	.word	0x000e0003
     d44:	000f0003 	.word	0x000f0003
     d48:	00160003 	.word	0x00160003
     d4c:	00170003 	.word	0x00170003
     d50:	00180003 	.word	0x00180003
     d54:	00190003 	.word	0x00190003

00000d58 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d58:	b590      	push	{r4, r7, lr}
     d5a:	b08b      	sub	sp, #44	; 0x2c
     d5c:	af00      	add	r7, sp, #0
     d5e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d60:	230c      	movs	r3, #12
     d62:	18fb      	adds	r3, r7, r3
     d64:	4a0f      	ldr	r2, [pc, #60]	; (da4 <_sercom_get_sercom_inst_index+0x4c>)
     d66:	ca13      	ldmia	r2!, {r0, r1, r4}
     d68:	c313      	stmia	r3!, {r0, r1, r4}
     d6a:	ca13      	ldmia	r2!, {r0, r1, r4}
     d6c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d6e:	2300      	movs	r3, #0
     d70:	627b      	str	r3, [r7, #36]	; 0x24
     d72:	e00e      	b.n	d92 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d74:	230c      	movs	r3, #12
     d76:	18fb      	adds	r3, r7, r3
     d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d7a:	0092      	lsls	r2, r2, #2
     d7c:	58d3      	ldr	r3, [r2, r3]
     d7e:	001a      	movs	r2, r3
     d80:	687b      	ldr	r3, [r7, #4]
     d82:	429a      	cmp	r2, r3
     d84:	d102      	bne.n	d8c <_sercom_get_sercom_inst_index+0x34>
			return i;
     d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d88:	b2db      	uxtb	r3, r3
     d8a:	e006      	b.n	d9a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d8e:	3301      	adds	r3, #1
     d90:	627b      	str	r3, [r7, #36]	; 0x24
     d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d94:	2b05      	cmp	r3, #5
     d96:	d9ed      	bls.n	d74 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d98:	2300      	movs	r3, #0
}
     d9a:	0018      	movs	r0, r3
     d9c:	46bd      	mov	sp, r7
     d9e:	b00b      	add	sp, #44	; 0x2c
     da0:	bd90      	pop	{r4, r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00002dc8 	.word	0x00002dc8

00000da8 <system_gclk_chan_get_config_defaults>:
{
     da8:	b580      	push	{r7, lr}
     daa:	b082      	sub	sp, #8
     dac:	af00      	add	r7, sp, #0
     dae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	2200      	movs	r2, #0
     db4:	701a      	strb	r2, [r3, #0]
}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	46bd      	mov	sp, r7
     dba:	b002      	add	sp, #8
     dbc:	bd80      	pop	{r7, pc}
	...

00000dc0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b082      	sub	sp, #8
     dc4:	af00      	add	r7, sp, #0
     dc6:	0002      	movs	r2, r0
     dc8:	6039      	str	r1, [r7, #0]
     dca:	1dfb      	adds	r3, r7, #7
     dcc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     dce:	1dfb      	adds	r3, r7, #7
     dd0:	781b      	ldrb	r3, [r3, #0]
     dd2:	2b01      	cmp	r3, #1
     dd4:	d00a      	beq.n	dec <system_apb_clock_set_mask+0x2c>
     dd6:	2b02      	cmp	r3, #2
     dd8:	d00f      	beq.n	dfa <system_apb_clock_set_mask+0x3a>
     dda:	2b00      	cmp	r3, #0
     ddc:	d114      	bne.n	e08 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     dde:	4b0e      	ldr	r3, [pc, #56]	; (e18 <system_apb_clock_set_mask+0x58>)
     de0:	4a0d      	ldr	r2, [pc, #52]	; (e18 <system_apb_clock_set_mask+0x58>)
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	683a      	ldr	r2, [r7, #0]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
			break;
     dea:	e00f      	b.n	e0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     dec:	4b0a      	ldr	r3, [pc, #40]	; (e18 <system_apb_clock_set_mask+0x58>)
     dee:	4a0a      	ldr	r2, [pc, #40]	; (e18 <system_apb_clock_set_mask+0x58>)
     df0:	69d1      	ldr	r1, [r2, #28]
     df2:	683a      	ldr	r2, [r7, #0]
     df4:	430a      	orrs	r2, r1
     df6:	61da      	str	r2, [r3, #28]
			break;
     df8:	e008      	b.n	e0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     dfa:	4b07      	ldr	r3, [pc, #28]	; (e18 <system_apb_clock_set_mask+0x58>)
     dfc:	4a06      	ldr	r2, [pc, #24]	; (e18 <system_apb_clock_set_mask+0x58>)
     dfe:	6a11      	ldr	r1, [r2, #32]
     e00:	683a      	ldr	r2, [r7, #0]
     e02:	430a      	orrs	r2, r1
     e04:	621a      	str	r2, [r3, #32]
			break;
     e06:	e001      	b.n	e0c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     e08:	2317      	movs	r3, #23
     e0a:	e000      	b.n	e0e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     e0c:	2300      	movs	r3, #0
}
     e0e:	0018      	movs	r0, r3
     e10:	46bd      	mov	sp, r7
     e12:	b002      	add	sp, #8
     e14:	bd80      	pop	{r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	40000400 	.word	0x40000400

00000e1c <system_pinmux_get_config_defaults>:
{
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af00      	add	r7, sp, #0
     e22:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	2280      	movs	r2, #128	; 0x80
     e28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	2200      	movs	r2, #0
     e2e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e30:	687b      	ldr	r3, [r7, #4]
     e32:	2201      	movs	r2, #1
     e34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	2200      	movs	r2, #0
     e3a:	70da      	strb	r2, [r3, #3]
}
     e3c:	46c0      	nop			; (mov r8, r8)
     e3e:	46bd      	mov	sp, r7
     e40:	b002      	add	sp, #8
     e42:	bd80      	pop	{r7, pc}

00000e44 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     e44:	b580      	push	{r7, lr}
     e46:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     e48:	4b05      	ldr	r3, [pc, #20]	; (e60 <system_is_debugger_present+0x1c>)
     e4a:	789b      	ldrb	r3, [r3, #2]
     e4c:	b2db      	uxtb	r3, r3
     e4e:	001a      	movs	r2, r3
     e50:	2302      	movs	r3, #2
     e52:	4013      	ands	r3, r2
     e54:	1e5a      	subs	r2, r3, #1
     e56:	4193      	sbcs	r3, r2
     e58:	b2db      	uxtb	r3, r3
}
     e5a:	0018      	movs	r0, r3
     e5c:	46bd      	mov	sp, r7
     e5e:	bd80      	pop	{r7, pc}
     e60:	41002000 	.word	0x41002000

00000e64 <usart_is_syncing>:
{
     e64:	b580      	push	{r7, lr}
     e66:	b084      	sub	sp, #16
     e68:	af00      	add	r7, sp, #0
     e6a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	69db      	ldr	r3, [r3, #28]
     e76:	1e5a      	subs	r2, r3, #1
     e78:	4193      	sbcs	r3, r2
     e7a:	b2db      	uxtb	r3, r3
}
     e7c:	0018      	movs	r0, r3
     e7e:	46bd      	mov	sp, r7
     e80:	b004      	add	sp, #16
     e82:	bd80      	pop	{r7, pc}

00000e84 <_usart_wait_for_sync>:
{
     e84:	b580      	push	{r7, lr}
     e86:	b082      	sub	sp, #8
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
     e8c:	46c0      	nop			; (mov r8, r8)
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	0018      	movs	r0, r3
     e92:	4b04      	ldr	r3, [pc, #16]	; (ea4 <_usart_wait_for_sync+0x20>)
     e94:	4798      	blx	r3
     e96:	1e03      	subs	r3, r0, #0
     e98:	d1f9      	bne.n	e8e <_usart_wait_for_sync+0xa>
}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	46bd      	mov	sp, r7
     e9e:	b002      	add	sp, #8
     ea0:	bd80      	pop	{r7, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00000e65 	.word	0x00000e65

00000ea8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     ea8:	b5b0      	push	{r4, r5, r7, lr}
     eaa:	b08c      	sub	sp, #48	; 0x30
     eac:	af02      	add	r7, sp, #8
     eae:	6078      	str	r0, [r7, #4]
     eb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	0018      	movs	r0, r3
     ebe:	4bab      	ldr	r3, [pc, #684]	; (116c <_usart_set_config+0x2c4>)
     ec0:	4798      	blx	r3
     ec2:	0003      	movs	r3, r0
     ec4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ec6:	697b      	ldr	r3, [r7, #20]
     ec8:	3314      	adds	r3, #20
     eca:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     ecc:	2300      	movs	r3, #0
     ece:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     ed0:	2300      	movs	r3, #0
     ed2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     ed4:	230a      	movs	r3, #10
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	2200      	movs	r2, #0
     eda:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     edc:	231f      	movs	r3, #31
     ede:	18fb      	adds	r3, r7, r3
     ee0:	2200      	movs	r2, #0
     ee2:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ee4:	231e      	movs	r3, #30
     ee6:	18fb      	adds	r3, r7, r3
     ee8:	2210      	movs	r2, #16
     eea:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     eec:	683b      	ldr	r3, [r7, #0]
     eee:	8a1b      	ldrh	r3, [r3, #16]
     ef0:	2280      	movs	r2, #128	; 0x80
     ef2:	01d2      	lsls	r2, r2, #7
     ef4:	4293      	cmp	r3, r2
     ef6:	d01c      	beq.n	f32 <_usart_set_config+0x8a>
     ef8:	2280      	movs	r2, #128	; 0x80
     efa:	01d2      	lsls	r2, r2, #7
     efc:	4293      	cmp	r3, r2
     efe:	dc06      	bgt.n	f0e <_usart_set_config+0x66>
     f00:	2b00      	cmp	r3, #0
     f02:	d00d      	beq.n	f20 <_usart_set_config+0x78>
     f04:	2280      	movs	r2, #128	; 0x80
     f06:	0192      	lsls	r2, r2, #6
     f08:	4293      	cmp	r3, r2
     f0a:	d024      	beq.n	f56 <_usart_set_config+0xae>
     f0c:	e035      	b.n	f7a <_usart_set_config+0xd2>
     f0e:	22c0      	movs	r2, #192	; 0xc0
     f10:	01d2      	lsls	r2, r2, #7
     f12:	4293      	cmp	r3, r2
     f14:	d028      	beq.n	f68 <_usart_set_config+0xc0>
     f16:	2280      	movs	r2, #128	; 0x80
     f18:	0212      	lsls	r2, r2, #8
     f1a:	4293      	cmp	r3, r2
     f1c:	d012      	beq.n	f44 <_usart_set_config+0x9c>
     f1e:	e02c      	b.n	f7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f20:	231f      	movs	r3, #31
     f22:	18fb      	adds	r3, r7, r3
     f24:	2200      	movs	r2, #0
     f26:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f28:	231e      	movs	r3, #30
     f2a:	18fb      	adds	r3, r7, r3
     f2c:	2210      	movs	r2, #16
     f2e:	701a      	strb	r2, [r3, #0]
			break;
     f30:	e023      	b.n	f7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f32:	231f      	movs	r3, #31
     f34:	18fb      	adds	r3, r7, r3
     f36:	2200      	movs	r2, #0
     f38:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f3a:	231e      	movs	r3, #30
     f3c:	18fb      	adds	r3, r7, r3
     f3e:	2208      	movs	r2, #8
     f40:	701a      	strb	r2, [r3, #0]
			break;
     f42:	e01a      	b.n	f7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f44:	231f      	movs	r3, #31
     f46:	18fb      	adds	r3, r7, r3
     f48:	2200      	movs	r2, #0
     f4a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f4c:	231e      	movs	r3, #30
     f4e:	18fb      	adds	r3, r7, r3
     f50:	2203      	movs	r2, #3
     f52:	701a      	strb	r2, [r3, #0]
			break;
     f54:	e011      	b.n	f7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f56:	231f      	movs	r3, #31
     f58:	18fb      	adds	r3, r7, r3
     f5a:	2201      	movs	r2, #1
     f5c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f5e:	231e      	movs	r3, #30
     f60:	18fb      	adds	r3, r7, r3
     f62:	2210      	movs	r2, #16
     f64:	701a      	strb	r2, [r3, #0]
			break;
     f66:	e008      	b.n	f7a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f68:	231f      	movs	r3, #31
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	2201      	movs	r2, #1
     f6e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f70:	231e      	movs	r3, #30
     f72:	18fb      	adds	r3, r7, r3
     f74:	2208      	movs	r2, #8
     f76:	701a      	strb	r2, [r3, #0]
			break;
     f78:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     f7a:	683b      	ldr	r3, [r7, #0]
     f7c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     f7e:	683b      	ldr	r3, [r7, #0]
     f80:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
     f82:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     f84:	683b      	ldr	r3, [r7, #0]
     f86:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
     f88:	4313      	orrs	r3, r2
		config->sample_rate |
     f8a:	683a      	ldr	r2, [r7, #0]
     f8c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
     f8e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f90:	683a      	ldr	r2, [r7, #0]
     f92:	7e12      	ldrb	r2, [r2, #24]
     f94:	0212      	lsls	r2, r2, #8
		config->sample_rate |
     f96:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f98:	683a      	ldr	r2, [r7, #0]
     f9a:	2126      	movs	r1, #38	; 0x26
     f9c:	5c52      	ldrb	r2, [r2, r1]
     f9e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
     fa0:	4313      	orrs	r3, r2
     fa2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
     fa4:	231d      	movs	r3, #29
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	2200      	movs	r2, #0
     faa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     fac:	683b      	ldr	r3, [r7, #0]
     fae:	685b      	ldr	r3, [r3, #4]
     fb0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     fb2:	68fb      	ldr	r3, [r7, #12]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d01e      	beq.n	ff6 <_usart_set_config+0x14e>
     fb8:	2280      	movs	r2, #128	; 0x80
     fba:	0552      	lsls	r2, r2, #21
     fbc:	4293      	cmp	r3, r2
     fbe:	d14f      	bne.n	1060 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     fc0:	683b      	ldr	r3, [r7, #0]
     fc2:	2227      	movs	r2, #39	; 0x27
     fc4:	5c9b      	ldrb	r3, [r3, r2]
     fc6:	2201      	movs	r2, #1
     fc8:	4053      	eors	r3, r2
     fca:	b2db      	uxtb	r3, r3
     fcc:	2b00      	cmp	r3, #0
     fce:	d046      	beq.n	105e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     fd0:	683b      	ldr	r3, [r7, #0]
     fd2:	6a1d      	ldr	r5, [r3, #32]
     fd4:	693b      	ldr	r3, [r7, #16]
     fd6:	b2db      	uxtb	r3, r3
     fd8:	0018      	movs	r0, r3
     fda:	4b65      	ldr	r3, [pc, #404]	; (1170 <_usart_set_config+0x2c8>)
     fdc:	4798      	blx	r3
     fde:	0001      	movs	r1, r0
     fe0:	231d      	movs	r3, #29
     fe2:	18fc      	adds	r4, r7, r3
     fe4:	230a      	movs	r3, #10
     fe6:	18fb      	adds	r3, r7, r3
     fe8:	001a      	movs	r2, r3
     fea:	0028      	movs	r0, r5
     fec:	4b61      	ldr	r3, [pc, #388]	; (1174 <_usart_set_config+0x2cc>)
     fee:	4798      	blx	r3
     ff0:	0003      	movs	r3, r0
     ff2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     ff4:	e033      	b.n	105e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	2227      	movs	r2, #39	; 0x27
     ffa:	5c9b      	ldrb	r3, [r3, r2]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d014      	beq.n	102a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1000:	683b      	ldr	r3, [r7, #0]
    1002:	6a18      	ldr	r0, [r3, #32]
    1004:	683b      	ldr	r3, [r7, #0]
    1006:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    1008:	231d      	movs	r3, #29
    100a:	18fc      	adds	r4, r7, r3
    100c:	231f      	movs	r3, #31
    100e:	18fb      	adds	r3, r7, r3
    1010:	781d      	ldrb	r5, [r3, #0]
    1012:	230a      	movs	r3, #10
    1014:	18fa      	adds	r2, r7, r3
    1016:	231e      	movs	r3, #30
    1018:	18fb      	adds	r3, r7, r3
    101a:	781b      	ldrb	r3, [r3, #0]
    101c:	9300      	str	r3, [sp, #0]
    101e:	002b      	movs	r3, r5
    1020:	4d55      	ldr	r5, [pc, #340]	; (1178 <_usart_set_config+0x2d0>)
    1022:	47a8      	blx	r5
    1024:	0003      	movs	r3, r0
    1026:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1028:	e01a      	b.n	1060 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    102a:	683b      	ldr	r3, [r7, #0]
    102c:	6a1d      	ldr	r5, [r3, #32]
    102e:	693b      	ldr	r3, [r7, #16]
    1030:	b2db      	uxtb	r3, r3
    1032:	0018      	movs	r0, r3
    1034:	4b4e      	ldr	r3, [pc, #312]	; (1170 <_usart_set_config+0x2c8>)
    1036:	4798      	blx	r3
				status_code =
    1038:	231d      	movs	r3, #29
    103a:	18fc      	adds	r4, r7, r3
    103c:	231f      	movs	r3, #31
    103e:	18fb      	adds	r3, r7, r3
    1040:	7819      	ldrb	r1, [r3, #0]
    1042:	230a      	movs	r3, #10
    1044:	18fa      	adds	r2, r7, r3
    1046:	231e      	movs	r3, #30
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	9300      	str	r3, [sp, #0]
    104e:	000b      	movs	r3, r1
    1050:	0001      	movs	r1, r0
    1052:	0028      	movs	r0, r5
    1054:	4d48      	ldr	r5, [pc, #288]	; (1178 <_usart_set_config+0x2d0>)
    1056:	47a8      	blx	r5
    1058:	0003      	movs	r3, r0
    105a:	7023      	strb	r3, [r4, #0]
			break;
    105c:	e000      	b.n	1060 <_usart_set_config+0x1b8>
			break;
    105e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1060:	231d      	movs	r3, #29
    1062:	18fb      	adds	r3, r7, r3
    1064:	781b      	ldrb	r3, [r3, #0]
    1066:	2b00      	cmp	r3, #0
    1068:	d003      	beq.n	1072 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    106a:	231d      	movs	r3, #29
    106c:	18fb      	adds	r3, r7, r3
    106e:	781b      	ldrb	r3, [r3, #0]
    1070:	e077      	b.n	1162 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1072:	683b      	ldr	r3, [r7, #0]
    1074:	7e5b      	ldrb	r3, [r3, #25]
    1076:	2b00      	cmp	r3, #0
    1078:	d003      	beq.n	1082 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    107a:	683b      	ldr	r3, [r7, #0]
    107c:	7e9a      	ldrb	r2, [r3, #26]
    107e:	69bb      	ldr	r3, [r7, #24]
    1080:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	0018      	movs	r0, r3
    1086:	4b3d      	ldr	r3, [pc, #244]	; (117c <_usart_set_config+0x2d4>)
    1088:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    108a:	230a      	movs	r3, #10
    108c:	18fb      	adds	r3, r7, r3
    108e:	881a      	ldrh	r2, [r3, #0]
    1090:	69bb      	ldr	r3, [r7, #24]
    1092:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	4313      	orrs	r3, r2
    109a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    109c:	683b      	ldr	r3, [r7, #0]
    109e:	2227      	movs	r2, #39	; 0x27
    10a0:	5c9b      	ldrb	r3, [r3, r2]
    10a2:	2201      	movs	r2, #1
    10a4:	4053      	eors	r3, r2
    10a6:	b2db      	uxtb	r3, r3
    10a8:	2b00      	cmp	r3, #0
    10aa:	d003      	beq.n	10b4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    10ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ae:	2204      	movs	r2, #4
    10b0:	4313      	orrs	r3, r2
    10b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    10b4:	683b      	ldr	r3, [r7, #0]
    10b6:	7e5b      	ldrb	r3, [r3, #25]
    10b8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    10ba:	683b      	ldr	r3, [r7, #0]
    10bc:	7f1b      	ldrb	r3, [r3, #28]
    10be:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    10c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10c2:	683b      	ldr	r3, [r7, #0]
    10c4:	7f5b      	ldrb	r3, [r3, #29]
    10c6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    10c8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10ca:	683b      	ldr	r3, [r7, #0]
    10cc:	2124      	movs	r1, #36	; 0x24
    10ce:	5c5b      	ldrb	r3, [r3, r1]
    10d0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10d2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    10d4:	683b      	ldr	r3, [r7, #0]
    10d6:	2125      	movs	r1, #37	; 0x25
    10d8:	5c5b      	ldrb	r3, [r3, r1]
    10da:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10dc:	4313      	orrs	r3, r2
	ctrlb =  
    10de:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    10e0:	683b      	ldr	r3, [r7, #0]
    10e2:	7a9b      	ldrb	r3, [r3, #10]
    10e4:	001a      	movs	r2, r3
    10e6:	6a3b      	ldr	r3, [r7, #32]
    10e8:	4313      	orrs	r3, r2
    10ea:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	7adb      	ldrb	r3, [r3, #11]
    10f0:	001a      	movs	r2, r3
    10f2:	6a3b      	ldr	r3, [r7, #32]
    10f4:	4313      	orrs	r3, r2
    10f6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    10f8:	683b      	ldr	r3, [r7, #0]
    10fa:	891b      	ldrh	r3, [r3, #8]
    10fc:	2bff      	cmp	r3, #255	; 0xff
    10fe:	d00b      	beq.n	1118 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1102:	2280      	movs	r2, #128	; 0x80
    1104:	0452      	lsls	r2, r2, #17
    1106:	4313      	orrs	r3, r2
    1108:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    110a:	683b      	ldr	r3, [r7, #0]
    110c:	891b      	ldrh	r3, [r3, #8]
    110e:	001a      	movs	r2, r3
    1110:	6a3b      	ldr	r3, [r7, #32]
    1112:	4313      	orrs	r3, r2
    1114:	623b      	str	r3, [r7, #32]
    1116:	e008      	b.n	112a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1118:	683b      	ldr	r3, [r7, #0]
    111a:	7edb      	ldrb	r3, [r3, #27]
    111c:	2b00      	cmp	r3, #0
    111e:	d004      	beq.n	112a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1122:	2280      	movs	r2, #128	; 0x80
    1124:	04d2      	lsls	r2, r2, #19
    1126:	4313      	orrs	r3, r2
    1128:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    112a:	683b      	ldr	r3, [r7, #0]
    112c:	222c      	movs	r2, #44	; 0x2c
    112e:	5c9b      	ldrb	r3, [r3, r2]
    1130:	2b00      	cmp	r3, #0
    1132:	d103      	bne.n	113c <_usart_set_config+0x294>
    1134:	4b12      	ldr	r3, [pc, #72]	; (1180 <_usart_set_config+0x2d8>)
    1136:	4798      	blx	r3
    1138:	1e03      	subs	r3, r0, #0
    113a:	d003      	beq.n	1144 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113e:	2280      	movs	r2, #128	; 0x80
    1140:	4313      	orrs	r3, r2
    1142:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	0018      	movs	r0, r3
    1148:	4b0c      	ldr	r3, [pc, #48]	; (117c <_usart_set_config+0x2d4>)
    114a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    114c:	69bb      	ldr	r3, [r7, #24]
    114e:	6a3a      	ldr	r2, [r7, #32]
    1150:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	0018      	movs	r0, r3
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <_usart_set_config+0x2d4>)
    1158:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    115a:	69bb      	ldr	r3, [r7, #24]
    115c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    115e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    1160:	2300      	movs	r3, #0
}
    1162:	0018      	movs	r0, r3
    1164:	46bd      	mov	sp, r7
    1166:	b00a      	add	sp, #40	; 0x28
    1168:	bdb0      	pop	{r4, r5, r7, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00000d59 	.word	0x00000d59
    1170:	000024c5 	.word	0x000024c5
    1174:	000008d3 	.word	0x000008d3
    1178:	00000951 	.word	0x00000951
    117c:	00000e85 	.word	0x00000e85
    1180:	00000e45 	.word	0x00000e45

00001184 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1184:	b590      	push	{r4, r7, lr}
    1186:	b093      	sub	sp, #76	; 0x4c
    1188:	af00      	add	r7, sp, #0
    118a:	60f8      	str	r0, [r7, #12]
    118c:	60b9      	str	r1, [r7, #8]
    118e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1190:	233b      	movs	r3, #59	; 0x3b
    1192:	18fb      	adds	r3, r7, r3
    1194:	2200      	movs	r2, #0
    1196:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1198:	68fb      	ldr	r3, [r7, #12]
    119a:	68ba      	ldr	r2, [r7, #8]
    119c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    119e:	68fb      	ldr	r3, [r7, #12]
    11a0:	681b      	ldr	r3, [r3, #0]
    11a2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11a4:	68fb      	ldr	r3, [r7, #12]
    11a6:	681b      	ldr	r3, [r3, #0]
    11a8:	0018      	movs	r0, r3
    11aa:	4b86      	ldr	r3, [pc, #536]	; (13c4 <usart_init+0x240>)
    11ac:	4798      	blx	r3
    11ae:	0003      	movs	r3, r0
    11b0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11b4:	3302      	adds	r3, #2
    11b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11ba:	3314      	adds	r3, #20
    11bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    11be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	2201      	movs	r2, #1
    11c4:	4013      	ands	r3, r2
    11c6:	d001      	beq.n	11cc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    11c8:	2305      	movs	r3, #5
    11ca:	e0f6      	b.n	13ba <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    11cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	2202      	movs	r2, #2
    11d2:	4013      	ands	r3, r2
    11d4:	d001      	beq.n	11da <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    11d6:	231c      	movs	r3, #28
    11d8:	e0ef      	b.n	13ba <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11da:	2201      	movs	r2, #1
    11dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11de:	409a      	lsls	r2, r3
    11e0:	0013      	movs	r3, r2
    11e2:	0019      	movs	r1, r3
    11e4:	2002      	movs	r0, #2
    11e6:	4b78      	ldr	r3, [pc, #480]	; (13c8 <usart_init+0x244>)
    11e8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    11ea:	2324      	movs	r3, #36	; 0x24
    11ec:	18fb      	adds	r3, r7, r3
    11ee:	0018      	movs	r0, r3
    11f0:	4b76      	ldr	r3, [pc, #472]	; (13cc <usart_init+0x248>)
    11f2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    11f4:	687b      	ldr	r3, [r7, #4]
    11f6:	222d      	movs	r2, #45	; 0x2d
    11f8:	5c9a      	ldrb	r2, [r3, r2]
    11fa:	2324      	movs	r3, #36	; 0x24
    11fc:	18fb      	adds	r3, r7, r3
    11fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1200:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1202:	b2db      	uxtb	r3, r3
    1204:	2224      	movs	r2, #36	; 0x24
    1206:	18ba      	adds	r2, r7, r2
    1208:	0011      	movs	r1, r2
    120a:	0018      	movs	r0, r3
    120c:	4b70      	ldr	r3, [pc, #448]	; (13d0 <usart_init+0x24c>)
    120e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1210:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1212:	b2db      	uxtb	r3, r3
    1214:	0018      	movs	r0, r3
    1216:	4b6f      	ldr	r3, [pc, #444]	; (13d4 <usart_init+0x250>)
    1218:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	222d      	movs	r2, #45	; 0x2d
    121e:	5c9b      	ldrb	r3, [r3, r2]
    1220:	2100      	movs	r1, #0
    1222:	0018      	movs	r0, r3
    1224:	4b6c      	ldr	r3, [pc, #432]	; (13d8 <usart_init+0x254>)
    1226:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	7ada      	ldrb	r2, [r3, #11]
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	2224      	movs	r2, #36	; 0x24
    1234:	5c9a      	ldrb	r2, [r3, r2]
    1236:	68fb      	ldr	r3, [r7, #12]
    1238:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	2225      	movs	r2, #37	; 0x25
    123e:	5c9a      	ldrb	r2, [r3, r2]
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	7eda      	ldrb	r2, [r3, #27]
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    124c:	687b      	ldr	r3, [r7, #4]
    124e:	7f1a      	ldrb	r2, [r3, #28]
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1254:	233b      	movs	r3, #59	; 0x3b
    1256:	18fc      	adds	r4, r7, r3
    1258:	687a      	ldr	r2, [r7, #4]
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	0011      	movs	r1, r2
    125e:	0018      	movs	r0, r3
    1260:	4b5e      	ldr	r3, [pc, #376]	; (13dc <usart_init+0x258>)
    1262:	4798      	blx	r3
    1264:	0003      	movs	r3, r0
    1266:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    1268:	233b      	movs	r3, #59	; 0x3b
    126a:	18fb      	adds	r3, r7, r3
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2b00      	cmp	r3, #0
    1270:	d003      	beq.n	127a <usart_init+0xf6>
		return status_code;
    1272:	233b      	movs	r3, #59	; 0x3b
    1274:	18fb      	adds	r3, r7, r3
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	e09f      	b.n	13ba <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    127a:	2320      	movs	r3, #32
    127c:	18fb      	adds	r3, r7, r3
    127e:	0018      	movs	r0, r3
    1280:	4b57      	ldr	r3, [pc, #348]	; (13e0 <usart_init+0x25c>)
    1282:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1284:	2320      	movs	r3, #32
    1286:	18fb      	adds	r3, r7, r3
    1288:	2200      	movs	r2, #0
    128a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    128c:	2320      	movs	r3, #32
    128e:	18fb      	adds	r3, r7, r3
    1290:	2200      	movs	r2, #0
    1292:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    1298:	2310      	movs	r3, #16
    129a:	18fb      	adds	r3, r7, r3
    129c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    12a2:	2310      	movs	r3, #16
    12a4:	18fb      	adds	r3, r7, r3
    12a6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    12ac:	2310      	movs	r3, #16
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    12b6:	2310      	movs	r3, #16
    12b8:	18fb      	adds	r3, r7, r3
    12ba:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    12bc:	2347      	movs	r3, #71	; 0x47
    12be:	18fb      	adds	r3, r7, r3
    12c0:	2200      	movs	r2, #0
    12c2:	701a      	strb	r2, [r3, #0]
    12c4:	e02c      	b.n	1320 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12c6:	2347      	movs	r3, #71	; 0x47
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	781a      	ldrb	r2, [r3, #0]
    12cc:	2310      	movs	r3, #16
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	0092      	lsls	r2, r2, #2
    12d2:	58d3      	ldr	r3, [r2, r3]
    12d4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    12d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12d8:	2b00      	cmp	r3, #0
    12da:	d109      	bne.n	12f0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12dc:	2347      	movs	r3, #71	; 0x47
    12de:	18fb      	adds	r3, r7, r3
    12e0:	781a      	ldrb	r2, [r3, #0]
    12e2:	68bb      	ldr	r3, [r7, #8]
    12e4:	0011      	movs	r1, r2
    12e6:	0018      	movs	r0, r3
    12e8:	4b3e      	ldr	r3, [pc, #248]	; (13e4 <usart_init+0x260>)
    12ea:	4798      	blx	r3
    12ec:	0003      	movs	r3, r0
    12ee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12f2:	3301      	adds	r3, #1
    12f4:	d00d      	beq.n	1312 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    12f8:	b2da      	uxtb	r2, r3
    12fa:	2320      	movs	r3, #32
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1302:	0c1b      	lsrs	r3, r3, #16
    1304:	b2db      	uxtb	r3, r3
    1306:	2220      	movs	r2, #32
    1308:	18ba      	adds	r2, r7, r2
    130a:	0011      	movs	r1, r2
    130c:	0018      	movs	r0, r3
    130e:	4b36      	ldr	r3, [pc, #216]	; (13e8 <usart_init+0x264>)
    1310:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1312:	2347      	movs	r3, #71	; 0x47
    1314:	18fb      	adds	r3, r7, r3
    1316:	781a      	ldrb	r2, [r3, #0]
    1318:	2347      	movs	r3, #71	; 0x47
    131a:	18fb      	adds	r3, r7, r3
    131c:	3201      	adds	r2, #1
    131e:	701a      	strb	r2, [r3, #0]
    1320:	2347      	movs	r3, #71	; 0x47
    1322:	18fb      	adds	r3, r7, r3
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	2b03      	cmp	r3, #3
    1328:	d9cd      	bls.n	12c6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    132a:	2300      	movs	r3, #0
    132c:	63fb      	str	r3, [r7, #60]	; 0x3c
    132e:	e00a      	b.n	1346 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1330:	68fa      	ldr	r2, [r7, #12]
    1332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1334:	3302      	adds	r3, #2
    1336:	009b      	lsls	r3, r3, #2
    1338:	18d3      	adds	r3, r2, r3
    133a:	3304      	adds	r3, #4
    133c:	2200      	movs	r2, #0
    133e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1342:	3301      	adds	r3, #1
    1344:	63fb      	str	r3, [r7, #60]	; 0x3c
    1346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1348:	2b05      	cmp	r3, #5
    134a:	d9f1      	bls.n	1330 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	2200      	movs	r2, #0
    1350:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	2200      	movs	r2, #0
    1356:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	2200      	movs	r2, #0
    135c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	2200      	movs	r2, #0
    1362:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1364:	68fb      	ldr	r3, [r7, #12]
    1366:	2230      	movs	r2, #48	; 0x30
    1368:	2100      	movs	r1, #0
    136a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    136c:	68fb      	ldr	r3, [r7, #12]
    136e:	2231      	movs	r2, #49	; 0x31
    1370:	2100      	movs	r1, #0
    1372:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	2232      	movs	r2, #50	; 0x32
    1378:	2100      	movs	r1, #0
    137a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	2233      	movs	r2, #51	; 0x33
    1380:	2100      	movs	r1, #0
    1382:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1384:	68fb      	ldr	r3, [r7, #12]
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	2227      	movs	r2, #39	; 0x27
    138a:	18bc      	adds	r4, r7, r2
    138c:	0018      	movs	r0, r3
    138e:	4b0d      	ldr	r3, [pc, #52]	; (13c4 <usart_init+0x240>)
    1390:	4798      	blx	r3
    1392:	0003      	movs	r3, r0
    1394:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1396:	4a15      	ldr	r2, [pc, #84]	; (13ec <usart_init+0x268>)
    1398:	2327      	movs	r3, #39	; 0x27
    139a:	18fb      	adds	r3, r7, r3
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	0011      	movs	r1, r2
    13a0:	0018      	movs	r0, r3
    13a2:	4b13      	ldr	r3, [pc, #76]	; (13f0 <usart_init+0x26c>)
    13a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13a6:	2327      	movs	r3, #39	; 0x27
    13a8:	18fb      	adds	r3, r7, r3
    13aa:	781a      	ldrb	r2, [r3, #0]
    13ac:	4b11      	ldr	r3, [pc, #68]	; (13f4 <usart_init+0x270>)
    13ae:	0092      	lsls	r2, r2, #2
    13b0:	68f9      	ldr	r1, [r7, #12]
    13b2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    13b4:	233b      	movs	r3, #59	; 0x3b
    13b6:	18fb      	adds	r3, r7, r3
    13b8:	781b      	ldrb	r3, [r3, #0]
}
    13ba:	0018      	movs	r0, r3
    13bc:	46bd      	mov	sp, r7
    13be:	b013      	add	sp, #76	; 0x4c
    13c0:	bd90      	pop	{r4, r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	00000d59 	.word	0x00000d59
    13c8:	00000dc1 	.word	0x00000dc1
    13cc:	00000da9 	.word	0x00000da9
    13d0:	000023a1 	.word	0x000023a1
    13d4:	000023e5 	.word	0x000023e5
    13d8:	00000b11 	.word	0x00000b11
    13dc:	00000ea9 	.word	0x00000ea9
    13e0:	00000e1d 	.word	0x00000e1d
    13e4:	00000b9d 	.word	0x00000b9d
    13e8:	0000268d 	.word	0x0000268d
    13ec:	000016fd 	.word	0x000016fd
    13f0:	00001a51 	.word	0x00001a51
    13f4:	20000130 	.word	0x20000130

000013f8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    13f8:	b580      	push	{r7, lr}
    13fa:	b084      	sub	sp, #16
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    1400:	000a      	movs	r2, r1
    1402:	1cbb      	adds	r3, r7, #2
    1404:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1406:	687b      	ldr	r3, [r7, #4]
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	79db      	ldrb	r3, [r3, #7]
    1410:	2201      	movs	r2, #1
    1412:	4053      	eors	r3, r2
    1414:	b2db      	uxtb	r3, r3
    1416:	2b00      	cmp	r3, #0
    1418:	d001      	beq.n	141e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    141a:	231c      	movs	r3, #28
    141c:	e017      	b.n	144e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1422:	b29b      	uxth	r3, r3
    1424:	2b00      	cmp	r3, #0
    1426:	d001      	beq.n	142c <usart_write_wait+0x34>
		return STATUS_BUSY;
    1428:	2305      	movs	r3, #5
    142a:	e010      	b.n	144e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	0018      	movs	r0, r3
    1430:	4b09      	ldr	r3, [pc, #36]	; (1458 <usart_write_wait+0x60>)
    1432:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	1cba      	adds	r2, r7, #2
    1438:	8812      	ldrh	r2, [r2, #0]
    143a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    143c:	46c0      	nop			; (mov r8, r8)
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	7e1b      	ldrb	r3, [r3, #24]
    1442:	b2db      	uxtb	r3, r3
    1444:	001a      	movs	r2, r3
    1446:	2302      	movs	r3, #2
    1448:	4013      	ands	r3, r2
    144a:	d0f8      	beq.n	143e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    144c:	2300      	movs	r3, #0
}
    144e:	0018      	movs	r0, r3
    1450:	46bd      	mov	sp, r7
    1452:	b004      	add	sp, #16
    1454:	bd80      	pop	{r7, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	00000e85 	.word	0x00000e85

0000145c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    145c:	b580      	push	{r7, lr}
    145e:	b08a      	sub	sp, #40	; 0x28
    1460:	af00      	add	r7, sp, #0
    1462:	60f8      	str	r0, [r7, #12]
    1464:	60b9      	str	r1, [r7, #8]
    1466:	1dbb      	adds	r3, r7, #6
    1468:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    146a:	1dbb      	adds	r3, r7, #6
    146c:	881b      	ldrh	r3, [r3, #0]
    146e:	2b00      	cmp	r3, #0
    1470:	d101      	bne.n	1476 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1472:	2317      	movs	r3, #23
    1474:	e07e      	b.n	1574 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	79db      	ldrb	r3, [r3, #7]
    147a:	2201      	movs	r2, #1
    147c:	4053      	eors	r3, r2
    147e:	b2db      	uxtb	r3, r3
    1480:	2b00      	cmp	r3, #0
    1482:	d001      	beq.n	1488 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    1484:	231c      	movs	r3, #28
    1486:	e075      	b.n	1574 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	0018      	movs	r0, r3
    1492:	4b3a      	ldr	r3, [pc, #232]	; (157c <usart_write_buffer_wait+0x120>)
    1494:	4798      	blx	r3

	uint16_t tx_pos = 0;
    1496:	2326      	movs	r3, #38	; 0x26
    1498:	18fb      	adds	r3, r7, r3
    149a:	2200      	movs	r2, #0
    149c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    149e:	e048      	b.n	1532 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    14a0:	2300      	movs	r3, #0
    14a2:	623b      	str	r3, [r7, #32]
    14a4:	e00f      	b.n	14c6 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    14a6:	697b      	ldr	r3, [r7, #20]
    14a8:	7e1b      	ldrb	r3, [r3, #24]
    14aa:	b2db      	uxtb	r3, r3
    14ac:	001a      	movs	r2, r3
    14ae:	2301      	movs	r3, #1
    14b0:	4013      	ands	r3, r2
    14b2:	d10d      	bne.n	14d0 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    14b4:	6a3b      	ldr	r3, [r7, #32]
    14b6:	4a32      	ldr	r2, [pc, #200]	; (1580 <usart_write_buffer_wait+0x124>)
    14b8:	4293      	cmp	r3, r2
    14ba:	d101      	bne.n	14c0 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    14bc:	2312      	movs	r3, #18
    14be:	e059      	b.n	1574 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    14c0:	6a3b      	ldr	r3, [r7, #32]
    14c2:	3301      	adds	r3, #1
    14c4:	623b      	str	r3, [r7, #32]
    14c6:	6a3b      	ldr	r3, [r7, #32]
    14c8:	4a2d      	ldr	r2, [pc, #180]	; (1580 <usart_write_buffer_wait+0x124>)
    14ca:	4293      	cmp	r3, r2
    14cc:	d9eb      	bls.n	14a6 <usart_write_buffer_wait+0x4a>
    14ce:	e000      	b.n	14d2 <usart_write_buffer_wait+0x76>
				break;
    14d0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    14d2:	2326      	movs	r3, #38	; 0x26
    14d4:	18fb      	adds	r3, r7, r3
    14d6:	881b      	ldrh	r3, [r3, #0]
    14d8:	2226      	movs	r2, #38	; 0x26
    14da:	18ba      	adds	r2, r7, r2
    14dc:	1c59      	adds	r1, r3, #1
    14de:	8011      	strh	r1, [r2, #0]
    14e0:	001a      	movs	r2, r3
    14e2:	68bb      	ldr	r3, [r7, #8]
    14e4:	189b      	adds	r3, r3, r2
    14e6:	781a      	ldrb	r2, [r3, #0]
    14e8:	231e      	movs	r3, #30
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    14ee:	68fb      	ldr	r3, [r7, #12]
    14f0:	795b      	ldrb	r3, [r3, #5]
    14f2:	2b01      	cmp	r3, #1
    14f4:	d115      	bne.n	1522 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    14f6:	2326      	movs	r3, #38	; 0x26
    14f8:	18fb      	adds	r3, r7, r3
    14fa:	881b      	ldrh	r3, [r3, #0]
    14fc:	2226      	movs	r2, #38	; 0x26
    14fe:	18ba      	adds	r2, r7, r2
    1500:	1c59      	adds	r1, r3, #1
    1502:	8011      	strh	r1, [r2, #0]
    1504:	001a      	movs	r2, r3
    1506:	68bb      	ldr	r3, [r7, #8]
    1508:	189b      	adds	r3, r3, r2
    150a:	781b      	ldrb	r3, [r3, #0]
    150c:	021b      	lsls	r3, r3, #8
    150e:	b21a      	sxth	r2, r3
    1510:	231e      	movs	r3, #30
    1512:	18fb      	adds	r3, r7, r3
    1514:	2100      	movs	r1, #0
    1516:	5e5b      	ldrsh	r3, [r3, r1]
    1518:	4313      	orrs	r3, r2
    151a:	b21a      	sxth	r2, r3
    151c:	231e      	movs	r3, #30
    151e:	18fb      	adds	r3, r7, r3
    1520:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1522:	231e      	movs	r3, #30
    1524:	18fb      	adds	r3, r7, r3
    1526:	881a      	ldrh	r2, [r3, #0]
    1528:	68fb      	ldr	r3, [r7, #12]
    152a:	0011      	movs	r1, r2
    152c:	0018      	movs	r0, r3
    152e:	4b15      	ldr	r3, [pc, #84]	; (1584 <usart_write_buffer_wait+0x128>)
    1530:	4798      	blx	r3
	while (length--) {
    1532:	1dbb      	adds	r3, r7, #6
    1534:	881b      	ldrh	r3, [r3, #0]
    1536:	1dba      	adds	r2, r7, #6
    1538:	1e59      	subs	r1, r3, #1
    153a:	8011      	strh	r1, [r2, #0]
    153c:	2b00      	cmp	r3, #0
    153e:	d1af      	bne.n	14a0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1540:	2300      	movs	r3, #0
    1542:	61bb      	str	r3, [r7, #24]
    1544:	e00f      	b.n	1566 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1546:	697b      	ldr	r3, [r7, #20]
    1548:	7e1b      	ldrb	r3, [r3, #24]
    154a:	b2db      	uxtb	r3, r3
    154c:	001a      	movs	r2, r3
    154e:	2302      	movs	r3, #2
    1550:	4013      	ands	r3, r2
    1552:	d10d      	bne.n	1570 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    1554:	69bb      	ldr	r3, [r7, #24]
    1556:	4a0a      	ldr	r2, [pc, #40]	; (1580 <usart_write_buffer_wait+0x124>)
    1558:	4293      	cmp	r3, r2
    155a:	d101      	bne.n	1560 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    155c:	2312      	movs	r3, #18
    155e:	e009      	b.n	1574 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1560:	69bb      	ldr	r3, [r7, #24]
    1562:	3301      	adds	r3, #1
    1564:	61bb      	str	r3, [r7, #24]
    1566:	69bb      	ldr	r3, [r7, #24]
    1568:	4a05      	ldr	r2, [pc, #20]	; (1580 <usart_write_buffer_wait+0x124>)
    156a:	4293      	cmp	r3, r2
    156c:	d9eb      	bls.n	1546 <usart_write_buffer_wait+0xea>
    156e:	e000      	b.n	1572 <usart_write_buffer_wait+0x116>
			break;
    1570:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    1572:	2300      	movs	r3, #0
}
    1574:	0018      	movs	r0, r3
    1576:	46bd      	mov	sp, r7
    1578:	b00a      	add	sp, #40	; 0x28
    157a:	bd80      	pop	{r7, pc}
    157c:	00000e85 	.word	0x00000e85
    1580:	0000ffff 	.word	0x0000ffff
    1584:	000013f9 	.word	0x000013f9

00001588 <system_interrupt_enter_critical_section>:
{
    1588:	b580      	push	{r7, lr}
    158a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    158c:	4b02      	ldr	r3, [pc, #8]	; (1598 <system_interrupt_enter_critical_section+0x10>)
    158e:	4798      	blx	r3
}
    1590:	46c0      	nop			; (mov r8, r8)
    1592:	46bd      	mov	sp, r7
    1594:	bd80      	pop	{r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	00001b9d 	.word	0x00001b9d

0000159c <system_interrupt_leave_critical_section>:
{
    159c:	b580      	push	{r7, lr}
    159e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    15a0:	4b02      	ldr	r3, [pc, #8]	; (15ac <system_interrupt_leave_critical_section+0x10>)
    15a2:	4798      	blx	r3
}
    15a4:	46c0      	nop			; (mov r8, r8)
    15a6:	46bd      	mov	sp, r7
    15a8:	bd80      	pop	{r7, pc}
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	00001bf1 	.word	0x00001bf1

000015b0 <usart_is_syncing>:
{
    15b0:	b580      	push	{r7, lr}
    15b2:	b084      	sub	sp, #16
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    15be:	68fb      	ldr	r3, [r7, #12]
    15c0:	69db      	ldr	r3, [r3, #28]
    15c2:	1e5a      	subs	r2, r3, #1
    15c4:	4193      	sbcs	r3, r2
    15c6:	b2db      	uxtb	r3, r3
}
    15c8:	0018      	movs	r0, r3
    15ca:	46bd      	mov	sp, r7
    15cc:	b004      	add	sp, #16
    15ce:	bd80      	pop	{r7, pc}

000015d0 <_usart_wait_for_sync>:
{
    15d0:	b580      	push	{r7, lr}
    15d2:	b082      	sub	sp, #8
    15d4:	af00      	add	r7, sp, #0
    15d6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    15d8:	46c0      	nop			; (mov r8, r8)
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	0018      	movs	r0, r3
    15de:	4b04      	ldr	r3, [pc, #16]	; (15f0 <_usart_wait_for_sync+0x20>)
    15e0:	4798      	blx	r3
    15e2:	1e03      	subs	r3, r0, #0
    15e4:	d1f9      	bne.n	15da <_usart_wait_for_sync+0xa>
}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	46bd      	mov	sp, r7
    15ea:	b002      	add	sp, #8
    15ec:	bd80      	pop	{r7, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	000015b1 	.word	0x000015b1

000015f4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	b086      	sub	sp, #24
    15f8:	af00      	add	r7, sp, #0
    15fa:	60f8      	str	r0, [r7, #12]
    15fc:	60b9      	str	r1, [r7, #8]
    15fe:	1dbb      	adds	r3, r7, #6
    1600:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	681b      	ldr	r3, [r3, #0]
    1606:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    1608:	4b16      	ldr	r3, [pc, #88]	; (1664 <_usart_read_buffer+0x70>)
    160a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1610:	b29b      	uxth	r3, r3
    1612:	2b00      	cmp	r3, #0
    1614:	d003      	beq.n	161e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    1616:	4b14      	ldr	r3, [pc, #80]	; (1668 <_usart_read_buffer+0x74>)
    1618:	4798      	blx	r3
		return STATUS_BUSY;
    161a:	2305      	movs	r3, #5
    161c:	e01e      	b.n	165c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	1dba      	adds	r2, r7, #6
    1622:	8812      	ldrh	r2, [r2, #0]
    1624:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    1626:	4b10      	ldr	r3, [pc, #64]	; (1668 <_usart_read_buffer+0x74>)
    1628:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	68ba      	ldr	r2, [r7, #8]
    162e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	2232      	movs	r2, #50	; 0x32
    1634:	2105      	movs	r1, #5
    1636:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1638:	697b      	ldr	r3, [r7, #20]
    163a:	2204      	movs	r2, #4
    163c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	7a1b      	ldrb	r3, [r3, #8]
    1642:	2b00      	cmp	r3, #0
    1644:	d002      	beq.n	164c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1646:	697b      	ldr	r3, [r7, #20]
    1648:	2220      	movs	r2, #32
    164a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    164c:	68fb      	ldr	r3, [r7, #12]
    164e:	7a5b      	ldrb	r3, [r3, #9]
    1650:	2b00      	cmp	r3, #0
    1652:	d002      	beq.n	165a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1654:	697b      	ldr	r3, [r7, #20]
    1656:	2208      	movs	r2, #8
    1658:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    165a:	2300      	movs	r3, #0
}
    165c:	0018      	movs	r0, r3
    165e:	46bd      	mov	sp, r7
    1660:	b006      	add	sp, #24
    1662:	bd80      	pop	{r7, pc}
    1664:	00001589 	.word	0x00001589
    1668:	0000159d 	.word	0x0000159d

0000166c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    166c:	b580      	push	{r7, lr}
    166e:	b084      	sub	sp, #16
    1670:	af00      	add	r7, sp, #0
    1672:	60f8      	str	r0, [r7, #12]
    1674:	60b9      	str	r1, [r7, #8]
    1676:	1dfb      	adds	r3, r7, #7
    1678:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    167a:	1dfb      	adds	r3, r7, #7
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	68fa      	ldr	r2, [r7, #12]
    1680:	3302      	adds	r3, #2
    1682:	009b      	lsls	r3, r3, #2
    1684:	18d3      	adds	r3, r2, r3
    1686:	3304      	adds	r3, #4
    1688:	68ba      	ldr	r2, [r7, #8]
    168a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    168c:	68fb      	ldr	r3, [r7, #12]
    168e:	2230      	movs	r2, #48	; 0x30
    1690:	5c9b      	ldrb	r3, [r3, r2]
    1692:	b25a      	sxtb	r2, r3
    1694:	1dfb      	adds	r3, r7, #7
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	2101      	movs	r1, #1
    169a:	4099      	lsls	r1, r3
    169c:	000b      	movs	r3, r1
    169e:	b25b      	sxtb	r3, r3
    16a0:	4313      	orrs	r3, r2
    16a2:	b25b      	sxtb	r3, r3
    16a4:	b2d9      	uxtb	r1, r3
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	2230      	movs	r2, #48	; 0x30
    16aa:	5499      	strb	r1, [r3, r2]
}
    16ac:	46c0      	nop			; (mov r8, r8)
    16ae:	46bd      	mov	sp, r7
    16b0:	b004      	add	sp, #16
    16b2:	bd80      	pop	{r7, pc}

000016b4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16b4:	b580      	push	{r7, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	af00      	add	r7, sp, #0
    16ba:	60f8      	str	r0, [r7, #12]
    16bc:	60b9      	str	r1, [r7, #8]
    16be:	1dbb      	adds	r3, r7, #6
    16c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    16c2:	1dbb      	adds	r3, r7, #6
    16c4:	881b      	ldrh	r3, [r3, #0]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d101      	bne.n	16ce <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    16ca:	2317      	movs	r3, #23
    16cc:	e010      	b.n	16f0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16ce:	68fb      	ldr	r3, [r7, #12]
    16d0:	799b      	ldrb	r3, [r3, #6]
    16d2:	2201      	movs	r2, #1
    16d4:	4053      	eors	r3, r2
    16d6:	b2db      	uxtb	r3, r3
    16d8:	2b00      	cmp	r3, #0
    16da:	d001      	beq.n	16e0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    16dc:	231c      	movs	r3, #28
    16de:	e007      	b.n	16f0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    16e0:	1dbb      	adds	r3, r7, #6
    16e2:	881a      	ldrh	r2, [r3, #0]
    16e4:	68b9      	ldr	r1, [r7, #8]
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	0018      	movs	r0, r3
    16ea:	4b03      	ldr	r3, [pc, #12]	; (16f8 <usart_read_buffer_job+0x44>)
    16ec:	4798      	blx	r3
    16ee:	0003      	movs	r3, r0
}
    16f0:	0018      	movs	r0, r3
    16f2:	46bd      	mov	sp, r7
    16f4:	b004      	add	sp, #16
    16f6:	bd80      	pop	{r7, pc}
    16f8:	000015f5 	.word	0x000015f5

000016fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    16fc:	b580      	push	{r7, lr}
    16fe:	b088      	sub	sp, #32
    1700:	af00      	add	r7, sp, #0
    1702:	0002      	movs	r2, r0
    1704:	1dfb      	adds	r3, r7, #7
    1706:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1708:	1dfb      	adds	r3, r7, #7
    170a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    170c:	4ba3      	ldr	r3, [pc, #652]	; (199c <_usart_interrupt_handler+0x2a0>)
    170e:	0092      	lsls	r2, r2, #2
    1710:	58d3      	ldr	r3, [r2, r3]
    1712:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1714:	69bb      	ldr	r3, [r7, #24]
    1716:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    1718:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    171a:	69bb      	ldr	r3, [r7, #24]
    171c:	0018      	movs	r0, r3
    171e:	4ba0      	ldr	r3, [pc, #640]	; (19a0 <_usart_interrupt_handler+0x2a4>)
    1720:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1722:	697b      	ldr	r3, [r7, #20]
    1724:	7e1b      	ldrb	r3, [r3, #24]
    1726:	b2da      	uxtb	r2, r3
    1728:	2312      	movs	r3, #18
    172a:	18fb      	adds	r3, r7, r3
    172c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	7d9b      	ldrb	r3, [r3, #22]
    1732:	b2db      	uxtb	r3, r3
    1734:	b29a      	uxth	r2, r3
    1736:	2312      	movs	r3, #18
    1738:	18fb      	adds	r3, r7, r3
    173a:	2112      	movs	r1, #18
    173c:	1879      	adds	r1, r7, r1
    173e:	8809      	ldrh	r1, [r1, #0]
    1740:	400a      	ands	r2, r1
    1742:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1744:	69bb      	ldr	r3, [r7, #24]
    1746:	2230      	movs	r2, #48	; 0x30
    1748:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    174a:	69ba      	ldr	r2, [r7, #24]
    174c:	2131      	movs	r1, #49	; 0x31
    174e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    1750:	4013      	ands	r3, r2
    1752:	b2da      	uxtb	r2, r3
    1754:	2310      	movs	r3, #16
    1756:	18fb      	adds	r3, r7, r3
    1758:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    175a:	2312      	movs	r3, #18
    175c:	18fb      	adds	r3, r7, r3
    175e:	881b      	ldrh	r3, [r3, #0]
    1760:	2201      	movs	r2, #1
    1762:	4013      	ands	r3, r2
    1764:	d044      	beq.n	17f0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1766:	69bb      	ldr	r3, [r7, #24]
    1768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    176a:	b29b      	uxth	r3, r3
    176c:	2b00      	cmp	r3, #0
    176e:	d03c      	beq.n	17ea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1770:	69bb      	ldr	r3, [r7, #24]
    1772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	b2da      	uxtb	r2, r3
    1778:	231c      	movs	r3, #28
    177a:	18fb      	adds	r3, r7, r3
    177c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    177e:	69bb      	ldr	r3, [r7, #24]
    1780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1782:	1c5a      	adds	r2, r3, #1
    1784:	69bb      	ldr	r3, [r7, #24]
    1786:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1788:	69bb      	ldr	r3, [r7, #24]
    178a:	795b      	ldrb	r3, [r3, #5]
    178c:	2b01      	cmp	r3, #1
    178e:	d113      	bne.n	17b8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1790:	69bb      	ldr	r3, [r7, #24]
    1792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	b2db      	uxtb	r3, r3
    1798:	021b      	lsls	r3, r3, #8
    179a:	b21a      	sxth	r2, r3
    179c:	231c      	movs	r3, #28
    179e:	18fb      	adds	r3, r7, r3
    17a0:	2100      	movs	r1, #0
    17a2:	5e5b      	ldrsh	r3, [r3, r1]
    17a4:	4313      	orrs	r3, r2
    17a6:	b21a      	sxth	r2, r3
    17a8:	231c      	movs	r3, #28
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17b2:	1c5a      	adds	r2, r3, #1
    17b4:	69bb      	ldr	r3, [r7, #24]
    17b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    17b8:	231c      	movs	r3, #28
    17ba:	18fb      	adds	r3, r7, r3
    17bc:	881b      	ldrh	r3, [r3, #0]
    17be:	05db      	lsls	r3, r3, #23
    17c0:	0ddb      	lsrs	r3, r3, #23
    17c2:	b29a      	uxth	r2, r3
    17c4:	697b      	ldr	r3, [r7, #20]
    17c6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    17c8:	69bb      	ldr	r3, [r7, #24]
    17ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    17cc:	b29b      	uxth	r3, r3
    17ce:	3b01      	subs	r3, #1
    17d0:	b29b      	uxth	r3, r3
    17d2:	69ba      	ldr	r2, [r7, #24]
    17d4:	1c19      	adds	r1, r3, #0
    17d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    17d8:	2b00      	cmp	r3, #0
    17da:	d109      	bne.n	17f0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17dc:	697b      	ldr	r3, [r7, #20]
    17de:	2201      	movs	r2, #1
    17e0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    17e2:	697b      	ldr	r3, [r7, #20]
    17e4:	2202      	movs	r2, #2
    17e6:	759a      	strb	r2, [r3, #22]
    17e8:	e002      	b.n	17f0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	2201      	movs	r2, #1
    17ee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    17f0:	2312      	movs	r3, #18
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	881b      	ldrh	r3, [r3, #0]
    17f6:	2202      	movs	r2, #2
    17f8:	4013      	ands	r3, r2
    17fa:	d011      	beq.n	1820 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    17fc:	697b      	ldr	r3, [r7, #20]
    17fe:	2202      	movs	r2, #2
    1800:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1802:	69bb      	ldr	r3, [r7, #24]
    1804:	2233      	movs	r2, #51	; 0x33
    1806:	2100      	movs	r1, #0
    1808:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    180a:	2310      	movs	r3, #16
    180c:	18fb      	adds	r3, r7, r3
    180e:	881b      	ldrh	r3, [r3, #0]
    1810:	2201      	movs	r2, #1
    1812:	4013      	ands	r3, r2
    1814:	d004      	beq.n	1820 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1816:	69bb      	ldr	r3, [r7, #24]
    1818:	68db      	ldr	r3, [r3, #12]
    181a:	69ba      	ldr	r2, [r7, #24]
    181c:	0010      	movs	r0, r2
    181e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1820:	2312      	movs	r3, #18
    1822:	18fb      	adds	r3, r7, r3
    1824:	881b      	ldrh	r3, [r3, #0]
    1826:	2204      	movs	r2, #4
    1828:	4013      	ands	r3, r2
    182a:	d100      	bne.n	182e <_usart_interrupt_handler+0x132>
    182c:	e0bd      	b.n	19aa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    182e:	69bb      	ldr	r3, [r7, #24]
    1830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1832:	b29b      	uxth	r3, r3
    1834:	2b00      	cmp	r3, #0
    1836:	d100      	bne.n	183a <_usart_interrupt_handler+0x13e>
    1838:	e0b4      	b.n	19a4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    183a:	697b      	ldr	r3, [r7, #20]
    183c:	8b5b      	ldrh	r3, [r3, #26]
    183e:	b29b      	uxth	r3, r3
    1840:	b2da      	uxtb	r2, r3
    1842:	231f      	movs	r3, #31
    1844:	18fb      	adds	r3, r7, r3
    1846:	213f      	movs	r1, #63	; 0x3f
    1848:	400a      	ands	r2, r1
    184a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    184c:	231f      	movs	r3, #31
    184e:	18fb      	adds	r3, r7, r3
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	2208      	movs	r2, #8
    1854:	4013      	ands	r3, r2
    1856:	d007      	beq.n	1868 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1858:	231f      	movs	r3, #31
    185a:	18fb      	adds	r3, r7, r3
    185c:	221f      	movs	r2, #31
    185e:	18ba      	adds	r2, r7, r2
    1860:	7812      	ldrb	r2, [r2, #0]
    1862:	2108      	movs	r1, #8
    1864:	438a      	bics	r2, r1
    1866:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1868:	231f      	movs	r3, #31
    186a:	18fb      	adds	r3, r7, r3
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	2b00      	cmp	r3, #0
    1870:	d050      	beq.n	1914 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1872:	231f      	movs	r3, #31
    1874:	18fb      	adds	r3, r7, r3
    1876:	781b      	ldrb	r3, [r3, #0]
    1878:	2202      	movs	r2, #2
    187a:	4013      	ands	r3, r2
    187c:	d007      	beq.n	188e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    187e:	69bb      	ldr	r3, [r7, #24]
    1880:	2232      	movs	r2, #50	; 0x32
    1882:	211a      	movs	r1, #26
    1884:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1886:	697b      	ldr	r3, [r7, #20]
    1888:	2202      	movs	r2, #2
    188a:	835a      	strh	r2, [r3, #26]
    188c:	e036      	b.n	18fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    188e:	231f      	movs	r3, #31
    1890:	18fb      	adds	r3, r7, r3
    1892:	781b      	ldrb	r3, [r3, #0]
    1894:	2204      	movs	r2, #4
    1896:	4013      	ands	r3, r2
    1898:	d007      	beq.n	18aa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    189a:	69bb      	ldr	r3, [r7, #24]
    189c:	2232      	movs	r2, #50	; 0x32
    189e:	211e      	movs	r1, #30
    18a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    18a2:	697b      	ldr	r3, [r7, #20]
    18a4:	2204      	movs	r2, #4
    18a6:	835a      	strh	r2, [r3, #26]
    18a8:	e028      	b.n	18fc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    18aa:	231f      	movs	r3, #31
    18ac:	18fb      	adds	r3, r7, r3
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2201      	movs	r2, #1
    18b2:	4013      	ands	r3, r2
    18b4:	d007      	beq.n	18c6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    18b6:	69bb      	ldr	r3, [r7, #24]
    18b8:	2232      	movs	r2, #50	; 0x32
    18ba:	2113      	movs	r1, #19
    18bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    18be:	697b      	ldr	r3, [r7, #20]
    18c0:	2201      	movs	r2, #1
    18c2:	835a      	strh	r2, [r3, #26]
    18c4:	e01a      	b.n	18fc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    18c6:	231f      	movs	r3, #31
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	2210      	movs	r2, #16
    18ce:	4013      	ands	r3, r2
    18d0:	d007      	beq.n	18e2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    18d2:	69bb      	ldr	r3, [r7, #24]
    18d4:	2232      	movs	r2, #50	; 0x32
    18d6:	2142      	movs	r1, #66	; 0x42
    18d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    18da:	697b      	ldr	r3, [r7, #20]
    18dc:	2210      	movs	r2, #16
    18de:	835a      	strh	r2, [r3, #26]
    18e0:	e00c      	b.n	18fc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    18e2:	231f      	movs	r3, #31
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	781b      	ldrb	r3, [r3, #0]
    18e8:	2220      	movs	r2, #32
    18ea:	4013      	ands	r3, r2
    18ec:	d006      	beq.n	18fc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    18ee:	69bb      	ldr	r3, [r7, #24]
    18f0:	2232      	movs	r2, #50	; 0x32
    18f2:	2141      	movs	r1, #65	; 0x41
    18f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    18f6:	697b      	ldr	r3, [r7, #20]
    18f8:	2220      	movs	r2, #32
    18fa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    18fc:	2310      	movs	r3, #16
    18fe:	18fb      	adds	r3, r7, r3
    1900:	881b      	ldrh	r3, [r3, #0]
    1902:	2204      	movs	r2, #4
    1904:	4013      	ands	r3, r2
				if (callback_status
    1906:	d050      	beq.n	19aa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1908:	69bb      	ldr	r3, [r7, #24]
    190a:	695b      	ldr	r3, [r3, #20]
    190c:	69ba      	ldr	r2, [r7, #24]
    190e:	0010      	movs	r0, r2
    1910:	4798      	blx	r3
    1912:	e04a      	b.n	19aa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1914:	697b      	ldr	r3, [r7, #20]
    1916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1918:	b29a      	uxth	r2, r3
    191a:	230e      	movs	r3, #14
    191c:	18fb      	adds	r3, r7, r3
    191e:	05d2      	lsls	r2, r2, #23
    1920:	0dd2      	lsrs	r2, r2, #23
    1922:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1924:	69bb      	ldr	r3, [r7, #24]
    1926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1928:	220e      	movs	r2, #14
    192a:	18ba      	adds	r2, r7, r2
    192c:	8812      	ldrh	r2, [r2, #0]
    192e:	b2d2      	uxtb	r2, r2
    1930:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1932:	69bb      	ldr	r3, [r7, #24]
    1934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1936:	1c5a      	adds	r2, r3, #1
    1938:	69bb      	ldr	r3, [r7, #24]
    193a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    193c:	69bb      	ldr	r3, [r7, #24]
    193e:	795b      	ldrb	r3, [r3, #5]
    1940:	2b01      	cmp	r3, #1
    1942:	d10d      	bne.n	1960 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1944:	69bb      	ldr	r3, [r7, #24]
    1946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1948:	220e      	movs	r2, #14
    194a:	18ba      	adds	r2, r7, r2
    194c:	8812      	ldrh	r2, [r2, #0]
    194e:	0a12      	lsrs	r2, r2, #8
    1950:	b292      	uxth	r2, r2
    1952:	b2d2      	uxtb	r2, r2
    1954:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1956:	69bb      	ldr	r3, [r7, #24]
    1958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    195a:	1c5a      	adds	r2, r3, #1
    195c:	69bb      	ldr	r3, [r7, #24]
    195e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1960:	69bb      	ldr	r3, [r7, #24]
    1962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1964:	b29b      	uxth	r3, r3
    1966:	3b01      	subs	r3, #1
    1968:	b29b      	uxth	r3, r3
    196a:	69ba      	ldr	r2, [r7, #24]
    196c:	1c19      	adds	r1, r3, #0
    196e:	8591      	strh	r1, [r2, #44]	; 0x2c
    1970:	2b00      	cmp	r3, #0
    1972:	d11a      	bne.n	19aa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1974:	697b      	ldr	r3, [r7, #20]
    1976:	2204      	movs	r2, #4
    1978:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    197a:	69bb      	ldr	r3, [r7, #24]
    197c:	2232      	movs	r2, #50	; 0x32
    197e:	2100      	movs	r1, #0
    1980:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1982:	2310      	movs	r3, #16
    1984:	18fb      	adds	r3, r7, r3
    1986:	881b      	ldrh	r3, [r3, #0]
    1988:	2202      	movs	r2, #2
    198a:	4013      	ands	r3, r2
					if (callback_status
    198c:	d00d      	beq.n	19aa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    198e:	69bb      	ldr	r3, [r7, #24]
    1990:	691b      	ldr	r3, [r3, #16]
    1992:	69ba      	ldr	r2, [r7, #24]
    1994:	0010      	movs	r0, r2
    1996:	4798      	blx	r3
    1998:	e007      	b.n	19aa <_usart_interrupt_handler+0x2ae>
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	20000130 	.word	0x20000130
    19a0:	000015d1 	.word	0x000015d1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19a4:	697b      	ldr	r3, [r7, #20]
    19a6:	2204      	movs	r2, #4
    19a8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19aa:	2312      	movs	r3, #18
    19ac:	18fb      	adds	r3, r7, r3
    19ae:	881b      	ldrh	r3, [r3, #0]
    19b0:	2210      	movs	r2, #16
    19b2:	4013      	ands	r3, r2
    19b4:	d010      	beq.n	19d8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19b6:	697b      	ldr	r3, [r7, #20]
    19b8:	2210      	movs	r2, #16
    19ba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19bc:	697b      	ldr	r3, [r7, #20]
    19be:	2210      	movs	r2, #16
    19c0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19c2:	2310      	movs	r3, #16
    19c4:	18fb      	adds	r3, r7, r3
    19c6:	881b      	ldrh	r3, [r3, #0]
    19c8:	2210      	movs	r2, #16
    19ca:	4013      	ands	r3, r2
    19cc:	d004      	beq.n	19d8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    19ce:	69bb      	ldr	r3, [r7, #24]
    19d0:	69db      	ldr	r3, [r3, #28]
    19d2:	69ba      	ldr	r2, [r7, #24]
    19d4:	0010      	movs	r0, r2
    19d6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19d8:	2312      	movs	r3, #18
    19da:	18fb      	adds	r3, r7, r3
    19dc:	881b      	ldrh	r3, [r3, #0]
    19de:	2220      	movs	r2, #32
    19e0:	4013      	ands	r3, r2
    19e2:	d010      	beq.n	1a06 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19e4:	697b      	ldr	r3, [r7, #20]
    19e6:	2220      	movs	r2, #32
    19e8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19ea:	697b      	ldr	r3, [r7, #20]
    19ec:	2220      	movs	r2, #32
    19ee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19f0:	2310      	movs	r3, #16
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	881b      	ldrh	r3, [r3, #0]
    19f6:	2208      	movs	r2, #8
    19f8:	4013      	ands	r3, r2
    19fa:	d004      	beq.n	1a06 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    19fc:	69bb      	ldr	r3, [r7, #24]
    19fe:	699b      	ldr	r3, [r3, #24]
    1a00:	69ba      	ldr	r2, [r7, #24]
    1a02:	0010      	movs	r0, r2
    1a04:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a06:	2312      	movs	r3, #18
    1a08:	18fb      	adds	r3, r7, r3
    1a0a:	881b      	ldrh	r3, [r3, #0]
    1a0c:	2208      	movs	r2, #8
    1a0e:	4013      	ands	r3, r2
    1a10:	d010      	beq.n	1a34 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a12:	697b      	ldr	r3, [r7, #20]
    1a14:	2208      	movs	r2, #8
    1a16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a18:	697b      	ldr	r3, [r7, #20]
    1a1a:	2208      	movs	r2, #8
    1a1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a1e:	2310      	movs	r3, #16
    1a20:	18fb      	adds	r3, r7, r3
    1a22:	881b      	ldrh	r3, [r3, #0]
    1a24:	2220      	movs	r2, #32
    1a26:	4013      	ands	r3, r2
    1a28:	d004      	beq.n	1a34 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a2a:	69bb      	ldr	r3, [r7, #24]
    1a2c:	6a1b      	ldr	r3, [r3, #32]
    1a2e:	69ba      	ldr	r2, [r7, #24]
    1a30:	0010      	movs	r0, r2
    1a32:	4798      	blx	r3
		}
	}
#endif
}
    1a34:	46c0      	nop			; (mov r8, r8)
    1a36:	46bd      	mov	sp, r7
    1a38:	b008      	add	sp, #32
    1a3a:	bd80      	pop	{r7, pc}

00001a3c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	0002      	movs	r2, r0
    1a44:	1dfb      	adds	r3, r7, #7
    1a46:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46bd      	mov	sp, r7
    1a4c:	b002      	add	sp, #8
    1a4e:	bd80      	pop	{r7, pc}

00001a50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	b084      	sub	sp, #16
    1a54:	af00      	add	r7, sp, #0
    1a56:	0002      	movs	r2, r0
    1a58:	6039      	str	r1, [r7, #0]
    1a5a:	1dfb      	adds	r3, r7, #7
    1a5c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1a5e:	4b13      	ldr	r3, [pc, #76]	; (1aac <_sercom_set_handler+0x5c>)
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2201      	movs	r2, #1
    1a64:	4053      	eors	r3, r2
    1a66:	b2db      	uxtb	r3, r3
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d015      	beq.n	1a98 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a6c:	2300      	movs	r3, #0
    1a6e:	60fb      	str	r3, [r7, #12]
    1a70:	e00c      	b.n	1a8c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a72:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <_sercom_set_handler+0x60>)
    1a74:	68fa      	ldr	r2, [r7, #12]
    1a76:	0092      	lsls	r2, r2, #2
    1a78:	490e      	ldr	r1, [pc, #56]	; (1ab4 <_sercom_set_handler+0x64>)
    1a7a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1a7c:	4b0e      	ldr	r3, [pc, #56]	; (1ab8 <_sercom_set_handler+0x68>)
    1a7e:	68fa      	ldr	r2, [r7, #12]
    1a80:	0092      	lsls	r2, r2, #2
    1a82:	2100      	movs	r1, #0
    1a84:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a86:	68fb      	ldr	r3, [r7, #12]
    1a88:	3301      	adds	r3, #1
    1a8a:	60fb      	str	r3, [r7, #12]
    1a8c:	68fb      	ldr	r3, [r7, #12]
    1a8e:	2b05      	cmp	r3, #5
    1a90:	d9ef      	bls.n	1a72 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    1a92:	4b06      	ldr	r3, [pc, #24]	; (1aac <_sercom_set_handler+0x5c>)
    1a94:	2201      	movs	r2, #1
    1a96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1a98:	1dfb      	adds	r3, r7, #7
    1a9a:	781a      	ldrb	r2, [r3, #0]
    1a9c:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <_sercom_set_handler+0x60>)
    1a9e:	0092      	lsls	r2, r2, #2
    1aa0:	6839      	ldr	r1, [r7, #0]
    1aa2:	50d1      	str	r1, [r2, r3]
}
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b004      	add	sp, #16
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	200000f6 	.word	0x200000f6
    1ab0:	200000f8 	.word	0x200000f8
    1ab4:	00001a3d 	.word	0x00001a3d
    1ab8:	20000130 	.word	0x20000130

00001abc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1abc:	b590      	push	{r4, r7, lr}
    1abe:	b085      	sub	sp, #20
    1ac0:	af00      	add	r7, sp, #0
    1ac2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1ac4:	2308      	movs	r3, #8
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	4a0b      	ldr	r2, [pc, #44]	; (1af8 <_sercom_get_interrupt_vector+0x3c>)
    1aca:	6811      	ldr	r1, [r2, #0]
    1acc:	6019      	str	r1, [r3, #0]
    1ace:	8892      	ldrh	r2, [r2, #4]
    1ad0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ad2:	230f      	movs	r3, #15
    1ad4:	18fc      	adds	r4, r7, r3
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	0018      	movs	r0, r3
    1ada:	4b08      	ldr	r3, [pc, #32]	; (1afc <_sercom_get_interrupt_vector+0x40>)
    1adc:	4798      	blx	r3
    1ade:	0003      	movs	r3, r0
    1ae0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ae2:	230f      	movs	r3, #15
    1ae4:	18fb      	adds	r3, r7, r3
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	2208      	movs	r2, #8
    1aea:	18ba      	adds	r2, r7, r2
    1aec:	5cd3      	ldrb	r3, [r2, r3]
    1aee:	b25b      	sxtb	r3, r3
}
    1af0:	0018      	movs	r0, r3
    1af2:	46bd      	mov	sp, r7
    1af4:	b005      	add	sp, #20
    1af6:	bd90      	pop	{r4, r7, pc}
    1af8:	00002de0 	.word	0x00002de0
    1afc:	00000d59 	.word	0x00000d59

00001b00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1b00:	b580      	push	{r7, lr}
    1b02:	af00      	add	r7, sp, #0
    1b04:	4b03      	ldr	r3, [pc, #12]	; (1b14 <SERCOM0_Handler+0x14>)
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	2000      	movs	r0, #0
    1b0a:	4798      	blx	r3
    1b0c:	46c0      	nop			; (mov r8, r8)
    1b0e:	46bd      	mov	sp, r7
    1b10:	bd80      	pop	{r7, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	200000f8 	.word	0x200000f8

00001b18 <SERCOM1_Handler>:
    1b18:	b580      	push	{r7, lr}
    1b1a:	af00      	add	r7, sp, #0
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <SERCOM1_Handler+0x14>)
    1b1e:	685b      	ldr	r3, [r3, #4]
    1b20:	2001      	movs	r0, #1
    1b22:	4798      	blx	r3
    1b24:	46c0      	nop			; (mov r8, r8)
    1b26:	46bd      	mov	sp, r7
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	200000f8 	.word	0x200000f8

00001b30 <SERCOM2_Handler>:
    1b30:	b580      	push	{r7, lr}
    1b32:	af00      	add	r7, sp, #0
    1b34:	4b03      	ldr	r3, [pc, #12]	; (1b44 <SERCOM2_Handler+0x14>)
    1b36:	689b      	ldr	r3, [r3, #8]
    1b38:	2002      	movs	r0, #2
    1b3a:	4798      	blx	r3
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	bd80      	pop	{r7, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	200000f8 	.word	0x200000f8

00001b48 <SERCOM3_Handler>:
    1b48:	b580      	push	{r7, lr}
    1b4a:	af00      	add	r7, sp, #0
    1b4c:	4b03      	ldr	r3, [pc, #12]	; (1b5c <SERCOM3_Handler+0x14>)
    1b4e:	68db      	ldr	r3, [r3, #12]
    1b50:	2003      	movs	r0, #3
    1b52:	4798      	blx	r3
    1b54:	46c0      	nop			; (mov r8, r8)
    1b56:	46bd      	mov	sp, r7
    1b58:	bd80      	pop	{r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	200000f8 	.word	0x200000f8

00001b60 <SERCOM4_Handler>:
    1b60:	b580      	push	{r7, lr}
    1b62:	af00      	add	r7, sp, #0
    1b64:	4b03      	ldr	r3, [pc, #12]	; (1b74 <SERCOM4_Handler+0x14>)
    1b66:	691b      	ldr	r3, [r3, #16]
    1b68:	2004      	movs	r0, #4
    1b6a:	4798      	blx	r3
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	46bd      	mov	sp, r7
    1b70:	bd80      	pop	{r7, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	200000f8 	.word	0x200000f8

00001b78 <SERCOM5_Handler>:
    1b78:	b580      	push	{r7, lr}
    1b7a:	af00      	add	r7, sp, #0
    1b7c:	4b03      	ldr	r3, [pc, #12]	; (1b8c <SERCOM5_Handler+0x14>)
    1b7e:	695b      	ldr	r3, [r3, #20]
    1b80:	2005      	movs	r0, #5
    1b82:	4798      	blx	r3
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	46bd      	mov	sp, r7
    1b88:	bd80      	pop	{r7, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	200000f8 	.word	0x200000f8

00001b90 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1b90:	b580      	push	{r7, lr}
    1b92:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1b94:	46c0      	nop			; (mov r8, r8)
    1b96:	46bd      	mov	sp, r7
    1b98:	bd80      	pop	{r7, pc}
	...

00001b9c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b082      	sub	sp, #8
    1ba0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1ba2:	4b10      	ldr	r3, [pc, #64]	; (1be4 <cpu_irq_enter_critical+0x48>)
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d112      	bne.n	1bd0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1baa:	f3ef 8310 	mrs	r3, PRIMASK
    1bae:	607b      	str	r3, [r7, #4]
  return(result);
    1bb0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d109      	bne.n	1bca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1bb6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1bb8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1bbc:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <cpu_irq_enter_critical+0x4c>)
    1bbe:	2200      	movs	r2, #0
    1bc0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1bc2:	4b0a      	ldr	r3, [pc, #40]	; (1bec <cpu_irq_enter_critical+0x50>)
    1bc4:	2201      	movs	r2, #1
    1bc6:	701a      	strb	r2, [r3, #0]
    1bc8:	e002      	b.n	1bd0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1bca:	4b08      	ldr	r3, [pc, #32]	; (1bec <cpu_irq_enter_critical+0x50>)
    1bcc:	2200      	movs	r2, #0
    1bce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1bd0:	4b04      	ldr	r3, [pc, #16]	; (1be4 <cpu_irq_enter_critical+0x48>)
    1bd2:	681b      	ldr	r3, [r3, #0]
    1bd4:	1c5a      	adds	r2, r3, #1
    1bd6:	4b03      	ldr	r3, [pc, #12]	; (1be4 <cpu_irq_enter_critical+0x48>)
    1bd8:	601a      	str	r2, [r3, #0]
}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	46bd      	mov	sp, r7
    1bde:	b002      	add	sp, #8
    1be0:	bd80      	pop	{r7, pc}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	20000110 	.word	0x20000110
    1be8:	20000018 	.word	0x20000018
    1bec:	20000114 	.word	0x20000114

00001bf0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1bf4:	4b0b      	ldr	r3, [pc, #44]	; (1c24 <cpu_irq_leave_critical+0x34>)
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	1e5a      	subs	r2, r3, #1
    1bfa:	4b0a      	ldr	r3, [pc, #40]	; (1c24 <cpu_irq_leave_critical+0x34>)
    1bfc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1bfe:	4b09      	ldr	r3, [pc, #36]	; (1c24 <cpu_irq_leave_critical+0x34>)
    1c00:	681b      	ldr	r3, [r3, #0]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d10a      	bne.n	1c1c <cpu_irq_leave_critical+0x2c>
    1c06:	4b08      	ldr	r3, [pc, #32]	; (1c28 <cpu_irq_leave_critical+0x38>)
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d005      	beq.n	1c1c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1c10:	4b06      	ldr	r3, [pc, #24]	; (1c2c <cpu_irq_leave_critical+0x3c>)
    1c12:	2201      	movs	r2, #1
    1c14:	701a      	strb	r2, [r3, #0]
    1c16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c1a:	b662      	cpsie	i
	}
}
    1c1c:	46c0      	nop			; (mov r8, r8)
    1c1e:	46bd      	mov	sp, r7
    1c20:	bd80      	pop	{r7, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	20000110 	.word	0x20000110
    1c28:	20000114 	.word	0x20000114
    1c2c:	20000018 	.word	0x20000018

00001c30 <system_gclk_gen_get_config_defaults>:
{
    1c30:	b580      	push	{r7, lr}
    1c32:	b082      	sub	sp, #8
    1c34:	af00      	add	r7, sp, #0
    1c36:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	2201      	movs	r2, #1
    1c3c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	2200      	movs	r2, #0
    1c42:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	2206      	movs	r2, #6
    1c48:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	2200      	movs	r2, #0
    1c4e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1c50:	687b      	ldr	r3, [r7, #4]
    1c52:	2200      	movs	r2, #0
    1c54:	725a      	strb	r2, [r3, #9]
}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	46bd      	mov	sp, r7
    1c5a:	b002      	add	sp, #8
    1c5c:	bd80      	pop	{r7, pc}

00001c5e <system_clock_source_osc8m_get_config_defaults>:
{
    1c5e:	b580      	push	{r7, lr}
    1c60:	b082      	sub	sp, #8
    1c62:	af00      	add	r7, sp, #0
    1c64:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1c66:	687b      	ldr	r3, [r7, #4]
    1c68:	2203      	movs	r2, #3
    1c6a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	2200      	movs	r2, #0
    1c70:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	2201      	movs	r2, #1
    1c76:	709a      	strb	r2, [r3, #2]
}
    1c78:	46c0      	nop			; (mov r8, r8)
    1c7a:	46bd      	mov	sp, r7
    1c7c:	b002      	add	sp, #8
    1c7e:	bd80      	pop	{r7, pc}

00001c80 <system_cpu_clock_set_divider>:
{
    1c80:	b580      	push	{r7, lr}
    1c82:	b082      	sub	sp, #8
    1c84:	af00      	add	r7, sp, #0
    1c86:	0002      	movs	r2, r0
    1c88:	1dfb      	adds	r3, r7, #7
    1c8a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1c8c:	4a03      	ldr	r2, [pc, #12]	; (1c9c <system_cpu_clock_set_divider+0x1c>)
    1c8e:	1dfb      	adds	r3, r7, #7
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	7213      	strb	r3, [r2, #8]
}
    1c94:	46c0      	nop			; (mov r8, r8)
    1c96:	46bd      	mov	sp, r7
    1c98:	b002      	add	sp, #8
    1c9a:	bd80      	pop	{r7, pc}
    1c9c:	40000400 	.word	0x40000400

00001ca0 <system_apb_clock_set_divider>:
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	b082      	sub	sp, #8
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	0002      	movs	r2, r0
    1ca8:	1dfb      	adds	r3, r7, #7
    1caa:	701a      	strb	r2, [r3, #0]
    1cac:	1dbb      	adds	r3, r7, #6
    1cae:	1c0a      	adds	r2, r1, #0
    1cb0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1cb2:	1dfb      	adds	r3, r7, #7
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	2b01      	cmp	r3, #1
    1cb8:	d008      	beq.n	1ccc <system_apb_clock_set_divider+0x2c>
    1cba:	2b02      	cmp	r3, #2
    1cbc:	d00b      	beq.n	1cd6 <system_apb_clock_set_divider+0x36>
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d10e      	bne.n	1ce0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1cc2:	4a0b      	ldr	r2, [pc, #44]	; (1cf0 <system_apb_clock_set_divider+0x50>)
    1cc4:	1dbb      	adds	r3, r7, #6
    1cc6:	781b      	ldrb	r3, [r3, #0]
    1cc8:	7253      	strb	r3, [r2, #9]
			break;
    1cca:	e00b      	b.n	1ce4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1ccc:	4a08      	ldr	r2, [pc, #32]	; (1cf0 <system_apb_clock_set_divider+0x50>)
    1cce:	1dbb      	adds	r3, r7, #6
    1cd0:	781b      	ldrb	r3, [r3, #0]
    1cd2:	7293      	strb	r3, [r2, #10]
			break;
    1cd4:	e006      	b.n	1ce4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1cd6:	4a06      	ldr	r2, [pc, #24]	; (1cf0 <system_apb_clock_set_divider+0x50>)
    1cd8:	1dbb      	adds	r3, r7, #6
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	72d3      	strb	r3, [r2, #11]
			break;
    1cde:	e001      	b.n	1ce4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1ce0:	2317      	movs	r3, #23
    1ce2:	e000      	b.n	1ce6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1ce4:	2300      	movs	r3, #0
}
    1ce6:	0018      	movs	r0, r3
    1ce8:	46bd      	mov	sp, r7
    1cea:	b002      	add	sp, #8
    1cec:	bd80      	pop	{r7, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	40000400 	.word	0x40000400

00001cf4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b082      	sub	sp, #8
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	0002      	movs	r2, r0
    1cfc:	1dfb      	adds	r3, r7, #7
    1cfe:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d00:	4a08      	ldr	r2, [pc, #32]	; (1d24 <system_flash_set_waitstates+0x30>)
    1d02:	1dfb      	adds	r3, r7, #7
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	210f      	movs	r1, #15
    1d08:	400b      	ands	r3, r1
    1d0a:	b2d9      	uxtb	r1, r3
    1d0c:	6853      	ldr	r3, [r2, #4]
    1d0e:	200f      	movs	r0, #15
    1d10:	4001      	ands	r1, r0
    1d12:	0049      	lsls	r1, r1, #1
    1d14:	201e      	movs	r0, #30
    1d16:	4383      	bics	r3, r0
    1d18:	430b      	orrs	r3, r1
    1d1a:	6053      	str	r3, [r2, #4]
}
    1d1c:	46c0      	nop			; (mov r8, r8)
    1d1e:	46bd      	mov	sp, r7
    1d20:	b002      	add	sp, #8
    1d22:	bd80      	pop	{r7, pc}
    1d24:	41004000 	.word	0x41004000

00001d28 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1d28:	b580      	push	{r7, lr}
    1d2a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	4b04      	ldr	r3, [pc, #16]	; (1d40 <_system_dfll_wait_for_sync+0x18>)
    1d30:	68db      	ldr	r3, [r3, #12]
    1d32:	2210      	movs	r2, #16
    1d34:	4013      	ands	r3, r2
    1d36:	d0fa      	beq.n	1d2e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1d38:	46c0      	nop			; (mov r8, r8)
    1d3a:	46bd      	mov	sp, r7
    1d3c:	bd80      	pop	{r7, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	40000800 	.word	0x40000800

00001d44 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d48:	4b0c      	ldr	r3, [pc, #48]	; (1d7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1d4a:	2202      	movs	r2, #2
    1d4c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1d4e:	4b0c      	ldr	r3, [pc, #48]	; (1d80 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1d50:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d52:	4a0a      	ldr	r2, [pc, #40]	; (1d7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1d54:	4b0b      	ldr	r3, [pc, #44]	; (1d84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1d56:	689b      	ldr	r3, [r3, #8]
    1d58:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d5a:	4a08      	ldr	r2, [pc, #32]	; (1d7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1d5c:	4b09      	ldr	r3, [pc, #36]	; (1d84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1d5e:	685b      	ldr	r3, [r3, #4]
    1d60:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1d62:	4b06      	ldr	r3, [pc, #24]	; (1d7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1d64:	2200      	movs	r2, #0
    1d66:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1d6a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d6c:	4a03      	ldr	r2, [pc, #12]	; (1d7c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1d6e:	4b05      	ldr	r3, [pc, #20]	; (1d84 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1d70:	681b      	ldr	r3, [r3, #0]
    1d72:	b29b      	uxth	r3, r3
    1d74:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46bd      	mov	sp, r7
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	40000800 	.word	0x40000800
    1d80:	00001d29 	.word	0x00001d29
    1d84:	20000118 	.word	0x20000118

00001d88 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	b082      	sub	sp, #8
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	0002      	movs	r2, r0
    1d90:	1dfb      	adds	r3, r7, #7
    1d92:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1d94:	1dfb      	adds	r3, r7, #7
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	2b08      	cmp	r3, #8
    1d9a:	d840      	bhi.n	1e1e <system_clock_source_get_hz+0x96>
    1d9c:	009a      	lsls	r2, r3, #2
    1d9e:	4b22      	ldr	r3, [pc, #136]	; (1e28 <system_clock_source_get_hz+0xa0>)
    1da0:	18d3      	adds	r3, r2, r3
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1da6:	4b21      	ldr	r3, [pc, #132]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1da8:	691b      	ldr	r3, [r3, #16]
    1daa:	e039      	b.n	1e20 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1dac:	4b20      	ldr	r3, [pc, #128]	; (1e30 <system_clock_source_get_hz+0xa8>)
    1dae:	6a1b      	ldr	r3, [r3, #32]
    1db0:	059b      	lsls	r3, r3, #22
    1db2:	0f9b      	lsrs	r3, r3, #30
    1db4:	b2db      	uxtb	r3, r3
    1db6:	001a      	movs	r2, r3
    1db8:	4b1e      	ldr	r3, [pc, #120]	; (1e34 <system_clock_source_get_hz+0xac>)
    1dba:	40d3      	lsrs	r3, r2
    1dbc:	e030      	b.n	1e20 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1dbe:	2380      	movs	r3, #128	; 0x80
    1dc0:	021b      	lsls	r3, r3, #8
    1dc2:	e02d      	b.n	1e20 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1dc4:	2380      	movs	r3, #128	; 0x80
    1dc6:	021b      	lsls	r3, r3, #8
    1dc8:	e02a      	b.n	1e20 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1dca:	4b18      	ldr	r3, [pc, #96]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1dcc:	695b      	ldr	r3, [r3, #20]
    1dce:	e027      	b.n	1e20 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1dd0:	4b16      	ldr	r3, [pc, #88]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	2202      	movs	r2, #2
    1dd6:	4013      	ands	r3, r2
    1dd8:	d101      	bne.n	1dde <system_clock_source_get_hz+0x56>
			return 0;
    1dda:	2300      	movs	r3, #0
    1ddc:	e020      	b.n	1e20 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1dde:	4b16      	ldr	r3, [pc, #88]	; (1e38 <system_clock_source_get_hz+0xb0>)
    1de0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1de2:	4b12      	ldr	r3, [pc, #72]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	2204      	movs	r2, #4
    1de8:	4013      	ands	r3, r2
    1dea:	d009      	beq.n	1e00 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1dec:	2000      	movs	r0, #0
    1dee:	4b13      	ldr	r3, [pc, #76]	; (1e3c <system_clock_source_get_hz+0xb4>)
    1df0:	4798      	blx	r3
    1df2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1df4:	4b0d      	ldr	r3, [pc, #52]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1df6:	689b      	ldr	r3, [r3, #8]
    1df8:	041b      	lsls	r3, r3, #16
    1dfa:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1dfc:	4353      	muls	r3, r2
    1dfe:	e00f      	b.n	1e20 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    1e00:	4b0f      	ldr	r3, [pc, #60]	; (1e40 <system_clock_source_get_hz+0xb8>)
    1e02:	e00d      	b.n	1e20 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e04:	4a0a      	ldr	r2, [pc, #40]	; (1e30 <system_clock_source_get_hz+0xa8>)
    1e06:	2350      	movs	r3, #80	; 0x50
    1e08:	5cd3      	ldrb	r3, [r2, r3]
    1e0a:	b2db      	uxtb	r3, r3
    1e0c:	001a      	movs	r2, r3
    1e0e:	2304      	movs	r3, #4
    1e10:	4013      	ands	r3, r2
    1e12:	d101      	bne.n	1e18 <system_clock_source_get_hz+0x90>
			return 0;
    1e14:	2300      	movs	r3, #0
    1e16:	e003      	b.n	1e20 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1e18:	4b04      	ldr	r3, [pc, #16]	; (1e2c <system_clock_source_get_hz+0xa4>)
    1e1a:	68db      	ldr	r3, [r3, #12]
    1e1c:	e000      	b.n	1e20 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1e1e:	2300      	movs	r3, #0
	}
}
    1e20:	0018      	movs	r0, r3
    1e22:	46bd      	mov	sp, r7
    1e24:	b002      	add	sp, #8
    1e26:	bd80      	pop	{r7, pc}
    1e28:	00002de8 	.word	0x00002de8
    1e2c:	20000118 	.word	0x20000118
    1e30:	40000800 	.word	0x40000800
    1e34:	007a1200 	.word	0x007a1200
    1e38:	00001d29 	.word	0x00001d29
    1e3c:	000024c5 	.word	0x000024c5
    1e40:	02dc6c00 	.word	0x02dc6c00

00001e44 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1e44:	b580      	push	{r7, lr}
    1e46:	b084      	sub	sp, #16
    1e48:	af00      	add	r7, sp, #0
    1e4a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e4c:	4b1a      	ldr	r3, [pc, #104]	; (1eb8 <system_clock_source_osc8m_set_config+0x74>)
    1e4e:	6a1b      	ldr	r3, [r3, #32]
    1e50:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	1c1a      	adds	r2, r3, #0
    1e58:	2303      	movs	r3, #3
    1e5a:	4013      	ands	r3, r2
    1e5c:	b2da      	uxtb	r2, r3
    1e5e:	230d      	movs	r3, #13
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	2103      	movs	r1, #3
    1e64:	400a      	ands	r2, r1
    1e66:	0010      	movs	r0, r2
    1e68:	781a      	ldrb	r2, [r3, #0]
    1e6a:	2103      	movs	r1, #3
    1e6c:	438a      	bics	r2, r1
    1e6e:	1c11      	adds	r1, r2, #0
    1e70:	1c02      	adds	r2, r0, #0
    1e72:	430a      	orrs	r2, r1
    1e74:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	789a      	ldrb	r2, [r3, #2]
    1e7a:	230c      	movs	r3, #12
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	01d0      	lsls	r0, r2, #7
    1e80:	781a      	ldrb	r2, [r3, #0]
    1e82:	217f      	movs	r1, #127	; 0x7f
    1e84:	400a      	ands	r2, r1
    1e86:	1c11      	adds	r1, r2, #0
    1e88:	1c02      	adds	r2, r0, #0
    1e8a:	430a      	orrs	r2, r1
    1e8c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	785a      	ldrb	r2, [r3, #1]
    1e92:	230c      	movs	r3, #12
    1e94:	18fb      	adds	r3, r7, r3
    1e96:	2101      	movs	r1, #1
    1e98:	400a      	ands	r2, r1
    1e9a:	0190      	lsls	r0, r2, #6
    1e9c:	781a      	ldrb	r2, [r3, #0]
    1e9e:	2140      	movs	r1, #64	; 0x40
    1ea0:	438a      	bics	r2, r1
    1ea2:	1c11      	adds	r1, r2, #0
    1ea4:	1c02      	adds	r2, r0, #0
    1ea6:	430a      	orrs	r2, r1
    1ea8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1eaa:	4b03      	ldr	r3, [pc, #12]	; (1eb8 <system_clock_source_osc8m_set_config+0x74>)
    1eac:	68fa      	ldr	r2, [r7, #12]
    1eae:	621a      	str	r2, [r3, #32]
}
    1eb0:	46c0      	nop			; (mov r8, r8)
    1eb2:	46bd      	mov	sp, r7
    1eb4:	b004      	add	sp, #16
    1eb6:	bd80      	pop	{r7, pc}
    1eb8:	40000800 	.word	0x40000800

00001ebc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	0002      	movs	r2, r0
    1ec4:	1dfb      	adds	r3, r7, #7
    1ec6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1ec8:	1dfb      	adds	r3, r7, #7
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b08      	cmp	r3, #8
    1ece:	d83b      	bhi.n	1f48 <system_clock_source_enable+0x8c>
    1ed0:	009a      	lsls	r2, r3, #2
    1ed2:	4b21      	ldr	r3, [pc, #132]	; (1f58 <system_clock_source_enable+0x9c>)
    1ed4:	18d3      	adds	r3, r2, r3
    1ed6:	681b      	ldr	r3, [r3, #0]
    1ed8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1eda:	4b20      	ldr	r3, [pc, #128]	; (1f5c <system_clock_source_enable+0xa0>)
    1edc:	4a1f      	ldr	r2, [pc, #124]	; (1f5c <system_clock_source_enable+0xa0>)
    1ede:	6a12      	ldr	r2, [r2, #32]
    1ee0:	2102      	movs	r1, #2
    1ee2:	430a      	orrs	r2, r1
    1ee4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1ee6:	2300      	movs	r3, #0
    1ee8:	e031      	b.n	1f4e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1eea:	4b1c      	ldr	r3, [pc, #112]	; (1f5c <system_clock_source_enable+0xa0>)
    1eec:	4a1b      	ldr	r2, [pc, #108]	; (1f5c <system_clock_source_enable+0xa0>)
    1eee:	6992      	ldr	r2, [r2, #24]
    1ef0:	2102      	movs	r1, #2
    1ef2:	430a      	orrs	r2, r1
    1ef4:	619a      	str	r2, [r3, #24]
		break;
    1ef6:	e029      	b.n	1f4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1ef8:	4a18      	ldr	r2, [pc, #96]	; (1f5c <system_clock_source_enable+0xa0>)
    1efa:	4b18      	ldr	r3, [pc, #96]	; (1f5c <system_clock_source_enable+0xa0>)
    1efc:	8a1b      	ldrh	r3, [r3, #16]
    1efe:	b29b      	uxth	r3, r3
    1f00:	2102      	movs	r1, #2
    1f02:	430b      	orrs	r3, r1
    1f04:	b29b      	uxth	r3, r3
    1f06:	8213      	strh	r3, [r2, #16]
		break;
    1f08:	e020      	b.n	1f4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1f0a:	4a14      	ldr	r2, [pc, #80]	; (1f5c <system_clock_source_enable+0xa0>)
    1f0c:	4b13      	ldr	r3, [pc, #76]	; (1f5c <system_clock_source_enable+0xa0>)
    1f0e:	8a9b      	ldrh	r3, [r3, #20]
    1f10:	b29b      	uxth	r3, r3
    1f12:	2102      	movs	r1, #2
    1f14:	430b      	orrs	r3, r1
    1f16:	b29b      	uxth	r3, r3
    1f18:	8293      	strh	r3, [r2, #20]
		break;
    1f1a:	e017      	b.n	1f4c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1f1c:	4b10      	ldr	r3, [pc, #64]	; (1f60 <system_clock_source_enable+0xa4>)
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	2202      	movs	r2, #2
    1f22:	431a      	orrs	r2, r3
    1f24:	4b0e      	ldr	r3, [pc, #56]	; (1f60 <system_clock_source_enable+0xa4>)
    1f26:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1f28:	4b0e      	ldr	r3, [pc, #56]	; (1f64 <system_clock_source_enable+0xa8>)
    1f2a:	4798      	blx	r3
		break;
    1f2c:	e00e      	b.n	1f4c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1f2e:	4a0b      	ldr	r2, [pc, #44]	; (1f5c <system_clock_source_enable+0xa0>)
    1f30:	490a      	ldr	r1, [pc, #40]	; (1f5c <system_clock_source_enable+0xa0>)
    1f32:	2344      	movs	r3, #68	; 0x44
    1f34:	5ccb      	ldrb	r3, [r1, r3]
    1f36:	b2db      	uxtb	r3, r3
    1f38:	2102      	movs	r1, #2
    1f3a:	430b      	orrs	r3, r1
    1f3c:	b2d9      	uxtb	r1, r3
    1f3e:	2344      	movs	r3, #68	; 0x44
    1f40:	54d1      	strb	r1, [r2, r3]
		break;
    1f42:	e003      	b.n	1f4c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1f44:	2300      	movs	r3, #0
    1f46:	e002      	b.n	1f4e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f48:	2317      	movs	r3, #23
    1f4a:	e000      	b.n	1f4e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1f4c:	2300      	movs	r3, #0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	b002      	add	sp, #8
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	00002e0c 	.word	0x00002e0c
    1f5c:	40000800 	.word	0x40000800
    1f60:	20000118 	.word	0x20000118
    1f64:	00001d45 	.word	0x00001d45

00001f68 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1f6e:	003b      	movs	r3, r7
    1f70:	2201      	movs	r2, #1
    1f72:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f74:	2300      	movs	r3, #0
    1f76:	607b      	str	r3, [r7, #4]
    1f78:	e009      	b.n	1f8e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	b2db      	uxtb	r3, r3
    1f7e:	003a      	movs	r2, r7
    1f80:	0011      	movs	r1, r2
    1f82:	0018      	movs	r0, r3
    1f84:	4b05      	ldr	r3, [pc, #20]	; (1f9c <_switch_peripheral_gclk+0x34>)
    1f86:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	3301      	adds	r3, #1
    1f8c:	607b      	str	r3, [r7, #4]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	2b24      	cmp	r3, #36	; 0x24
    1f92:	d9f2      	bls.n	1f7a <_switch_peripheral_gclk+0x12>
	}
}
    1f94:	46c0      	nop			; (mov r8, r8)
    1f96:	46bd      	mov	sp, r7
    1f98:	b002      	add	sp, #8
    1f9a:	bd80      	pop	{r7, pc}
    1f9c:	000023a1 	.word	0x000023a1

00001fa0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1fa0:	b580      	push	{r7, lr}
    1fa2:	b0a0      	sub	sp, #128	; 0x80
    1fa4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1fa6:	4b27      	ldr	r3, [pc, #156]	; (2044 <STACK_SIZE+0x44>)
    1fa8:	22c2      	movs	r2, #194	; 0xc2
    1faa:	00d2      	lsls	r2, r2, #3
    1fac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1fae:	2000      	movs	r0, #0
    1fb0:	4b25      	ldr	r3, [pc, #148]	; (2048 <STACK_SIZE+0x48>)
    1fb2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1fb4:	4b25      	ldr	r3, [pc, #148]	; (204c <STACK_SIZE+0x4c>)
    1fb6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1fb8:	237c      	movs	r3, #124	; 0x7c
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	0018      	movs	r0, r3
    1fbe:	4b24      	ldr	r3, [pc, #144]	; (2050 <STACK_SIZE+0x50>)
    1fc0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1fc2:	237c      	movs	r3, #124	; 0x7c
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	2200      	movs	r2, #0
    1fc8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1fca:	237c      	movs	r3, #124	; 0x7c
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	2201      	movs	r2, #1
    1fd0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1fd2:	237c      	movs	r3, #124	; 0x7c
    1fd4:	18fb      	adds	r3, r7, r3
    1fd6:	2200      	movs	r2, #0
    1fd8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1fda:	237c      	movs	r3, #124	; 0x7c
    1fdc:	18fb      	adds	r3, r7, r3
    1fde:	0018      	movs	r0, r3
    1fe0:	4b1c      	ldr	r3, [pc, #112]	; (2054 <STACK_SIZE+0x54>)
    1fe2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1fe4:	2006      	movs	r0, #6
    1fe6:	4b1c      	ldr	r3, [pc, #112]	; (2058 <STACK_SIZE+0x58>)
    1fe8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1fea:	4b1c      	ldr	r3, [pc, #112]	; (205c <STACK_SIZE+0x5c>)
    1fec:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1fee:	2000      	movs	r0, #0
    1ff0:	4b1b      	ldr	r3, [pc, #108]	; (2060 <STACK_SIZE+0x60>)
    1ff2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1ff4:	2100      	movs	r1, #0
    1ff6:	2000      	movs	r0, #0
    1ff8:	4b1a      	ldr	r3, [pc, #104]	; (2064 <STACK_SIZE+0x64>)
    1ffa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1ffc:	2100      	movs	r1, #0
    1ffe:	2001      	movs	r0, #1
    2000:	4b18      	ldr	r3, [pc, #96]	; (2064 <STACK_SIZE+0x64>)
    2002:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2004:	2100      	movs	r1, #0
    2006:	2002      	movs	r0, #2
    2008:	4b16      	ldr	r3, [pc, #88]	; (2064 <STACK_SIZE+0x64>)
    200a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    200c:	1d3b      	adds	r3, r7, #4
    200e:	0018      	movs	r0, r3
    2010:	4b15      	ldr	r3, [pc, #84]	; (2068 <STACK_SIZE+0x68>)
    2012:	4798      	blx	r3
    2014:	1d3b      	adds	r3, r7, #4
    2016:	2206      	movs	r2, #6
    2018:	701a      	strb	r2, [r3, #0]
    201a:	1d3b      	adds	r3, r7, #4
    201c:	2201      	movs	r2, #1
    201e:	605a      	str	r2, [r3, #4]
    2020:	1d3b      	adds	r3, r7, #4
    2022:	2200      	movs	r2, #0
    2024:	721a      	strb	r2, [r3, #8]
    2026:	1d3b      	adds	r3, r7, #4
    2028:	2200      	movs	r2, #0
    202a:	725a      	strb	r2, [r3, #9]
    202c:	1d3b      	adds	r3, r7, #4
    202e:	0019      	movs	r1, r3
    2030:	2000      	movs	r0, #0
    2032:	4b0e      	ldr	r3, [pc, #56]	; (206c <STACK_SIZE+0x6c>)
    2034:	4798      	blx	r3
    2036:	2000      	movs	r0, #0
    2038:	4b0d      	ldr	r3, [pc, #52]	; (2070 <STACK_SIZE+0x70>)
    203a:	4798      	blx	r3
#endif
}
    203c:	46c0      	nop			; (mov r8, r8)
    203e:	46bd      	mov	sp, r7
    2040:	b020      	add	sp, #128	; 0x80
    2042:	bd80      	pop	{r7, pc}
    2044:	40000800 	.word	0x40000800
    2048:	00001cf5 	.word	0x00001cf5
    204c:	00001f69 	.word	0x00001f69
    2050:	00001c5f 	.word	0x00001c5f
    2054:	00001e45 	.word	0x00001e45
    2058:	00001ebd 	.word	0x00001ebd
    205c:	00002119 	.word	0x00002119
    2060:	00001c81 	.word	0x00001c81
    2064:	00001ca1 	.word	0x00001ca1
    2068:	00001c31 	.word	0x00001c31
    206c:	00002149 	.word	0x00002149
    2070:	0000226d 	.word	0x0000226d

00002074 <system_apb_clock_set_mask>:
{
    2074:	b580      	push	{r7, lr}
    2076:	b082      	sub	sp, #8
    2078:	af00      	add	r7, sp, #0
    207a:	0002      	movs	r2, r0
    207c:	6039      	str	r1, [r7, #0]
    207e:	1dfb      	adds	r3, r7, #7
    2080:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2082:	1dfb      	adds	r3, r7, #7
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	2b01      	cmp	r3, #1
    2088:	d00a      	beq.n	20a0 <system_apb_clock_set_mask+0x2c>
    208a:	2b02      	cmp	r3, #2
    208c:	d00f      	beq.n	20ae <system_apb_clock_set_mask+0x3a>
    208e:	2b00      	cmp	r3, #0
    2090:	d114      	bne.n	20bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2092:	4b0e      	ldr	r3, [pc, #56]	; (20cc <system_apb_clock_set_mask+0x58>)
    2094:	4a0d      	ldr	r2, [pc, #52]	; (20cc <system_apb_clock_set_mask+0x58>)
    2096:	6991      	ldr	r1, [r2, #24]
    2098:	683a      	ldr	r2, [r7, #0]
    209a:	430a      	orrs	r2, r1
    209c:	619a      	str	r2, [r3, #24]
			break;
    209e:	e00f      	b.n	20c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    20a0:	4b0a      	ldr	r3, [pc, #40]	; (20cc <system_apb_clock_set_mask+0x58>)
    20a2:	4a0a      	ldr	r2, [pc, #40]	; (20cc <system_apb_clock_set_mask+0x58>)
    20a4:	69d1      	ldr	r1, [r2, #28]
    20a6:	683a      	ldr	r2, [r7, #0]
    20a8:	430a      	orrs	r2, r1
    20aa:	61da      	str	r2, [r3, #28]
			break;
    20ac:	e008      	b.n	20c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    20ae:	4b07      	ldr	r3, [pc, #28]	; (20cc <system_apb_clock_set_mask+0x58>)
    20b0:	4a06      	ldr	r2, [pc, #24]	; (20cc <system_apb_clock_set_mask+0x58>)
    20b2:	6a11      	ldr	r1, [r2, #32]
    20b4:	683a      	ldr	r2, [r7, #0]
    20b6:	430a      	orrs	r2, r1
    20b8:	621a      	str	r2, [r3, #32]
			break;
    20ba:	e001      	b.n	20c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    20bc:	2317      	movs	r3, #23
    20be:	e000      	b.n	20c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    20c0:	2300      	movs	r3, #0
}
    20c2:	0018      	movs	r0, r3
    20c4:	46bd      	mov	sp, r7
    20c6:	b002      	add	sp, #8
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	40000400 	.word	0x40000400

000020d0 <system_interrupt_enter_critical_section>:
{
    20d0:	b580      	push	{r7, lr}
    20d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    20d4:	4b02      	ldr	r3, [pc, #8]	; (20e0 <system_interrupt_enter_critical_section+0x10>)
    20d6:	4798      	blx	r3
}
    20d8:	46c0      	nop			; (mov r8, r8)
    20da:	46bd      	mov	sp, r7
    20dc:	bd80      	pop	{r7, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	00001b9d 	.word	0x00001b9d

000020e4 <system_interrupt_leave_critical_section>:
{
    20e4:	b580      	push	{r7, lr}
    20e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    20e8:	4b02      	ldr	r3, [pc, #8]	; (20f4 <system_interrupt_leave_critical_section+0x10>)
    20ea:	4798      	blx	r3
}
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46bd      	mov	sp, r7
    20f0:	bd80      	pop	{r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00001bf1 	.word	0x00001bf1

000020f8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <system_gclk_is_syncing+0x1c>)
    20fe:	785b      	ldrb	r3, [r3, #1]
    2100:	b2db      	uxtb	r3, r3
    2102:	b25b      	sxtb	r3, r3
    2104:	2b00      	cmp	r3, #0
    2106:	da01      	bge.n	210c <system_gclk_is_syncing+0x14>
		return true;
    2108:	2301      	movs	r3, #1
    210a:	e000      	b.n	210e <system_gclk_is_syncing+0x16>
	}

	return false;
    210c:	2300      	movs	r3, #0
}
    210e:	0018      	movs	r0, r3
    2110:	46bd      	mov	sp, r7
    2112:	bd80      	pop	{r7, pc}
    2114:	40000c00 	.word	0x40000c00

00002118 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2118:	b580      	push	{r7, lr}
    211a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    211c:	2108      	movs	r1, #8
    211e:	2000      	movs	r0, #0
    2120:	4b07      	ldr	r3, [pc, #28]	; (2140 <system_gclk_init+0x28>)
    2122:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2124:	4b07      	ldr	r3, [pc, #28]	; (2144 <system_gclk_init+0x2c>)
    2126:	2201      	movs	r2, #1
    2128:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <system_gclk_init+0x2c>)
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	b2db      	uxtb	r3, r3
    2132:	001a      	movs	r2, r3
    2134:	2301      	movs	r3, #1
    2136:	4013      	ands	r3, r2
    2138:	d1f8      	bne.n	212c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	46bd      	mov	sp, r7
    213e:	bd80      	pop	{r7, pc}
    2140:	00002075 	.word	0x00002075
    2144:	40000c00 	.word	0x40000c00

00002148 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2148:	b580      	push	{r7, lr}
    214a:	b086      	sub	sp, #24
    214c:	af00      	add	r7, sp, #0
    214e:	0002      	movs	r2, r0
    2150:	6039      	str	r1, [r7, #0]
    2152:	1dfb      	adds	r3, r7, #7
    2154:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2156:	1dfb      	adds	r3, r7, #7
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    215c:	1dfb      	adds	r3, r7, #7
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2162:	683b      	ldr	r3, [r7, #0]
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	021b      	lsls	r3, r3, #8
    2168:	001a      	movs	r2, r3
    216a:	697b      	ldr	r3, [r7, #20]
    216c:	4313      	orrs	r3, r2
    216e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2170:	683b      	ldr	r3, [r7, #0]
    2172:	785b      	ldrb	r3, [r3, #1]
    2174:	2b00      	cmp	r3, #0
    2176:	d004      	beq.n	2182 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2178:	697b      	ldr	r3, [r7, #20]
    217a:	2280      	movs	r2, #128	; 0x80
    217c:	02d2      	lsls	r2, r2, #11
    217e:	4313      	orrs	r3, r2
    2180:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2182:	683b      	ldr	r3, [r7, #0]
    2184:	7a5b      	ldrb	r3, [r3, #9]
    2186:	2b00      	cmp	r3, #0
    2188:	d004      	beq.n	2194 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    218a:	697b      	ldr	r3, [r7, #20]
    218c:	2280      	movs	r2, #128	; 0x80
    218e:	0312      	lsls	r2, r2, #12
    2190:	4313      	orrs	r3, r2
    2192:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2194:	683b      	ldr	r3, [r7, #0]
    2196:	685b      	ldr	r3, [r3, #4]
    2198:	2b01      	cmp	r3, #1
    219a:	d92c      	bls.n	21f6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    219c:	683b      	ldr	r3, [r7, #0]
    219e:	685a      	ldr	r2, [r3, #4]
    21a0:	683b      	ldr	r3, [r7, #0]
    21a2:	685b      	ldr	r3, [r3, #4]
    21a4:	3b01      	subs	r3, #1
    21a6:	4013      	ands	r3, r2
    21a8:	d11a      	bne.n	21e0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    21aa:	2300      	movs	r3, #0
    21ac:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    21ae:	2302      	movs	r3, #2
    21b0:	60bb      	str	r3, [r7, #8]
    21b2:	e005      	b.n	21c0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    21b4:	68fb      	ldr	r3, [r7, #12]
    21b6:	3301      	adds	r3, #1
    21b8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    21ba:	68bb      	ldr	r3, [r7, #8]
    21bc:	005b      	lsls	r3, r3, #1
    21be:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    21c0:	683b      	ldr	r3, [r7, #0]
    21c2:	685a      	ldr	r2, [r3, #4]
    21c4:	68bb      	ldr	r3, [r7, #8]
    21c6:	429a      	cmp	r2, r3
    21c8:	d8f4      	bhi.n	21b4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    21ca:	68fb      	ldr	r3, [r7, #12]
    21cc:	021b      	lsls	r3, r3, #8
    21ce:	693a      	ldr	r2, [r7, #16]
    21d0:	4313      	orrs	r3, r2
    21d2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    21d4:	697b      	ldr	r3, [r7, #20]
    21d6:	2280      	movs	r2, #128	; 0x80
    21d8:	0352      	lsls	r2, r2, #13
    21da:	4313      	orrs	r3, r2
    21dc:	617b      	str	r3, [r7, #20]
    21de:	e00a      	b.n	21f6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    21e0:	683b      	ldr	r3, [r7, #0]
    21e2:	685b      	ldr	r3, [r3, #4]
    21e4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    21e6:	693a      	ldr	r2, [r7, #16]
    21e8:	4313      	orrs	r3, r2
    21ea:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    21ec:	697b      	ldr	r3, [r7, #20]
    21ee:	2280      	movs	r2, #128	; 0x80
    21f0:	0292      	lsls	r2, r2, #10
    21f2:	4313      	orrs	r3, r2
    21f4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    21f6:	683b      	ldr	r3, [r7, #0]
    21f8:	7a1b      	ldrb	r3, [r3, #8]
    21fa:	2b00      	cmp	r3, #0
    21fc:	d004      	beq.n	2208 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    21fe:	697b      	ldr	r3, [r7, #20]
    2200:	2280      	movs	r2, #128	; 0x80
    2202:	0392      	lsls	r2, r2, #14
    2204:	4313      	orrs	r3, r2
    2206:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2208:	46c0      	nop			; (mov r8, r8)
    220a:	4b13      	ldr	r3, [pc, #76]	; (2258 <system_gclk_gen_set_config+0x110>)
    220c:	4798      	blx	r3
    220e:	1e03      	subs	r3, r0, #0
    2210:	d1fb      	bne.n	220a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2212:	4b12      	ldr	r3, [pc, #72]	; (225c <system_gclk_gen_set_config+0x114>)
    2214:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2216:	4a12      	ldr	r2, [pc, #72]	; (2260 <system_gclk_gen_set_config+0x118>)
    2218:	1dfb      	adds	r3, r7, #7
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	4b0d      	ldr	r3, [pc, #52]	; (2258 <system_gclk_gen_set_config+0x110>)
    2222:	4798      	blx	r3
    2224:	1e03      	subs	r3, r0, #0
    2226:	d1fb      	bne.n	2220 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2228:	4b0e      	ldr	r3, [pc, #56]	; (2264 <system_gclk_gen_set_config+0x11c>)
    222a:	693a      	ldr	r2, [r7, #16]
    222c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	4b09      	ldr	r3, [pc, #36]	; (2258 <system_gclk_gen_set_config+0x110>)
    2232:	4798      	blx	r3
    2234:	1e03      	subs	r3, r0, #0
    2236:	d1fb      	bne.n	2230 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2238:	4b0a      	ldr	r3, [pc, #40]	; (2264 <system_gclk_gen_set_config+0x11c>)
    223a:	4a0a      	ldr	r2, [pc, #40]	; (2264 <system_gclk_gen_set_config+0x11c>)
    223c:	6851      	ldr	r1, [r2, #4]
    223e:	2280      	movs	r2, #128	; 0x80
    2240:	0252      	lsls	r2, r2, #9
    2242:	4011      	ands	r1, r2
    2244:	697a      	ldr	r2, [r7, #20]
    2246:	430a      	orrs	r2, r1
    2248:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    224a:	4b07      	ldr	r3, [pc, #28]	; (2268 <system_gclk_gen_set_config+0x120>)
    224c:	4798      	blx	r3
}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	46bd      	mov	sp, r7
    2252:	b006      	add	sp, #24
    2254:	bd80      	pop	{r7, pc}
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	000020f9 	.word	0x000020f9
    225c:	000020d1 	.word	0x000020d1
    2260:	40000c08 	.word	0x40000c08
    2264:	40000c00 	.word	0x40000c00
    2268:	000020e5 	.word	0x000020e5

0000226c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    226c:	b580      	push	{r7, lr}
    226e:	b082      	sub	sp, #8
    2270:	af00      	add	r7, sp, #0
    2272:	0002      	movs	r2, r0
    2274:	1dfb      	adds	r3, r7, #7
    2276:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2278:	46c0      	nop			; (mov r8, r8)
    227a:	4b0e      	ldr	r3, [pc, #56]	; (22b4 <system_gclk_gen_enable+0x48>)
    227c:	4798      	blx	r3
    227e:	1e03      	subs	r3, r0, #0
    2280:	d1fb      	bne.n	227a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2282:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <system_gclk_gen_enable+0x4c>)
    2284:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2286:	4a0d      	ldr	r2, [pc, #52]	; (22bc <system_gclk_gen_enable+0x50>)
    2288:	1dfb      	adds	r3, r7, #7
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	4b08      	ldr	r3, [pc, #32]	; (22b4 <system_gclk_gen_enable+0x48>)
    2292:	4798      	blx	r3
    2294:	1e03      	subs	r3, r0, #0
    2296:	d1fb      	bne.n	2290 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2298:	4b09      	ldr	r3, [pc, #36]	; (22c0 <system_gclk_gen_enable+0x54>)
    229a:	4a09      	ldr	r2, [pc, #36]	; (22c0 <system_gclk_gen_enable+0x54>)
    229c:	6852      	ldr	r2, [r2, #4]
    229e:	2180      	movs	r1, #128	; 0x80
    22a0:	0249      	lsls	r1, r1, #9
    22a2:	430a      	orrs	r2, r1
    22a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    22a6:	4b07      	ldr	r3, [pc, #28]	; (22c4 <system_gclk_gen_enable+0x58>)
    22a8:	4798      	blx	r3
}
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	46bd      	mov	sp, r7
    22ae:	b002      	add	sp, #8
    22b0:	bd80      	pop	{r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	000020f9 	.word	0x000020f9
    22b8:	000020d1 	.word	0x000020d1
    22bc:	40000c04 	.word	0x40000c04
    22c0:	40000c00 	.word	0x40000c00
    22c4:	000020e5 	.word	0x000020e5

000022c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b086      	sub	sp, #24
    22cc:	af00      	add	r7, sp, #0
    22ce:	0002      	movs	r2, r0
    22d0:	1dfb      	adds	r3, r7, #7
    22d2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    22d4:	46c0      	nop			; (mov r8, r8)
    22d6:	4b2a      	ldr	r3, [pc, #168]	; (2380 <system_gclk_gen_get_hz+0xb8>)
    22d8:	4798      	blx	r3
    22da:	1e03      	subs	r3, r0, #0
    22dc:	d1fb      	bne.n	22d6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    22de:	4b29      	ldr	r3, [pc, #164]	; (2384 <system_gclk_gen_get_hz+0xbc>)
    22e0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    22e2:	4a29      	ldr	r2, [pc, #164]	; (2388 <system_gclk_gen_get_hz+0xc0>)
    22e4:	1dfb      	adds	r3, r7, #7
    22e6:	781b      	ldrb	r3, [r3, #0]
    22e8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	4b24      	ldr	r3, [pc, #144]	; (2380 <system_gclk_gen_get_hz+0xb8>)
    22ee:	4798      	blx	r3
    22f0:	1e03      	subs	r3, r0, #0
    22f2:	d1fb      	bne.n	22ec <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    22f4:	4b25      	ldr	r3, [pc, #148]	; (238c <system_gclk_gen_get_hz+0xc4>)
    22f6:	685b      	ldr	r3, [r3, #4]
    22f8:	04db      	lsls	r3, r3, #19
    22fa:	0edb      	lsrs	r3, r3, #27
    22fc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    22fe:	0018      	movs	r0, r3
    2300:	4b23      	ldr	r3, [pc, #140]	; (2390 <system_gclk_gen_get_hz+0xc8>)
    2302:	4798      	blx	r3
    2304:	0003      	movs	r3, r0
    2306:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2308:	4a1f      	ldr	r2, [pc, #124]	; (2388 <system_gclk_gen_get_hz+0xc0>)
    230a:	1dfb      	adds	r3, r7, #7
    230c:	781b      	ldrb	r3, [r3, #0]
    230e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2310:	4b1e      	ldr	r3, [pc, #120]	; (238c <system_gclk_gen_get_hz+0xc4>)
    2312:	685b      	ldr	r3, [r3, #4]
    2314:	02db      	lsls	r3, r3, #11
    2316:	0fdb      	lsrs	r3, r3, #31
    2318:	b2da      	uxtb	r2, r3
    231a:	2313      	movs	r3, #19
    231c:	18fb      	adds	r3, r7, r3
    231e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2320:	4a1c      	ldr	r2, [pc, #112]	; (2394 <system_gclk_gen_get_hz+0xcc>)
    2322:	1dfb      	adds	r3, r7, #7
    2324:	781b      	ldrb	r3, [r3, #0]
    2326:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2328:	46c0      	nop			; (mov r8, r8)
    232a:	4b15      	ldr	r3, [pc, #84]	; (2380 <system_gclk_gen_get_hz+0xb8>)
    232c:	4798      	blx	r3
    232e:	1e03      	subs	r3, r0, #0
    2330:	d1fb      	bne.n	232a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2332:	4b16      	ldr	r3, [pc, #88]	; (238c <system_gclk_gen_get_hz+0xc4>)
    2334:	689b      	ldr	r3, [r3, #8]
    2336:	021b      	lsls	r3, r3, #8
    2338:	0c1b      	lsrs	r3, r3, #16
    233a:	b29b      	uxth	r3, r3
    233c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    233e:	4b16      	ldr	r3, [pc, #88]	; (2398 <system_gclk_gen_get_hz+0xd0>)
    2340:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2342:	2313      	movs	r3, #19
    2344:	18fb      	adds	r3, r7, r3
    2346:	781b      	ldrb	r3, [r3, #0]
    2348:	2b00      	cmp	r3, #0
    234a:	d109      	bne.n	2360 <system_gclk_gen_get_hz+0x98>
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	2b01      	cmp	r3, #1
    2350:	d906      	bls.n	2360 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2352:	4b12      	ldr	r3, [pc, #72]	; (239c <system_gclk_gen_get_hz+0xd4>)
    2354:	68f9      	ldr	r1, [r7, #12]
    2356:	6978      	ldr	r0, [r7, #20]
    2358:	4798      	blx	r3
    235a:	0003      	movs	r3, r0
    235c:	617b      	str	r3, [r7, #20]
    235e:	e00a      	b.n	2376 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2360:	2313      	movs	r3, #19
    2362:	18fb      	adds	r3, r7, r3
    2364:	781b      	ldrb	r3, [r3, #0]
    2366:	2b00      	cmp	r3, #0
    2368:	d005      	beq.n	2376 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    236a:	68fb      	ldr	r3, [r7, #12]
    236c:	3301      	adds	r3, #1
    236e:	697a      	ldr	r2, [r7, #20]
    2370:	40da      	lsrs	r2, r3
    2372:	0013      	movs	r3, r2
    2374:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2376:	697b      	ldr	r3, [r7, #20]
}
    2378:	0018      	movs	r0, r3
    237a:	46bd      	mov	sp, r7
    237c:	b006      	add	sp, #24
    237e:	bd80      	pop	{r7, pc}
    2380:	000020f9 	.word	0x000020f9
    2384:	000020d1 	.word	0x000020d1
    2388:	40000c04 	.word	0x40000c04
    238c:	40000c00 	.word	0x40000c00
    2390:	00001d89 	.word	0x00001d89
    2394:	40000c08 	.word	0x40000c08
    2398:	000020e5 	.word	0x000020e5
    239c:	00002b3d 	.word	0x00002b3d

000023a0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    23a0:	b580      	push	{r7, lr}
    23a2:	b084      	sub	sp, #16
    23a4:	af00      	add	r7, sp, #0
    23a6:	0002      	movs	r2, r0
    23a8:	6039      	str	r1, [r7, #0]
    23aa:	1dfb      	adds	r3, r7, #7
    23ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    23ae:	1dfb      	adds	r3, r7, #7
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    23b4:	683b      	ldr	r3, [r7, #0]
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	021b      	lsls	r3, r3, #8
    23ba:	001a      	movs	r2, r3
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	4313      	orrs	r3, r2
    23c0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    23c2:	1dfb      	adds	r3, r7, #7
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	0018      	movs	r0, r3
    23c8:	4b04      	ldr	r3, [pc, #16]	; (23dc <system_gclk_chan_set_config+0x3c>)
    23ca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    23cc:	4b04      	ldr	r3, [pc, #16]	; (23e0 <system_gclk_chan_set_config+0x40>)
    23ce:	68fa      	ldr	r2, [r7, #12]
    23d0:	b292      	uxth	r2, r2
    23d2:	805a      	strh	r2, [r3, #2]
}
    23d4:	46c0      	nop			; (mov r8, r8)
    23d6:	46bd      	mov	sp, r7
    23d8:	b004      	add	sp, #16
    23da:	bd80      	pop	{r7, pc}
    23dc:	0000242d 	.word	0x0000242d
    23e0:	40000c00 	.word	0x40000c00

000023e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    23e4:	b580      	push	{r7, lr}
    23e6:	b082      	sub	sp, #8
    23e8:	af00      	add	r7, sp, #0
    23ea:	0002      	movs	r2, r0
    23ec:	1dfb      	adds	r3, r7, #7
    23ee:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    23f0:	4b0a      	ldr	r3, [pc, #40]	; (241c <system_gclk_chan_enable+0x38>)
    23f2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23f4:	4a0a      	ldr	r2, [pc, #40]	; (2420 <system_gclk_chan_enable+0x3c>)
    23f6:	1dfb      	adds	r3, r7, #7
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    23fc:	4909      	ldr	r1, [pc, #36]	; (2424 <system_gclk_chan_enable+0x40>)
    23fe:	4b09      	ldr	r3, [pc, #36]	; (2424 <system_gclk_chan_enable+0x40>)
    2400:	885b      	ldrh	r3, [r3, #2]
    2402:	b29b      	uxth	r3, r3
    2404:	2280      	movs	r2, #128	; 0x80
    2406:	01d2      	lsls	r2, r2, #7
    2408:	4313      	orrs	r3, r2
    240a:	b29b      	uxth	r3, r3
    240c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <system_gclk_chan_enable+0x44>)
    2410:	4798      	blx	r3
}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	46bd      	mov	sp, r7
    2416:	b002      	add	sp, #8
    2418:	bd80      	pop	{r7, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	000020d1 	.word	0x000020d1
    2420:	40000c02 	.word	0x40000c02
    2424:	40000c00 	.word	0x40000c00
    2428:	000020e5 	.word	0x000020e5

0000242c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    242c:	b580      	push	{r7, lr}
    242e:	b084      	sub	sp, #16
    2430:	af00      	add	r7, sp, #0
    2432:	0002      	movs	r2, r0
    2434:	1dfb      	adds	r3, r7, #7
    2436:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2438:	4b1c      	ldr	r3, [pc, #112]	; (24ac <system_gclk_chan_disable+0x80>)
    243a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    243c:	4a1c      	ldr	r2, [pc, #112]	; (24b0 <system_gclk_chan_disable+0x84>)
    243e:	1dfb      	adds	r3, r7, #7
    2440:	781b      	ldrb	r3, [r3, #0]
    2442:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2444:	4b1b      	ldr	r3, [pc, #108]	; (24b4 <system_gclk_chan_disable+0x88>)
    2446:	885b      	ldrh	r3, [r3, #2]
    2448:	051b      	lsls	r3, r3, #20
    244a:	0f1b      	lsrs	r3, r3, #28
    244c:	b2db      	uxtb	r3, r3
    244e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2450:	4a18      	ldr	r2, [pc, #96]	; (24b4 <system_gclk_chan_disable+0x88>)
    2452:	8853      	ldrh	r3, [r2, #2]
    2454:	4918      	ldr	r1, [pc, #96]	; (24b8 <system_gclk_chan_disable+0x8c>)
    2456:	400b      	ands	r3, r1
    2458:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    245a:	4a16      	ldr	r2, [pc, #88]	; (24b4 <system_gclk_chan_disable+0x88>)
    245c:	4b15      	ldr	r3, [pc, #84]	; (24b4 <system_gclk_chan_disable+0x88>)
    245e:	885b      	ldrh	r3, [r3, #2]
    2460:	b29b      	uxth	r3, r3
    2462:	4916      	ldr	r1, [pc, #88]	; (24bc <system_gclk_chan_disable+0x90>)
    2464:	400b      	ands	r3, r1
    2466:	b29b      	uxth	r3, r3
    2468:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	4b11      	ldr	r3, [pc, #68]	; (24b4 <system_gclk_chan_disable+0x88>)
    246e:	885b      	ldrh	r3, [r3, #2]
    2470:	b29b      	uxth	r3, r3
    2472:	001a      	movs	r2, r3
    2474:	2380      	movs	r3, #128	; 0x80
    2476:	01db      	lsls	r3, r3, #7
    2478:	4013      	ands	r3, r2
    247a:	d1f7      	bne.n	246c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    247c:	4a0d      	ldr	r2, [pc, #52]	; (24b4 <system_gclk_chan_disable+0x88>)
    247e:	68fb      	ldr	r3, [r7, #12]
    2480:	b2db      	uxtb	r3, r3
    2482:	1c19      	adds	r1, r3, #0
    2484:	230f      	movs	r3, #15
    2486:	400b      	ands	r3, r1
    2488:	b2d9      	uxtb	r1, r3
    248a:	8853      	ldrh	r3, [r2, #2]
    248c:	1c08      	adds	r0, r1, #0
    248e:	210f      	movs	r1, #15
    2490:	4001      	ands	r1, r0
    2492:	0208      	lsls	r0, r1, #8
    2494:	4908      	ldr	r1, [pc, #32]	; (24b8 <system_gclk_chan_disable+0x8c>)
    2496:	400b      	ands	r3, r1
    2498:	1c19      	adds	r1, r3, #0
    249a:	1c03      	adds	r3, r0, #0
    249c:	430b      	orrs	r3, r1
    249e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    24a0:	4b07      	ldr	r3, [pc, #28]	; (24c0 <system_gclk_chan_disable+0x94>)
    24a2:	4798      	blx	r3
}
    24a4:	46c0      	nop			; (mov r8, r8)
    24a6:	46bd      	mov	sp, r7
    24a8:	b004      	add	sp, #16
    24aa:	bd80      	pop	{r7, pc}
    24ac:	000020d1 	.word	0x000020d1
    24b0:	40000c02 	.word	0x40000c02
    24b4:	40000c00 	.word	0x40000c00
    24b8:	fffff0ff 	.word	0xfffff0ff
    24bc:	ffffbfff 	.word	0xffffbfff
    24c0:	000020e5 	.word	0x000020e5

000024c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    24c4:	b580      	push	{r7, lr}
    24c6:	b084      	sub	sp, #16
    24c8:	af00      	add	r7, sp, #0
    24ca:	0002      	movs	r2, r0
    24cc:	1dfb      	adds	r3, r7, #7
    24ce:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    24d0:	4b0d      	ldr	r3, [pc, #52]	; (2508 <system_gclk_chan_get_hz+0x44>)
    24d2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24d4:	4a0d      	ldr	r2, [pc, #52]	; (250c <system_gclk_chan_get_hz+0x48>)
    24d6:	1dfb      	adds	r3, r7, #7
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    24dc:	4b0c      	ldr	r3, [pc, #48]	; (2510 <system_gclk_chan_get_hz+0x4c>)
    24de:	885b      	ldrh	r3, [r3, #2]
    24e0:	051b      	lsls	r3, r3, #20
    24e2:	0f1b      	lsrs	r3, r3, #28
    24e4:	b2da      	uxtb	r2, r3
    24e6:	230f      	movs	r3, #15
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    24ec:	4b09      	ldr	r3, [pc, #36]	; (2514 <system_gclk_chan_get_hz+0x50>)
    24ee:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    24f0:	230f      	movs	r3, #15
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	0018      	movs	r0, r3
    24f8:	4b07      	ldr	r3, [pc, #28]	; (2518 <system_gclk_chan_get_hz+0x54>)
    24fa:	4798      	blx	r3
    24fc:	0003      	movs	r3, r0
}
    24fe:	0018      	movs	r0, r3
    2500:	46bd      	mov	sp, r7
    2502:	b004      	add	sp, #16
    2504:	bd80      	pop	{r7, pc}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	000020d1 	.word	0x000020d1
    250c:	40000c02 	.word	0x40000c02
    2510:	40000c00 	.word	0x40000c00
    2514:	000020e5 	.word	0x000020e5
    2518:	000022c9 	.word	0x000022c9

0000251c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    251c:	b580      	push	{r7, lr}
    251e:	b084      	sub	sp, #16
    2520:	af00      	add	r7, sp, #0
    2522:	0002      	movs	r2, r0
    2524:	1dfb      	adds	r3, r7, #7
    2526:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2528:	230f      	movs	r3, #15
    252a:	18fb      	adds	r3, r7, r3
    252c:	1dfa      	adds	r2, r7, #7
    252e:	7812      	ldrb	r2, [r2, #0]
    2530:	09d2      	lsrs	r2, r2, #7
    2532:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2534:	230e      	movs	r3, #14
    2536:	18fb      	adds	r3, r7, r3
    2538:	1dfa      	adds	r2, r7, #7
    253a:	7812      	ldrb	r2, [r2, #0]
    253c:	0952      	lsrs	r2, r2, #5
    253e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2540:	4b0d      	ldr	r3, [pc, #52]	; (2578 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2542:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2544:	230f      	movs	r3, #15
    2546:	18fb      	adds	r3, r7, r3
    2548:	781b      	ldrb	r3, [r3, #0]
    254a:	2b00      	cmp	r3, #0
    254c:	d10f      	bne.n	256e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    254e:	230f      	movs	r3, #15
    2550:	18fb      	adds	r3, r7, r3
    2552:	781b      	ldrb	r3, [r3, #0]
    2554:	009b      	lsls	r3, r3, #2
    2556:	2210      	movs	r2, #16
    2558:	4694      	mov	ip, r2
    255a:	44bc      	add	ip, r7
    255c:	4463      	add	r3, ip
    255e:	3b08      	subs	r3, #8
    2560:	681a      	ldr	r2, [r3, #0]
    2562:	230e      	movs	r3, #14
    2564:	18fb      	adds	r3, r7, r3
    2566:	781b      	ldrb	r3, [r3, #0]
    2568:	01db      	lsls	r3, r3, #7
    256a:	18d3      	adds	r3, r2, r3
    256c:	e000      	b.n	2570 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    256e:	2300      	movs	r3, #0
	}
}
    2570:	0018      	movs	r0, r3
    2572:	46bd      	mov	sp, r7
    2574:	b004      	add	sp, #16
    2576:	bd80      	pop	{r7, pc}
    2578:	41004400 	.word	0x41004400

0000257c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    257c:	b580      	push	{r7, lr}
    257e:	b088      	sub	sp, #32
    2580:	af00      	add	r7, sp, #0
    2582:	60f8      	str	r0, [r7, #12]
    2584:	60b9      	str	r1, [r7, #8]
    2586:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2588:	2300      	movs	r3, #0
    258a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	78db      	ldrb	r3, [r3, #3]
    2590:	2201      	movs	r2, #1
    2592:	4053      	eors	r3, r2
    2594:	b2db      	uxtb	r3, r3
    2596:	2b00      	cmp	r3, #0
    2598:	d035      	beq.n	2606 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    259a:	687b      	ldr	r3, [r7, #4]
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b80      	cmp	r3, #128	; 0x80
    25a0:	d00b      	beq.n	25ba <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    25a2:	69fb      	ldr	r3, [r7, #28]
    25a4:	2280      	movs	r2, #128	; 0x80
    25a6:	0252      	lsls	r2, r2, #9
    25a8:	4313      	orrs	r3, r2
    25aa:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    25ac:	687b      	ldr	r3, [r7, #4]
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	061b      	lsls	r3, r3, #24
    25b2:	001a      	movs	r2, r3
    25b4:	69fb      	ldr	r3, [r7, #28]
    25b6:	4313      	orrs	r3, r2
    25b8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	785b      	ldrb	r3, [r3, #1]
    25be:	2b00      	cmp	r3, #0
    25c0:	d003      	beq.n	25ca <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    25c2:	687b      	ldr	r3, [r7, #4]
    25c4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25c6:	2b02      	cmp	r3, #2
    25c8:	d110      	bne.n	25ec <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    25ca:	69fb      	ldr	r3, [r7, #28]
    25cc:	2280      	movs	r2, #128	; 0x80
    25ce:	0292      	lsls	r2, r2, #10
    25d0:	4313      	orrs	r3, r2
    25d2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	789b      	ldrb	r3, [r3, #2]
    25d8:	2b00      	cmp	r3, #0
    25da:	d004      	beq.n	25e6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    25dc:	69fb      	ldr	r3, [r7, #28]
    25de:	2280      	movs	r2, #128	; 0x80
    25e0:	02d2      	lsls	r2, r2, #11
    25e2:	4313      	orrs	r3, r2
    25e4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    25e6:	68fb      	ldr	r3, [r7, #12]
    25e8:	68ba      	ldr	r2, [r7, #8]
    25ea:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	785b      	ldrb	r3, [r3, #1]
    25f0:	2b01      	cmp	r3, #1
    25f2:	d003      	beq.n	25fc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25f8:	2b02      	cmp	r3, #2
    25fa:	d107      	bne.n	260c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    25fc:	69fb      	ldr	r3, [r7, #28]
    25fe:	4a22      	ldr	r2, [pc, #136]	; (2688 <_system_pinmux_config+0x10c>)
    2600:	4013      	ands	r3, r2
    2602:	61fb      	str	r3, [r7, #28]
    2604:	e002      	b.n	260c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	68ba      	ldr	r2, [r7, #8]
    260a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    260c:	68bb      	ldr	r3, [r7, #8]
    260e:	041b      	lsls	r3, r3, #16
    2610:	0c1b      	lsrs	r3, r3, #16
    2612:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2614:	68bb      	ldr	r3, [r7, #8]
    2616:	0c1b      	lsrs	r3, r3, #16
    2618:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    261a:	69ba      	ldr	r2, [r7, #24]
    261c:	69fb      	ldr	r3, [r7, #28]
    261e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2620:	22a0      	movs	r2, #160	; 0xa0
    2622:	05d2      	lsls	r2, r2, #23
    2624:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2626:	68fb      	ldr	r3, [r7, #12]
    2628:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    262a:	697a      	ldr	r2, [r7, #20]
    262c:	69fb      	ldr	r3, [r7, #28]
    262e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2630:	22d0      	movs	r2, #208	; 0xd0
    2632:	0612      	lsls	r2, r2, #24
    2634:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2636:	68fb      	ldr	r3, [r7, #12]
    2638:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	78db      	ldrb	r3, [r3, #3]
    263e:	2201      	movs	r2, #1
    2640:	4053      	eors	r3, r2
    2642:	b2db      	uxtb	r3, r3
    2644:	2b00      	cmp	r3, #0
    2646:	d01a      	beq.n	267e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2648:	69fa      	ldr	r2, [r7, #28]
    264a:	2380      	movs	r3, #128	; 0x80
    264c:	02db      	lsls	r3, r3, #11
    264e:	4013      	ands	r3, r2
    2650:	d00a      	beq.n	2668 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	789b      	ldrb	r3, [r3, #2]
    2656:	2b01      	cmp	r3, #1
    2658:	d103      	bne.n	2662 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	68ba      	ldr	r2, [r7, #8]
    265e:	619a      	str	r2, [r3, #24]
    2660:	e002      	b.n	2668 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2662:	68fb      	ldr	r3, [r7, #12]
    2664:	68ba      	ldr	r2, [r7, #8]
    2666:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	785b      	ldrb	r3, [r3, #1]
    266c:	2b01      	cmp	r3, #1
    266e:	d003      	beq.n	2678 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2674:	2b02      	cmp	r3, #2
    2676:	d102      	bne.n	267e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2678:	68fb      	ldr	r3, [r7, #12]
    267a:	68ba      	ldr	r2, [r7, #8]
    267c:	609a      	str	r2, [r3, #8]
		}
	}
}
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	46bd      	mov	sp, r7
    2682:	b008      	add	sp, #32
    2684:	bd80      	pop	{r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	fffbffff 	.word	0xfffbffff

0000268c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    268c:	b580      	push	{r7, lr}
    268e:	b084      	sub	sp, #16
    2690:	af00      	add	r7, sp, #0
    2692:	0002      	movs	r2, r0
    2694:	6039      	str	r1, [r7, #0]
    2696:	1dfb      	adds	r3, r7, #7
    2698:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    269a:	1dfb      	adds	r3, r7, #7
    269c:	781b      	ldrb	r3, [r3, #0]
    269e:	0018      	movs	r0, r3
    26a0:	4b0a      	ldr	r3, [pc, #40]	; (26cc <system_pinmux_pin_set_config+0x40>)
    26a2:	4798      	blx	r3
    26a4:	0003      	movs	r3, r0
    26a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    26a8:	1dfb      	adds	r3, r7, #7
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	221f      	movs	r2, #31
    26ae:	4013      	ands	r3, r2
    26b0:	2201      	movs	r2, #1
    26b2:	409a      	lsls	r2, r3
    26b4:	0013      	movs	r3, r2
    26b6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    26b8:	683a      	ldr	r2, [r7, #0]
    26ba:	68b9      	ldr	r1, [r7, #8]
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	0018      	movs	r0, r3
    26c0:	4b03      	ldr	r3, [pc, #12]	; (26d0 <system_pinmux_pin_set_config+0x44>)
    26c2:	4798      	blx	r3
}
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	46bd      	mov	sp, r7
    26c8:	b004      	add	sp, #16
    26ca:	bd80      	pop	{r7, pc}
    26cc:	0000251d 	.word	0x0000251d
    26d0:	0000257d 	.word	0x0000257d

000026d4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	af00      	add	r7, sp, #0
	return;
    26d8:	46c0      	nop			; (mov r8, r8)
}
    26da:	46bd      	mov	sp, r7
    26dc:	bd80      	pop	{r7, pc}
	...

000026e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    26e4:	4b06      	ldr	r3, [pc, #24]	; (2700 <system_init+0x20>)
    26e6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    26e8:	4b06      	ldr	r3, [pc, #24]	; (2704 <system_init+0x24>)
    26ea:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    26ec:	4b06      	ldr	r3, [pc, #24]	; (2708 <system_init+0x28>)
    26ee:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    26f0:	4b06      	ldr	r3, [pc, #24]	; (270c <system_init+0x2c>)
    26f2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    26f4:	4b06      	ldr	r3, [pc, #24]	; (2710 <system_init+0x30>)
    26f6:	4798      	blx	r3
}
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	46bd      	mov	sp, r7
    26fc:	bd80      	pop	{r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	00001fa1 	.word	0x00001fa1
    2704:	00001b91 	.word	0x00001b91
    2708:	000026d5 	.word	0x000026d5
    270c:	000026d5 	.word	0x000026d5
    2710:	000026d5 	.word	0x000026d5

00002714 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2714:	b580      	push	{r7, lr}
    2716:	b082      	sub	sp, #8
    2718:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    271a:	4b2f      	ldr	r3, [pc, #188]	; (27d8 <Reset_Handler+0xc4>)
    271c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    271e:	4b2f      	ldr	r3, [pc, #188]	; (27dc <Reset_Handler+0xc8>)
    2720:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2722:	687a      	ldr	r2, [r7, #4]
    2724:	683b      	ldr	r3, [r7, #0]
    2726:	429a      	cmp	r2, r3
    2728:	d00c      	beq.n	2744 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    272a:	e007      	b.n	273c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    272c:	683b      	ldr	r3, [r7, #0]
    272e:	1d1a      	adds	r2, r3, #4
    2730:	603a      	str	r2, [r7, #0]
    2732:	687a      	ldr	r2, [r7, #4]
    2734:	1d11      	adds	r1, r2, #4
    2736:	6079      	str	r1, [r7, #4]
    2738:	6812      	ldr	r2, [r2, #0]
    273a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    273c:	683a      	ldr	r2, [r7, #0]
    273e:	4b28      	ldr	r3, [pc, #160]	; (27e0 <Reset_Handler+0xcc>)
    2740:	429a      	cmp	r2, r3
    2742:	d3f3      	bcc.n	272c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2744:	4b27      	ldr	r3, [pc, #156]	; (27e4 <Reset_Handler+0xd0>)
    2746:	603b      	str	r3, [r7, #0]
    2748:	e004      	b.n	2754 <Reset_Handler+0x40>
                *pDest++ = 0;
    274a:	683b      	ldr	r3, [r7, #0]
    274c:	1d1a      	adds	r2, r3, #4
    274e:	603a      	str	r2, [r7, #0]
    2750:	2200      	movs	r2, #0
    2752:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    2754:	683a      	ldr	r2, [r7, #0]
    2756:	4b24      	ldr	r3, [pc, #144]	; (27e8 <Reset_Handler+0xd4>)
    2758:	429a      	cmp	r2, r3
    275a:	d3f6      	bcc.n	274a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    275c:	4b23      	ldr	r3, [pc, #140]	; (27ec <Reset_Handler+0xd8>)
    275e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2760:	4b23      	ldr	r3, [pc, #140]	; (27f0 <Reset_Handler+0xdc>)
    2762:	687a      	ldr	r2, [r7, #4]
    2764:	21ff      	movs	r1, #255	; 0xff
    2766:	438a      	bics	r2, r1
    2768:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    276a:	4a22      	ldr	r2, [pc, #136]	; (27f4 <Reset_Handler+0xe0>)
    276c:	2390      	movs	r3, #144	; 0x90
    276e:	005b      	lsls	r3, r3, #1
    2770:	2102      	movs	r1, #2
    2772:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2774:	4a20      	ldr	r2, [pc, #128]	; (27f8 <Reset_Handler+0xe4>)
    2776:	78d3      	ldrb	r3, [r2, #3]
    2778:	2103      	movs	r1, #3
    277a:	438b      	bics	r3, r1
    277c:	1c19      	adds	r1, r3, #0
    277e:	2302      	movs	r3, #2
    2780:	430b      	orrs	r3, r1
    2782:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2784:	4a1c      	ldr	r2, [pc, #112]	; (27f8 <Reset_Handler+0xe4>)
    2786:	78d3      	ldrb	r3, [r2, #3]
    2788:	210c      	movs	r1, #12
    278a:	438b      	bics	r3, r1
    278c:	1c19      	adds	r1, r3, #0
    278e:	2308      	movs	r3, #8
    2790:	430b      	orrs	r3, r1
    2792:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2794:	4a19      	ldr	r2, [pc, #100]	; (27fc <Reset_Handler+0xe8>)
    2796:	7b93      	ldrb	r3, [r2, #14]
    2798:	2130      	movs	r1, #48	; 0x30
    279a:	438b      	bics	r3, r1
    279c:	1c19      	adds	r1, r3, #0
    279e:	2320      	movs	r3, #32
    27a0:	430b      	orrs	r3, r1
    27a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27a4:	4a15      	ldr	r2, [pc, #84]	; (27fc <Reset_Handler+0xe8>)
    27a6:	7b93      	ldrb	r3, [r2, #14]
    27a8:	210c      	movs	r1, #12
    27aa:	438b      	bics	r3, r1
    27ac:	1c19      	adds	r1, r3, #0
    27ae:	2308      	movs	r3, #8
    27b0:	430b      	orrs	r3, r1
    27b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27b4:	4a11      	ldr	r2, [pc, #68]	; (27fc <Reset_Handler+0xe8>)
    27b6:	7b93      	ldrb	r3, [r2, #14]
    27b8:	2103      	movs	r1, #3
    27ba:	438b      	bics	r3, r1
    27bc:	1c19      	adds	r1, r3, #0
    27be:	2302      	movs	r3, #2
    27c0:	430b      	orrs	r3, r1
    27c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    27c4:	4a0e      	ldr	r2, [pc, #56]	; (2800 <Reset_Handler+0xec>)
    27c6:	6853      	ldr	r3, [r2, #4]
    27c8:	2180      	movs	r1, #128	; 0x80
    27ca:	430b      	orrs	r3, r1
    27cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    27ce:	4b0d      	ldr	r3, [pc, #52]	; (2804 <Reset_Handler+0xf0>)
    27d0:	4798      	blx	r3

        /* Branch to main function */
        main();
    27d2:	4b0d      	ldr	r3, [pc, #52]	; (2808 <Reset_Handler+0xf4>)
    27d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    27d6:	e7fe      	b.n	27d6 <Reset_Handler+0xc2>
    27d8:	00002e64 	.word	0x00002e64
    27dc:	20000000 	.word	0x20000000
    27e0:	2000001c 	.word	0x2000001c
    27e4:	2000001c 	.word	0x2000001c
    27e8:	20000148 	.word	0x20000148
    27ec:	00000000 	.word	0x00000000
    27f0:	e000ed00 	.word	0xe000ed00
    27f4:	41007000 	.word	0x41007000
    27f8:	41005000 	.word	0x41005000
    27fc:	41004800 	.word	0x41004800
    2800:	41004000 	.word	0x41004000
    2804:	00002ca9 	.word	0x00002ca9
    2808:	00002931 	.word	0x00002931

0000280c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    280c:	b580      	push	{r7, lr}
    280e:	af00      	add	r7, sp, #0
        while (1) {
    2810:	e7fe      	b.n	2810 <Dummy_Handler+0x4>
	...

00002814 <system_cpu_clock_set_divider>:
{
    2814:	b580      	push	{r7, lr}
    2816:	b082      	sub	sp, #8
    2818:	af00      	add	r7, sp, #0
    281a:	0002      	movs	r2, r0
    281c:	1dfb      	adds	r3, r7, #7
    281e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2820:	4a03      	ldr	r2, [pc, #12]	; (2830 <system_cpu_clock_set_divider+0x1c>)
    2822:	1dfb      	adds	r3, r7, #7
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	7213      	strb	r3, [r2, #8]
}
    2828:	46c0      	nop			; (mov r8, r8)
    282a:	46bd      	mov	sp, r7
    282c:	b002      	add	sp, #8
    282e:	bd80      	pop	{r7, pc}
    2830:	40000400 	.word	0x40000400

00002834 <system_pinmux_get_group_from_gpio_pin>:
{
    2834:	b580      	push	{r7, lr}
    2836:	b084      	sub	sp, #16
    2838:	af00      	add	r7, sp, #0
    283a:	0002      	movs	r2, r0
    283c:	1dfb      	adds	r3, r7, #7
    283e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2840:	230f      	movs	r3, #15
    2842:	18fb      	adds	r3, r7, r3
    2844:	1dfa      	adds	r2, r7, #7
    2846:	7812      	ldrb	r2, [r2, #0]
    2848:	09d2      	lsrs	r2, r2, #7
    284a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    284c:	230e      	movs	r3, #14
    284e:	18fb      	adds	r3, r7, r3
    2850:	1dfa      	adds	r2, r7, #7
    2852:	7812      	ldrb	r2, [r2, #0]
    2854:	0952      	lsrs	r2, r2, #5
    2856:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2858:	4b0d      	ldr	r3, [pc, #52]	; (2890 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    285a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    285c:	230f      	movs	r3, #15
    285e:	18fb      	adds	r3, r7, r3
    2860:	781b      	ldrb	r3, [r3, #0]
    2862:	2b00      	cmp	r3, #0
    2864:	d10f      	bne.n	2886 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2866:	230f      	movs	r3, #15
    2868:	18fb      	adds	r3, r7, r3
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	009b      	lsls	r3, r3, #2
    286e:	2210      	movs	r2, #16
    2870:	4694      	mov	ip, r2
    2872:	44bc      	add	ip, r7
    2874:	4463      	add	r3, ip
    2876:	3b08      	subs	r3, #8
    2878:	681a      	ldr	r2, [r3, #0]
    287a:	230e      	movs	r3, #14
    287c:	18fb      	adds	r3, r7, r3
    287e:	781b      	ldrb	r3, [r3, #0]
    2880:	01db      	lsls	r3, r3, #7
    2882:	18d3      	adds	r3, r2, r3
    2884:	e000      	b.n	2888 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2886:	2300      	movs	r3, #0
}
    2888:	0018      	movs	r0, r3
    288a:	46bd      	mov	sp, r7
    288c:	b004      	add	sp, #16
    288e:	bd80      	pop	{r7, pc}
    2890:	41004400 	.word	0x41004400

00002894 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2894:	b580      	push	{r7, lr}
    2896:	b082      	sub	sp, #8
    2898:	af00      	add	r7, sp, #0
    289a:	0002      	movs	r2, r0
    289c:	1dfb      	adds	r3, r7, #7
    289e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    28a0:	1dfb      	adds	r3, r7, #7
    28a2:	781b      	ldrb	r3, [r3, #0]
    28a4:	0018      	movs	r0, r3
    28a6:	4b03      	ldr	r3, [pc, #12]	; (28b4 <port_get_group_from_gpio_pin+0x20>)
    28a8:	4798      	blx	r3
    28aa:	0003      	movs	r3, r0
}
    28ac:	0018      	movs	r0, r3
    28ae:	46bd      	mov	sp, r7
    28b0:	b002      	add	sp, #8
    28b2:	bd80      	pop	{r7, pc}
    28b4:	00002835 	.word	0x00002835

000028b8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    28b8:	b580      	push	{r7, lr}
    28ba:	b082      	sub	sp, #8
    28bc:	af00      	add	r7, sp, #0
    28be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	2200      	movs	r2, #0
    28c4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	2201      	movs	r2, #1
    28ca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	2200      	movs	r2, #0
    28d0:	709a      	strb	r2, [r3, #2]
}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	46bd      	mov	sp, r7
    28d6:	b002      	add	sp, #8
    28d8:	bd80      	pop	{r7, pc}
	...

000028dc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    28dc:	b580      	push	{r7, lr}
    28de:	b084      	sub	sp, #16
    28e0:	af00      	add	r7, sp, #0
    28e2:	0002      	movs	r2, r0
    28e4:	1dfb      	adds	r3, r7, #7
    28e6:	701a      	strb	r2, [r3, #0]
    28e8:	1dbb      	adds	r3, r7, #6
    28ea:	1c0a      	adds	r2, r1, #0
    28ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    28ee:	1dfb      	adds	r3, r7, #7
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	0018      	movs	r0, r3
    28f4:	4b0d      	ldr	r3, [pc, #52]	; (292c <port_pin_set_output_level+0x50>)
    28f6:	4798      	blx	r3
    28f8:	0003      	movs	r3, r0
    28fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    28fc:	1dfb      	adds	r3, r7, #7
    28fe:	781b      	ldrb	r3, [r3, #0]
    2900:	221f      	movs	r2, #31
    2902:	4013      	ands	r3, r2
    2904:	2201      	movs	r2, #1
    2906:	409a      	lsls	r2, r3
    2908:	0013      	movs	r3, r2
    290a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    290c:	1dbb      	adds	r3, r7, #6
    290e:	781b      	ldrb	r3, [r3, #0]
    2910:	2b00      	cmp	r3, #0
    2912:	d003      	beq.n	291c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2914:	68fb      	ldr	r3, [r7, #12]
    2916:	68ba      	ldr	r2, [r7, #8]
    2918:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    291a:	e002      	b.n	2922 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    291c:	68fb      	ldr	r3, [r7, #12]
    291e:	68ba      	ldr	r2, [r7, #8]
    2920:	615a      	str	r2, [r3, #20]
}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	46bd      	mov	sp, r7
    2926:	b004      	add	sp, #16
    2928:	bd80      	pop	{r7, pc}
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	00002895 	.word	0x00002895

00002930 <main>:

/************************************************************************/
/*                                      Main                            */
/************************************************************************/
int main (void)
{
    2930:	b580      	push	{r7, lr}
    2932:	b082      	sub	sp, #8
    2934:	af00      	add	r7, sp, #0
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    2936:	1d3b      	adds	r3, r7, #4
    2938:	4a04      	ldr	r2, [pc, #16]	; (294c <main+0x1c>)
    293a:	6812      	ldr	r2, [r2, #0]
    293c:	601a      	str	r2, [r3, #0]

    // initialize all the subsystems on the MCU
    simSysInit();
    293e:	4b04      	ldr	r3, [pc, #16]	; (2950 <main+0x20>)
    2940:	4798      	blx	r3
        
		
		
        // send an AT command to the 915 MHz module
       // uart915_write_cmd("AT\r");
		uart915_write_cmd("AT+SEND=test\r\n");
    2942:	4b04      	ldr	r3, [pc, #16]	; (2954 <main+0x24>)
    2944:	0018      	movs	r0, r3
    2946:	4b04      	ldr	r3, [pc, #16]	; (2958 <main+0x28>)
    2948:	4798      	blx	r3
    294a:	e7fa      	b.n	2942 <main+0x12>
    294c:	00002e40 	.word	0x00002e40
    2950:	0000295d 	.word	0x0000295d
    2954:	00002e30 	.word	0x00002e30
    2958:	0000057d 	.word	0x0000057d

0000295c <simSysInit>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes all relevant subsystems.
 */
void simSysInit(void)
{
    295c:	b580      	push	{r7, lr}
    295e:	af00      	add	r7, sp, #0
	system_init();
    2960:	4b07      	ldr	r3, [pc, #28]	; (2980 <simSysInit+0x24>)
    2962:	4798      	blx	r3
	sys_clk_init();	
    2964:	4b07      	ldr	r3, [pc, #28]	; (2984 <simSysInit+0x28>)
    2966:	4798      	blx	r3
	conf_port_pin();
    2968:	4b07      	ldr	r3, [pc, #28]	; (2988 <simSysInit+0x2c>)
    296a:	4798      	blx	r3
	
	
	
//    spi169_init();
	port_pin_set_output_level(CONFIG245, true);
    296c:	2101      	movs	r1, #1
    296e:	2006      	movs	r0, #6
    2970:	4b06      	ldr	r3, [pc, #24]	; (298c <simSysInit+0x30>)
    2972:	4798      	blx	r3
    
	
	
	//uart245_init();
	uart915_init();
    2974:	4b06      	ldr	r3, [pc, #24]	; (2990 <simSysInit+0x34>)
    2976:	4798      	blx	r3
}
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	46bd      	mov	sp, r7
    297c:	bd80      	pop	{r7, pc}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	000026e1 	.word	0x000026e1
    2984:	00002995 	.word	0x00002995
    2988:	000029b9 	.word	0x000029b9
    298c:	000028dd 	.word	0x000028dd
    2990:	00000399 	.word	0x00000399

00002994 <sys_clk_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes the MCU clocks.
 */
void sys_clk_init(void)
{
    2994:	b580      	push	{r7, lr}
    2996:	af00      	add	r7, sp, #0
	clk_osc8m_init();
    2998:	4b04      	ldr	r3, [pc, #16]	; (29ac <sys_clk_init+0x18>)
    299a:	4798      	blx	r3
	clk_gclk0_init();
    299c:	4b04      	ldr	r3, [pc, #16]	; (29b0 <sys_clk_init+0x1c>)
    299e:	4798      	blx	r3
    delay_init();
    29a0:	4b04      	ldr	r3, [pc, #16]	; (29b4 <sys_clk_init+0x20>)
    29a2:	4798      	blx	r3
}
    29a4:	46c0      	nop			; (mov r8, r8)
    29a6:	46bd      	mov	sp, r7
    29a8:	bd80      	pop	{r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	00002ab9 	.word	0x00002ab9
    29b0:	00002ae5 	.word	0x00002ae5
    29b4:	000006cd 	.word	0x000006cd

000029b8 <conf_port_pin>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    29b8:	b580      	push	{r7, lr}
    29ba:	b082      	sub	sp, #8
    29bc:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    29be:	1d3b      	adds	r3, r7, #4
    29c0:	0018      	movs	r0, r3
    29c2:	4b3a      	ldr	r3, [pc, #232]	; (2aac <conf_port_pin+0xf4>)
    29c4:	4798      	blx	r3
	
	/**************config pin for 245*************/

	
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    29c6:	1d3b      	adds	r3, r7, #4
    29c8:	2200      	movs	r2, #0
    29ca:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    29cc:	1d3b      	adds	r3, r7, #4
    29ce:	2201      	movs	r2, #1
    29d0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS245, &config_port_pin);
    29d2:	1d3b      	adds	r3, r7, #4
    29d4:	0019      	movs	r1, r3
    29d6:	200b      	movs	r0, #11
    29d8:	4b35      	ldr	r3, [pc, #212]	; (2ab0 <conf_port_pin+0xf8>)
    29da:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    29dc:	1d3b      	adds	r3, r7, #4
    29de:	2201      	movs	r2, #1
    29e0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    29e2:	1d3b      	adds	r3, r7, #4
    29e4:	0019      	movs	r1, r3
    29e6:	200a      	movs	r0, #10
    29e8:	4b31      	ldr	r3, [pc, #196]	; (2ab0 <conf_port_pin+0xf8>)
    29ea:	4798      	blx	r3
	port_pin_set_output_level(RTS245, true);
    29ec:	2101      	movs	r1, #1
    29ee:	200a      	movs	r0, #10
    29f0:	4b30      	ldr	r3, [pc, #192]	; (2ab4 <conf_port_pin+0xfc>)
    29f2:	4798      	blx	r3
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    29f4:	1d3b      	adds	r3, r7, #4
    29f6:	0019      	movs	r1, r3
    29f8:	2001      	movs	r0, #1
    29fa:	4b2d      	ldr	r3, [pc, #180]	; (2ab0 <conf_port_pin+0xf8>)
    29fc:	4798      	blx	r3
    port_pin_set_output_level(PAEN245, true);
    29fe:	2101      	movs	r1, #1
    2a00:	2001      	movs	r0, #1
    2a02:	4b2c      	ldr	r3, [pc, #176]	; (2ab4 <conf_port_pin+0xfc>)
    2a04:	4798      	blx	r3
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    2a06:	1d3b      	adds	r3, r7, #4
    2a08:	0019      	movs	r1, r3
    2a0a:	2006      	movs	r0, #6
    2a0c:	4b28      	ldr	r3, [pc, #160]	; (2ab0 <conf_port_pin+0xf8>)
    2a0e:	4798      	blx	r3
    port_pin_set_output_level(CONFIG245, true);
    2a10:	2101      	movs	r1, #1
    2a12:	2006      	movs	r0, #6
    2a14:	4b27      	ldr	r3, [pc, #156]	; (2ab4 <conf_port_pin+0xfc>)
    2a16:	4798      	blx	r3
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    2a18:	1d3b      	adds	r3, r7, #4
    2a1a:	0019      	movs	r1, r3
    2a1c:	2007      	movs	r0, #7
    2a1e:	4b24      	ldr	r3, [pc, #144]	; (2ab0 <conf_port_pin+0xf8>)
    2a20:	4798      	blx	r3
    port_pin_set_output_level(RESET245, true);
    2a22:	2101      	movs	r1, #1
    2a24:	2007      	movs	r0, #7
    2a26:	4b23      	ldr	r3, [pc, #140]	; (2ab4 <conf_port_pin+0xfc>)
    2a28:	4798      	blx	r3
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2a2a:	1d3b      	adds	r3, r7, #4
    2a2c:	2200      	movs	r2, #0
    2a2e:	701a      	strb	r2, [r3, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2a30:	1d3b      	adds	r3, r7, #4
    2a32:	2201      	movs	r2, #1
    2a34:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    2a36:	1d3b      	adds	r3, r7, #4
    2a38:	0019      	movs	r1, r3
    2a3a:	200f      	movs	r0, #15
    2a3c:	4b1c      	ldr	r3, [pc, #112]	; (2ab0 <conf_port_pin+0xf8>)
    2a3e:	4798      	blx	r3
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2a40:	1d3b      	adds	r3, r7, #4
    2a42:	2201      	movs	r2, #1
    2a44:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    2a46:	1d3b      	adds	r3, r7, #4
    2a48:	0019      	movs	r1, r3
    2a4a:	200e      	movs	r0, #14
    2a4c:	4b18      	ldr	r3, [pc, #96]	; (2ab0 <conf_port_pin+0xf8>)
    2a4e:	4798      	blx	r3
    port_pin_set_output_level(RTS915, true);
    2a50:	2101      	movs	r1, #1
    2a52:	200e      	movs	r0, #14
    2a54:	4b17      	ldr	r3, [pc, #92]	; (2ab4 <conf_port_pin+0xfc>)
    2a56:	4798      	blx	r3
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2a58:	1d3b      	adds	r3, r7, #4
    2a5a:	2201      	movs	r2, #1
    2a5c:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    2a5e:	1d3b      	adds	r3, r7, #4
    2a60:	2202      	movs	r2, #2
    2a62:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    2a64:	1d3b      	adds	r3, r7, #4
    2a66:	0019      	movs	r1, r3
    2a68:	202f      	movs	r0, #47	; 0x2f
    2a6a:	4b11      	ldr	r3, [pc, #68]	; (2ab0 <conf_port_pin+0xf8>)
    2a6c:	4798      	blx	r3
    port_pin_set_output_level(WAKE915, true);
    2a6e:	2101      	movs	r1, #1
    2a70:	202f      	movs	r0, #47	; 0x2f
    2a72:	4b10      	ldr	r3, [pc, #64]	; (2ab4 <conf_port_pin+0xfc>)
    2a74:	4798      	blx	r3
	
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2a76:	1d3b      	adds	r3, r7, #4
    2a78:	2201      	movs	r2, #1
    2a7a:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    2a7c:	1d3b      	adds	r3, r7, #4
    2a7e:	2201      	movs	r2, #1
    2a80:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(SS169, &config_port_pin);
    2a82:	1d3b      	adds	r3, r7, #4
    2a84:	0019      	movs	r1, r3
    2a86:	2018      	movs	r0, #24
    2a88:	4b09      	ldr	r3, [pc, #36]	; (2ab0 <conf_port_pin+0xf8>)
    2a8a:	4798      	blx	r3
    port_pin_set_output_level(SS169, true);
    2a8c:	2101      	movs	r1, #1
    2a8e:	2018      	movs	r0, #24
    2a90:	4b08      	ldr	r3, [pc, #32]	; (2ab4 <conf_port_pin+0xfc>)
    2a92:	4798      	blx	r3
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    2a94:	1d3b      	adds	r3, r7, #4
    2a96:	2200      	movs	r2, #0
    2a98:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    2a9a:	1d3b      	adds	r3, r7, #4
    2a9c:	0019      	movs	r1, r3
    2a9e:	2011      	movs	r0, #17
    2aa0:	4b03      	ldr	r3, [pc, #12]	; (2ab0 <conf_port_pin+0xf8>)
    2aa2:	4798      	blx	r3
} // end conf_port_pin(void)
    2aa4:	46c0      	nop			; (mov r8, r8)
    2aa6:	46bd      	mov	sp, r7
    2aa8:	b002      	add	sp, #8
    2aaa:	bd80      	pop	{r7, pc}
    2aac:	000028b9 	.word	0x000028b9
    2ab0:	0000077d 	.word	0x0000077d
    2ab4:	000028dd 	.word	0x000028dd

00002ab8 <clk_osc8m_init>:
 * Return Values(s) : void
 * Description      : Configures the system clock to use the internal
 *  8 MHz oscillator.
 */
void clk_osc8m_init(void)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    2abe:	1d3b      	adds	r3, r7, #4
    2ac0:	2200      	movs	r2, #0
    2ac2:	701a      	strb	r2, [r3, #0]
	osc8_config.on_demand = true;
    2ac4:	1d3b      	adds	r3, r7, #4
    2ac6:	2201      	movs	r2, #1
    2ac8:	709a      	strb	r2, [r3, #2]
	osc8_config.run_in_standby = false;
    2aca:	1d3b      	adds	r3, r7, #4
    2acc:	2200      	movs	r2, #0
    2ace:	705a      	strb	r2, [r3, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    2ad0:	1d3b      	adds	r3, r7, #4
    2ad2:	0018      	movs	r0, r3
    2ad4:	4b02      	ldr	r3, [pc, #8]	; (2ae0 <clk_osc8m_init+0x28>)
    2ad6:	4798      	blx	r3
}
    2ad8:	46c0      	nop			; (mov r8, r8)
    2ada:	46bd      	mov	sp, r7
    2adc:	b002      	add	sp, #8
    2ade:	bd80      	pop	{r7, pc}
    2ae0:	00001e45 	.word	0x00001e45

00002ae4 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b084      	sub	sp, #16
    2ae8:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    2aea:	4b10      	ldr	r3, [pc, #64]	; (2b2c <clk_gclk0_init+0x48>)
    2aec:	4798      	blx	r3
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
    2aee:	2000      	movs	r0, #0
    2af0:	4b0f      	ldr	r3, [pc, #60]	; (2b30 <clk_gclk0_init+0x4c>)
    2af2:	4798      	blx	r3
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    2af4:	1d3b      	adds	r3, r7, #4
    2af6:	2206      	movs	r2, #6
    2af8:	701a      	strb	r2, [r3, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    2afa:	1d3b      	adds	r3, r7, #4
    2afc:	2200      	movs	r2, #0
    2afe:	725a      	strb	r2, [r3, #9]
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    2b00:	1d3b      	adds	r3, r7, #4
    2b02:	2200      	movs	r2, #0
    2b04:	705a      	strb	r2, [r3, #1]
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    2b06:	1d3b      	adds	r3, r7, #4
    2b08:	2201      	movs	r2, #1
    2b0a:	605a      	str	r2, [r3, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
    2b0c:	1d3b      	adds	r3, r7, #4
    2b0e:	2200      	movs	r2, #0
    2b10:	721a      	strb	r2, [r3, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    2b12:	1d3b      	adds	r3, r7, #4
    2b14:	0019      	movs	r1, r3
    2b16:	2000      	movs	r0, #0
    2b18:	4b06      	ldr	r3, [pc, #24]	; (2b34 <clk_gclk0_init+0x50>)
    2b1a:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    2b1c:	2000      	movs	r0, #0
    2b1e:	4b06      	ldr	r3, [pc, #24]	; (2b38 <clk_gclk0_init+0x54>)
    2b20:	4798      	blx	r3
}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	46bd      	mov	sp, r7
    2b26:	b004      	add	sp, #16
    2b28:	bd80      	pop	{r7, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00002119 	.word	0x00002119
    2b30:	00002815 	.word	0x00002815
    2b34:	00002149 	.word	0x00002149
    2b38:	0000226d 	.word	0x0000226d

00002b3c <__udivsi3>:
    2b3c:	2200      	movs	r2, #0
    2b3e:	0843      	lsrs	r3, r0, #1
    2b40:	428b      	cmp	r3, r1
    2b42:	d374      	bcc.n	2c2e <__udivsi3+0xf2>
    2b44:	0903      	lsrs	r3, r0, #4
    2b46:	428b      	cmp	r3, r1
    2b48:	d35f      	bcc.n	2c0a <__udivsi3+0xce>
    2b4a:	0a03      	lsrs	r3, r0, #8
    2b4c:	428b      	cmp	r3, r1
    2b4e:	d344      	bcc.n	2bda <__udivsi3+0x9e>
    2b50:	0b03      	lsrs	r3, r0, #12
    2b52:	428b      	cmp	r3, r1
    2b54:	d328      	bcc.n	2ba8 <__udivsi3+0x6c>
    2b56:	0c03      	lsrs	r3, r0, #16
    2b58:	428b      	cmp	r3, r1
    2b5a:	d30d      	bcc.n	2b78 <__udivsi3+0x3c>
    2b5c:	22ff      	movs	r2, #255	; 0xff
    2b5e:	0209      	lsls	r1, r1, #8
    2b60:	ba12      	rev	r2, r2
    2b62:	0c03      	lsrs	r3, r0, #16
    2b64:	428b      	cmp	r3, r1
    2b66:	d302      	bcc.n	2b6e <__udivsi3+0x32>
    2b68:	1212      	asrs	r2, r2, #8
    2b6a:	0209      	lsls	r1, r1, #8
    2b6c:	d065      	beq.n	2c3a <__udivsi3+0xfe>
    2b6e:	0b03      	lsrs	r3, r0, #12
    2b70:	428b      	cmp	r3, r1
    2b72:	d319      	bcc.n	2ba8 <__udivsi3+0x6c>
    2b74:	e000      	b.n	2b78 <__udivsi3+0x3c>
    2b76:	0a09      	lsrs	r1, r1, #8
    2b78:	0bc3      	lsrs	r3, r0, #15
    2b7a:	428b      	cmp	r3, r1
    2b7c:	d301      	bcc.n	2b82 <__udivsi3+0x46>
    2b7e:	03cb      	lsls	r3, r1, #15
    2b80:	1ac0      	subs	r0, r0, r3
    2b82:	4152      	adcs	r2, r2
    2b84:	0b83      	lsrs	r3, r0, #14
    2b86:	428b      	cmp	r3, r1
    2b88:	d301      	bcc.n	2b8e <__udivsi3+0x52>
    2b8a:	038b      	lsls	r3, r1, #14
    2b8c:	1ac0      	subs	r0, r0, r3
    2b8e:	4152      	adcs	r2, r2
    2b90:	0b43      	lsrs	r3, r0, #13
    2b92:	428b      	cmp	r3, r1
    2b94:	d301      	bcc.n	2b9a <__udivsi3+0x5e>
    2b96:	034b      	lsls	r3, r1, #13
    2b98:	1ac0      	subs	r0, r0, r3
    2b9a:	4152      	adcs	r2, r2
    2b9c:	0b03      	lsrs	r3, r0, #12
    2b9e:	428b      	cmp	r3, r1
    2ba0:	d301      	bcc.n	2ba6 <__udivsi3+0x6a>
    2ba2:	030b      	lsls	r3, r1, #12
    2ba4:	1ac0      	subs	r0, r0, r3
    2ba6:	4152      	adcs	r2, r2
    2ba8:	0ac3      	lsrs	r3, r0, #11
    2baa:	428b      	cmp	r3, r1
    2bac:	d301      	bcc.n	2bb2 <__udivsi3+0x76>
    2bae:	02cb      	lsls	r3, r1, #11
    2bb0:	1ac0      	subs	r0, r0, r3
    2bb2:	4152      	adcs	r2, r2
    2bb4:	0a83      	lsrs	r3, r0, #10
    2bb6:	428b      	cmp	r3, r1
    2bb8:	d301      	bcc.n	2bbe <__udivsi3+0x82>
    2bba:	028b      	lsls	r3, r1, #10
    2bbc:	1ac0      	subs	r0, r0, r3
    2bbe:	4152      	adcs	r2, r2
    2bc0:	0a43      	lsrs	r3, r0, #9
    2bc2:	428b      	cmp	r3, r1
    2bc4:	d301      	bcc.n	2bca <__udivsi3+0x8e>
    2bc6:	024b      	lsls	r3, r1, #9
    2bc8:	1ac0      	subs	r0, r0, r3
    2bca:	4152      	adcs	r2, r2
    2bcc:	0a03      	lsrs	r3, r0, #8
    2bce:	428b      	cmp	r3, r1
    2bd0:	d301      	bcc.n	2bd6 <__udivsi3+0x9a>
    2bd2:	020b      	lsls	r3, r1, #8
    2bd4:	1ac0      	subs	r0, r0, r3
    2bd6:	4152      	adcs	r2, r2
    2bd8:	d2cd      	bcs.n	2b76 <__udivsi3+0x3a>
    2bda:	09c3      	lsrs	r3, r0, #7
    2bdc:	428b      	cmp	r3, r1
    2bde:	d301      	bcc.n	2be4 <__udivsi3+0xa8>
    2be0:	01cb      	lsls	r3, r1, #7
    2be2:	1ac0      	subs	r0, r0, r3
    2be4:	4152      	adcs	r2, r2
    2be6:	0983      	lsrs	r3, r0, #6
    2be8:	428b      	cmp	r3, r1
    2bea:	d301      	bcc.n	2bf0 <__udivsi3+0xb4>
    2bec:	018b      	lsls	r3, r1, #6
    2bee:	1ac0      	subs	r0, r0, r3
    2bf0:	4152      	adcs	r2, r2
    2bf2:	0943      	lsrs	r3, r0, #5
    2bf4:	428b      	cmp	r3, r1
    2bf6:	d301      	bcc.n	2bfc <__udivsi3+0xc0>
    2bf8:	014b      	lsls	r3, r1, #5
    2bfa:	1ac0      	subs	r0, r0, r3
    2bfc:	4152      	adcs	r2, r2
    2bfe:	0903      	lsrs	r3, r0, #4
    2c00:	428b      	cmp	r3, r1
    2c02:	d301      	bcc.n	2c08 <__udivsi3+0xcc>
    2c04:	010b      	lsls	r3, r1, #4
    2c06:	1ac0      	subs	r0, r0, r3
    2c08:	4152      	adcs	r2, r2
    2c0a:	08c3      	lsrs	r3, r0, #3
    2c0c:	428b      	cmp	r3, r1
    2c0e:	d301      	bcc.n	2c14 <__udivsi3+0xd8>
    2c10:	00cb      	lsls	r3, r1, #3
    2c12:	1ac0      	subs	r0, r0, r3
    2c14:	4152      	adcs	r2, r2
    2c16:	0883      	lsrs	r3, r0, #2
    2c18:	428b      	cmp	r3, r1
    2c1a:	d301      	bcc.n	2c20 <__udivsi3+0xe4>
    2c1c:	008b      	lsls	r3, r1, #2
    2c1e:	1ac0      	subs	r0, r0, r3
    2c20:	4152      	adcs	r2, r2
    2c22:	0843      	lsrs	r3, r0, #1
    2c24:	428b      	cmp	r3, r1
    2c26:	d301      	bcc.n	2c2c <__udivsi3+0xf0>
    2c28:	004b      	lsls	r3, r1, #1
    2c2a:	1ac0      	subs	r0, r0, r3
    2c2c:	4152      	adcs	r2, r2
    2c2e:	1a41      	subs	r1, r0, r1
    2c30:	d200      	bcs.n	2c34 <__udivsi3+0xf8>
    2c32:	4601      	mov	r1, r0
    2c34:	4152      	adcs	r2, r2
    2c36:	4610      	mov	r0, r2
    2c38:	4770      	bx	lr
    2c3a:	e7ff      	b.n	2c3c <__udivsi3+0x100>
    2c3c:	b501      	push	{r0, lr}
    2c3e:	2000      	movs	r0, #0
    2c40:	f000 f806 	bl	2c50 <__aeabi_idiv0>
    2c44:	bd02      	pop	{r1, pc}
    2c46:	46c0      	nop			; (mov r8, r8)

00002c48 <__aeabi_uidivmod>:
    2c48:	2900      	cmp	r1, #0
    2c4a:	d0f7      	beq.n	2c3c <__udivsi3+0x100>
    2c4c:	e776      	b.n	2b3c <__udivsi3>
    2c4e:	4770      	bx	lr

00002c50 <__aeabi_idiv0>:
    2c50:	4770      	bx	lr
    2c52:	46c0      	nop			; (mov r8, r8)

00002c54 <__aeabi_lmul>:
    2c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c56:	46ce      	mov	lr, r9
    2c58:	4647      	mov	r7, r8
    2c5a:	0415      	lsls	r5, r2, #16
    2c5c:	0c2d      	lsrs	r5, r5, #16
    2c5e:	002e      	movs	r6, r5
    2c60:	b580      	push	{r7, lr}
    2c62:	0407      	lsls	r7, r0, #16
    2c64:	0c14      	lsrs	r4, r2, #16
    2c66:	0c3f      	lsrs	r7, r7, #16
    2c68:	4699      	mov	r9, r3
    2c6a:	0c03      	lsrs	r3, r0, #16
    2c6c:	437e      	muls	r6, r7
    2c6e:	435d      	muls	r5, r3
    2c70:	4367      	muls	r7, r4
    2c72:	4363      	muls	r3, r4
    2c74:	197f      	adds	r7, r7, r5
    2c76:	0c34      	lsrs	r4, r6, #16
    2c78:	19e4      	adds	r4, r4, r7
    2c7a:	469c      	mov	ip, r3
    2c7c:	42a5      	cmp	r5, r4
    2c7e:	d903      	bls.n	2c88 <__aeabi_lmul+0x34>
    2c80:	2380      	movs	r3, #128	; 0x80
    2c82:	025b      	lsls	r3, r3, #9
    2c84:	4698      	mov	r8, r3
    2c86:	44c4      	add	ip, r8
    2c88:	464b      	mov	r3, r9
    2c8a:	4351      	muls	r1, r2
    2c8c:	4343      	muls	r3, r0
    2c8e:	0436      	lsls	r6, r6, #16
    2c90:	0c36      	lsrs	r6, r6, #16
    2c92:	0c25      	lsrs	r5, r4, #16
    2c94:	0424      	lsls	r4, r4, #16
    2c96:	4465      	add	r5, ip
    2c98:	19a4      	adds	r4, r4, r6
    2c9a:	1859      	adds	r1, r3, r1
    2c9c:	1949      	adds	r1, r1, r5
    2c9e:	0020      	movs	r0, r4
    2ca0:	bc0c      	pop	{r2, r3}
    2ca2:	4690      	mov	r8, r2
    2ca4:	4699      	mov	r9, r3
    2ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ca8 <__libc_init_array>:
    2ca8:	b570      	push	{r4, r5, r6, lr}
    2caa:	2600      	movs	r6, #0
    2cac:	4d0c      	ldr	r5, [pc, #48]	; (2ce0 <__libc_init_array+0x38>)
    2cae:	4c0d      	ldr	r4, [pc, #52]	; (2ce4 <__libc_init_array+0x3c>)
    2cb0:	1b64      	subs	r4, r4, r5
    2cb2:	10a4      	asrs	r4, r4, #2
    2cb4:	42a6      	cmp	r6, r4
    2cb6:	d109      	bne.n	2ccc <__libc_init_array+0x24>
    2cb8:	2600      	movs	r6, #0
    2cba:	f000 f8c3 	bl	2e44 <_init>
    2cbe:	4d0a      	ldr	r5, [pc, #40]	; (2ce8 <__libc_init_array+0x40>)
    2cc0:	4c0a      	ldr	r4, [pc, #40]	; (2cec <__libc_init_array+0x44>)
    2cc2:	1b64      	subs	r4, r4, r5
    2cc4:	10a4      	asrs	r4, r4, #2
    2cc6:	42a6      	cmp	r6, r4
    2cc8:	d105      	bne.n	2cd6 <__libc_init_array+0x2e>
    2cca:	bd70      	pop	{r4, r5, r6, pc}
    2ccc:	00b3      	lsls	r3, r6, #2
    2cce:	58eb      	ldr	r3, [r5, r3]
    2cd0:	4798      	blx	r3
    2cd2:	3601      	adds	r6, #1
    2cd4:	e7ee      	b.n	2cb4 <__libc_init_array+0xc>
    2cd6:	00b3      	lsls	r3, r6, #2
    2cd8:	58eb      	ldr	r3, [r5, r3]
    2cda:	4798      	blx	r3
    2cdc:	3601      	adds	r6, #1
    2cde:	e7f2      	b.n	2cc6 <__libc_init_array+0x1e>
    2ce0:	00002e50 	.word	0x00002e50
    2ce4:	00002e50 	.word	0x00002e50
    2ce8:	00002e50 	.word	0x00002e50
    2cec:	00002e54 	.word	0x00002e54

00002cf0 <strlen>:
    2cf0:	2300      	movs	r3, #0
    2cf2:	5cc2      	ldrb	r2, [r0, r3]
    2cf4:	3301      	adds	r3, #1
    2cf6:	2a00      	cmp	r2, #0
    2cf8:	d1fb      	bne.n	2cf2 <strlen+0x2>
    2cfa:	1e58      	subs	r0, r3, #1
    2cfc:	4770      	bx	lr
    2cfe:	0000      	movs	r0, r0
    2d00:	0a0d5441 	.word	0x0a0d5441
    2d04:	00000000 	.word	0x00000000
    2d08:	4e2b5441 	.word	0x4e2b5441
    2d0c:	333d4d4a 	.word	0x333d4d4a
    2d10:	00000a0d 	.word	0x00000a0d
    2d14:	4e2b5441 	.word	0x4e2b5441
    2d18:	30303d41 	.word	0x30303d41
    2d1c:	32323131 	.word	0x32323131
    2d20:	0a0d3333 	.word	0x0a0d3333
    2d24:	00000000 	.word	0x00000000
    2d28:	4e2b5441 	.word	0x4e2b5441
    2d2c:	303d4b53 	.word	0x303d4b53
    2d30:	32313130 	.word	0x32313130
    2d34:	30333332 	.word	0x30333332
    2d38:	32313130 	.word	0x32313130
    2d3c:	30333332 	.word	0x30333332
    2d40:	32313130 	.word	0x32313130
    2d44:	30333332 	.word	0x30333332
    2d48:	32313130 	.word	0x32313130
    2d4c:	0d333332 	.word	0x0d333332
    2d50:	0000000a 	.word	0x0000000a
    2d54:	442b5441 	.word	0x442b5441
    2d58:	333d4b53 	.word	0x333d4b53
    2d5c:	31323233 	.word	0x31323233
    2d60:	33303031 	.word	0x33303031
    2d64:	31323233 	.word	0x31323233
    2d68:	33303031 	.word	0x33303031
    2d6c:	31323233 	.word	0x31323233
    2d70:	33303031 	.word	0x33303031
    2d74:	31323233 	.word	0x31323233
    2d78:	0d303031 	.word	0x0d303031
    2d7c:	0000000a 	.word	0x0000000a
    2d80:	542b5441 	.word	0x542b5441
    2d84:	3d524458 	.word	0x3d524458
    2d88:	0d385244 	.word	0x0d385244
    2d8c:	0000000a 	.word	0x0000000a
    2d90:	542b5441 	.word	0x542b5441
    2d94:	393d4658 	.word	0x393d4658
    2d98:	30353531 	.word	0x30353531
    2d9c:	30303030 	.word	0x30303030
    2da0:	00000a0d 	.word	0x00000a0d
    2da4:	57265441 	.word	0x57265441
    2da8:	00000a0d 	.word	0x00000a0d
    2dac:	0d5a5441 	.word	0x0d5a5441
    2db0:	0000000a 	.word	0x0000000a
    2db4:	532b5441 	.word	0x532b5441
    2db8:	000a0d44 	.word	0x000a0d44
    2dbc:	522b5441 	.word	0x522b5441
    2dc0:	0d495353 	.word	0x0d495353
    2dc4:	0000000a 	.word	0x0000000a
    2dc8:	42000800 	.word	0x42000800
    2dcc:	42000c00 	.word	0x42000c00
    2dd0:	42001000 	.word	0x42001000
    2dd4:	42001400 	.word	0x42001400
    2dd8:	42001800 	.word	0x42001800
    2ddc:	42001c00 	.word	0x42001c00
    2de0:	0c0b0a09 	.word	0x0c0b0a09
    2de4:	00000e0d 	.word	0x00000e0d
    2de8:	00001da6 	.word	0x00001da6
    2dec:	00001e1e 	.word	0x00001e1e
    2df0:	00001e1e 	.word	0x00001e1e
    2df4:	00001dc4 	.word	0x00001dc4
    2df8:	00001dbe 	.word	0x00001dbe
    2dfc:	00001dca 	.word	0x00001dca
    2e00:	00001dac 	.word	0x00001dac
    2e04:	00001dd0 	.word	0x00001dd0
    2e08:	00001e04 	.word	0x00001e04
    2e0c:	00001ef8 	.word	0x00001ef8
    2e10:	00001f48 	.word	0x00001f48
    2e14:	00001f48 	.word	0x00001f48
    2e18:	00001f44 	.word	0x00001f44
    2e1c:	00001eea 	.word	0x00001eea
    2e20:	00001f0a 	.word	0x00001f0a
    2e24:	00001eda 	.word	0x00001eda
    2e28:	00001f1c 	.word	0x00001f1c
    2e2c:	00001f2e 	.word	0x00001f2e
    2e30:	532b5441 	.word	0x532b5441
    2e34:	3d444e45 	.word	0x3d444e45
    2e38:	74736574 	.word	0x74736574
    2e3c:	00000a0d 	.word	0x00000a0d
    2e40:	aa083862 	.word	0xaa083862

00002e44 <_init>:
    2e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e4a:	bc08      	pop	{r3}
    2e4c:	469e      	mov	lr, r3
    2e4e:	4770      	bx	lr

00002e50 <__init_array_start>:
    2e50:	000000dd 	.word	0x000000dd

00002e54 <_fini>:
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e5a:	bc08      	pop	{r3}
    2e5c:	469e      	mov	lr, r3
    2e5e:	4770      	bx	lr

00002e60 <__fini_array_start>:
    2e60:	000000b5 	.word	0x000000b5
