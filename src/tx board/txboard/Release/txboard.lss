
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00001c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  2000001c  00001c3c  0002001c  2**2
                  ALLOC
  3 .stack        00002000  20000188  00001da8  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002fdee  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f1f  00000000  00000000  0004fe8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b90  00000000  00000000  00053daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d0  00000000  00000000  0005993a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd8  00000000  00000000  00059f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005ec4  00000000  00000000  0005aae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00006643  00000000  00000000  000609a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000eec  00000000  00000000  00066fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 21 00 20 c9 17 00 00 c5 17 00 00 c5 17 00 00     .!. ............
	...
      2c:	c5 17 00 00 00 00 00 00 00 00 00 00 c5 17 00 00     ................
      3c:	c5 17 00 00 c5 17 00 00 c5 17 00 00 c5 17 00 00     ................
      4c:	c5 17 00 00 c5 17 00 00 c5 17 00 00 c5 17 00 00     ................
      5c:	c5 17 00 00 c5 17 00 00 b5 11 00 00 c5 11 00 00     ................
      6c:	d5 11 00 00 e5 11 00 00 f5 11 00 00 05 12 00 00     ................
      7c:	c5 17 00 00 c5 17 00 00 c5 17 00 00 c5 17 00 00     ................
      8c:	c5 17 00 00 c5 17 00 00 c5 17 00 00 c5 17 00 00     ................
      9c:	c5 17 00 00 c5 17 00 00 c5 17 00 00 c5 17 00 00     ................
      ac:	c5 17 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00001c20 	.word	0x00001c20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00001c20 	.word	0x00001c20
     10c:	00001c20 	.word	0x00001c20
     110:	00000000 	.word	0x00000000

00000114 <ringbuff_clear>:
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
    uint8_t ret_val = -1;
     114:	23ff      	movs	r3, #255	; 0xff
    
    // NULL pointer check
    if(pringbuff)
     116:	2800      	cmp	r0, #0
     118:	d002      	beq.n	120 <ringbuff_clear+0xc>
    {
        // clear the read/write values
        pringbuff->write = 0;
     11a:	2300      	movs	r3, #0
     11c:	6043      	str	r3, [r0, #4]
        pringbuff->read = 0;
     11e:	6083      	str	r3, [r0, #8]
        ret_val = 0;
    }
    
    return ret_val;
     120:	b258      	sxtb	r0, r3
}
     122:	4770      	bx	lr

00000124 <ringbuff_put>:
 * Return Values(s) : int8_t
 * Description      : Puts a byte into the ring buffer. Returns 0 if the 
 *  operation was successful, else it returns -1.
 */
int8_t ringbuff_put(ringbuff_t* pringbuff, uint8_t put_data)
{
     124:	b570      	push	{r4, r5, r6, lr}
     126:	0004      	movs	r4, r0
     128:	000d      	movs	r5, r1
    uint8_t ret_val = -1;
     12a:	20ff      	movs	r0, #255	; 0xff
    
    // NULL pointer check
    if(pringbuff)
     12c:	2c00      	cmp	r4, #0
     12e:	d00d      	beq.n	14c <ringbuff_put+0x28>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     130:	4b07      	ldr	r3, [pc, #28]	; (150 <ringbuff_put+0x2c>)
     132:	4798      	blx	r3
    {
        // keep ring buffer operations atomic relative to interrupts   
        system_interrupt_enter_critical_section();
        
        // write data to the ring buffer
        pringbuff->buff[pringbuff->write] = put_data;
     134:	6862      	ldr	r2, [r4, #4]
     136:	6823      	ldr	r3, [r4, #0]
     138:	549d      	strb	r5, [r3, r2]

        /* increment the head. This means old data will be overwritten if the
         * user does not check if the buffer is full */
        pringbuff->write = (pringbuff->write + 1) % pringbuff->size;
     13a:	6863      	ldr	r3, [r4, #4]
     13c:	68e1      	ldr	r1, [r4, #12]
     13e:	1c58      	adds	r0, r3, #1
     140:	4b04      	ldr	r3, [pc, #16]	; (154 <ringbuff_put+0x30>)
     142:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <ringbuff_put+0x34>)
     146:	6061      	str	r1, [r4, #4]
     148:	4798      	blx	r3
        
        system_interrupt_leave_critical_section();

        ret_val = 0;
     14a:	2000      	movs	r0, #0
    }
    
    return ret_val;
     14c:	b240      	sxtb	r0, r0
}
     14e:	bd70      	pop	{r4, r5, r6, pc}
     150:	00001219 	.word	0x00001219
     154:	00001af5 	.word	0x00001af5
     158:	0000124d 	.word	0x0000124d

0000015c <spi169_init>:
    spi169_wr8(AX5043_FREQDEV00, 0x00);
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     15e:	4e2c      	ldr	r6, [pc, #176]	; (210 <spi169_init+0xb4>)
     160:	b091      	sub	sp, #68	; 0x44
     162:	7831      	ldrb	r1, [r6, #0]
     164:	2900      	cmp	r1, #0
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     166:	d14f      	bne.n	208 <spi169_init+0xac>
     168:	230d      	movs	r3, #13
     16a:	2501      	movs	r5, #1
     16c:	446b      	add	r3, sp
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     16e:	ac02      	add	r4, sp, #8
     170:	77d9      	strb	r1, [r3, #31]
     172:	220c      	movs	r2, #12
     174:	4b27      	ldr	r3, [pc, #156]	; (214 <spi169_init+0xb8>)
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     176:	a808      	add	r0, sp, #32
     178:	7025      	strb	r5, [r4, #0]
     17a:	7421      	strb	r1, [r4, #16]
     17c:	7461      	strb	r1, [r4, #17]
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     17e:	74a5      	strb	r5, [r4, #18]
     180:	74e5      	strb	r5, [r4, #19]
     182:	7521      	strb	r1, [r4, #20]
     184:	9103      	str	r1, [sp, #12]
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     186:	9104      	str	r1, [sp, #16]
     188:	4798      	blx	r3
     18a:	2398      	movs	r3, #152	; 0x98
     18c:	035b      	lsls	r3, r3, #13
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     18e:	60e3      	str	r3, [r4, #12]
     190:	4b21      	ldr	r3, [pc, #132]	; (218 <spi169_init+0xbc>)
     192:	4f22      	ldr	r7, [pc, #136]	; (21c <spi169_init+0xc0>)
     194:	62a3      	str	r3, [r4, #40]	; 0x28
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     196:	4b22      	ldr	r3, [pc, #136]	; (220 <spi169_init+0xc4>)
     198:	0022      	movs	r2, r4
     19a:	62e3      	str	r3, [r4, #44]	; 0x2c
     19c:	2301      	movs	r3, #1
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     19e:	425b      	negs	r3, r3
     1a0:	6323      	str	r3, [r4, #48]	; 0x30
     1a2:	4b20      	ldr	r3, [pc, #128]	; (224 <spi169_init+0xc8>)
     1a4:	4920      	ldr	r1, [pc, #128]	; (228 <spi169_init+0xcc>)
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     1a6:	6363      	str	r3, [r4, #52]	; 0x34
     1a8:	4b20      	ldr	r3, [pc, #128]	; (22c <spi169_init+0xd0>)
     1aa:	0038      	movs	r0, r7
     1ac:	61a3      	str	r3, [r4, #24]
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     1ae:	4b20      	ldr	r3, [pc, #128]	; (230 <spi169_init+0xd4>)
     1b0:	4798      	blx	r3
     1b2:	683c      	ldr	r4, [r7, #0]
     1b4:	4b1f      	ldr	r3, [pc, #124]	; (234 <spi169_init+0xd8>)
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     1b6:	0020      	movs	r0, r4
     1b8:	4798      	blx	r3
     1ba:	231f      	movs	r3, #31
     1bc:	4018      	ands	r0, r3
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     1be:	4085      	lsls	r5, r0
     1c0:	4b1d      	ldr	r3, [pc, #116]	; (238 <spi169_init+0xdc>)
     1c2:	601d      	str	r5, [r3, #0]
     1c4:	683b      	ldr	r3, [r7, #0]
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     1c6:	69dd      	ldr	r5, [r3, #28]
     1c8:	2d00      	cmp	r5, #0
     1ca:	d1fc      	bne.n	1c6 <spi169_init+0x6a>
     1cc:	2302      	movs	r3, #2
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     1ce:	6822      	ldr	r2, [r4, #0]
     1d0:	2011      	movs	r0, #17
     1d2:	4313      	orrs	r3, r2
     1d4:	6023      	str	r3, [r4, #0]
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     1d6:	2401      	movs	r4, #1
     1d8:	4f18      	ldr	r7, [pc, #96]	; (23c <spi169_init+0xe0>)
     1da:	a901      	add	r1, sp, #4
     1dc:	4b18      	ldr	r3, [pc, #96]	; (240 <spi169_init+0xe4>)
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     1de:	704c      	strb	r4, [r1, #1]
     1e0:	708d      	strb	r5, [r1, #2]
     1e2:	700c      	strb	r4, [r1, #0]
     1e4:	7038      	strb	r0, [r7, #0]
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     1e6:	707d      	strb	r5, [r7, #1]
     1e8:	70bd      	strb	r5, [r7, #2]
     1ea:	4798      	blx	r3
     1ec:	783a      	ldrb	r2, [r7, #0]
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     1ee:	0953      	lsrs	r3, r2, #5
     1f0:	09d1      	lsrs	r1, r2, #7
     1f2:	d10b      	bne.n	20c <spi169_init+0xb0>
     1f4:	311f      	adds	r1, #31
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     1f6:	400a      	ands	r2, r1
     1f8:	0021      	movs	r1, r4
     1fa:	4091      	lsls	r1, r2
     1fc:	000a      	movs	r2, r1
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     1fe:	4911      	ldr	r1, [pc, #68]	; (244 <spi169_init+0xe8>)
     200:	01db      	lsls	r3, r3, #7
     202:	185b      	adds	r3, r3, r1
     204:	619a      	str	r2, [r3, #24]
    spi169_wr8(AX5043_FREQGAINC3, 0x0D);
     206:	7034      	strb	r4, [r6, #0]
     208:	b011      	add	sp, #68	; 0x44
     20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     20c:	61ad      	str	r5, [r5, #24]
    spi169_wr8(AX5043_FREQGAIND3, 0x0D);
     20e:	deff      	udf	#255	; 0xff
     210:	20000038 	.word	0x20000038
     214:	00001bb5 	.word	0x00001bb5
    spi169_wr8(AX5043_AMPLGAIN3, 0x06);
     218:	00100002 	.word	0x00100002
     21c:	2000012c 	.word	0x2000012c
    spi169_wr8(AX5043_FREQDEV13, 0x00);
     220:	00130002 	.word	0x00130002
     224:	00120002 	.word	0x00120002
    spi169_wr8(AX5043_FREQDEV03, 0x4B);
     228:	42000c00 	.word	0x42000c00
     22c:	000f4240 	.word	0x000f4240
    spi169_wr8(AX5043_FOURFSK3, 0x16);
     230:	00000d49 	.word	0x00000d49
     234:	00001189 	.word	0x00001189
    spi169_wr8(AX5043_BBOFFSRES3, 0x00);
     238:	e000e100 	.word	0xe000e100
     23c:	20000168 	.word	0x20000168
    spi169_wr8(AX5043_MODCFGF, 0x00);
     240:	000004b5 	.word	0x000004b5
     244:	41004400 	.word	0x41004400

00000248 <uart915_read_callback>:
 *  character into a ring buffer and parses the character to find out if the 
 *  character is a part of a "OK\r\n" response from the MTXDOT module. Starts
 *  another UART buffer job (setting up an asynchronous read). 
 */
static void uart915_read_callback(struct usart_module *const usart_module)
{
     248:	b570      	push	{r4, r5, r6, lr}
    // put the received byte into the ring buffer
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     24a:	4c16      	ldr	r4, [pc, #88]	; (2a4 <uart915_read_callback+0x5c>)
     24c:	4b16      	ldr	r3, [pc, #88]	; (2a8 <uart915_read_callback+0x60>)
     24e:	7821      	ldrb	r1, [r4, #0]
{
     250:	0005      	movs	r5, r0
    ringbuff_put(&uart915_ringbuff, uart915_rx_read);
     252:	4816      	ldr	r0, [pc, #88]	; (2ac <uart915_read_callback+0x64>)
     254:	4798      	blx	r3
 *  Anything else resets the state machine back to its starting state.
 *  Returns true if an "OK\r\n" sequence was found, else false.
 */
static bool uart915_parse_response(uint8_t next_char)
{
    switch(rx_state)
     256:	4a16      	ldr	r2, [pc, #88]	; (2b0 <uart915_read_callback+0x68>)
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     258:	7821      	ldrb	r1, [r4, #0]
    switch(rx_state)
     25a:	7810      	ldrb	r0, [r2, #0]
                break; //end of default case
        }
        break; //end of CR_RX case
        
        default:
            rx_state = START;
     25c:	2300      	movs	r3, #0
    switch(rx_state)
     25e:	b2c0      	uxtb	r0, r0
     260:	2803      	cmp	r0, #3
     262:	d81d      	bhi.n	2a0 <uart915_read_callback+0x58>
     264:	f001 fbb6 	bl	19d4 <__gnu_thumb1_case_uqi>
     268:	100c0802 	.word	0x100c0802
            switch(next_char)
     26c:	294f      	cmp	r1, #79	; 0x4f
     26e:	d100      	bne.n	272 <uart915_read_callback+0x2a>
                   rx_state = O_RX;
     270:	2301      	movs	r3, #1
                    rx_state = K_RX;
     272:	7013      	strb	r3, [r2, #0]
            break;
    }
    
    return false;
     274:	2300      	movs	r3, #0
     276:	e00b      	b.n	290 <uart915_read_callback+0x48>
            switch(next_char)
     278:	294b      	cmp	r1, #75	; 0x4b
     27a:	d1fa      	bne.n	272 <uart915_read_callback+0x2a>
                    rx_state = K_RX;
     27c:	2302      	movs	r3, #2
     27e:	e7f8      	b.n	272 <uart915_read_callback+0x2a>
            switch(next_char)
     280:	290d      	cmp	r1, #13
     282:	d1f6      	bne.n	272 <uart915_read_callback+0x2a>
                    rx_state = CR_RX;
     284:	2303      	movs	r3, #3
     286:	e7f4      	b.n	272 <uart915_read_callback+0x2a>
                rx_state = START;
     288:	7013      	strb	r3, [r2, #0]
                return true;
     28a:	2301      	movs	r3, #1
        switch(next_char)
     28c:	290a      	cmp	r1, #10
     28e:	d1f1      	bne.n	274 <uart915_read_callback+0x2c>
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     290:	4a08      	ldr	r2, [pc, #32]	; (2b4 <uart915_read_callback+0x6c>)
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     292:	0028      	movs	r0, r5
    flag_ok_received = uart915_parse_response(uart915_rx_read);
     294:	7013      	strb	r3, [r2, #0]
    usart_read_buffer_job(usart_module, &uart915_rx_read, 1);
     296:	0021      	movs	r1, r4
     298:	2201      	movs	r2, #1
     29a:	4b07      	ldr	r3, [pc, #28]	; (2b8 <uart915_read_callback+0x70>)
     29c:	4798      	blx	r3
}
     29e:	bd70      	pop	{r4, r5, r6, pc}
            rx_state = START;
     2a0:	7013      	strb	r3, [r2, #0]
     2a2:	e7f5      	b.n	290 <uart915_read_callback+0x48>
     2a4:	200000f0 	.word	0x200000f0
     2a8:	00000125 	.word	0x00000125
     2ac:	20000000 	.word	0x20000000
     2b0:	2000003a 	.word	0x2000003a
     2b4:	20000039 	.word	0x20000039
     2b8:	00000bc1 	.word	0x00000bc1

000002bc <configure_uart915_callbacks>:
{
     2bc:	b510      	push	{r4, lr}
    usart_register_callback(&uart915_inst, uart915_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     2be:	4c09      	ldr	r4, [pc, #36]	; (2e4 <configure_uart915_callbacks+0x28>)
     2c0:	2201      	movs	r2, #1
     2c2:	0020      	movs	r0, r4
     2c4:	4908      	ldr	r1, [pc, #32]	; (2e8 <configure_uart915_callbacks+0x2c>)
     2c6:	4b09      	ldr	r3, [pc, #36]	; (2ec <configure_uart915_callbacks+0x30>)
     2c8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     2ca:	0022      	movs	r2, r4
     2cc:	2302      	movs	r3, #2
     2ce:	3231      	adds	r2, #49	; 0x31
     2d0:	7811      	ldrb	r1, [r2, #0]
    usart_read_buffer_job(&uart915_inst, &uart915_rx_read, 1);
     2d2:	0020      	movs	r0, r4
     2d4:	430b      	orrs	r3, r1
     2d6:	7013      	strb	r3, [r2, #0]
     2d8:	4905      	ldr	r1, [pc, #20]	; (2f0 <configure_uart915_callbacks+0x34>)
     2da:	2201      	movs	r2, #1
     2dc:	4b05      	ldr	r3, [pc, #20]	; (2f4 <configure_uart915_callbacks+0x38>)
     2de:	4798      	blx	r3
}
     2e0:	bd10      	pop	{r4, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	2000003c 	.word	0x2000003c
     2e8:	00000249 	.word	0x00000249
     2ec:	00000ba9 	.word	0x00000ba9
     2f0:	200000f0 	.word	0x200000f0
     2f4:	00000bc1 	.word	0x00000bc1

000002f8 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // clear the flag
    flag_ok_received = false;
     2fa:	2300      	movs	r3, #0
{
     2fc:	0004      	movs	r4, r0
    flag_ok_received = false;
     2fe:	4a0f      	ldr	r2, [pc, #60]	; (33c <uart915_write_cmd+0x44>)
    
    // reset state machine for determining okay_received
    rx_state = START;
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     300:	480f      	ldr	r0, [pc, #60]	; (340 <uart915_write_cmd+0x48>)
    flag_ok_received = false;
     302:	7013      	strb	r3, [r2, #0]
    rx_state = START;
     304:	4a0f      	ldr	r2, [pc, #60]	; (344 <uart915_write_cmd+0x4c>)
     306:	7013      	strb	r3, [r2, #0]
    ringbuff_clear(&uart915_ringbuff);
     308:	4b0f      	ldr	r3, [pc, #60]	; (348 <uart915_write_cmd+0x50>)
     30a:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     30c:	0020      	movs	r0, r4
     30e:	4d0f      	ldr	r5, [pc, #60]	; (34c <uart915_write_cmd+0x54>)
     310:	47a8      	blx	r5
     312:	4e0f      	ldr	r6, [pc, #60]	; (350 <uart915_write_cmd+0x58>)
     314:	b282      	uxth	r2, r0
     316:	0021      	movs	r1, r4
     318:	0030      	movs	r0, r6
     31a:	4f0e      	ldr	r7, [pc, #56]	; (354 <uart915_write_cmd+0x5c>)
     31c:	47b8      	blx	r7
    
    while(!flag_ok_received){
     31e:	4b07      	ldr	r3, [pc, #28]	; (33c <uart915_write_cmd+0x44>)
     320:	781b      	ldrb	r3, [r3, #0]
     322:	2b00      	cmp	r3, #0
     324:	d000      	beq.n	328 <uart915_write_cmd+0x30>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
		delay_ms(10);
		};
}
     326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     328:	0020      	movs	r0, r4
     32a:	47a8      	blx	r5
     32c:	0021      	movs	r1, r4
     32e:	b282      	uxth	r2, r0
     330:	0030      	movs	r0, r6
     332:	47b8      	blx	r7
		delay_ms(10);
     334:	200a      	movs	r0, #10
     336:	4b08      	ldr	r3, [pc, #32]	; (358 <uart915_write_cmd+0x60>)
     338:	4798      	blx	r3
     33a:	e7f0      	b.n	31e <uart915_write_cmd+0x26>
     33c:	20000039 	.word	0x20000039
     340:	20000000 	.word	0x20000000
     344:	2000003a 	.word	0x2000003a
     348:	00000115 	.word	0x00000115
     34c:	00001bc5 	.word	0x00001bc5
     350:	2000003c 	.word	0x2000003c
     354:	00000ad1 	.word	0x00000ad1
     358:	00000489 	.word	0x00000489

0000035c <uart915_preconnect>:
    
    // convert the number at the current spot in the string to an int
    return atoi((char*) &rspns_buff[i]);
}

uart915_preconnect(void){
     35c:	b510      	push	{r4, lr}
     35e:	240a      	movs	r4, #10
    
    /* send 10 "AT" and "AT+SEND" commands to validate conenction
     * between the receiver and transmitter */
    for(; i < 10; i++)
    {
        uart915_write_cmd("AT\r\n");
     360:	4803      	ldr	r0, [pc, #12]	; (370 <uart915_preconnect+0x14>)
     362:	4b04      	ldr	r3, [pc, #16]	; (374 <uart915_preconnect+0x18>)
     364:	3c01      	subs	r4, #1
     366:	4798      	blx	r3
    for(; i < 10; i++)
     368:	2c00      	cmp	r4, #0
     36a:	d1f9      	bne.n	360 <uart915_preconnect+0x4>
       // uart915_write_cmd("AT+SEND\r\n");  
    }
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	00001bd2 	.word	0x00001bd2
     374:	000002f9 	.word	0x000002f9

00000378 <uart915_init>:
{
     378:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     37a:	2380      	movs	r3, #128	; 0x80
     37c:	b091      	sub	sp, #68	; 0x44
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     37e:	4669      	mov	r1, sp
     380:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
     382:	05db      	lsls	r3, r3, #23
     384:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     386:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
     388:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     38a:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
     38c:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     38e:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
     390:	3105      	adds	r1, #5
     392:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     394:	4669      	mov	r1, sp
     396:	3106      	adds	r1, #6
     398:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
     39a:	466a      	mov	r2, sp
     39c:	3207      	adds	r2, #7
     39e:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
     3a0:	aa02      	add	r2, sp, #8
     3a2:	77d3      	strb	r3, [r2, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     3a4:	aa0b      	add	r2, sp, #44	; 0x2c
     3a6:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
     3a8:	222d      	movs	r2, #45	; 0x2d
     3aa:	446a      	add	r2, sp
     3ac:	7013      	strb	r3, [r2, #0]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
     3ae:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3b0:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     3b2:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3b4:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
     3b6:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
     3b8:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
     3ba:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
     3bc:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
     3be:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3c0:	9305      	str	r3, [sp, #20]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     3c2:	774b      	strb	r3, [r1, #29]
    config_usart.baudrate    = UART915_BAUD;
     3c4:	23e1      	movs	r3, #225	; 0xe1
     3c6:	025b      	lsls	r3, r3, #9
     3c8:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = UART915_PINMUX;
     3ca:	2390      	movs	r3, #144	; 0x90
     3cc:	035b      	lsls	r3, r3, #13
     3ce:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = UTX915;
     3d0:	4b14      	ldr	r3, [pc, #80]	; (424 <uart915_init+0xac>)
	config->receive_pulse_length                    = 19;
     3d2:	2213      	movs	r2, #19
     3d4:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = URX915;
     3d6:	4b14      	ldr	r3, [pc, #80]	; (428 <uart915_init+0xb0>)
     3d8:	768a      	strb	r2, [r1, #26]
     3da:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3dc:	2301      	movs	r3, #1
     3de:	425b      	negs	r3, r3
     3e0:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3e2:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&uart915_inst, UART915, &config_usart) != STATUS_OK);
     3e4:	4d11      	ldr	r5, [pc, #68]	; (42c <uart915_init+0xb4>)
     3e6:	466a      	mov	r2, sp
     3e8:	4911      	ldr	r1, [pc, #68]	; (430 <uart915_init+0xb8>)
     3ea:	0028      	movs	r0, r5
     3ec:	4b11      	ldr	r3, [pc, #68]	; (434 <uart915_init+0xbc>)
     3ee:	4798      	blx	r3
     3f0:	2800      	cmp	r0, #0
     3f2:	d1f7      	bne.n	3e4 <uart915_init+0x6c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3f4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3f6:	4b10      	ldr	r3, [pc, #64]	; (438 <uart915_init+0xc0>)
     3f8:	0020      	movs	r0, r4
     3fa:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3fc:	231f      	movs	r3, #31
     3fe:	4018      	ands	r0, r3
     400:	3b1e      	subs	r3, #30
     402:	4083      	lsls	r3, r0
     404:	4a0d      	ldr	r2, [pc, #52]	; (43c <uart915_init+0xc4>)
     406:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     408:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     40a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     40c:	2b00      	cmp	r3, #0
     40e:	d1fc      	bne.n	40a <uart915_init+0x92>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     410:	6822      	ldr	r2, [r4, #0]
     412:	3302      	adds	r3, #2
     414:	4313      	orrs	r3, r2
     416:	6023      	str	r3, [r4, #0]
    configure_uart915_callbacks();
     418:	4b09      	ldr	r3, [pc, #36]	; (440 <uart915_init+0xc8>)
     41a:	4798      	blx	r3
	uart915_preconnect();
     41c:	4b09      	ldr	r3, [pc, #36]	; (444 <uart915_init+0xcc>)
     41e:	4798      	blx	r3
}
     420:	b011      	add	sp, #68	; 0x44
     422:	bd30      	pop	{r4, r5, pc}
     424:	000c0002 	.word	0x000c0002
     428:	000d0002 	.word	0x000d0002
     42c:	2000003c 	.word	0x2000003c
     430:	42001000 	.word	0x42001000
     434:	000007dd 	.word	0x000007dd
     438:	00001189 	.word	0x00001189
     43c:	e000e100 	.word	0xe000e100
     440:	000002bd 	.word	0x000002bd
     444:	0000035d 	.word	0x0000035d

00000448 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     448:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     44a:	4b09      	ldr	r3, [pc, #36]	; (470 <delay_init+0x28>)
     44c:	2000      	movs	r0, #0
     44e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     450:	21fa      	movs	r1, #250	; 0xfa
     452:	4c08      	ldr	r4, [pc, #32]	; (474 <delay_init+0x2c>)
     454:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     456:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     458:	47a0      	blx	r4
     45a:	4b07      	ldr	r3, [pc, #28]	; (478 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     45c:	4907      	ldr	r1, [pc, #28]	; (47c <delay_init+0x34>)
	cycles_per_ms /= 1000;
     45e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     460:	0028      	movs	r0, r5
     462:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     464:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     466:	4b06      	ldr	r3, [pc, #24]	; (480 <delay_init+0x38>)
     468:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     46a:	4b06      	ldr	r3, [pc, #24]	; (484 <delay_init+0x3c>)
     46c:	601a      	str	r2, [r3, #0]
}
     46e:	bd70      	pop	{r4, r5, r6, pc}
     470:	00001585 	.word	0x00001585
     474:	000019e9 	.word	0x000019e9
     478:	20000010 	.word	0x20000010
     47c:	000f4240 	.word	0x000f4240
     480:	20000014 	.word	0x20000014
     484:	e000e010 	.word	0xe000e010

00000488 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     488:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     48a:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     48c:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     48e:	4b07      	ldr	r3, [pc, #28]	; (4ac <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     490:	0264      	lsls	r4, r4, #9
     492:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     494:	4b06      	ldr	r3, [pc, #24]	; (4b0 <delay_cycles_ms+0x28>)
	while (n--) {
     496:	3801      	subs	r0, #1
     498:	d200      	bcs.n	49c <delay_cycles_ms+0x14>
	}
}
     49a:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     49c:	2a00      	cmp	r2, #0
     49e:	d0fa      	beq.n	496 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     4a0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     4a2:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     4a4:	681d      	ldr	r5, [r3, #0]
     4a6:	4225      	tst	r5, r4
     4a8:	d0fc      	beq.n	4a4 <delay_cycles_ms+0x1c>
     4aa:	e7f4      	b.n	496 <delay_cycles_ms+0xe>
     4ac:	20000010 	.word	0x20000010
     4b0:	e000e010 	.word	0xe000e010

000004b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4b4:	b507      	push	{r0, r1, r2, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4b6:	2280      	movs	r2, #128	; 0x80
     4b8:	ab01      	add	r3, sp, #4
     4ba:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4bc:	780a      	ldrb	r2, [r1, #0]
     4be:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4c0:	784a      	ldrb	r2, [r1, #1]
     4c2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4c4:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4c6:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     4c8:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4ca:	4b01      	ldr	r3, [pc, #4]	; (4d0 <port_pin_set_config+0x1c>)
     4cc:	4798      	blx	r3
}
     4ce:	bd07      	pop	{r0, r1, r2, pc}
     4d0:	00001769 	.word	0x00001769

000004d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     4d6:	2400      	movs	r4, #0
{
     4d8:	b089      	sub	sp, #36	; 0x24
     4da:	9200      	str	r2, [sp, #0]
     4dc:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
     4de:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
     4e0:	2600      	movs	r6, #0
     4e2:	2700      	movs	r7, #0
     4e4:	0025      	movs	r5, r4
{
     4e6:	9006      	str	r0, [sp, #24]
     4e8:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
     4ea:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
     4ec:	9a03      	ldr	r2, [sp, #12]
     4ee:	4b13      	ldr	r3, [pc, #76]	; (53c <long_division+0x68>)
     4f0:	2001      	movs	r0, #1
     4f2:	2100      	movs	r1, #0
     4f4:	4798      	blx	r3

		r = r << 1;
     4f6:	19b6      	adds	r6, r6, r6
     4f8:	417f      	adcs	r7, r7

		if (n & bit_shift) {
     4fa:	9b06      	ldr	r3, [sp, #24]
     4fc:	9a07      	ldr	r2, [sp, #28]
     4fe:	4003      	ands	r3, r0
     500:	400a      	ands	r2, r1
		r = r << 1;
     502:	9604      	str	r6, [sp, #16]
     504:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
     506:	4313      	orrs	r3, r2
     508:	d003      	beq.n	512 <long_division+0x3e>
			r |= 0x01;
     50a:	2301      	movs	r3, #1
     50c:	4333      	orrs	r3, r6
     50e:	001e      	movs	r6, r3
     510:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
     512:	9b01      	ldr	r3, [sp, #4]
     514:	42bb      	cmp	r3, r7
     516:	d809      	bhi.n	52c <long_division+0x58>
     518:	d102      	bne.n	520 <long_division+0x4c>
     51a:	9b00      	ldr	r3, [sp, #0]
     51c:	42b3      	cmp	r3, r6
     51e:	d805      	bhi.n	52c <long_division+0x58>
			r = r - d;
     520:	9a00      	ldr	r2, [sp, #0]
     522:	9b01      	ldr	r3, [sp, #4]
     524:	1ab6      	subs	r6, r6, r2
     526:	419f      	sbcs	r7, r3
			q |= bit_shift;
     528:	4304      	orrs	r4, r0
     52a:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
     52c:	9b03      	ldr	r3, [sp, #12]
     52e:	1e5a      	subs	r2, r3, #1
     530:	9203      	str	r2, [sp, #12]
     532:	d2db      	bcs.n	4ec <long_division+0x18>
		}
	}

	return q;
}
     534:	0020      	movs	r0, r4
     536:	0029      	movs	r1, r5
     538:	b009      	add	sp, #36	; 0x24
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     53c:	00001b01 	.word	0x00001b01

00000540 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     540:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     542:	0849      	lsrs	r1, r1, #1
{
     544:	0004      	movs	r4, r0
     546:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     548:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     54a:	42a1      	cmp	r1, r4
     54c:	d201      	bcs.n	552 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     54e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     550:	0003      	movs	r3, r0
     552:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     554:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     556:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     558:	428c      	cmp	r4, r1
     55a:	d9f9      	bls.n	550 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     55c:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     55e:	2bff      	cmp	r3, #255	; 0xff
     560:	d8f5      	bhi.n	54e <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     562:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     564:	2000      	movs	r0, #0
     566:	e7f2      	b.n	54e <_sercom_get_sync_baud_val+0xe>

00000568 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     568:	b5f0      	push	{r4, r5, r6, r7, lr}
     56a:	b085      	sub	sp, #20
     56c:	001e      	movs	r6, r3
     56e:	ab0a      	add	r3, sp, #40	; 0x28
     570:	000d      	movs	r5, r1
     572:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     574:	0003      	movs	r3, r0
     576:	434b      	muls	r3, r1
{
     578:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     57a:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     57c:	42ab      	cmp	r3, r5
     57e:	d817      	bhi.n	5b0 <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     580:	2e00      	cmp	r6, #0
     582:	d118      	bne.n	5b6 <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     584:	0002      	movs	r2, r0
     586:	0033      	movs	r3, r6
     588:	0008      	movs	r0, r1
     58a:	4c1b      	ldr	r4, [pc, #108]	; (5f8 <_sercom_get_async_baud_val+0x90>)
     58c:	0031      	movs	r1, r6
     58e:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
     590:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     592:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     594:	0033      	movs	r3, r6
     596:	4c19      	ldr	r4, [pc, #100]	; (5fc <_sercom_get_async_baud_val+0x94>)
     598:	0030      	movs	r0, r6
     59a:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     59c:	2200      	movs	r2, #0
     59e:	2301      	movs	r3, #1
     5a0:	1a12      	subs	r2, r2, r0
     5a2:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5a4:	0c14      	lsrs	r4, r2, #16
     5a6:	0418      	lsls	r0, r3, #16
     5a8:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
     5aa:	2700      	movs	r7, #0
	*baudval = baud_calculated;
     5ac:	9b03      	ldr	r3, [sp, #12]
     5ae:	801c      	strh	r4, [r3, #0]
}
     5b0:	0038      	movs	r0, r7
     5b2:	b005      	add	sp, #20
     5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
     5b6:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5b8:	2e01      	cmp	r6, #1
     5ba:	d1f6      	bne.n	5aa <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
     5bc:	000a      	movs	r2, r1
     5be:	0023      	movs	r3, r4
     5c0:	0021      	movs	r1, r4
     5c2:	4e0d      	ldr	r6, [pc, #52]	; (5f8 <_sercom_get_async_baud_val+0x90>)
     5c4:	47b0      	blx	r6
     5c6:	9000      	str	r0, [sp, #0]
     5c8:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     5ca:	000b      	movs	r3, r1
     5cc:	0002      	movs	r2, r0
     5ce:	0021      	movs	r1, r4
     5d0:	0028      	movs	r0, r5
     5d2:	4c0a      	ldr	r4, [pc, #40]	; (5fc <_sercom_get_async_baud_val+0x94>)
     5d4:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
     5d6:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
     5d8:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
     5da:	019b      	lsls	r3, r3, #6
     5dc:	4298      	cmp	r0, r3
     5de:	d8e7      	bhi.n	5b0 <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     5e0:	9a00      	ldr	r2, [sp, #0]
     5e2:	9b01      	ldr	r3, [sp, #4]
     5e4:	0f69      	lsrs	r1, r5, #29
     5e6:	00e8      	lsls	r0, r5, #3
     5e8:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     5ea:	00f4      	lsls	r4, r6, #3
     5ec:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
     5ee:	b2e4      	uxtb	r4, r4
     5f0:	0364      	lsls	r4, r4, #13
     5f2:	4334      	orrs	r4, r6
     5f4:	e7d9      	b.n	5aa <_sercom_get_async_baud_val+0x42>
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00001b19 	.word	0x00001b19
     5fc:	000004d5 	.word	0x000004d5

00000600 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     600:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     602:	4c0d      	ldr	r4, [pc, #52]	; (638 <sercom_set_gclk_generator+0x38>)
{
     604:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     606:	7823      	ldrb	r3, [r4, #0]
     608:	2b00      	cmp	r3, #0
     60a:	d001      	beq.n	610 <sercom_set_gclk_generator+0x10>
     60c:	2900      	cmp	r1, #0
     60e:	d00c      	beq.n	62a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     610:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     612:	2013      	movs	r0, #19
     614:	4b09      	ldr	r3, [pc, #36]	; (63c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     616:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     618:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     61a:	2013      	movs	r0, #19
     61c:	4b08      	ldr	r3, [pc, #32]	; (640 <sercom_set_gclk_generator+0x40>)
     61e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     620:	2301      	movs	r3, #1

		return STATUS_OK;
     622:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     624:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     626:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     628:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     62a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     62c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     62e:	42ab      	cmp	r3, r5
     630:	d0fa      	beq.n	628 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     632:	201d      	movs	r0, #29
     634:	e7f8      	b.n	628 <sercom_set_gclk_generator+0x28>
     636:	46c0      	nop			; (mov r8, r8)
     638:	200000f1 	.word	0x200000f1
     63c:	00001695 	.word	0x00001695
     640:	0000160d 	.word	0x0000160d

00000644 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     644:	4a39      	ldr	r2, [pc, #228]	; (72c <_sercom_get_default_pad+0xe8>)
{
     646:	0003      	movs	r3, r0
     648:	b500      	push	{lr}
     64a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     64c:	4293      	cmp	r3, r2
     64e:	d033      	beq.n	6b8 <_sercom_get_default_pad+0x74>
     650:	d807      	bhi.n	662 <_sercom_get_default_pad+0x1e>
     652:	4a37      	ldr	r2, [pc, #220]	; (730 <_sercom_get_default_pad+0xec>)
     654:	4293      	cmp	r3, r2
     656:	d014      	beq.n	682 <_sercom_get_default_pad+0x3e>
     658:	4a36      	ldr	r2, [pc, #216]	; (734 <_sercom_get_default_pad+0xf0>)
     65a:	4293      	cmp	r3, r2
     65c:	d01f      	beq.n	69e <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     65e:	2300      	movs	r3, #0
     660:	e017      	b.n	692 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     662:	4a35      	ldr	r2, [pc, #212]	; (738 <_sercom_get_default_pad+0xf4>)
     664:	4293      	cmp	r3, r2
     666:	d03a      	beq.n	6de <_sercom_get_default_pad+0x9a>
     668:	4a34      	ldr	r2, [pc, #208]	; (73c <_sercom_get_default_pad+0xf8>)
     66a:	4293      	cmp	r3, r2
     66c:	d044      	beq.n	6f8 <_sercom_get_default_pad+0xb4>
     66e:	4a34      	ldr	r2, [pc, #208]	; (740 <_sercom_get_default_pad+0xfc>)
     670:	4293      	cmp	r3, r2
     672:	d1f4      	bne.n	65e <_sercom_get_default_pad+0x1a>
	return 0;
     674:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     676:	2903      	cmp	r1, #3
     678:	d80b      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     67a:	f001 f9ab 	bl	19d4 <__gnu_thumb1_case_uqi>
     67e:	2a50      	.short	0x2a50
     680:	2e2c      	.short	0x2e2c
	return 0;
     682:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     684:	2903      	cmp	r1, #3
     686:	d804      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     688:	f001 f9a4 	bl	19d4 <__gnu_thumb1_case_uqi>
     68c:	07050243 	.word	0x07050243
     690:	4b2c      	ldr	r3, [pc, #176]	; (744 <_sercom_get_default_pad+0x100>)
}
     692:	0018      	movs	r0, r3
     694:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     696:	4b2c      	ldr	r3, [pc, #176]	; (748 <_sercom_get_default_pad+0x104>)
     698:	e7fb      	b.n	692 <_sercom_get_default_pad+0x4e>
     69a:	4b2c      	ldr	r3, [pc, #176]	; (74c <_sercom_get_default_pad+0x108>)
     69c:	e7f9      	b.n	692 <_sercom_get_default_pad+0x4e>
	return 0;
     69e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6a0:	2903      	cmp	r1, #3
     6a2:	d8f6      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     6a4:	f001 f996 	bl	19d4 <__gnu_thumb1_case_uqi>
     6a8:	06040237 	.word	0x06040237
     6ac:	4b28      	ldr	r3, [pc, #160]	; (750 <_sercom_get_default_pad+0x10c>)
     6ae:	e7f0      	b.n	692 <_sercom_get_default_pad+0x4e>
     6b0:	4b28      	ldr	r3, [pc, #160]	; (754 <_sercom_get_default_pad+0x110>)
     6b2:	e7ee      	b.n	692 <_sercom_get_default_pad+0x4e>
     6b4:	4b28      	ldr	r3, [pc, #160]	; (758 <_sercom_get_default_pad+0x114>)
     6b6:	e7ec      	b.n	692 <_sercom_get_default_pad+0x4e>
	return 0;
     6b8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ba:	2903      	cmp	r1, #3
     6bc:	d8e9      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     6be:	f001 f989 	bl	19d4 <__gnu_thumb1_case_uqi>
     6c2:	022c      	.short	0x022c
     6c4:	0604      	.short	0x0604
     6c6:	4b25      	ldr	r3, [pc, #148]	; (75c <_sercom_get_default_pad+0x118>)
     6c8:	e7e3      	b.n	692 <_sercom_get_default_pad+0x4e>
     6ca:	4b25      	ldr	r3, [pc, #148]	; (760 <_sercom_get_default_pad+0x11c>)
     6cc:	e7e1      	b.n	692 <_sercom_get_default_pad+0x4e>
     6ce:	4b25      	ldr	r3, [pc, #148]	; (764 <_sercom_get_default_pad+0x120>)
     6d0:	e7df      	b.n	692 <_sercom_get_default_pad+0x4e>
     6d2:	4b25      	ldr	r3, [pc, #148]	; (768 <_sercom_get_default_pad+0x124>)
     6d4:	e7dd      	b.n	692 <_sercom_get_default_pad+0x4e>
     6d6:	4b25      	ldr	r3, [pc, #148]	; (76c <_sercom_get_default_pad+0x128>)
     6d8:	e7db      	b.n	692 <_sercom_get_default_pad+0x4e>
     6da:	4b25      	ldr	r3, [pc, #148]	; (770 <_sercom_get_default_pad+0x12c>)
     6dc:	e7d9      	b.n	692 <_sercom_get_default_pad+0x4e>
	return 0;
     6de:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6e0:	2903      	cmp	r1, #3
     6e2:	d8d6      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     6e4:	f001 f976 	bl	19d4 <__gnu_thumb1_case_uqi>
     6e8:	0604021d 	.word	0x0604021d
     6ec:	4b21      	ldr	r3, [pc, #132]	; (774 <_sercom_get_default_pad+0x130>)
     6ee:	e7d0      	b.n	692 <_sercom_get_default_pad+0x4e>
     6f0:	4b21      	ldr	r3, [pc, #132]	; (778 <_sercom_get_default_pad+0x134>)
     6f2:	e7ce      	b.n	692 <_sercom_get_default_pad+0x4e>
     6f4:	4b21      	ldr	r3, [pc, #132]	; (77c <_sercom_get_default_pad+0x138>)
     6f6:	e7cc      	b.n	692 <_sercom_get_default_pad+0x4e>
	return 0;
     6f8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6fa:	2903      	cmp	r1, #3
     6fc:	d8c9      	bhi.n	692 <_sercom_get_default_pad+0x4e>
     6fe:	f001 f969 	bl	19d4 <__gnu_thumb1_case_uqi>
     702:	0212      	.short	0x0212
     704:	0604      	.short	0x0604
     706:	4b1e      	ldr	r3, [pc, #120]	; (780 <_sercom_get_default_pad+0x13c>)
     708:	e7c3      	b.n	692 <_sercom_get_default_pad+0x4e>
     70a:	4b1e      	ldr	r3, [pc, #120]	; (784 <_sercom_get_default_pad+0x140>)
     70c:	e7c1      	b.n	692 <_sercom_get_default_pad+0x4e>
     70e:	4b1e      	ldr	r3, [pc, #120]	; (788 <_sercom_get_default_pad+0x144>)
     710:	e7bf      	b.n	692 <_sercom_get_default_pad+0x4e>
     712:	4b1e      	ldr	r3, [pc, #120]	; (78c <_sercom_get_default_pad+0x148>)
     714:	e7bd      	b.n	692 <_sercom_get_default_pad+0x4e>
     716:	2303      	movs	r3, #3
     718:	e7bb      	b.n	692 <_sercom_get_default_pad+0x4e>
     71a:	4b1d      	ldr	r3, [pc, #116]	; (790 <_sercom_get_default_pad+0x14c>)
     71c:	e7b9      	b.n	692 <_sercom_get_default_pad+0x4e>
     71e:	4b1d      	ldr	r3, [pc, #116]	; (794 <_sercom_get_default_pad+0x150>)
     720:	e7b7      	b.n	692 <_sercom_get_default_pad+0x4e>
     722:	4b1d      	ldr	r3, [pc, #116]	; (798 <_sercom_get_default_pad+0x154>)
     724:	e7b5      	b.n	692 <_sercom_get_default_pad+0x4e>
     726:	4b1d      	ldr	r3, [pc, #116]	; (79c <_sercom_get_default_pad+0x158>)
     728:	e7b3      	b.n	692 <_sercom_get_default_pad+0x4e>
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	42001000 	.word	0x42001000
     730:	42000800 	.word	0x42000800
     734:	42000c00 	.word	0x42000c00
     738:	42001800 	.word	0x42001800
     73c:	42001c00 	.word	0x42001c00
     740:	42001400 	.word	0x42001400
     744:	00050003 	.word	0x00050003
     748:	00060003 	.word	0x00060003
     74c:	00070003 	.word	0x00070003
     750:	00010003 	.word	0x00010003
     754:	001e0003 	.word	0x001e0003
     758:	001f0003 	.word	0x001f0003
     75c:	00090003 	.word	0x00090003
     760:	000a0003 	.word	0x000a0003
     764:	000b0003 	.word	0x000b0003
     768:	00110003 	.word	0x00110003
     76c:	00120003 	.word	0x00120003
     770:	00130003 	.word	0x00130003
     774:	000d0003 	.word	0x000d0003
     778:	000e0003 	.word	0x000e0003
     77c:	000f0003 	.word	0x000f0003
     780:	00170003 	.word	0x00170003
     784:	00180003 	.word	0x00180003
     788:	00190003 	.word	0x00190003
     78c:	00040003 	.word	0x00040003
     790:	00080003 	.word	0x00080003
     794:	00100003 	.word	0x00100003
     798:	000c0003 	.word	0x000c0003
     79c:	00160003 	.word	0x00160003

000007a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7a0:	b570      	push	{r4, r5, r6, lr}
     7a2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7a4:	4669      	mov	r1, sp
     7a6:	4b09      	ldr	r3, [pc, #36]	; (7cc <_sercom_get_sercom_inst_index+0x2c>)
     7a8:	466a      	mov	r2, sp
     7aa:	cb70      	ldmia	r3!, {r4, r5, r6}
     7ac:	c170      	stmia	r1!, {r4, r5, r6}
     7ae:	cb70      	ldmia	r3!, {r4, r5, r6}
     7b0:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7b2:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7b4:	0099      	lsls	r1, r3, #2
     7b6:	5851      	ldr	r1, [r2, r1]
     7b8:	4281      	cmp	r1, r0
     7ba:	d102      	bne.n	7c2 <_sercom_get_sercom_inst_index+0x22>
			return i;
     7bc:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     7be:	b006      	add	sp, #24
     7c0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7c2:	3301      	adds	r3, #1
     7c4:	2b06      	cmp	r3, #6
     7c6:	d1f5      	bne.n	7b4 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     7c8:	2000      	movs	r0, #0
     7ca:	e7f8      	b.n	7be <_sercom_get_sercom_inst_index+0x1e>
     7cc:	00001bd8 	.word	0x00001bd8

000007d0 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d0:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     7d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     7d4:	2b00      	cmp	r3, #0
     7d6:	d1fc      	bne.n	7d2 <_usart_wait_for_sync+0x2>
}
     7d8:	4770      	bx	lr
	...

000007dc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7de:	0007      	movs	r7, r0
     7e0:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7e2:	4ba0      	ldr	r3, [pc, #640]	; (a64 <usart_init+0x288>)
	module->hw = hw;
     7e4:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7e6:	0008      	movs	r0, r1
{
     7e8:	0016      	movs	r6, r2
     7ea:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7ec:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7ee:	2201      	movs	r2, #1
     7f0:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7f2:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7f4:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     7f6:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7f8:	4213      	tst	r3, r2
     7fa:	d000      	beq.n	7fe <usart_init+0x22>
     7fc:	e10f      	b.n	a1e <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7fe:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     800:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     802:	681c      	ldr	r4, [r3, #0]
     804:	2302      	movs	r3, #2
     806:	401c      	ands	r4, r3
     808:	d000      	beq.n	80c <usart_init+0x30>
     80a:	e108      	b.n	a1e <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     80c:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     80e:	381b      	subs	r0, #27
     810:	4098      	lsls	r0, r3
     812:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     814:	4a94      	ldr	r2, [pc, #592]	; (a68 <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     816:	3514      	adds	r5, #20
     818:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     81a:	b2ed      	uxtb	r5, r5
     81c:	430b      	orrs	r3, r1
     81e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     820:	0033      	movs	r3, r6
     822:	332d      	adds	r3, #45	; 0x2d
     824:	9302      	str	r3, [sp, #8]
     826:	781b      	ldrb	r3, [r3, #0]
     828:	a90c      	add	r1, sp, #48	; 0x30
     82a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     82c:	0028      	movs	r0, r5
     82e:	4b8f      	ldr	r3, [pc, #572]	; (a6c <usart_init+0x290>)
     830:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     832:	0028      	movs	r0, r5
     834:	4b8e      	ldr	r3, [pc, #568]	; (a70 <usart_init+0x294>)
     836:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     838:	9b02      	ldr	r3, [sp, #8]
     83a:	0021      	movs	r1, r4
     83c:	7818      	ldrb	r0, [r3, #0]
     83e:	4b8d      	ldr	r3, [pc, #564]	; (a74 <usart_init+0x298>)
     840:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     842:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     844:	2508      	movs	r5, #8
	module->character_size = config->character_size;
     846:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     848:	1d73      	adds	r3, r6, #5
     84a:	7fdb      	ldrb	r3, [r3, #31]
     84c:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
     84e:	1db3      	adds	r3, r6, #6
     850:	7fdb      	ldrb	r3, [r3, #31]
     852:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     854:	7ef3      	ldrb	r3, [r6, #27]
     856:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     858:	7f33      	ldrb	r3, [r6, #28]
     85a:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     85c:	683b      	ldr	r3, [r7, #0]
     85e:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     860:	0018      	movs	r0, r3
     862:	4b80      	ldr	r3, [pc, #512]	; (a64 <usart_init+0x288>)
     864:	4798      	blx	r3
	uint16_t baud  = 0;
     866:	ab0e      	add	r3, sp, #56	; 0x38
     868:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
     86a:	8a33      	ldrh	r3, [r6, #16]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     86c:	3014      	adds	r0, #20
	switch (config->sample_rate) {
     86e:	9302      	str	r3, [sp, #8]
     870:	2380      	movs	r3, #128	; 0x80
     872:	9a02      	ldr	r2, [sp, #8]
     874:	01db      	lsls	r3, r3, #7
     876:	429a      	cmp	r2, r3
     878:	d014      	beq.n	8a4 <usart_init+0xc8>
     87a:	d808      	bhi.n	88e <usart_init+0xb2>
     87c:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     87e:	2510      	movs	r5, #16
	switch (config->sample_rate) {
     880:	019b      	lsls	r3, r3, #6
     882:	429a      	cmp	r2, r3
     884:	d100      	bne.n	888 <usart_init+0xac>
     886:	e0cd      	b.n	a24 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     888:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     88a:	2400      	movs	r4, #0
     88c:	e00a      	b.n	8a4 <usart_init+0xc8>
	switch (config->sample_rate) {
     88e:	23c0      	movs	r3, #192	; 0xc0
     890:	9a02      	ldr	r2, [sp, #8]
     892:	01db      	lsls	r3, r3, #7
     894:	429a      	cmp	r2, r3
     896:	d100      	bne.n	89a <usart_init+0xbe>
     898:	e0c3      	b.n	a22 <usart_init+0x246>
     89a:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     89c:	2503      	movs	r5, #3
	switch (config->sample_rate) {
     89e:	021b      	lsls	r3, r3, #8
     8a0:	429a      	cmp	r2, r3
     8a2:	d1f1      	bne.n	888 <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
     8a4:	6833      	ldr	r3, [r6, #0]
     8a6:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
     8a8:	68f3      	ldr	r3, [r6, #12]
     8aa:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
     8ac:	6973      	ldr	r3, [r6, #20]
     8ae:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8b0:	7e33      	ldrb	r3, [r6, #24]
     8b2:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8b4:	1df3      	adds	r3, r6, #7
     8b6:	7fdb      	ldrb	r3, [r3, #31]
     8b8:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
     8ba:	6873      	ldr	r3, [r6, #4]
     8bc:	9305      	str	r3, [sp, #20]
     8be:	0033      	movs	r3, r6
	switch (transfer_mode)
     8c0:	9a05      	ldr	r2, [sp, #20]
     8c2:	3308      	adds	r3, #8
     8c4:	2a00      	cmp	r2, #0
     8c6:	d100      	bne.n	8ca <usart_init+0xee>
     8c8:	e0ae      	b.n	a28 <usart_init+0x24c>
     8ca:	2280      	movs	r2, #128	; 0x80
     8cc:	9905      	ldr	r1, [sp, #20]
     8ce:	0552      	lsls	r2, r2, #21
     8d0:	4291      	cmp	r1, r2
     8d2:	d10e      	bne.n	8f2 <usart_init+0x116>
			if (!config->use_external_clock) {
     8d4:	7fdb      	ldrb	r3, [r3, #31]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d10b      	bne.n	8f2 <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8da:	4b67      	ldr	r3, [pc, #412]	; (a78 <usart_init+0x29c>)
     8dc:	b2c0      	uxtb	r0, r0
     8de:	6a34      	ldr	r4, [r6, #32]
     8e0:	4798      	blx	r3
     8e2:	aa0e      	add	r2, sp, #56	; 0x38
     8e4:	0001      	movs	r1, r0
     8e6:	4b65      	ldr	r3, [pc, #404]	; (a7c <usart_init+0x2a0>)
     8e8:	0020      	movs	r0, r4
     8ea:	4798      	blx	r3
	if (status_code != STATUS_OK) {
     8ec:	2800      	cmp	r0, #0
     8ee:	d000      	beq.n	8f2 <usart_init+0x116>
     8f0:	e095      	b.n	a1e <usart_init+0x242>
	if(config->encoding_format_enable) {
     8f2:	7e73      	ldrb	r3, [r6, #25]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d002      	beq.n	8fe <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     8f8:	7eb3      	ldrb	r3, [r6, #26]
     8fa:	9a03      	ldr	r2, [sp, #12]
     8fc:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
     8fe:	4b60      	ldr	r3, [pc, #384]	; (a80 <usart_init+0x2a4>)
     900:	0038      	movs	r0, r7
     902:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
     904:	ab0a      	add	r3, sp, #40	; 0x28
     906:	8a1b      	ldrh	r3, [r3, #16]
     908:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
     90a:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
     90c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     90e:	9b07      	ldr	r3, [sp, #28]
     910:	431c      	orrs	r4, r3
     912:	9b08      	ldr	r3, [sp, #32]
     914:	431c      	orrs	r4, r3
     916:	9b05      	ldr	r3, [sp, #20]
     918:	431c      	orrs	r4, r3
     91a:	9b02      	ldr	r3, [sp, #8]
     91c:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     920:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     922:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     926:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     928:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
     92a:	0033      	movs	r3, r6
     92c:	3308      	adds	r3, #8
     92e:	7fdb      	ldrb	r3, [r3, #31]
     930:	2b00      	cmp	r3, #0
     932:	d101      	bne.n	938 <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     934:	3304      	adds	r3, #4
     936:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     938:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     93a:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     93c:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     93e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     940:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     942:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
     944:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     946:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     948:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     94a:	1d73      	adds	r3, r6, #5
     94c:	7fdb      	ldrb	r3, [r3, #31]
     94e:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     950:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     952:	1db3      	adds	r3, r6, #6
     954:	7fdb      	ldrb	r3, [r3, #31]
     956:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     958:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
     95a:	7ab5      	ldrb	r5, [r6, #10]
     95c:	4315      	orrs	r5, r2
     95e:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
     960:	8933      	ldrh	r3, [r6, #8]
     962:	2bff      	cmp	r3, #255	; 0xff
     964:	d100      	bne.n	968 <usart_init+0x18c>
     966:	e075      	b.n	a54 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     968:	2280      	movs	r2, #128	; 0x80
     96a:	0452      	lsls	r2, r2, #17
     96c:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
     96e:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     970:	0033      	movs	r3, r6
     972:	332c      	adds	r3, #44	; 0x2c
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d103      	bne.n	982 <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     97a:	4b42      	ldr	r3, [pc, #264]	; (a84 <usart_init+0x2a8>)
     97c:	789b      	ldrb	r3, [r3, #2]
     97e:	079b      	lsls	r3, r3, #30
     980:	d501      	bpl.n	986 <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     982:	2380      	movs	r3, #128	; 0x80
     984:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
     986:	0038      	movs	r0, r7
     988:	4b3d      	ldr	r3, [pc, #244]	; (a80 <usart_init+0x2a4>)
     98a:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
     98c:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
     98e:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
     990:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
     992:	4b3b      	ldr	r3, [pc, #236]	; (a80 <usart_init+0x2a4>)
     994:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
     996:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     998:	2500      	movs	r5, #0
     99a:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     99c:	2380      	movs	r3, #128	; 0x80
     99e:	ac0d      	add	r4, sp, #52	; 0x34
     9a0:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     9a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9a4:	7065      	strb	r5, [r4, #1]
     9a6:	930e      	str	r3, [sp, #56]	; 0x38
     9a8:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9aa:	70e5      	strb	r5, [r4, #3]
     9ac:	930f      	str	r3, [sp, #60]	; 0x3c
     9ae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9b0:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
     9b2:	9310      	str	r3, [sp, #64]	; 0x40
     9b4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     9b6:	9302      	str	r3, [sp, #8]
     9b8:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9ba:	2010      	movs	r0, #16
     9bc:	aa0a      	add	r2, sp, #40	; 0x28
     9be:	00ab      	lsls	r3, r5, #2
     9c0:	1812      	adds	r2, r2, r0
     9c2:	58d0      	ldr	r0, [r2, r3]
     9c4:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
     9c6:	2800      	cmp	r0, #0
     9c8:	d102      	bne.n	9d0 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ca:	9804      	ldr	r0, [sp, #16]
     9cc:	4b2e      	ldr	r3, [pc, #184]	; (a88 <usart_init+0x2ac>)
     9ce:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     9d0:	1c43      	adds	r3, r0, #1
     9d2:	d005      	beq.n	9e0 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9d4:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9d6:	0c00      	lsrs	r0, r0, #16
     9d8:	b2c0      	uxtb	r0, r0
     9da:	0021      	movs	r1, r4
     9dc:	4b2b      	ldr	r3, [pc, #172]	; (a8c <usart_init+0x2b0>)
     9de:	4798      	blx	r3
     9e0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     9e2:	2d04      	cmp	r5, #4
     9e4:	d1e9      	bne.n	9ba <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
     9e6:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
     9e8:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
     9ea:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
     9ec:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
     9ee:	60fc      	str	r4, [r7, #12]
     9f0:	613c      	str	r4, [r7, #16]
     9f2:	617c      	str	r4, [r7, #20]
     9f4:	61bc      	str	r4, [r7, #24]
     9f6:	61fc      	str	r4, [r7, #28]
     9f8:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
     9fa:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     9fc:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
     9fe:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
     a00:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
     a02:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
     a04:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
     a06:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a08:	6838      	ldr	r0, [r7, #0]
     a0a:	4b16      	ldr	r3, [pc, #88]	; (a64 <usart_init+0x288>)
     a0c:	4798      	blx	r3
     a0e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a10:	4b1f      	ldr	r3, [pc, #124]	; (a90 <usart_init+0x2b4>)
     a12:	4920      	ldr	r1, [pc, #128]	; (a94 <usart_init+0x2b8>)
     a14:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     a16:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
     a18:	4b1f      	ldr	r3, [pc, #124]	; (a98 <usart_init+0x2bc>)
     a1a:	00ad      	lsls	r5, r5, #2
     a1c:	50ef      	str	r7, [r5, r3]
}
     a1e:	b013      	add	sp, #76	; 0x4c
     a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a22:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a24:	2401      	movs	r4, #1
     a26:	e73d      	b.n	8a4 <usart_init+0xc8>
			if (config->use_external_clock) {
     a28:	7fdb      	ldrb	r3, [r3, #31]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d007      	beq.n	a3e <usart_init+0x262>
				status_code =
     a2e:	0023      	movs	r3, r4
     a30:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     a32:	6a30      	ldr	r0, [r6, #32]
     a34:	9500      	str	r5, [sp, #0]
     a36:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
     a38:	4c18      	ldr	r4, [pc, #96]	; (a9c <usart_init+0x2c0>)
     a3a:	47a0      	blx	r4
     a3c:	e756      	b.n	8ec <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
     a3e:	6a33      	ldr	r3, [r6, #32]
     a40:	b2c0      	uxtb	r0, r0
     a42:	930b      	str	r3, [sp, #44]	; 0x2c
     a44:	4b0c      	ldr	r3, [pc, #48]	; (a78 <usart_init+0x29c>)
     a46:	4798      	blx	r3
				status_code =
     a48:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
     a4a:	0001      	movs	r1, r0
				status_code =
     a4c:	0023      	movs	r3, r4
     a4e:	aa0e      	add	r2, sp, #56	; 0x38
     a50:	980b      	ldr	r0, [sp, #44]	; 0x2c
     a52:	e7f1      	b.n	a38 <usart_init+0x25c>
		if(config->lin_slave_enable) {
     a54:	7ef3      	ldrb	r3, [r6, #27]
     a56:	2b00      	cmp	r3, #0
     a58:	d100      	bne.n	a5c <usart_init+0x280>
     a5a:	e789      	b.n	970 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	04db      	lsls	r3, r3, #19
     a60:	431c      	orrs	r4, r3
     a62:	e785      	b.n	970 <usart_init+0x194>
     a64:	000007a1 	.word	0x000007a1
     a68:	40000400 	.word	0x40000400
     a6c:	00001695 	.word	0x00001695
     a70:	0000160d 	.word	0x0000160d
     a74:	00000601 	.word	0x00000601
     a78:	000016b1 	.word	0x000016b1
     a7c:	00000541 	.word	0x00000541
     a80:	000007d1 	.word	0x000007d1
     a84:	41002000 	.word	0x41002000
     a88:	00000645 	.word	0x00000645
     a8c:	00001769 	.word	0x00001769
     a90:	00001151 	.word	0x00001151
     a94:	00000be1 	.word	0x00000be1
     a98:	20000170 	.word	0x20000170
     a9c:	00000569 	.word	0x00000569

00000aa0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     aa0:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     aa2:	79c2      	ldrb	r2, [r0, #7]
{
     aa4:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
     aa6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     aa8:	2a00      	cmp	r2, #0
     aaa:	d00c      	beq.n	ac6 <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     aac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
     aae:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     ab0:	2a00      	cmp	r2, #0
     ab2:	d108      	bne.n	ac6 <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
     ab6:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
     ab8:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     aba:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
     abc:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     abe:	7e22      	ldrb	r2, [r4, #24]
     ac0:	421a      	tst	r2, r3
     ac2:	d0fc      	beq.n	abe <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     ac4:	2300      	movs	r3, #0
}
     ac6:	0018      	movs	r0, r3
     ac8:	bd70      	pop	{r4, r5, r6, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	000007d1 	.word	0x000007d1

00000ad0 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     ad2:	0006      	movs	r6, r0
     ad4:	000f      	movs	r7, r1
     ad6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ad8:	2017      	movs	r0, #23
	if (length == 0) {
     ada:	2a00      	cmp	r2, #0
     adc:	d027      	beq.n	b2e <usart_write_buffer_wait+0x5e>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ade:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     ae0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     ae2:	2b00      	cmp	r3, #0
     ae4:	d023      	beq.n	b2e <usart_write_buffer_wait+0x5e>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ae6:	6833      	ldr	r3, [r6, #0]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ae8:	0030      	movs	r0, r6
	SercomUsart *const usart_hw = &(module->hw->USART);
     aea:	9301      	str	r3, [sp, #4]
	_usart_wait_for_sync(module);
     aec:	4b18      	ldr	r3, [pc, #96]	; (b50 <usart_write_buffer_wait+0x80>)
     aee:	4798      	blx	r3

	uint16_t tx_pos = 0;
     af0:	2400      	movs	r4, #0
     af2:	2380      	movs	r3, #128	; 0x80
     af4:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     af6:	2101      	movs	r1, #1
     af8:	9a01      	ldr	r2, [sp, #4]
     afa:	7e12      	ldrb	r2, [r2, #24]
     afc:	420a      	tst	r2, r1
     afe:	d017      	beq.n	b30 <usart_write_buffer_wait+0x60>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b00:	7972      	ldrb	r2, [r6, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
     b02:	1863      	adds	r3, r4, r1
     b04:	b29b      	uxth	r3, r3
     b06:	5d39      	ldrb	r1, [r7, r4]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b08:	2a01      	cmp	r2, #1
     b0a:	d016      	beq.n	b3a <usart_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
     b0c:	001c      	movs	r4, r3
     b0e:	b289      	uxth	r1, r1
     b10:	3d01      	subs	r5, #1
			data_to_send |= (tx_data[tx_pos++] << 8);
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     b12:	0030      	movs	r0, r6
     b14:	4b0f      	ldr	r3, [pc, #60]	; (b54 <usart_write_buffer_wait+0x84>)
     b16:	b2ad      	uxth	r5, r5
     b18:	4798      	blx	r3
	while (length--) {
     b1a:	2d00      	cmp	r5, #0
     b1c:	d1e9      	bne.n	af2 <usart_write_buffer_wait+0x22>
     b1e:	2380      	movs	r3, #128	; 0x80
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b20:	2202      	movs	r2, #2
     b22:	025b      	lsls	r3, r3, #9
     b24:	9901      	ldr	r1, [sp, #4]
     b26:	7e09      	ldrb	r1, [r1, #24]
     b28:	4211      	tst	r1, r2
     b2a:	d00c      	beq.n	b46 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     b2c:	2000      	movs	r0, #0
}
     b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     b30:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     b32:	2b00      	cmp	r3, #0
     b34:	d1df      	bne.n	af6 <usart_write_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
     b36:	2012      	movs	r0, #18
     b38:	e7f9      	b.n	b2e <usart_write_buffer_wait+0x5e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b3a:	5cfb      	ldrb	r3, [r7, r3]
     b3c:	3402      	adds	r4, #2
     b3e:	021b      	lsls	r3, r3, #8
     b40:	b2a4      	uxth	r4, r4
     b42:	4319      	orrs	r1, r3
     b44:	e7e4      	b.n	b10 <usart_write_buffer_wait+0x40>
     b46:	3b01      	subs	r3, #1
		} else if (i == USART_TIMEOUT) {
     b48:	2b00      	cmp	r3, #0
     b4a:	d1eb      	bne.n	b24 <usart_write_buffer_wait+0x54>
     b4c:	e7f3      	b.n	b36 <usart_write_buffer_wait+0x66>
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	000007d1 	.word	0x000007d1
     b54:	00000aa1 	.word	0x00000aa1

00000b58 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     b5c:	4b10      	ldr	r3, [pc, #64]	; (ba0 <_usart_read_buffer+0x48>)
     b5e:	0017      	movs	r7, r2
     b60:	000e      	movs	r6, r1
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b62:	6805      	ldr	r5, [r0, #0]
     b64:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     b66:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     b68:	4b0e      	ldr	r3, [pc, #56]	; (ba4 <_usart_read_buffer+0x4c>)
     b6a:	2a00      	cmp	r2, #0
     b6c:	d002      	beq.n	b74 <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
     b6e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     b70:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     b74:	85a7      	strh	r7, [r4, #44]	; 0x2c
     b76:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
     b78:	0023      	movs	r3, r4
     b7a:	2205      	movs	r2, #5
     b7c:	3332      	adds	r3, #50	; 0x32
	module->rx_buffer_ptr              = rx_data;
     b7e:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     b80:	701a      	strb	r2, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     b82:	2304      	movs	r3, #4
     b84:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
     b86:	7a23      	ldrb	r3, [r4, #8]
     b88:	2b00      	cmp	r3, #0
     b8a:	d001      	beq.n	b90 <_usart_read_buffer+0x38>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     b8c:	2320      	movs	r3, #32
     b8e:	75ab      	strb	r3, [r5, #22]
	return STATUS_OK;
     b90:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     b92:	7a63      	ldrb	r3, [r4, #9]
     b94:	4283      	cmp	r3, r0
     b96:	d0ec      	beq.n	b72 <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     b98:	2308      	movs	r3, #8
     b9a:	75ab      	strb	r3, [r5, #22]
     b9c:	e7e9      	b.n	b72 <_usart_read_buffer+0x1a>
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00001219 	.word	0x00001219
     ba4:	0000124d 	.word	0x0000124d

00000ba8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ba8:	1c93      	adds	r3, r2, #2
     baa:	009b      	lsls	r3, r3, #2
     bac:	18c3      	adds	r3, r0, r3
     bae:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     bb0:	2301      	movs	r3, #1
     bb2:	4093      	lsls	r3, r2
     bb4:	001a      	movs	r2, r3
     bb6:	3030      	adds	r0, #48	; 0x30
     bb8:	7803      	ldrb	r3, [r0, #0]
     bba:	4313      	orrs	r3, r2
     bbc:	7003      	strb	r3, [r0, #0]
}
     bbe:	4770      	bx	lr

00000bc0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     bc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     bc2:	2317      	movs	r3, #23
	if (length == 0) {
     bc4:	2a00      	cmp	r2, #0
     bc6:	d006      	beq.n	bd6 <usart_read_buffer_job+0x16>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     bc8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     bca:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     bcc:	2c00      	cmp	r4, #0
     bce:	d002      	beq.n	bd6 <usart_read_buffer_job+0x16>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
     bd0:	4b02      	ldr	r3, [pc, #8]	; (bdc <usart_read_buffer_job+0x1c>)
     bd2:	4798      	blx	r3
     bd4:	0003      	movs	r3, r0
}
     bd6:	0018      	movs	r0, r3
     bd8:	bd10      	pop	{r4, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	00000b59 	.word	0x00000b59

00000be0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     be2:	4b58      	ldr	r3, [pc, #352]	; (d44 <_usart_interrupt_handler+0x164>)
     be4:	0080      	lsls	r0, r0, #2
     be6:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     be8:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
     bea:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
     bec:	2b00      	cmp	r3, #0
     bee:	d1fc      	bne.n	bea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     bf0:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     bf2:	7daf      	ldrb	r7, [r5, #22]
     bf4:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
     bf6:	0023      	movs	r3, r4
     bf8:	3330      	adds	r3, #48	; 0x30
     bfa:	781a      	ldrb	r2, [r3, #0]
     bfc:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     bfe:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
     c00:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c02:	421f      	tst	r7, r3
     c04:	d019      	beq.n	c3a <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
     c06:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
     c08:	2a00      	cmp	r2, #0
     c0a:	d100      	bne.n	c0e <_usart_interrupt_handler+0x2e>
     c0c:	e072      	b.n	cf4 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c10:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c12:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
     c14:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c16:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c18:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c1a:	2901      	cmp	r1, #1
     c1c:	d064      	beq.n	ce8 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c1e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c20:	05db      	lsls	r3, r3, #23
     c22:	0ddb      	lsrs	r3, r3, #23
     c24:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c26:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     c28:	3b01      	subs	r3, #1
     c2a:	b29b      	uxth	r3, r3
     c2c:	85e3      	strh	r3, [r4, #46]	; 0x2e
     c2e:	2b00      	cmp	r3, #0
     c30:	d103      	bne.n	c3a <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c32:	3301      	adds	r3, #1
     c34:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c36:	3301      	adds	r3, #1
     c38:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c3a:	2302      	movs	r3, #2
     c3c:	421f      	tst	r7, r3
     c3e:	d009      	beq.n	c54 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c40:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
     c42:	0023      	movs	r3, r4
     c44:	2200      	movs	r2, #0
     c46:	3333      	adds	r3, #51	; 0x33
     c48:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c4a:	07f3      	lsls	r3, r6, #31
     c4c:	d502      	bpl.n	c54 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c4e:	0020      	movs	r0, r4
     c50:	68e3      	ldr	r3, [r4, #12]
     c52:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c54:	2304      	movs	r3, #4
     c56:	421f      	tst	r7, r3
     c58:	d027      	beq.n	caa <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
     c5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
     c5c:	2a00      	cmp	r2, #0
     c5e:	d100      	bne.n	c62 <_usart_interrupt_handler+0x82>
     c60:	e06d      	b.n	d3e <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c62:	8b6b      	ldrh	r3, [r5, #26]
     c64:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     c66:	071a      	lsls	r2, r3, #28
     c68:	d446      	bmi.n	cf8 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c6a:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
     c6c:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c6e:	d045      	beq.n	cfc <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c70:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c72:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c74:	4213      	tst	r3, r2
     c76:	d10f      	bne.n	c98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c78:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     c7a:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c7c:	4213      	tst	r3, r2
     c7e:	d10b      	bne.n	c98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c80:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     c82:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c84:	4213      	tst	r3, r2
     c86:	d107      	bne.n	c98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c88:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     c8a:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c8c:	4213      	tst	r3, r2
     c8e:	d103      	bne.n	c98 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c90:	2220      	movs	r2, #32
     c92:	4213      	tst	r3, r2
     c94:	d004      	beq.n	ca0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c96:	2141      	movs	r1, #65	; 0x41
     c98:	0023      	movs	r3, r4
     c9a:	3332      	adds	r3, #50	; 0x32
     c9c:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     c9e:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ca0:	0773      	lsls	r3, r6, #29
     ca2:	d502      	bpl.n	caa <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ca4:	0020      	movs	r0, r4
     ca6:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ca8:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     caa:	2310      	movs	r3, #16
     cac:	421f      	tst	r7, r3
     cae:	d006      	beq.n	cbe <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     cb0:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     cb2:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     cb4:	421e      	tst	r6, r3
     cb6:	d002      	beq.n	cbe <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     cb8:	0020      	movs	r0, r4
     cba:	69e3      	ldr	r3, [r4, #28]
     cbc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     cbe:	2320      	movs	r3, #32
     cc0:	421f      	tst	r7, r3
     cc2:	d006      	beq.n	cd2 <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     cc4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     cc6:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     cc8:	0733      	lsls	r3, r6, #28
     cca:	d502      	bpl.n	cd2 <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     ccc:	0020      	movs	r0, r4
     cce:	69a3      	ldr	r3, [r4, #24]
     cd0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     cd2:	2308      	movs	r3, #8
     cd4:	421f      	tst	r7, r3
     cd6:	d006      	beq.n	ce6 <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     cd8:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     cda:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     cdc:	06b3      	lsls	r3, r6, #26
     cde:	d502      	bpl.n	ce6 <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ce0:	6a23      	ldr	r3, [r4, #32]
     ce2:	0020      	movs	r0, r4
     ce4:	4798      	blx	r3
		}
	}
#endif
}
     ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ce8:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
     cea:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cec:	0209      	lsls	r1, r1, #8
     cee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     cf0:	62a2      	str	r2, [r4, #40]	; 0x28
     cf2:	e795      	b.n	c20 <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cf4:	752b      	strb	r3, [r5, #20]
     cf6:	e7a0      	b.n	c3a <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     cf8:	2237      	movs	r2, #55	; 0x37
     cfa:	e7b7      	b.n	c6c <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     cfc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
     cfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d00:	05db      	lsls	r3, r3, #23
     d02:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
     d04:	b2da      	uxtb	r2, r3
     d06:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
     d08:	6a62      	ldr	r2, [r4, #36]	; 0x24
     d0a:	1c51      	adds	r1, r2, #1
     d0c:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d0e:	7961      	ldrb	r1, [r4, #5]
     d10:	2901      	cmp	r1, #1
     d12:	d104      	bne.n	d1e <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d14:	0a1b      	lsrs	r3, r3, #8
     d16:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d1a:	3301      	adds	r3, #1
     d1c:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
     d1e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     d20:	3b01      	subs	r3, #1
     d22:	b29b      	uxth	r3, r3
     d24:	85a3      	strh	r3, [r4, #44]	; 0x2c
     d26:	2b00      	cmp	r3, #0
     d28:	d1bf      	bne.n	caa <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d2a:	2204      	movs	r2, #4
     d2c:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
     d2e:	0022      	movs	r2, r4
     d30:	3232      	adds	r2, #50	; 0x32
     d32:	7013      	strb	r3, [r2, #0]
					if (callback_status
     d34:	07b3      	lsls	r3, r6, #30
     d36:	d5b8      	bpl.n	caa <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d38:	0020      	movs	r0, r4
     d3a:	6923      	ldr	r3, [r4, #16]
     d3c:	e7b4      	b.n	ca8 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d3e:	752b      	strb	r3, [r5, #20]
     d40:	e7b3      	b.n	caa <_usart_interrupt_handler+0xca>
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	20000170 	.word	0x20000170

00000d48 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d48:	b5f0      	push	{r4, r5, r6, r7, lr}
     d4a:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     d4c:	6029      	str	r1, [r5, #0]
{
     d4e:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d50:	680a      	ldr	r2, [r1, #0]
{
     d52:	b089      	sub	sp, #36	; 0x24
     d54:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     d56:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     d58:	0792      	lsls	r2, r2, #30
     d5a:	d500      	bpl.n	d5e <spi_init+0x16>
     d5c:	e0d4      	b.n	f08 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d5e:	2701      	movs	r7, #1
     d60:	680b      	ldr	r3, [r1, #0]
     d62:	403b      	ands	r3, r7
     d64:	9301      	str	r3, [sp, #4]
     d66:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     d68:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     d6a:	2a00      	cmp	r2, #0
     d6c:	d000      	beq.n	d70 <spi_init+0x28>
     d6e:	e0cb      	b.n	f08 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d70:	0008      	movs	r0, r1
     d72:	4b6a      	ldr	r3, [pc, #424]	; (f1c <spi_init+0x1d4>)
     d74:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d76:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d78:	408f      	lsls	r7, r1
     d7a:	4b69      	ldr	r3, [pc, #420]	; (f20 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d7c:	3014      	adds	r0, #20
     d7e:	6a1a      	ldr	r2, [r3, #32]
     d80:	4317      	orrs	r7, r2
     d82:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d84:	1d63      	adds	r3, r4, #5
     d86:	7fdb      	ldrb	r3, [r3, #31]
     d88:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d8a:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
     d8c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d8e:	0011      	movs	r1, r2
     d90:	0038      	movs	r0, r7
     d92:	4b64      	ldr	r3, [pc, #400]	; (f24 <spi_init+0x1dc>)
     d94:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d96:	0038      	movs	r0, r7
     d98:	4b63      	ldr	r3, [pc, #396]	; (f28 <spi_init+0x1e0>)
     d9a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d9c:	1d63      	adds	r3, r4, #5
     d9e:	7fd8      	ldrb	r0, [r3, #31]
     da0:	9901      	ldr	r1, [sp, #4]
     da2:	4b62      	ldr	r3, [pc, #392]	; (f2c <spi_init+0x1e4>)
     da4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     da6:	7823      	ldrb	r3, [r4, #0]
     da8:	2b01      	cmp	r3, #1
     daa:	d103      	bne.n	db4 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     dac:	6832      	ldr	r2, [r6, #0]
     dae:	330b      	adds	r3, #11
     db0:	4313      	orrs	r3, r2
     db2:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     db4:	7823      	ldrb	r3, [r4, #0]
     db6:	2b00      	cmp	r3, #0
     db8:	d103      	bne.n	dc2 <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     dba:	6832      	ldr	r2, [r6, #0]
     dbc:	3308      	adds	r3, #8
     dbe:	4313      	orrs	r3, r2
     dc0:	6033      	str	r3, [r6, #0]
     dc2:	002b      	movs	r3, r5
     dc4:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     dc6:	2600      	movs	r6, #0
     dc8:	330c      	adds	r3, #12
     dca:	3228      	adds	r2, #40	; 0x28
     dcc:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     dce:	429a      	cmp	r2, r3
     dd0:	d1fc      	bne.n	dcc <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     dd2:	002b      	movs	r3, r5
     dd4:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
     dd6:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
     dd8:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     dda:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
     ddc:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
     dde:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
     de0:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
     de2:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
     de4:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     de6:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
     de8:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     dea:	4b4c      	ldr	r3, [pc, #304]	; (f1c <spi_init+0x1d4>)
	module->locked                     = false;
     dec:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     dee:	4798      	blx	r3
     df0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     df2:	4b4f      	ldr	r3, [pc, #316]	; (f30 <spi_init+0x1e8>)
     df4:	494f      	ldr	r1, [pc, #316]	; (f34 <spi_init+0x1ec>)
     df6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     df8:	4b4f      	ldr	r3, [pc, #316]	; (f38 <spi_init+0x1f0>)
     dfa:	00bf      	lsls	r7, r7, #2
     dfc:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     dfe:	2380      	movs	r3, #128	; 0x80
     e00:	aa02      	add	r2, sp, #8
     e02:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e04:	2301      	movs	r3, #1
     e06:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
     e08:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     e0a:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e0c:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
     e0e:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
     e10:	2b00      	cmp	r3, #0
     e12:	d100      	bne.n	e16 <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e14:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
     e16:	2600      	movs	r6, #0
     e18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e1a:	9304      	str	r3, [sp, #16]
     e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e1e:	9305      	str	r3, [sp, #20]
     e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
     e22:	9306      	str	r3, [sp, #24]
     e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
     e26:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e28:	00b3      	lsls	r3, r6, #2
     e2a:	aa04      	add	r2, sp, #16
     e2c:	5898      	ldr	r0, [r3, r2]
     e2e:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
     e30:	2800      	cmp	r0, #0
     e32:	d102      	bne.n	e3a <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e34:	0038      	movs	r0, r7
     e36:	4b41      	ldr	r3, [pc, #260]	; (f3c <spi_init+0x1f4>)
     e38:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
     e3a:	1c43      	adds	r3, r0, #1
     e3c:	d006      	beq.n	e4c <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e3e:	ab02      	add	r3, sp, #8
     e40:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e42:	0c00      	lsrs	r0, r0, #16
     e44:	b2c0      	uxtb	r0, r0
     e46:	a903      	add	r1, sp, #12
     e48:	4b3d      	ldr	r3, [pc, #244]	; (f40 <spi_init+0x1f8>)
     e4a:	4798      	blx	r3
     e4c:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e4e:	2e04      	cmp	r6, #4
     e50:	d1ea      	bne.n	e28 <spi_init+0xe0>
	module->mode             = config->mode;
     e52:	7823      	ldrb	r3, [r4, #0]
     e54:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     e56:	7c23      	ldrb	r3, [r4, #16]
     e58:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     e5a:	7ca3      	ldrb	r3, [r4, #18]
     e5c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     e5e:	7d23      	ldrb	r3, [r4, #20]
     e60:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     e62:	ab02      	add	r3, sp, #8
     e64:	1c9e      	adds	r6, r3, #2
     e66:	2300      	movs	r3, #0
     e68:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
     e6a:	7823      	ldrb	r3, [r4, #0]
     e6c:	2b01      	cmp	r3, #1
     e6e:	d110      	bne.n	e92 <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e70:	4b2a      	ldr	r3, [pc, #168]	; (f1c <spi_init+0x1d4>)
     e72:	6828      	ldr	r0, [r5, #0]
     e74:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e76:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     e78:	4b32      	ldr	r3, [pc, #200]	; (f44 <spi_init+0x1fc>)
     e7a:	b2c0      	uxtb	r0, r0
     e7c:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
     e7e:	4b32      	ldr	r3, [pc, #200]	; (f48 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     e80:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     e82:	0032      	movs	r2, r6
     e84:	69a0      	ldr	r0, [r4, #24]
     e86:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
     e88:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
     e8a:	2800      	cmp	r0, #0
     e8c:	d13c      	bne.n	f08 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
     e8e:	7833      	ldrb	r3, [r6, #0]
     e90:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
     e92:	7823      	ldrb	r3, [r4, #0]
     e94:	2b00      	cmp	r3, #0
     e96:	d13d      	bne.n	f14 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e98:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     e9a:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
     e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     e9e:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     ea0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     ea2:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
     ea4:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     ea6:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     ea8:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
     eaa:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     eac:	7fdb      	ldrb	r3, [r3, #31]
     eae:	2b00      	cmp	r3, #0
     eb0:	d12d      	bne.n	f0e <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
     eb2:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
     eb4:	68a1      	ldr	r1, [r4, #8]
     eb6:	6862      	ldr	r2, [r4, #4]
     eb8:	430a      	orrs	r2, r1
     eba:	68e1      	ldr	r1, [r4, #12]
     ebc:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
     ebe:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
     ec0:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
     ec2:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     ec4:	7c61      	ldrb	r1, [r4, #17]
     ec6:	2900      	cmp	r1, #0
     ec8:	d103      	bne.n	ed2 <spi_init+0x18a>
     eca:	4920      	ldr	r1, [pc, #128]	; (f4c <spi_init+0x204>)
     ecc:	7889      	ldrb	r1, [r1, #2]
     ece:	0789      	lsls	r1, r1, #30
     ed0:	d501      	bpl.n	ed6 <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ed2:	2180      	movs	r1, #128	; 0x80
     ed4:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
     ed6:	7ca1      	ldrb	r1, [r4, #18]
     ed8:	2900      	cmp	r1, #0
     eda:	d002      	beq.n	ee2 <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     edc:	2180      	movs	r1, #128	; 0x80
     ede:	0289      	lsls	r1, r1, #10
     ee0:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
     ee2:	7ce1      	ldrb	r1, [r4, #19]
     ee4:	2900      	cmp	r1, #0
     ee6:	d002      	beq.n	eee <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ee8:	2180      	movs	r1, #128	; 0x80
     eea:	0089      	lsls	r1, r1, #2
     eec:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
     eee:	7d21      	ldrb	r1, [r4, #20]
     ef0:	2900      	cmp	r1, #0
     ef2:	d002      	beq.n	efa <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ef4:	2180      	movs	r1, #128	; 0x80
     ef6:	0189      	lsls	r1, r1, #6
     ef8:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
     efa:	6839      	ldr	r1, [r7, #0]
     efc:	430a      	orrs	r2, r1
     efe:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     f00:	687a      	ldr	r2, [r7, #4]
     f02:	4313      	orrs	r3, r2
     f04:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     f06:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     f08:	0018      	movs	r0, r3
     f0a:	b009      	add	sp, #36	; 0x24
     f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     f0e:	2340      	movs	r3, #64	; 0x40
     f10:	4313      	orrs	r3, r2
     f12:	e7cf      	b.n	eb4 <spi_init+0x16c>
	uint32_t ctrlb = 0;
     f14:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
     f16:	0018      	movs	r0, r3
     f18:	e7cc      	b.n	eb4 <spi_init+0x16c>
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	000007a1 	.word	0x000007a1
     f20:	40000400 	.word	0x40000400
     f24:	00001695 	.word	0x00001695
     f28:	0000160d 	.word	0x0000160d
     f2c:	00000601 	.word	0x00000601
     f30:	00001151 	.word	0x00001151
     f34:	00000f51 	.word	0x00000f51
     f38:	20000170 	.word	0x20000170
     f3c:	00000645 	.word	0x00000645
     f40:	00001769 	.word	0x00001769
     f44:	000016b1 	.word	0x000016b1
     f48:	00000541 	.word	0x00000541
     f4c:	41002000 	.word	0x41002000

00000f50 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     f52:	4b7c      	ldr	r3, [pc, #496]	; (1144 <_spi_interrupt_handler+0x1f4>)
     f54:	0080      	lsls	r0, r0, #2
     f56:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     f58:	0023      	movs	r3, r4
     f5a:	0022      	movs	r2, r4
     f5c:	3337      	adds	r3, #55	; 0x37
     f5e:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f60:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
     f62:	781b      	ldrb	r3, [r3, #0]
     f64:	7816      	ldrb	r6, [r2, #0]
     f66:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     f68:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     f6a:	7daf      	ldrb	r7, [r5, #22]
     f6c:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     f6e:	07fb      	lsls	r3, r7, #31
     f70:	d539      	bpl.n	fe6 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     f72:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     f74:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
     f76:	2a01      	cmp	r2, #1
     f78:	d133      	bne.n	fe2 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
     f7a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     f7c:	2b00      	cmp	r3, #0
     f7e:	d10d      	bne.n	f9c <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
     f80:	4b71      	ldr	r3, [pc, #452]	; (1148 <_spi_interrupt_handler+0x1f8>)
     f82:	881b      	ldrh	r3, [r3, #0]
     f84:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     f86:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f88:	3b01      	subs	r3, #1
     f8a:	b29b      	uxth	r3, r3
     f8c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     f8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f90:	2b00      	cmp	r3, #0
     f92:	d100      	bne.n	f96 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f94:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     f96:	7963      	ldrb	r3, [r4, #5]
		if (0
     f98:	2b01      	cmp	r3, #1
     f9a:	d122      	bne.n	fe2 <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
     f9c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     f9e:	2b00      	cmp	r3, #0
     fa0:	d021      	beq.n	fe6 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fa2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
     fa4:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
     fa6:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fa8:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
     faa:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fac:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fae:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fb0:	2801      	cmp	r0, #1
     fb2:	d100      	bne.n	fb6 <_spi_interrupt_handler+0x66>
     fb4:	e074      	b.n	10a0 <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     fb6:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     fb8:	05db      	lsls	r3, r3, #23
     fba:	0ddb      	lsrs	r3, r3, #23
     fbc:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     fbe:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     fc0:	3b01      	subs	r3, #1
     fc2:	b29b      	uxth	r3, r3
     fc4:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     fc6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     fc8:	2b00      	cmp	r3, #0
     fca:	d10c      	bne.n	fe6 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     fcc:	3301      	adds	r3, #1
     fce:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     fd0:	7a63      	ldrb	r3, [r4, #9]
     fd2:	2b01      	cmp	r3, #1
     fd4:	d107      	bne.n	fe6 <_spi_interrupt_handler+0x96>
     fd6:	79e3      	ldrb	r3, [r4, #7]
     fd8:	2b00      	cmp	r3, #0
     fda:	d104      	bne.n	fe6 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     fdc:	3302      	adds	r3, #2
     fde:	75ab      	strb	r3, [r5, #22]
     fe0:	e001      	b.n	fe6 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
     fe2:	2b00      	cmp	r3, #0
     fe4:	d0da      	beq.n	f9c <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     fe6:	2104      	movs	r1, #4
     fe8:	420f      	tst	r7, r1
     fea:	d015      	beq.n	1018 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fec:	8b6b      	ldrh	r3, [r5, #26]
     fee:	420b      	tst	r3, r1
     ff0:	d05c      	beq.n	10ac <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
     ff2:	7a63      	ldrb	r3, [r4, #9]
     ff4:	2b01      	cmp	r3, #1
     ff6:	d00c      	beq.n	1012 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     ff8:	0023      	movs	r3, r4
     ffa:	221e      	movs	r2, #30
     ffc:	3338      	adds	r3, #56	; 0x38
     ffe:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1000:	2303      	movs	r3, #3
    1002:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1004:	3302      	adds	r3, #2
    1006:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1008:	0733      	lsls	r3, r6, #28
    100a:	d502      	bpl.n	1012 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    100c:	0020      	movs	r0, r4
    100e:	69a3      	ldr	r3, [r4, #24]
    1010:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1012:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1014:	2304      	movs	r3, #4
    1016:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1018:	2202      	movs	r2, #2
    101a:	4217      	tst	r7, r2
    101c:	d027      	beq.n	106e <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    101e:	7963      	ldrb	r3, [r4, #5]
    1020:	2b00      	cmp	r3, #0
    1022:	d10e      	bne.n	1042 <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1024:	2107      	movs	r1, #7
    1026:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1028:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    102a:	3201      	adds	r2, #1
    102c:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    102e:	0022      	movs	r2, r4
    1030:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    1032:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1034:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1036:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    1038:	06f3      	lsls	r3, r6, #27
    103a:	d502      	bpl.n	1042 <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    103c:	0020      	movs	r0, r4
    103e:	69e3      	ldr	r3, [r4, #28]
    1040:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1042:	7963      	ldrb	r3, [r4, #5]
    1044:	2b01      	cmp	r3, #1
    1046:	d112      	bne.n	106e <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1048:	7a63      	ldrb	r3, [r4, #9]
    104a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    104c:	2b01      	cmp	r3, #1
    104e:	d10e      	bne.n	106e <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1050:	79e2      	ldrb	r2, [r4, #7]
    1052:	2a00      	cmp	r2, #0
    1054:	d10b      	bne.n	106e <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1056:	2102      	movs	r1, #2
    1058:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    105a:	3101      	adds	r1, #1
    105c:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    105e:	0021      	movs	r1, r4
    1060:	3138      	adds	r1, #56	; 0x38
    1062:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1064:	421e      	tst	r6, r3
    1066:	d002      	beq.n	106e <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1068:	0020      	movs	r0, r4
    106a:	68e3      	ldr	r3, [r4, #12]
    106c:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    106e:	2308      	movs	r3, #8
    1070:	421f      	tst	r7, r3
    1072:	d009      	beq.n	1088 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    1074:	7962      	ldrb	r2, [r4, #5]
    1076:	2a00      	cmp	r2, #0
    1078:	d106      	bne.n	1088 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    107a:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    107c:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    107e:	06b3      	lsls	r3, r6, #26
    1080:	d502      	bpl.n	1088 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1082:	0020      	movs	r0, r4
    1084:	6a23      	ldr	r3, [r4, #32]
    1086:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1088:	b27f      	sxtb	r7, r7
    108a:	2f00      	cmp	r7, #0
    108c:	da07      	bge.n	109e <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    108e:	2380      	movs	r3, #128	; 0x80
    1090:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1092:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1094:	0673      	lsls	r3, r6, #25
    1096:	d502      	bpl.n	109e <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1098:	6a63      	ldr	r3, [r4, #36]	; 0x24
    109a:	0020      	movs	r0, r4
    109c:	4798      	blx	r3
		}
	}
#  endif
}
    109e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    10a0:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    10a2:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    10a4:	0200      	lsls	r0, r0, #8
    10a6:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    10a8:	62e1      	str	r1, [r4, #44]	; 0x2c
    10aa:	e785      	b.n	fb8 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    10ac:	7a62      	ldrb	r2, [r4, #9]
    10ae:	6823      	ldr	r3, [r4, #0]
    10b0:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    10b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    10b4:	2a01      	cmp	r2, #1
    10b6:	d113      	bne.n	10e0 <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    10b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    10ba:	3b01      	subs	r3, #1
    10bc:	b29b      	uxth	r3, r3
    10be:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    10c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    10c2:	b29b      	uxth	r3, r3
    10c4:	2b00      	cmp	r3, #0
    10c6:	d1a7      	bne.n	1018 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    10c8:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    10ca:	0021      	movs	r1, r4
    10cc:	3138      	adds	r1, #56	; 0x38
    10ce:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    10d0:	3303      	adds	r3, #3
    10d2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    10d4:	4216      	tst	r6, r2
    10d6:	d09f      	beq.n	1018 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    10d8:	0020      	movs	r0, r4
    10da:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    10dc:	4798      	blx	r3
    10de:	e79b      	b.n	1018 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10e0:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    10e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    10e4:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    10e6:	b2da      	uxtb	r2, r3
    10e8:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    10ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    10ec:	1c51      	adds	r1, r2, #1
    10ee:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10f0:	79a1      	ldrb	r1, [r4, #6]
    10f2:	2901      	cmp	r1, #1
    10f4:	d104      	bne.n	1100 <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    10f6:	0a1b      	lsrs	r3, r3, #8
    10f8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    10fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10fc:	3301      	adds	r3, #1
    10fe:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    1100:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1102:	3b01      	subs	r3, #1
    1104:	b29b      	uxth	r3, r3
    1106:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1108:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    110a:	b29b      	uxth	r3, r3
    110c:	2b00      	cmp	r3, #0
    110e:	d000      	beq.n	1112 <_spi_interrupt_handler+0x1c2>
    1110:	e782      	b.n	1018 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    1112:	0022      	movs	r2, r4
    1114:	3238      	adds	r2, #56	; 0x38
    1116:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1118:	3304      	adds	r3, #4
    111a:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    111c:	7a62      	ldrb	r2, [r4, #9]
    111e:	2a02      	cmp	r2, #2
    1120:	d105      	bne.n	112e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1122:	421e      	tst	r6, r3
    1124:	d100      	bne.n	1128 <_spi_interrupt_handler+0x1d8>
    1126:	e777      	b.n	1018 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1128:	0020      	movs	r0, r4
    112a:	6963      	ldr	r3, [r4, #20]
    112c:	e7d6      	b.n	10dc <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    112e:	7a63      	ldrb	r3, [r4, #9]
    1130:	2b00      	cmp	r3, #0
    1132:	d000      	beq.n	1136 <_spi_interrupt_handler+0x1e6>
    1134:	e770      	b.n	1018 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1136:	07b3      	lsls	r3, r6, #30
    1138:	d400      	bmi.n	113c <_spi_interrupt_handler+0x1ec>
    113a:	e76d      	b.n	1018 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    113c:	0020      	movs	r0, r4
    113e:	6923      	ldr	r3, [r4, #16]
    1140:	e7cc      	b.n	10dc <_spi_interrupt_handler+0x18c>
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	20000170 	.word	0x20000170
    1148:	2000016c 	.word	0x2000016c

0000114c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    114c:	4770      	bx	lr
	...

00001150 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1150:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1152:	4c09      	ldr	r4, [pc, #36]	; (1178 <_sercom_set_handler+0x28>)
    1154:	4a09      	ldr	r2, [pc, #36]	; (117c <_sercom_set_handler+0x2c>)
    1156:	7823      	ldrb	r3, [r4, #0]
    1158:	2b00      	cmp	r3, #0
    115a:	d109      	bne.n	1170 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    115c:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    115e:	4f08      	ldr	r7, [pc, #32]	; (1180 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    1160:	4d08      	ldr	r5, [pc, #32]	; (1184 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1162:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    1164:	50ee      	str	r6, [r5, r3]
    1166:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1168:	2b18      	cmp	r3, #24
    116a:	d1fa      	bne.n	1162 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    116c:	3b17      	subs	r3, #23
    116e:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1170:	0080      	lsls	r0, r0, #2
    1172:	5011      	str	r1, [r2, r0]
}
    1174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	200000f3 	.word	0x200000f3
    117c:	200000f4 	.word	0x200000f4
    1180:	0000114d 	.word	0x0000114d
    1184:	20000170 	.word	0x20000170

00001188 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1188:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    118a:	2309      	movs	r3, #9
    118c:	466a      	mov	r2, sp
    118e:	7013      	strb	r3, [r2, #0]
    1190:	3301      	adds	r3, #1
    1192:	7053      	strb	r3, [r2, #1]
    1194:	3301      	adds	r3, #1
    1196:	7093      	strb	r3, [r2, #2]
    1198:	3301      	adds	r3, #1
    119a:	70d3      	strb	r3, [r2, #3]
    119c:	3301      	adds	r3, #1
    119e:	7113      	strb	r3, [r2, #4]
    11a0:	3301      	adds	r3, #1
    11a2:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11a4:	4b02      	ldr	r3, [pc, #8]	; (11b0 <_sercom_get_interrupt_vector+0x28>)
    11a6:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11a8:	466b      	mov	r3, sp
    11aa:	5618      	ldrsb	r0, [r3, r0]
}
    11ac:	bd0e      	pop	{r1, r2, r3, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	000007a1 	.word	0x000007a1

000011b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11b4:	b510      	push	{r4, lr}
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <SERCOM0_Handler+0xc>)
    11b8:	2000      	movs	r0, #0
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	4798      	blx	r3
    11be:	bd10      	pop	{r4, pc}
    11c0:	200000f4 	.word	0x200000f4

000011c4 <SERCOM1_Handler>:
    11c4:	b510      	push	{r4, lr}
    11c6:	4b02      	ldr	r3, [pc, #8]	; (11d0 <SERCOM1_Handler+0xc>)
    11c8:	2001      	movs	r0, #1
    11ca:	685b      	ldr	r3, [r3, #4]
    11cc:	4798      	blx	r3
    11ce:	bd10      	pop	{r4, pc}
    11d0:	200000f4 	.word	0x200000f4

000011d4 <SERCOM2_Handler>:
    11d4:	b510      	push	{r4, lr}
    11d6:	4b02      	ldr	r3, [pc, #8]	; (11e0 <SERCOM2_Handler+0xc>)
    11d8:	2002      	movs	r0, #2
    11da:	689b      	ldr	r3, [r3, #8]
    11dc:	4798      	blx	r3
    11de:	bd10      	pop	{r4, pc}
    11e0:	200000f4 	.word	0x200000f4

000011e4 <SERCOM3_Handler>:
    11e4:	b510      	push	{r4, lr}
    11e6:	4b02      	ldr	r3, [pc, #8]	; (11f0 <SERCOM3_Handler+0xc>)
    11e8:	2003      	movs	r0, #3
    11ea:	68db      	ldr	r3, [r3, #12]
    11ec:	4798      	blx	r3
    11ee:	bd10      	pop	{r4, pc}
    11f0:	200000f4 	.word	0x200000f4

000011f4 <SERCOM4_Handler>:
    11f4:	b510      	push	{r4, lr}
    11f6:	4b02      	ldr	r3, [pc, #8]	; (1200 <SERCOM4_Handler+0xc>)
    11f8:	2004      	movs	r0, #4
    11fa:	691b      	ldr	r3, [r3, #16]
    11fc:	4798      	blx	r3
    11fe:	bd10      	pop	{r4, pc}
    1200:	200000f4 	.word	0x200000f4

00001204 <SERCOM5_Handler>:
    1204:	b510      	push	{r4, lr}
    1206:	4b02      	ldr	r3, [pc, #8]	; (1210 <SERCOM5_Handler+0xc>)
    1208:	2005      	movs	r0, #5
    120a:	695b      	ldr	r3, [r3, #20]
    120c:	4798      	blx	r3
    120e:	bd10      	pop	{r4, pc}
    1210:	200000f4 	.word	0x200000f4

00001214 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1214:	4770      	bx	lr
	...

00001218 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1218:	4b09      	ldr	r3, [pc, #36]	; (1240 <cpu_irq_enter_critical+0x28>)
    121a:	6819      	ldr	r1, [r3, #0]
    121c:	2900      	cmp	r1, #0
    121e:	d10b      	bne.n	1238 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1220:	f3ef 8010 	mrs	r0, PRIMASK
    1224:	4a07      	ldr	r2, [pc, #28]	; (1244 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    1226:	2800      	cmp	r0, #0
    1228:	d105      	bne.n	1236 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    122a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    122c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1230:	4905      	ldr	r1, [pc, #20]	; (1248 <cpu_irq_enter_critical+0x30>)
    1232:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1234:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1236:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1238:	681a      	ldr	r2, [r3, #0]
    123a:	3201      	adds	r2, #1
    123c:	601a      	str	r2, [r3, #0]
}
    123e:	4770      	bx	lr
    1240:	2000010c 	.word	0x2000010c
    1244:	20000110 	.word	0x20000110
    1248:	20000018 	.word	0x20000018

0000124c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    124c:	4b08      	ldr	r3, [pc, #32]	; (1270 <cpu_irq_leave_critical+0x24>)
    124e:	681a      	ldr	r2, [r3, #0]
    1250:	3a01      	subs	r2, #1
    1252:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d109      	bne.n	126e <cpu_irq_leave_critical+0x22>
    125a:	4b06      	ldr	r3, [pc, #24]	; (1274 <cpu_irq_leave_critical+0x28>)
    125c:	781b      	ldrb	r3, [r3, #0]
    125e:	2b00      	cmp	r3, #0
    1260:	d005      	beq.n	126e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1262:	2201      	movs	r2, #1
    1264:	4b04      	ldr	r3, [pc, #16]	; (1278 <cpu_irq_leave_critical+0x2c>)
    1266:	701a      	strb	r2, [r3, #0]
    1268:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    126c:	b662      	cpsie	i
	}
}
    126e:	4770      	bx	lr
    1270:	2000010c 	.word	0x2000010c
    1274:	20000110 	.word	0x20000110
    1278:	20000018 	.word	0x20000018

0000127c <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    127c:	2310      	movs	r3, #16
    127e:	4902      	ldr	r1, [pc, #8]	; (1288 <_system_dfll_wait_for_sync+0xc>)
    1280:	68ca      	ldr	r2, [r1, #12]
    1282:	421a      	tst	r2, r3
    1284:	d0fc      	beq.n	1280 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1286:	4770      	bx	lr
    1288:	40000800 	.word	0x40000800

0000128c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    128c:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    128e:	2808      	cmp	r0, #8
    1290:	d806      	bhi.n	12a0 <system_clock_source_get_hz+0x14>
    1292:	f000 fb9f 	bl	19d4 <__gnu_thumb1_case_uqi>
    1296:	0508      	.short	0x0508
    1298:	122e2e05 	.word	0x122e2e05
    129c:	150b      	.short	0x150b
    129e:	26          	.byte	0x26
    129f:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    12a0:	2400      	movs	r4, #0
	}
}
    12a2:	0020      	movs	r0, r4
    12a4:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    12a6:	4b15      	ldr	r3, [pc, #84]	; (12fc <system_clock_source_get_hz+0x70>)
    12a8:	691c      	ldr	r4, [r3, #16]
    12aa:	e7fa      	b.n	12a2 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12ac:	4b14      	ldr	r3, [pc, #80]	; (1300 <system_clock_source_get_hz+0x74>)
    12ae:	4c15      	ldr	r4, [pc, #84]	; (1304 <system_clock_source_get_hz+0x78>)
    12b0:	6a1b      	ldr	r3, [r3, #32]
    12b2:	059b      	lsls	r3, r3, #22
    12b4:	0f9b      	lsrs	r3, r3, #30
    12b6:	40dc      	lsrs	r4, r3
    12b8:	e7f3      	b.n	12a2 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    12ba:	4b10      	ldr	r3, [pc, #64]	; (12fc <system_clock_source_get_hz+0x70>)
    12bc:	695c      	ldr	r4, [r3, #20]
    12be:	e7f0      	b.n	12a2 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12c0:	4d0e      	ldr	r5, [pc, #56]	; (12fc <system_clock_source_get_hz+0x70>)
			return 0;
    12c2:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12c4:	682b      	ldr	r3, [r5, #0]
    12c6:	079b      	lsls	r3, r3, #30
    12c8:	d5eb      	bpl.n	12a2 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    12ca:	4b0f      	ldr	r3, [pc, #60]	; (1308 <system_clock_source_get_hz+0x7c>)
    12cc:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12ce:	682b      	ldr	r3, [r5, #0]
    12d0:	075b      	lsls	r3, r3, #29
    12d2:	d511      	bpl.n	12f8 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12d4:	0020      	movs	r0, r4
    12d6:	4b0d      	ldr	r3, [pc, #52]	; (130c <system_clock_source_get_hz+0x80>)
    12d8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12da:	68ac      	ldr	r4, [r5, #8]
    12dc:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12de:	4344      	muls	r4, r0
    12e0:	e7df      	b.n	12a2 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12e2:	4b0b      	ldr	r3, [pc, #44]	; (1310 <system_clock_source_get_hz+0x84>)
			return 0;
    12e4:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	075b      	lsls	r3, r3, #29
    12ea:	d5da      	bpl.n	12a2 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <system_clock_source_get_hz+0x70>)
    12ee:	68dc      	ldr	r4, [r3, #12]
    12f0:	e7d7      	b.n	12a2 <system_clock_source_get_hz+0x16>
		return 32768UL;
    12f2:	2480      	movs	r4, #128	; 0x80
    12f4:	0224      	lsls	r4, r4, #8
    12f6:	e7d4      	b.n	12a2 <system_clock_source_get_hz+0x16>
		return 48000000UL;
    12f8:	4c06      	ldr	r4, [pc, #24]	; (1314 <system_clock_source_get_hz+0x88>)
    12fa:	e7d2      	b.n	12a2 <system_clock_source_get_hz+0x16>
    12fc:	20000114 	.word	0x20000114
    1300:	40000800 	.word	0x40000800
    1304:	007a1200 	.word	0x007a1200
    1308:	0000127d 	.word	0x0000127d
    130c:	000016b1 	.word	0x000016b1
    1310:	40000850 	.word	0x40000850
    1314:	02dc6c00 	.word	0x02dc6c00

00001318 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1318:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    131a:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    131c:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    131e:	7845      	ldrb	r5, [r0, #1]
    1320:	2001      	movs	r0, #1
    1322:	2640      	movs	r6, #64	; 0x40
    1324:	4005      	ands	r5, r0
    1326:	4020      	ands	r0, r4
    1328:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    132a:	4908      	ldr	r1, [pc, #32]	; (134c <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    132c:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    132e:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    1330:	01c0      	lsls	r0, r0, #7
    1332:	43b3      	bics	r3, r6
    1334:	432b      	orrs	r3, r5
    1336:	43a3      	bics	r3, r4
    1338:	4303      	orrs	r3, r0
    133a:	2003      	movs	r0, #3
    133c:	4002      	ands	r2, r0
    133e:	4804      	ldr	r0, [pc, #16]	; (1350 <system_clock_source_osc8m_set_config+0x38>)
    1340:	0212      	lsls	r2, r2, #8
    1342:	4003      	ands	r3, r0
    1344:	4313      	orrs	r3, r2
    1346:	620b      	str	r3, [r1, #32]
}
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	40000800 	.word	0x40000800
    1350:	fffffcff 	.word	0xfffffcff

00001354 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    1356:	2808      	cmp	r0, #8
    1358:	d806      	bhi.n	1368 <system_clock_source_enable+0x14>
    135a:	f000 fb3b 	bl	19d4 <__gnu_thumb1_case_uqi>
    135e:	0514      	.short	0x0514
    1360:	1a0e0c05 	.word	0x1a0e0c05
    1364:	2007      	.short	0x2007
    1366:	34          	.byte	0x34
    1367:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1368:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    136c:	2302      	movs	r3, #2
    136e:	4a19      	ldr	r2, [pc, #100]	; (13d4 <system_clock_source_enable+0x80>)
    1370:	6a11      	ldr	r1, [r2, #32]
    1372:	430b      	orrs	r3, r1
    1374:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1376:	2000      	movs	r0, #0
    1378:	e7f7      	b.n	136a <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    137a:	2302      	movs	r3, #2
    137c:	4a15      	ldr	r2, [pc, #84]	; (13d4 <system_clock_source_enable+0x80>)
    137e:	6991      	ldr	r1, [r2, #24]
    1380:	430b      	orrs	r3, r1
    1382:	6193      	str	r3, [r2, #24]
    1384:	e7f7      	b.n	1376 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1386:	2302      	movs	r3, #2
    1388:	4a12      	ldr	r2, [pc, #72]	; (13d4 <system_clock_source_enable+0x80>)
    138a:	8a11      	ldrh	r1, [r2, #16]
    138c:	430b      	orrs	r3, r1
    138e:	8213      	strh	r3, [r2, #16]
    1390:	e7f1      	b.n	1376 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1392:	2302      	movs	r3, #2
    1394:	4a0f      	ldr	r2, [pc, #60]	; (13d4 <system_clock_source_enable+0x80>)
    1396:	8a91      	ldrh	r1, [r2, #20]
    1398:	430b      	orrs	r3, r1
    139a:	8293      	strh	r3, [r2, #20]
    139c:	e7eb      	b.n	1376 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    139e:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    13a0:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    13a2:	4e0d      	ldr	r6, [pc, #52]	; (13d8 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    13a4:	4d0b      	ldr	r5, [pc, #44]	; (13d4 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    13a6:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    13a8:	4f0c      	ldr	r7, [pc, #48]	; (13dc <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    13aa:	4313      	orrs	r3, r2
    13ac:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    13ae:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    13b0:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    13b2:	68b3      	ldr	r3, [r6, #8]
    13b4:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    13b6:	6873      	ldr	r3, [r6, #4]
    13b8:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    13ba:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    13bc:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13be:	6833      	ldr	r3, [r6, #0]
    13c0:	b29b      	uxth	r3, r3
    13c2:	84ab      	strh	r3, [r5, #36]	; 0x24
    13c4:	e7d7      	b.n	1376 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13c6:	2302      	movs	r3, #2
    13c8:	4a05      	ldr	r2, [pc, #20]	; (13e0 <system_clock_source_enable+0x8c>)
    13ca:	7811      	ldrb	r1, [r2, #0]
    13cc:	430b      	orrs	r3, r1
    13ce:	7013      	strb	r3, [r2, #0]
    13d0:	e7d1      	b.n	1376 <system_clock_source_enable+0x22>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	40000800 	.word	0x40000800
    13d8:	20000114 	.word	0x20000114
    13dc:	0000127d 	.word	0x0000127d
    13e0:	40000844 	.word	0x40000844

000013e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13e6:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13e8:	211e      	movs	r1, #30
    13ea:	4b19      	ldr	r3, [pc, #100]	; (1450 <system_clock_init+0x6c>)
    13ec:	00d2      	lsls	r2, r2, #3
    13ee:	609a      	str	r2, [r3, #8]
    13f0:	4a18      	ldr	r2, [pc, #96]	; (1454 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f2:	2400      	movs	r4, #0
    13f4:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    13f6:	ad01      	add	r5, sp, #4
    13f8:	438b      	bics	r3, r1
    13fa:	6053      	str	r3, [r2, #4]
    13fc:	2301      	movs	r3, #1
    13fe:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1400:	b2e0      	uxtb	r0, r4
    1402:	0029      	movs	r1, r5
    1404:	4b14      	ldr	r3, [pc, #80]	; (1458 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1406:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1408:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    140a:	2c25      	cmp	r4, #37	; 0x25
    140c:	d1f8      	bne.n	1400 <system_clock_init+0x1c>
	config->run_in_standby  = false;
    140e:	2400      	movs	r4, #0
    1410:	466b      	mov	r3, sp
	config->on_demand       = true;
    1412:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    1414:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    1416:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1418:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    141a:	4668      	mov	r0, sp
    141c:	4b0f      	ldr	r3, [pc, #60]	; (145c <system_clock_init+0x78>)
    141e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1420:	4b0f      	ldr	r3, [pc, #60]	; (1460 <system_clock_init+0x7c>)
    1422:	2006      	movs	r0, #6
    1424:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <system_clock_init+0x80>)
    1428:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    142a:	4b0f      	ldr	r3, [pc, #60]	; (1468 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    142c:	0029      	movs	r1, r5
    142e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1430:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1432:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1434:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1436:	2306      	movs	r3, #6
    1438:	0020      	movs	r0, r4
    143a:	702b      	strb	r3, [r5, #0]
    143c:	4b0b      	ldr	r3, [pc, #44]	; (146c <system_clock_init+0x88>)
	config->division_factor    = 1;
    143e:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    1440:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    1442:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1444:	726c      	strb	r4, [r5, #9]
    1446:	4798      	blx	r3
    1448:	0020      	movs	r0, r4
    144a:	4b09      	ldr	r3, [pc, #36]	; (1470 <system_clock_init+0x8c>)
    144c:	4798      	blx	r3
#endif
}
    144e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1450:	40000800 	.word	0x40000800
    1454:	41004000 	.word	0x41004000
    1458:	00001695 	.word	0x00001695
    145c:	00001319 	.word	0x00001319
    1460:	00001355 	.word	0x00001355
    1464:	00001481 	.word	0x00001481
    1468:	40000400 	.word	0x40000400
    146c:	000014a1 	.word	0x000014a1
    1470:	00001545 	.word	0x00001545

00001474 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1474:	4b01      	ldr	r3, [pc, #4]	; (147c <system_gclk_is_syncing+0x8>)
    1476:	7858      	ldrb	r0, [r3, #1]
    1478:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    147a:	4770      	bx	lr
    147c:	40000c00 	.word	0x40000c00

00001480 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1480:	2308      	movs	r3, #8
    1482:	4a05      	ldr	r2, [pc, #20]	; (1498 <system_gclk_init+0x18>)
    1484:	6991      	ldr	r1, [r2, #24]
    1486:	430b      	orrs	r3, r1
    1488:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    148a:	2301      	movs	r3, #1
    148c:	4a03      	ldr	r2, [pc, #12]	; (149c <system_gclk_init+0x1c>)
    148e:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1490:	7811      	ldrb	r1, [r2, #0]
    1492:	4219      	tst	r1, r3
    1494:	d1fc      	bne.n	1490 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1496:	4770      	bx	lr
    1498:	40000400 	.word	0x40000400
    149c:	40000c00 	.word	0x40000c00

000014a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14a2:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    14a4:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14a6:	0224      	lsls	r4, r4, #8
{
    14a8:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    14aa:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14ac:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    14ae:	2b00      	cmp	r3, #0
    14b0:	d002      	beq.n	14b8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14b2:	2380      	movs	r3, #128	; 0x80
    14b4:	02db      	lsls	r3, r3, #11
    14b6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14b8:	7a4b      	ldrb	r3, [r1, #9]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d002      	beq.n	14c4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14be:	2380      	movs	r3, #128	; 0x80
    14c0:	031b      	lsls	r3, r3, #12
    14c2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14c4:	684b      	ldr	r3, [r1, #4]
    14c6:	2b01      	cmp	r3, #1
    14c8:	d912      	bls.n	14f0 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    14ca:	1e5d      	subs	r5, r3, #1
    14cc:	401d      	ands	r5, r3
    14ce:	2202      	movs	r2, #2
    14d0:	2d00      	cmp	r5, #0
    14d2:	d006      	beq.n	14e2 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    14d4:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14d6:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    14d8:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14da:	029b      	lsls	r3, r3, #10
    14dc:	e007      	b.n	14ee <system_gclk_gen_set_config+0x4e>
				div2_count++;
    14de:	3501      	adds	r5, #1
						mask <<= 1) {
    14e0:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    14e2:	429a      	cmp	r2, r3
    14e4:	d3fb      	bcc.n	14de <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    14e6:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    14e8:	022d      	lsls	r5, r5, #8
    14ea:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    14ec:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14ee:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    14f0:	7a0b      	ldrb	r3, [r1, #8]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d002      	beq.n	14fc <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    14f6:	2380      	movs	r3, #128	; 0x80
    14f8:	039b      	lsls	r3, r3, #14
    14fa:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    14fc:	4f0c      	ldr	r7, [pc, #48]	; (1530 <system_gclk_gen_set_config+0x90>)
    14fe:	47b8      	blx	r7
    1500:	2800      	cmp	r0, #0
    1502:	d1fb      	bne.n	14fc <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1504:	4b0b      	ldr	r3, [pc, #44]	; (1534 <system_gclk_gen_set_config+0x94>)
    1506:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1508:	4b0b      	ldr	r3, [pc, #44]	; (1538 <system_gclk_gen_set_config+0x98>)
    150a:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    150c:	47b8      	blx	r7
    150e:	2800      	cmp	r0, #0
    1510:	d1fc      	bne.n	150c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1512:	4b0a      	ldr	r3, [pc, #40]	; (153c <system_gclk_gen_set_config+0x9c>)
    1514:	609d      	str	r5, [r3, #8]
    1516:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    1518:	47b8      	blx	r7
    151a:	2800      	cmp	r0, #0
    151c:	d1fc      	bne.n	1518 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    151e:	2280      	movs	r2, #128	; 0x80
    1520:	686b      	ldr	r3, [r5, #4]
    1522:	0252      	lsls	r2, r2, #9
    1524:	4013      	ands	r3, r2
    1526:	431c      	orrs	r4, r3
    1528:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    152a:	4b05      	ldr	r3, [pc, #20]	; (1540 <system_gclk_gen_set_config+0xa0>)
    152c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1530:	00001475 	.word	0x00001475
    1534:	00001219 	.word	0x00001219
    1538:	40000c08 	.word	0x40000c08
    153c:	40000c00 	.word	0x40000c00
    1540:	0000124d 	.word	0x0000124d

00001544 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    1548:	4c09      	ldr	r4, [pc, #36]	; (1570 <system_gclk_gen_enable+0x2c>)
    154a:	47a0      	blx	r4
    154c:	2800      	cmp	r0, #0
    154e:	d1fb      	bne.n	1548 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1550:	4b08      	ldr	r3, [pc, #32]	; (1574 <system_gclk_gen_enable+0x30>)
    1552:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <system_gclk_gen_enable+0x34>)
    1556:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    1558:	47a0      	blx	r4
    155a:	2800      	cmp	r0, #0
    155c:	d1fc      	bne.n	1558 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	4a06      	ldr	r2, [pc, #24]	; (157c <system_gclk_gen_enable+0x38>)
    1562:	025b      	lsls	r3, r3, #9
    1564:	6851      	ldr	r1, [r2, #4]
    1566:	430b      	orrs	r3, r1
    1568:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    156a:	4b05      	ldr	r3, [pc, #20]	; (1580 <system_gclk_gen_enable+0x3c>)
    156c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    156e:	bd70      	pop	{r4, r5, r6, pc}
    1570:	00001475 	.word	0x00001475
    1574:	00001219 	.word	0x00001219
    1578:	40000c04 	.word	0x40000c04
    157c:	40000c00 	.word	0x40000c00
    1580:	0000124d 	.word	0x0000124d

00001584 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1586:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1588:	4e18      	ldr	r6, [pc, #96]	; (15ec <system_gclk_gen_get_hz+0x68>)
    158a:	47b0      	blx	r6
    158c:	2800      	cmp	r0, #0
    158e:	d1fb      	bne.n	1588 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1590:	4b17      	ldr	r3, [pc, #92]	; (15f0 <system_gclk_gen_get_hz+0x6c>)
    1592:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1594:	4b17      	ldr	r3, [pc, #92]	; (15f4 <system_gclk_gen_get_hz+0x70>)
    1596:	701f      	strb	r7, [r3, #0]
    1598:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    159a:	47b0      	blx	r6
    159c:	2800      	cmp	r0, #0
    159e:	d1fc      	bne.n	159a <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15a0:	4d15      	ldr	r5, [pc, #84]	; (15f8 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15a2:	4b16      	ldr	r3, [pc, #88]	; (15fc <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15a4:	6868      	ldr	r0, [r5, #4]
    15a6:	04c0      	lsls	r0, r0, #19
    15a8:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15aa:	4798      	blx	r3
    15ac:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15ae:	9b01      	ldr	r3, [sp, #4]
    15b0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    15b2:	686b      	ldr	r3, [r5, #4]
    15b4:	02db      	lsls	r3, r3, #11
    15b6:	0fdb      	lsrs	r3, r3, #31
    15b8:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15ba:	4b11      	ldr	r3, [pc, #68]	; (1600 <system_gclk_gen_get_hz+0x7c>)
    15bc:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    15be:	47b0      	blx	r6
    15c0:	2800      	cmp	r0, #0
    15c2:	d1fc      	bne.n	15be <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    15c4:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    15c6:	4b0f      	ldr	r3, [pc, #60]	; (1604 <system_gclk_gen_get_hz+0x80>)
    15c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    15ca:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    15cc:	022d      	lsls	r5, r5, #8
    15ce:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    15d0:	2b00      	cmp	r3, #0
    15d2:	d108      	bne.n	15e6 <system_gclk_gen_get_hz+0x62>
    15d4:	2d01      	cmp	r5, #1
    15d6:	d904      	bls.n	15e2 <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    15d8:	0020      	movs	r0, r4
    15da:	0029      	movs	r1, r5
    15dc:	4b0a      	ldr	r3, [pc, #40]	; (1608 <system_gclk_gen_get_hz+0x84>)
    15de:	4798      	blx	r3
    15e0:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    15e2:	0020      	movs	r0, r4
    15e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    15e6:	3501      	adds	r5, #1
    15e8:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    15ea:	e7fa      	b.n	15e2 <system_gclk_gen_get_hz+0x5e>
    15ec:	00001475 	.word	0x00001475
    15f0:	00001219 	.word	0x00001219
    15f4:	40000c04 	.word	0x40000c04
    15f8:	40000c00 	.word	0x40000c00
    15fc:	0000128d 	.word	0x0000128d
    1600:	40000c08 	.word	0x40000c08
    1604:	0000124d 	.word	0x0000124d
    1608:	000019e9 	.word	0x000019e9

0000160c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    160c:	b510      	push	{r4, lr}
    160e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <system_gclk_chan_enable+0x20>)
    1612:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1614:	4b06      	ldr	r3, [pc, #24]	; (1630 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1616:	4a07      	ldr	r2, [pc, #28]	; (1634 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1618:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    161a:	2380      	movs	r3, #128	; 0x80
    161c:	8851      	ldrh	r1, [r2, #2]
    161e:	01db      	lsls	r3, r3, #7
    1620:	430b      	orrs	r3, r1
    1622:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1624:	4b04      	ldr	r3, [pc, #16]	; (1638 <system_gclk_chan_enable+0x2c>)
    1626:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1628:	bd10      	pop	{r4, pc}
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	00001219 	.word	0x00001219
    1630:	40000c02 	.word	0x40000c02
    1634:	40000c00 	.word	0x40000c00
    1638:	0000124d 	.word	0x0000124d

0000163c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    163c:	b510      	push	{r4, lr}
    163e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1640:	4b0e      	ldr	r3, [pc, #56]	; (167c <system_gclk_chan_disable+0x40>)
    1642:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1644:	4b0e      	ldr	r3, [pc, #56]	; (1680 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1646:	4a0f      	ldr	r2, [pc, #60]	; (1684 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1648:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    164a:	4b0f      	ldr	r3, [pc, #60]	; (1688 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    164c:	4c0f      	ldr	r4, [pc, #60]	; (168c <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    164e:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1650:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1652:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1654:	4011      	ands	r1, r2
    1656:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1658:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    165a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    165c:	4021      	ands	r1, r4
    165e:	8059      	strh	r1, [r3, #2]
    1660:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1662:	2280      	movs	r2, #128	; 0x80
    1664:	01d2      	lsls	r2, r2, #7
    1666:	885c      	ldrh	r4, [r3, #2]
    1668:	4214      	tst	r4, r2
    166a:	d1fc      	bne.n	1666 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    166c:	885a      	ldrh	r2, [r3, #2]
    166e:	0200      	lsls	r0, r0, #8
    1670:	400a      	ands	r2, r1
    1672:	4302      	orrs	r2, r0
    1674:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1676:	4b06      	ldr	r3, [pc, #24]	; (1690 <system_gclk_chan_disable+0x54>)
    1678:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    167a:	bd10      	pop	{r4, pc}
    167c:	00001219 	.word	0x00001219
    1680:	40000c02 	.word	0x40000c02
    1684:	fffff0ff 	.word	0xfffff0ff
    1688:	40000c00 	.word	0x40000c00
    168c:	ffffbfff 	.word	0xffffbfff
    1690:	0000124d 	.word	0x0000124d

00001694 <system_gclk_chan_set_config>:
{
    1694:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1696:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1698:	4b03      	ldr	r3, [pc, #12]	; (16a8 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    169a:	0224      	lsls	r4, r4, #8
    169c:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    169e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16a0:	4b02      	ldr	r3, [pc, #8]	; (16ac <system_gclk_chan_set_config+0x18>)
    16a2:	b2a4      	uxth	r4, r4
    16a4:	805c      	strh	r4, [r3, #2]
}
    16a6:	bd10      	pop	{r4, pc}
    16a8:	0000163d 	.word	0x0000163d
    16ac:	40000c00 	.word	0x40000c00

000016b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16b0:	b510      	push	{r4, lr}
    16b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16b4:	4b06      	ldr	r3, [pc, #24]	; (16d0 <system_gclk_chan_get_hz+0x20>)
    16b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16b8:	4b06      	ldr	r3, [pc, #24]	; (16d4 <system_gclk_chan_get_hz+0x24>)
    16ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16bc:	4b06      	ldr	r3, [pc, #24]	; (16d8 <system_gclk_chan_get_hz+0x28>)
    16be:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    16c0:	4b06      	ldr	r3, [pc, #24]	; (16dc <system_gclk_chan_get_hz+0x2c>)
    16c2:	0524      	lsls	r4, r4, #20
    16c4:	0f24      	lsrs	r4, r4, #28
    16c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16c8:	0020      	movs	r0, r4
    16ca:	4b05      	ldr	r3, [pc, #20]	; (16e0 <system_gclk_chan_get_hz+0x30>)
    16cc:	4798      	blx	r3
}
    16ce:	bd10      	pop	{r4, pc}
    16d0:	00001219 	.word	0x00001219
    16d4:	40000c02 	.word	0x40000c02
    16d8:	40000c00 	.word	0x40000c00
    16dc:	0000124d 	.word	0x0000124d
    16e0:	00001585 	.word	0x00001585

000016e4 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    16e4:	78d3      	ldrb	r3, [r2, #3]
{
    16e6:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    16e8:	2b00      	cmp	r3, #0
    16ea:	d135      	bne.n	1758 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    16ec:	7814      	ldrb	r4, [r2, #0]
    16ee:	2c80      	cmp	r4, #128	; 0x80
    16f0:	d003      	beq.n	16fa <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    16f2:	2380      	movs	r3, #128	; 0x80
    16f4:	0624      	lsls	r4, r4, #24
    16f6:	025b      	lsls	r3, r3, #9
    16f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    16fa:	2502      	movs	r5, #2
    16fc:	7854      	ldrb	r4, [r2, #1]
    16fe:	43ac      	bics	r4, r5
    1700:	d106      	bne.n	1710 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1702:	7894      	ldrb	r4, [r2, #2]
    1704:	2c00      	cmp	r4, #0
    1706:	d124      	bne.n	1752 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1708:	2480      	movs	r4, #128	; 0x80
    170a:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    170c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    170e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1710:	7854      	ldrb	r4, [r2, #1]
    1712:	3c01      	subs	r4, #1
    1714:	2c01      	cmp	r4, #1
    1716:	d801      	bhi.n	171c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1718:	4c12      	ldr	r4, [pc, #72]	; (1764 <_system_pinmux_config+0x80>)
    171a:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    171c:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    171e:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1720:	05e4      	lsls	r4, r4, #23
    1722:	432c      	orrs	r4, r5
    1724:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1726:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1728:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    172a:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    172c:	0624      	lsls	r4, r4, #24
    172e:	432c      	orrs	r4, r5
    1730:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1732:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1734:	78d4      	ldrb	r4, [r2, #3]
    1736:	2c00      	cmp	r4, #0
    1738:	d10a      	bne.n	1750 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    173a:	035b      	lsls	r3, r3, #13
    173c:	d503      	bpl.n	1746 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    173e:	7893      	ldrb	r3, [r2, #2]
    1740:	2b01      	cmp	r3, #1
    1742:	d10c      	bne.n	175e <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1744:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1746:	7853      	ldrb	r3, [r2, #1]
    1748:	3b01      	subs	r3, #1
    174a:	2b01      	cmp	r3, #1
    174c:	d800      	bhi.n	1750 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    174e:	6081      	str	r1, [r0, #8]
		}
	}
}
    1750:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1752:	24c0      	movs	r4, #192	; 0xc0
    1754:	02e4      	lsls	r4, r4, #11
    1756:	e7d9      	b.n	170c <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1758:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    175a:	2300      	movs	r3, #0
    175c:	e7de      	b.n	171c <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    175e:	6141      	str	r1, [r0, #20]
    1760:	e7f1      	b.n	1746 <_system_pinmux_config+0x62>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	fffbffff 	.word	0xfffbffff

00001768 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1768:	b510      	push	{r4, lr}
    176a:	0003      	movs	r3, r0
    176c:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    176e:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1770:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1772:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1774:	4281      	cmp	r1, r0
    1776:	d102      	bne.n	177e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1778:	4904      	ldr	r1, [pc, #16]	; (178c <system_pinmux_pin_set_config+0x24>)
    177a:	01e0      	lsls	r0, r4, #7
    177c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    177e:	211f      	movs	r1, #31
    1780:	400b      	ands	r3, r1
    1782:	391e      	subs	r1, #30
    1784:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1786:	4b02      	ldr	r3, [pc, #8]	; (1790 <system_pinmux_pin_set_config+0x28>)
    1788:	4798      	blx	r3
}
    178a:	bd10      	pop	{r4, pc}
    178c:	41004400 	.word	0x41004400
    1790:	000016e5 	.word	0x000016e5

00001794 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1794:	4770      	bx	lr
	...

00001798 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1798:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <system_init+0x18>)
    179c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <system_init+0x1c>)
    17a0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <system_init+0x20>)
    17a4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <system_init+0x24>)
    17a8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <system_init+0x28>)
    17ac:	4798      	blx	r3
}
    17ae:	bd10      	pop	{r4, pc}
    17b0:	000013e5 	.word	0x000013e5
    17b4:	00001215 	.word	0x00001215
    17b8:	00001795 	.word	0x00001795
    17bc:	00001795 	.word	0x00001795
    17c0:	00001795 	.word	0x00001795

000017c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17c4:	e7fe      	b.n	17c4 <Dummy_Handler>
	...

000017c8 <Reset_Handler>:
        if (pSrc != pDest) {
    17c8:	4821      	ldr	r0, [pc, #132]	; (1850 <Reset_Handler+0x88>)
    17ca:	4922      	ldr	r1, [pc, #136]	; (1854 <Reset_Handler+0x8c>)
{
    17cc:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    17ce:	4288      	cmp	r0, r1
    17d0:	d004      	beq.n	17dc <Reset_Handler+0x14>
    17d2:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    17d4:	4c20      	ldr	r4, [pc, #128]	; (1858 <Reset_Handler+0x90>)
    17d6:	18ca      	adds	r2, r1, r3
    17d8:	42a2      	cmp	r2, r4
    17da:	d332      	bcc.n	1842 <Reset_Handler+0x7a>
                *pDest++ = 0;
    17dc:	2100      	movs	r1, #0
    17de:	4b1f      	ldr	r3, [pc, #124]	; (185c <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    17e0:	4a1f      	ldr	r2, [pc, #124]	; (1860 <Reset_Handler+0x98>)
    17e2:	4293      	cmp	r3, r2
    17e4:	d331      	bcc.n	184a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    17e6:	21ff      	movs	r1, #255	; 0xff
    17e8:	4b1e      	ldr	r3, [pc, #120]	; (1864 <Reset_Handler+0x9c>)
    17ea:	4a1f      	ldr	r2, [pc, #124]	; (1868 <Reset_Handler+0xa0>)
    17ec:	438b      	bics	r3, r1
    17ee:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    17f0:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    17f2:	250c      	movs	r5, #12
    17f4:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    17f6:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    17f8:	4b1c      	ldr	r3, [pc, #112]	; (186c <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    17fa:	481d      	ldr	r0, [pc, #116]	; (1870 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    17fc:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    17fe:	78c3      	ldrb	r3, [r0, #3]
    1800:	39fc      	subs	r1, #252	; 0xfc
    1802:	438b      	bics	r3, r1
    1804:	4313      	orrs	r3, r2
    1806:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1808:	78c3      	ldrb	r3, [r0, #3]
    180a:	43ab      	bics	r3, r5
    180c:	4323      	orrs	r3, r4
    180e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1810:	4b18      	ldr	r3, [pc, #96]	; (1874 <Reset_Handler+0xac>)
    1812:	7b98      	ldrb	r0, [r3, #14]
    1814:	43b0      	bics	r0, r6
    1816:	0006      	movs	r6, r0
    1818:	2020      	movs	r0, #32
    181a:	4330      	orrs	r0, r6
    181c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    181e:	7b98      	ldrb	r0, [r3, #14]
    1820:	43a8      	bics	r0, r5
    1822:	4304      	orrs	r4, r0
    1824:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1826:	7b98      	ldrb	r0, [r3, #14]
    1828:	4388      	bics	r0, r1
    182a:	4302      	orrs	r2, r0
    182c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    182e:	2380      	movs	r3, #128	; 0x80
    1830:	4a11      	ldr	r2, [pc, #68]	; (1878 <Reset_Handler+0xb0>)
    1832:	6851      	ldr	r1, [r2, #4]
    1834:	430b      	orrs	r3, r1
    1836:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1838:	4b10      	ldr	r3, [pc, #64]	; (187c <Reset_Handler+0xb4>)
    183a:	4798      	blx	r3
        main();
    183c:	4b10      	ldr	r3, [pc, #64]	; (1880 <Reset_Handler+0xb8>)
    183e:	4798      	blx	r3
    1840:	e7fe      	b.n	1840 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1842:	58c5      	ldr	r5, [r0, r3]
    1844:	3304      	adds	r3, #4
    1846:	6015      	str	r5, [r2, #0]
    1848:	e7c5      	b.n	17d6 <Reset_Handler+0xe>
                *pDest++ = 0;
    184a:	c302      	stmia	r3!, {r1}
    184c:	e7c9      	b.n	17e2 <Reset_Handler+0x1a>
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	00001c20 	.word	0x00001c20
    1854:	20000000 	.word	0x20000000
    1858:	2000001c 	.word	0x2000001c
    185c:	2000001c 	.word	0x2000001c
    1860:	20000188 	.word	0x20000188
    1864:	00000000 	.word	0x00000000
    1868:	e000ed00 	.word	0xe000ed00
    186c:	410070fc 	.word	0x410070fc
    1870:	41005000 	.word	0x41005000
    1874:	41004800 	.word	0x41004800
    1878:	41004000 	.word	0x41004000
    187c:	00001b6d 	.word	0x00001b6d
    1880:	000019b9 	.word	0x000019b9

00001884 <conf_port_pin>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1884:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1888:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    188a:	2601      	movs	r6, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    188c:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    188e:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1890:	4d20      	ldr	r5, [pc, #128]	; (1914 <conf_port_pin+0x90>)
    1892:	0021      	movs	r1, r4
    1894:	2007      	movs	r0, #7
    1896:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1898:	7066      	strb	r6, [r4, #1]
    189a:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    189c:	0021      	movs	r1, r4
    189e:	2006      	movs	r0, #6
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    18a0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    18a2:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    18a4:	2340      	movs	r3, #64	; 0x40
    18a6:	4f1c      	ldr	r7, [pc, #112]	; (1918 <conf_port_pin+0x94>)
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    18a8:	0030      	movs	r0, r6
    18aa:	61bb      	str	r3, [r7, #24]
    18ac:	0021      	movs	r1, r4
    18ae:	47a8      	blx	r5
    18b0:	2302      	movs	r3, #2
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    18b2:	0021      	movs	r1, r4
    18b4:	61bb      	str	r3, [r7, #24]
    18b6:	0018      	movs	r0, r3
    18b8:	47a8      	blx	r5
    18ba:	2304      	movs	r3, #4
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    18bc:	0021      	movs	r1, r4
    18be:	61bb      	str	r3, [r7, #24]
    18c0:	2003      	movs	r0, #3
    18c2:	47a8      	blx	r5
    18c4:	2308      	movs	r3, #8
    18c6:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    18c8:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    18ca:	0021      	movs	r1, r4
    18cc:	200f      	movs	r0, #15
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    18ce:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    18d0:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    18d2:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    18d4:	0021      	movs	r1, r4
    18d6:	200e      	movs	r0, #14
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    18d8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    18da:	47a8      	blx	r5
    18dc:	2380      	movs	r3, #128	; 0x80
    18de:	01db      	lsls	r3, r3, #7
    18e0:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(RTS915, true);
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    18e2:	2302      	movs	r3, #2
	port_pin_set_config(WAKE915, &config_port_pin);
    18e4:	0021      	movs	r1, r4
    18e6:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    18e8:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    18ea:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    18ec:	47a8      	blx	r5
    18ee:	003b      	movs	r3, r7
    18f0:	2280      	movs	r2, #128	; 0x80
    18f2:	3398      	adds	r3, #152	; 0x98
    18f4:	0212      	lsls	r2, r2, #8
    18f6:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    18f8:	0021      	movs	r1, r4
    18fa:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    18fc:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    18fe:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    1900:	47a8      	blx	r5
    1902:	2380      	movs	r3, #128	; 0x80
    1904:	029b      	lsls	r3, r3, #10
    1906:	61bb      	str	r3, [r7, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1908:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    190a:	0021      	movs	r1, r4
    190c:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    190e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    1910:	47a8      	blx	r5
} // end conf_port_pin(void)
    1912:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1914:	000004b5 	.word	0x000004b5
    1918:	41004400 	.word	0x41004400

0000191c <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    191c:	2300      	movs	r3, #0
{
    191e:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    1920:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1922:	a801      	add	r0, sp, #4
    1924:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1926:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1928:	4b01      	ldr	r3, [pc, #4]	; (1930 <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    192a:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    192c:	4798      	blx	r3
}
    192e:	bd07      	pop	{r0, r1, r2, pc}
    1930:	00001319 	.word	0x00001319

00001934 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1936:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1938:	4b09      	ldr	r3, [pc, #36]	; (1960 <clk_gclk0_init+0x2c>)
    193a:	4798      	blx	r3
    193c:	4b09      	ldr	r3, [pc, #36]	; (1964 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    193e:	a901      	add	r1, sp, #4
    1940:	721c      	strb	r4, [r3, #8]
    1942:	2306      	movs	r3, #6
    1944:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1946:	3b05      	subs	r3, #5
    1948:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    194a:	0020      	movs	r0, r4
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    194e:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    1950:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    1952:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1954:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1956:	0020      	movs	r0, r4
    1958:	4b04      	ldr	r3, [pc, #16]	; (196c <clk_gclk0_init+0x38>)
    195a:	4798      	blx	r3
}
    195c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	00001481 	.word	0x00001481
    1964:	40000400 	.word	0x40000400
    1968:	000014a1 	.word	0x000014a1
    196c:	00001545 	.word	0x00001545

00001970 <sys_clk_init>:
{
    1970:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1972:	4b03      	ldr	r3, [pc, #12]	; (1980 <sys_clk_init+0x10>)
    1974:	4798      	blx	r3
	clk_gclk0_init();
    1976:	4b03      	ldr	r3, [pc, #12]	; (1984 <sys_clk_init+0x14>)
    1978:	4798      	blx	r3
    delay_init();
    197a:	4b03      	ldr	r3, [pc, #12]	; (1988 <sys_clk_init+0x18>)
    197c:	4798      	blx	r3
}
    197e:	bd10      	pop	{r4, pc}
    1980:	0000191d 	.word	0x0000191d
    1984:	00001935 	.word	0x00001935
    1988:	00000449 	.word	0x00000449

0000198c <simSysInit>:
{
    198c:	b510      	push	{r4, lr}
	system_init();
    198e:	4b05      	ldr	r3, [pc, #20]	; (19a4 <simSysInit+0x18>)
    1990:	4798      	blx	r3
	sys_clk_init();
    1992:	4b05      	ldr	r3, [pc, #20]	; (19a8 <simSysInit+0x1c>)
    1994:	4798      	blx	r3
	conf_port_pin();
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <simSysInit+0x20>)
    1998:	4798      	blx	r3
    spi169_init();
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <simSysInit+0x24>)
    199c:	4798      	blx	r3
    uart915_init();
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <simSysInit+0x28>)
    19a0:	4798      	blx	r3
}
    19a2:	bd10      	pop	{r4, pc}
    19a4:	00001799 	.word	0x00001799
    19a8:	00001971 	.word	0x00001971
    19ac:	00001885 	.word	0x00001885
    19b0:	0000015d 	.word	0x0000015d
    19b4:	00000379 	.word	0x00000379

000019b8 <main>:
{
    19b8:	b510      	push	{r4, lr}
    simSysInit();
    19ba:	4b03      	ldr	r3, [pc, #12]	; (19c8 <main+0x10>)
    19bc:	4798      	blx	r3
        uart915_write_cmd("AT+SEND=test\r\n");
    19be:	4803      	ldr	r0, [pc, #12]	; (19cc <main+0x14>)
    19c0:	4b03      	ldr	r3, [pc, #12]	; (19d0 <main+0x18>)
    19c2:	4798      	blx	r3
    19c4:	e7fb      	b.n	19be <main+0x6>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	0000198d 	.word	0x0000198d
    19cc:	00001bf0 	.word	0x00001bf0
    19d0:	000002f9 	.word	0x000002f9

000019d4 <__gnu_thumb1_case_uqi>:
    19d4:	b402      	push	{r1}
    19d6:	4671      	mov	r1, lr
    19d8:	0849      	lsrs	r1, r1, #1
    19da:	0049      	lsls	r1, r1, #1
    19dc:	5c09      	ldrb	r1, [r1, r0]
    19de:	0049      	lsls	r1, r1, #1
    19e0:	448e      	add	lr, r1
    19e2:	bc02      	pop	{r1}
    19e4:	4770      	bx	lr
    19e6:	46c0      	nop			; (mov r8, r8)

000019e8 <__udivsi3>:
    19e8:	2200      	movs	r2, #0
    19ea:	0843      	lsrs	r3, r0, #1
    19ec:	428b      	cmp	r3, r1
    19ee:	d374      	bcc.n	1ada <__udivsi3+0xf2>
    19f0:	0903      	lsrs	r3, r0, #4
    19f2:	428b      	cmp	r3, r1
    19f4:	d35f      	bcc.n	1ab6 <__udivsi3+0xce>
    19f6:	0a03      	lsrs	r3, r0, #8
    19f8:	428b      	cmp	r3, r1
    19fa:	d344      	bcc.n	1a86 <__udivsi3+0x9e>
    19fc:	0b03      	lsrs	r3, r0, #12
    19fe:	428b      	cmp	r3, r1
    1a00:	d328      	bcc.n	1a54 <__udivsi3+0x6c>
    1a02:	0c03      	lsrs	r3, r0, #16
    1a04:	428b      	cmp	r3, r1
    1a06:	d30d      	bcc.n	1a24 <__udivsi3+0x3c>
    1a08:	22ff      	movs	r2, #255	; 0xff
    1a0a:	0209      	lsls	r1, r1, #8
    1a0c:	ba12      	rev	r2, r2
    1a0e:	0c03      	lsrs	r3, r0, #16
    1a10:	428b      	cmp	r3, r1
    1a12:	d302      	bcc.n	1a1a <__udivsi3+0x32>
    1a14:	1212      	asrs	r2, r2, #8
    1a16:	0209      	lsls	r1, r1, #8
    1a18:	d065      	beq.n	1ae6 <__udivsi3+0xfe>
    1a1a:	0b03      	lsrs	r3, r0, #12
    1a1c:	428b      	cmp	r3, r1
    1a1e:	d319      	bcc.n	1a54 <__udivsi3+0x6c>
    1a20:	e000      	b.n	1a24 <__udivsi3+0x3c>
    1a22:	0a09      	lsrs	r1, r1, #8
    1a24:	0bc3      	lsrs	r3, r0, #15
    1a26:	428b      	cmp	r3, r1
    1a28:	d301      	bcc.n	1a2e <__udivsi3+0x46>
    1a2a:	03cb      	lsls	r3, r1, #15
    1a2c:	1ac0      	subs	r0, r0, r3
    1a2e:	4152      	adcs	r2, r2
    1a30:	0b83      	lsrs	r3, r0, #14
    1a32:	428b      	cmp	r3, r1
    1a34:	d301      	bcc.n	1a3a <__udivsi3+0x52>
    1a36:	038b      	lsls	r3, r1, #14
    1a38:	1ac0      	subs	r0, r0, r3
    1a3a:	4152      	adcs	r2, r2
    1a3c:	0b43      	lsrs	r3, r0, #13
    1a3e:	428b      	cmp	r3, r1
    1a40:	d301      	bcc.n	1a46 <__udivsi3+0x5e>
    1a42:	034b      	lsls	r3, r1, #13
    1a44:	1ac0      	subs	r0, r0, r3
    1a46:	4152      	adcs	r2, r2
    1a48:	0b03      	lsrs	r3, r0, #12
    1a4a:	428b      	cmp	r3, r1
    1a4c:	d301      	bcc.n	1a52 <__udivsi3+0x6a>
    1a4e:	030b      	lsls	r3, r1, #12
    1a50:	1ac0      	subs	r0, r0, r3
    1a52:	4152      	adcs	r2, r2
    1a54:	0ac3      	lsrs	r3, r0, #11
    1a56:	428b      	cmp	r3, r1
    1a58:	d301      	bcc.n	1a5e <__udivsi3+0x76>
    1a5a:	02cb      	lsls	r3, r1, #11
    1a5c:	1ac0      	subs	r0, r0, r3
    1a5e:	4152      	adcs	r2, r2
    1a60:	0a83      	lsrs	r3, r0, #10
    1a62:	428b      	cmp	r3, r1
    1a64:	d301      	bcc.n	1a6a <__udivsi3+0x82>
    1a66:	028b      	lsls	r3, r1, #10
    1a68:	1ac0      	subs	r0, r0, r3
    1a6a:	4152      	adcs	r2, r2
    1a6c:	0a43      	lsrs	r3, r0, #9
    1a6e:	428b      	cmp	r3, r1
    1a70:	d301      	bcc.n	1a76 <__udivsi3+0x8e>
    1a72:	024b      	lsls	r3, r1, #9
    1a74:	1ac0      	subs	r0, r0, r3
    1a76:	4152      	adcs	r2, r2
    1a78:	0a03      	lsrs	r3, r0, #8
    1a7a:	428b      	cmp	r3, r1
    1a7c:	d301      	bcc.n	1a82 <__udivsi3+0x9a>
    1a7e:	020b      	lsls	r3, r1, #8
    1a80:	1ac0      	subs	r0, r0, r3
    1a82:	4152      	adcs	r2, r2
    1a84:	d2cd      	bcs.n	1a22 <__udivsi3+0x3a>
    1a86:	09c3      	lsrs	r3, r0, #7
    1a88:	428b      	cmp	r3, r1
    1a8a:	d301      	bcc.n	1a90 <__udivsi3+0xa8>
    1a8c:	01cb      	lsls	r3, r1, #7
    1a8e:	1ac0      	subs	r0, r0, r3
    1a90:	4152      	adcs	r2, r2
    1a92:	0983      	lsrs	r3, r0, #6
    1a94:	428b      	cmp	r3, r1
    1a96:	d301      	bcc.n	1a9c <__udivsi3+0xb4>
    1a98:	018b      	lsls	r3, r1, #6
    1a9a:	1ac0      	subs	r0, r0, r3
    1a9c:	4152      	adcs	r2, r2
    1a9e:	0943      	lsrs	r3, r0, #5
    1aa0:	428b      	cmp	r3, r1
    1aa2:	d301      	bcc.n	1aa8 <__udivsi3+0xc0>
    1aa4:	014b      	lsls	r3, r1, #5
    1aa6:	1ac0      	subs	r0, r0, r3
    1aa8:	4152      	adcs	r2, r2
    1aaa:	0903      	lsrs	r3, r0, #4
    1aac:	428b      	cmp	r3, r1
    1aae:	d301      	bcc.n	1ab4 <__udivsi3+0xcc>
    1ab0:	010b      	lsls	r3, r1, #4
    1ab2:	1ac0      	subs	r0, r0, r3
    1ab4:	4152      	adcs	r2, r2
    1ab6:	08c3      	lsrs	r3, r0, #3
    1ab8:	428b      	cmp	r3, r1
    1aba:	d301      	bcc.n	1ac0 <__udivsi3+0xd8>
    1abc:	00cb      	lsls	r3, r1, #3
    1abe:	1ac0      	subs	r0, r0, r3
    1ac0:	4152      	adcs	r2, r2
    1ac2:	0883      	lsrs	r3, r0, #2
    1ac4:	428b      	cmp	r3, r1
    1ac6:	d301      	bcc.n	1acc <__udivsi3+0xe4>
    1ac8:	008b      	lsls	r3, r1, #2
    1aca:	1ac0      	subs	r0, r0, r3
    1acc:	4152      	adcs	r2, r2
    1ace:	0843      	lsrs	r3, r0, #1
    1ad0:	428b      	cmp	r3, r1
    1ad2:	d301      	bcc.n	1ad8 <__udivsi3+0xf0>
    1ad4:	004b      	lsls	r3, r1, #1
    1ad6:	1ac0      	subs	r0, r0, r3
    1ad8:	4152      	adcs	r2, r2
    1ada:	1a41      	subs	r1, r0, r1
    1adc:	d200      	bcs.n	1ae0 <__udivsi3+0xf8>
    1ade:	4601      	mov	r1, r0
    1ae0:	4152      	adcs	r2, r2
    1ae2:	4610      	mov	r0, r2
    1ae4:	4770      	bx	lr
    1ae6:	e7ff      	b.n	1ae8 <__udivsi3+0x100>
    1ae8:	b501      	push	{r0, lr}
    1aea:	2000      	movs	r0, #0
    1aec:	f000 f806 	bl	1afc <__aeabi_idiv0>
    1af0:	bd02      	pop	{r1, pc}
    1af2:	46c0      	nop			; (mov r8, r8)

00001af4 <__aeabi_uidivmod>:
    1af4:	2900      	cmp	r1, #0
    1af6:	d0f7      	beq.n	1ae8 <__udivsi3+0x100>
    1af8:	e776      	b.n	19e8 <__udivsi3>
    1afa:	4770      	bx	lr

00001afc <__aeabi_idiv0>:
    1afc:	4770      	bx	lr
    1afe:	46c0      	nop			; (mov r8, r8)

00001b00 <__aeabi_llsl>:
    1b00:	4091      	lsls	r1, r2
    1b02:	1c03      	adds	r3, r0, #0
    1b04:	4090      	lsls	r0, r2
    1b06:	469c      	mov	ip, r3
    1b08:	3a20      	subs	r2, #32
    1b0a:	4093      	lsls	r3, r2
    1b0c:	4319      	orrs	r1, r3
    1b0e:	4252      	negs	r2, r2
    1b10:	4663      	mov	r3, ip
    1b12:	40d3      	lsrs	r3, r2
    1b14:	4319      	orrs	r1, r3
    1b16:	4770      	bx	lr

00001b18 <__aeabi_lmul>:
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1a:	46ce      	mov	lr, r9
    1b1c:	4647      	mov	r7, r8
    1b1e:	0415      	lsls	r5, r2, #16
    1b20:	0c2d      	lsrs	r5, r5, #16
    1b22:	002e      	movs	r6, r5
    1b24:	b580      	push	{r7, lr}
    1b26:	0407      	lsls	r7, r0, #16
    1b28:	0c14      	lsrs	r4, r2, #16
    1b2a:	0c3f      	lsrs	r7, r7, #16
    1b2c:	4699      	mov	r9, r3
    1b2e:	0c03      	lsrs	r3, r0, #16
    1b30:	437e      	muls	r6, r7
    1b32:	435d      	muls	r5, r3
    1b34:	4367      	muls	r7, r4
    1b36:	4363      	muls	r3, r4
    1b38:	197f      	adds	r7, r7, r5
    1b3a:	0c34      	lsrs	r4, r6, #16
    1b3c:	19e4      	adds	r4, r4, r7
    1b3e:	469c      	mov	ip, r3
    1b40:	42a5      	cmp	r5, r4
    1b42:	d903      	bls.n	1b4c <__aeabi_lmul+0x34>
    1b44:	2380      	movs	r3, #128	; 0x80
    1b46:	025b      	lsls	r3, r3, #9
    1b48:	4698      	mov	r8, r3
    1b4a:	44c4      	add	ip, r8
    1b4c:	464b      	mov	r3, r9
    1b4e:	4351      	muls	r1, r2
    1b50:	4343      	muls	r3, r0
    1b52:	0436      	lsls	r6, r6, #16
    1b54:	0c36      	lsrs	r6, r6, #16
    1b56:	0c25      	lsrs	r5, r4, #16
    1b58:	0424      	lsls	r4, r4, #16
    1b5a:	4465      	add	r5, ip
    1b5c:	19a4      	adds	r4, r4, r6
    1b5e:	1859      	adds	r1, r3, r1
    1b60:	1949      	adds	r1, r1, r5
    1b62:	0020      	movs	r0, r4
    1b64:	bc0c      	pop	{r2, r3}
    1b66:	4690      	mov	r8, r2
    1b68:	4699      	mov	r9, r3
    1b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b6c <__libc_init_array>:
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	2600      	movs	r6, #0
    1b70:	4d0c      	ldr	r5, [pc, #48]	; (1ba4 <__libc_init_array+0x38>)
    1b72:	4c0d      	ldr	r4, [pc, #52]	; (1ba8 <__libc_init_array+0x3c>)
    1b74:	1b64      	subs	r4, r4, r5
    1b76:	10a4      	asrs	r4, r4, #2
    1b78:	42a6      	cmp	r6, r4
    1b7a:	d109      	bne.n	1b90 <__libc_init_array+0x24>
    1b7c:	2600      	movs	r6, #0
    1b7e:	f000 f83f 	bl	1c00 <_init>
    1b82:	4d0a      	ldr	r5, [pc, #40]	; (1bac <__libc_init_array+0x40>)
    1b84:	4c0a      	ldr	r4, [pc, #40]	; (1bb0 <__libc_init_array+0x44>)
    1b86:	1b64      	subs	r4, r4, r5
    1b88:	10a4      	asrs	r4, r4, #2
    1b8a:	42a6      	cmp	r6, r4
    1b8c:	d105      	bne.n	1b9a <__libc_init_array+0x2e>
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	00b3      	lsls	r3, r6, #2
    1b92:	58eb      	ldr	r3, [r5, r3]
    1b94:	4798      	blx	r3
    1b96:	3601      	adds	r6, #1
    1b98:	e7ee      	b.n	1b78 <__libc_init_array+0xc>
    1b9a:	00b3      	lsls	r3, r6, #2
    1b9c:	58eb      	ldr	r3, [r5, r3]
    1b9e:	4798      	blx	r3
    1ba0:	3601      	adds	r6, #1
    1ba2:	e7f2      	b.n	1b8a <__libc_init_array+0x1e>
    1ba4:	00001c0c 	.word	0x00001c0c
    1ba8:	00001c0c 	.word	0x00001c0c
    1bac:	00001c0c 	.word	0x00001c0c
    1bb0:	00001c10 	.word	0x00001c10

00001bb4 <memset>:
    1bb4:	0003      	movs	r3, r0
    1bb6:	1882      	adds	r2, r0, r2
    1bb8:	4293      	cmp	r3, r2
    1bba:	d100      	bne.n	1bbe <memset+0xa>
    1bbc:	4770      	bx	lr
    1bbe:	7019      	strb	r1, [r3, #0]
    1bc0:	3301      	adds	r3, #1
    1bc2:	e7f9      	b.n	1bb8 <memset+0x4>

00001bc4 <strlen>:
    1bc4:	2300      	movs	r3, #0
    1bc6:	5cc2      	ldrb	r2, [r0, r3]
    1bc8:	3301      	adds	r3, #1
    1bca:	2a00      	cmp	r2, #0
    1bcc:	d1fb      	bne.n	1bc6 <strlen+0x2>
    1bce:	1e58      	subs	r0, r3, #1
    1bd0:	4770      	bx	lr
    1bd2:	5441      	.short	0x5441
    1bd4:	00000a0d 	.word	0x00000a0d
    1bd8:	42000800 	.word	0x42000800
    1bdc:	42000c00 	.word	0x42000c00
    1be0:	42001000 	.word	0x42001000
    1be4:	42001400 	.word	0x42001400
    1be8:	42001800 	.word	0x42001800
    1bec:	42001c00 	.word	0x42001c00
    1bf0:	532b5441 	.word	0x532b5441
    1bf4:	3d444e45 	.word	0x3d444e45
    1bf8:	74736574 	.word	0x74736574
    1bfc:	00000a0d 	.word	0x00000a0d

00001c00 <_init>:
    1c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c06:	bc08      	pop	{r3}
    1c08:	469e      	mov	lr, r3
    1c0a:	4770      	bx	lr

00001c0c <__init_array_start>:
    1c0c:	000000dd 	.word	0x000000dd

00001c10 <_fini>:
    1c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c16:	bc08      	pop	{r3}
    1c18:	469e      	mov	lr, r3
    1c1a:	4770      	bx	lr

00001c1c <__fini_array_start>:
    1c1c:	000000b5 	.word	0x000000b5
