
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002040  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00002040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000170  2000001c  0000205c  0002001c  2**2
                  ALLOC
  3 .stack        00002004  2000018c  000021cc  0002001c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002cf6f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b10  00000000  00000000  0004d00c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000055bc  00000000  00000000  00050b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000568  00000000  00000000  000560d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b20  00000000  00000000  00056640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005f06  00000000  00000000  00057160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00006525  00000000  00000000  0005d066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000df0  00000000  00000000  0006358c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 15 1c 00 00 11 1c 00 00 11 1c 00 00     .!. ............
	...
      2c:	11 1c 00 00 00 00 00 00 00 00 00 00 11 1c 00 00     ................
      3c:	11 1c 00 00 11 1c 00 00 11 1c 00 00 11 1c 00 00     ................
      4c:	11 1c 00 00 11 1c 00 00 11 1c 00 00 11 1c 00 00     ................
      5c:	11 1c 00 00 11 1c 00 00 01 16 00 00 11 16 00 00     ................
      6c:	21 16 00 00 31 16 00 00 41 16 00 00 51 16 00 00     !...1...A...Q...
      7c:	11 1c 00 00 11 1c 00 00 11 1c 00 00 11 1c 00 00     ................
      8c:	11 1c 00 00 11 1c 00 00 11 1c 00 00 11 1c 00 00     ................
      9c:	11 1c 00 00 11 1c 00 00 11 1c 00 00 11 1c 00 00     ................
      ac:	11 1c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00002040 	.word	0x00002040

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00002040 	.word	0x00002040
     10c:	00002040 	.word	0x00002040
     110:	00000000 	.word	0x00000000

00000114 <ringbuff_clear>:
 * Description      : Clears the ring buffer. Returns 0 if operation was
 *  successful, else returns -1.
 */
int8_t ringbuff_clear(ringbuff_t* pringbuff)
{
    uint8_t ret_val = -1;
     114:	23ff      	movs	r3, #255	; 0xff
    
    // NULL pointer check
    if(pringbuff)
     116:	2800      	cmp	r0, #0
     118:	d002      	beq.n	120 <ringbuff_clear+0xc>
    {
        // clear the read/write values
        pringbuff->write = 0;
     11a:	2300      	movs	r3, #0
     11c:	6043      	str	r3, [r0, #4]
        pringbuff->read = 0;
     11e:	6083      	str	r3, [r0, #8]
        ret_val = 0;
    }
    
    return ret_val;
     120:	b258      	sxtb	r0, r3
}
     122:	4770      	bx	lr

00000124 <spi169_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 169 MHz module
 */
void spi169_init(void)
{
     124:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (spi169InitComp == true)
     126:	4e2c      	ldr	r6, [pc, #176]	; (1d8 <spi169_init+0xb4>)
{
     128:	b091      	sub	sp, #68	; 0x44
	if (spi169InitComp == true)
     12a:	7831      	ldrb	r1, [r6, #0]
     12c:	2900      	cmp	r1, #0
     12e:	d14f      	bne.n	1d0 <spi169_init+0xac>
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     130:	230d      	movs	r3, #13
	config->mode             = SPI_MODE_MASTER;
     132:	2501      	movs	r5, #1
	config->generator_source = GCLK_GENERATOR_0;
     134:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
     136:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
     138:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     13a:	220c      	movs	r2, #12
     13c:	4b27      	ldr	r3, [pc, #156]	; (1dc <spi169_init+0xb8>)
     13e:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
     140:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     142:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
     144:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
     146:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     148:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     14a:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
     14c:	9103      	str	r1, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     14e:	9104      	str	r1, [sp, #16]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     150:	4798      	blx	r3
	port_get_config_defaults(&pinConf);
    
    // get defaults for lcd master config
	spi_get_config_defaults(&spi169MasterConf);
    
    spi169MasterConf.mux_setting = SPI169_PINXMUX;
     152:	2398      	movs	r3, #152	; 0x98
     154:	035b      	lsls	r3, r3, #13
     156:	60e3      	str	r3, [r4, #12]
    spi169MasterConf.pinmux_pad0 = MOSI169;
     158:	4b21      	ldr	r3, [pc, #132]	; (1e0 <spi169_init+0xbc>)
	// clock source should always be GLCK0
	spi169MasterConf.generator_source = SPI169_CLK;
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;

	// enable the master
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     15a:	4f22      	ldr	r7, [pc, #136]	; (1e4 <spi169_init+0xc0>)
    spi169MasterConf.pinmux_pad0 = MOSI169;
     15c:	62a3      	str	r3, [r4, #40]	; 0x28
    spi169MasterConf.pinmux_pad1 = SCK169;
     15e:	4b22      	ldr	r3, [pc, #136]	; (1e8 <spi169_init+0xc4>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     160:	0022      	movs	r2, r4
    spi169MasterConf.pinmux_pad1 = SCK169;
     162:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi169MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     164:	2301      	movs	r3, #1
     166:	425b      	negs	r3, r3
     168:	6323      	str	r3, [r4, #48]	; 0x30
    spi169MasterConf.pinmux_pad3 = MISO169;
     16a:	4b20      	ldr	r3, [pc, #128]	; (1ec <spi169_init+0xc8>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     16c:	4920      	ldr	r1, [pc, #128]	; (1f0 <spi169_init+0xcc>)
    spi169MasterConf.pinmux_pad3 = MISO169;
     16e:	6363      	str	r3, [r4, #52]	; 0x34
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;
     170:	4b20      	ldr	r3, [pc, #128]	; (1f4 <spi169_init+0xd0>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     172:	0038      	movs	r0, r7
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;
     174:	61a3      	str	r3, [r4, #24]
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     176:	4b20      	ldr	r3, [pc, #128]	; (1f8 <spi169_init+0xd4>)
     178:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     17a:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     17c:	4b1f      	ldr	r3, [pc, #124]	; (1fc <spi169_init+0xd8>)
     17e:	0020      	movs	r0, r4
     180:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     182:	231f      	movs	r3, #31
     184:	4018      	ands	r0, r3
     186:	4085      	lsls	r5, r0
     188:	4b1d      	ldr	r3, [pc, #116]	; (200 <spi169_init+0xdc>)
     18a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     18c:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     18e:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     190:	2d00      	cmp	r5, #0
     192:	d1fc      	bne.n	18e <spi169_init+0x6a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     194:	2302      	movs	r3, #2
     196:	6822      	ldr	r2, [r4, #0]
	slave->ss_pin          = config->ss_pin;
     198:	2011      	movs	r0, #17
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     19a:	4313      	orrs	r3, r2
     19c:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     19e:	2401      	movs	r4, #1
	slave->ss_pin          = config->ss_pin;
     1a0:	4f18      	ldr	r7, [pc, #96]	; (204 <spi169_init+0xe0>)
     1a2:	a901      	add	r1, sp, #4
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1a4:	4b18      	ldr	r3, [pc, #96]	; (208 <spi169_init+0xe4>)
     1a6:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
     1a8:	708d      	strb	r5, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1aa:	700c      	strb	r4, [r1, #0]
	slave->ss_pin          = config->ss_pin;
     1ac:	7038      	strb	r0, [r7, #0]
	slave->address_enabled = config->address_enabled;
     1ae:	707d      	strb	r5, [r7, #1]
	slave->address         = config->address;
     1b0:	70bd      	strb	r5, [r7, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1b2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1b4:	783a      	ldrb	r2, [r7, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     1b6:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1b8:	09d1      	lsrs	r1, r2, #7
     1ba:	d10b      	bne.n	1d4 <spi169_init+0xb0>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1bc:	311f      	adds	r1, #31
     1be:	400a      	ands	r2, r1
     1c0:	0021      	movs	r1, r4
     1c2:	4091      	lsls	r1, r2
     1c4:	000a      	movs	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1c6:	4911      	ldr	r1, [pc, #68]	; (20c <spi169_init+0xe8>)
     1c8:	01db      	lsls	r3, r3, #7
     1ca:	185b      	adds	r3, r3, r1
     1cc:	619a      	str	r2, [r3, #24]
	// change configs as necessary
	spi169SlaveConf.ss_pin = SS169;
	// attach the slave configs to the slave
	spi_attach_slave(&spi169Slave, &spi169SlaveConf);
    
    spi169InitComp = true;
     1ce:	7034      	strb	r4, [r6, #0]
}
     1d0:	b011      	add	sp, #68	; 0x44
     1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1d4:	61ad      	str	r5, [r5, #24]
     1d6:	deff      	udf	#255	; 0xff
     1d8:	20000038 	.word	0x20000038
     1dc:	00001fd7 	.word	0x00001fd7
     1e0:	00100002 	.word	0x00100002
     1e4:	20000130 	.word	0x20000130
     1e8:	00130002 	.word	0x00130002
     1ec:	00120002 	.word	0x00120002
     1f0:	42000c00 	.word	0x42000c00
     1f4:	000f4240 	.word	0x000f4240
     1f8:	00000c49 	.word	0x00000c49
     1fc:	000015d5 	.word	0x000015d5
     200:	e000e100 	.word	0xe000e100
     204:	2000016c 	.word	0x2000016c
     208:	000008c5 	.word	0x000008c5
     20c:	41004400 	.word	0x41004400

00000210 <spi169_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 169 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi169_start_xfer(spiAddr169 paramAddr, xferDir169 dir)
{
     210:	b537      	push	{r0, r1, r2, r4, r5, lr}
     212:	466b      	mov	r3, sp
     214:	1d9c      	adds	r4, r3, #6
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
    
    if(dir == READ)
     216:	2900      	cmp	r1, #0
     218:	d016      	beq.n	248 <spi169_start_xfer+0x38>
    paramAddr |= 0xF000;
     21a:	4b0e      	ldr	r3, [pc, #56]	; (254 <spi169_start_xfer+0x44>)
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     21c:	4318      	orrs	r0, r3
     21e:	8020      	strh	r0, [r4, #0]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     220:	8823      	ldrh	r3, [r4, #0]
     222:	0a1a      	lsrs	r2, r3, #8
     224:	021b      	lsls	r3, r3, #8
     226:	4313      	orrs	r3, r2
     228:	8023      	strh	r3, [r4, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi169Master, &spi169Slave, true);
     22a:	4d0b      	ldr	r5, [pc, #44]	; (258 <spi169_start_xfer+0x48>)
     22c:	2201      	movs	r2, #1
     22e:	490b      	ldr	r1, [pc, #44]	; (25c <spi169_start_xfer+0x4c>)
     230:	0028      	movs	r0, r5
     232:	4b0b      	ldr	r3, [pc, #44]	; (260 <spi169_start_xfer+0x50>)
     234:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     236:	2805      	cmp	r0, #5
     238:	d0f7      	beq.n	22a <spi169_start_xfer+0x1a>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi169Master, (uint8_t*) &paramAddr, 
     23a:	0021      	movs	r1, r4
     23c:	0028      	movs	r0, r5
     23e:	2302      	movs	r3, #2
     240:	4a08      	ldr	r2, [pc, #32]	; (264 <spi169_start_xfer+0x54>)
     242:	4c09      	ldr	r4, [pc, #36]	; (268 <spi169_start_xfer+0x58>)
     244:	47a0      	blx	r4
                    (uint8_t*) &spi169_status_bits, 2);
    
    return read_status;
}
     246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        paramAddr &= 0x7FFF;
     248:	23e0      	movs	r3, #224	; 0xe0
     24a:	0440      	lsls	r0, r0, #17
     24c:	0c40      	lsrs	r0, r0, #17
     24e:	01db      	lsls	r3, r3, #7
     250:	e7e4      	b.n	21c <spi169_start_xfer+0xc>
     252:	46c0      	nop			; (mov r8, r8)
     254:	fffff000 	.word	0xfffff000
     258:	20000130 	.word	0x20000130
     25c:	2000016c 	.word	0x2000016c
     260:	00000f45 	.word	0x00000f45
     264:	2000003a 	.word	0x2000003a
     268:	0000119d 	.word	0x0000119d

0000026c <spi169_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi169_stop_xfer(void)
{
     26c:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi169Master, &spi169Slave, false);
     26e:	2200      	movs	r2, #0
     270:	4902      	ldr	r1, [pc, #8]	; (27c <spi169_stop_xfer+0x10>)
     272:	4803      	ldr	r0, [pc, #12]	; (280 <spi169_stop_xfer+0x14>)
     274:	4b03      	ldr	r3, [pc, #12]	; (284 <spi169_stop_xfer+0x18>)
     276:	4798      	blx	r3
}
     278:	bd10      	pop	{r4, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	2000016c 	.word	0x2000016c
     280:	20000130 	.word	0x20000130
     284:	00000f45 	.word	0x00000f45

00000288 <spi169_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     288:	b510      	push	{r4, lr}
     28a:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi169Master, \
     28c:	2300      	movs	r3, #0
     28e:	0001      	movs	r1, r0
     290:	4c01      	ldr	r4, [pc, #4]	; (298 <spi169_read+0x10>)
     292:	4802      	ldr	r0, [pc, #8]	; (29c <spi169_read+0x14>)
     294:	47a0      	blx	r4
                    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     296:	bd10      	pop	{r4, pc}
     298:	00000e51 	.word	0x00000e51
     29c:	20000130 	.word	0x20000130

000002a0 <spi169_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 169 MHz module at read_addr.
 */
uint8_t spi169_rd8(spiAddr169 read_addr)
{
     2a0:	b513      	push	{r0, r1, r4, lr}
    uint8_t read_byte = 0;
     2a2:	2100      	movs	r1, #0
     2a4:	466b      	mov	r3, sp
     2a6:	1ddc      	adds	r4, r3, #7
     2a8:	71d9      	strb	r1, [r3, #7]
    
    spi169_start_xfer(read_addr, READ);
     2aa:	4b05      	ldr	r3, [pc, #20]	; (2c0 <spi169_rd8+0x20>)
     2ac:	4798      	blx	r3
    
    // read one byte
    spi169_read(&read_byte, 1);
     2ae:	2101      	movs	r1, #1
     2b0:	0020      	movs	r0, r4
     2b2:	4b04      	ldr	r3, [pc, #16]	; (2c4 <spi169_rd8+0x24>)
     2b4:	4798      	blx	r3
    
    spi169_stop_xfer();
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <spi169_rd8+0x28>)
     2b8:	4798      	blx	r3
    
    return read_byte;
     2ba:	7820      	ldrb	r0, [r4, #0]
}
     2bc:	bd16      	pop	{r1, r2, r4, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	00000211 	.word	0x00000211
     2c4:	00000289 	.word	0x00000289
     2c8:	0000026d 	.word	0x0000026d

000002cc <spi169_write>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 169 MHz module. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_write(uint8_t* wrt_buff, uint16_t amount_bytes)
{
     2cc:	b510      	push	{r4, lr}
     2ce:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    wrt_status = spi_write_buffer_wait(&spi169Master, wrt_buff, amount_bytes);
     2d0:	4b02      	ldr	r3, [pc, #8]	; (2dc <spi169_write+0x10>)
     2d2:	0001      	movs	r1, r0
     2d4:	4802      	ldr	r0, [pc, #8]	; (2e0 <spi169_write+0x14>)
     2d6:	4798      	blx	r3
    
    return wrt_status;
}
     2d8:	bd10      	pop	{r4, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	00000fdd 	.word	0x00000fdd
     2e0:	20000130 	.word	0x20000130

000002e4 <spi169_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 169 MHz module at wrt_addr.
 */
status_code_genare_t spi169_wr8(spiAddr169 wrt_addr, uint8_t wrt_byte)
{
     2e4:	b513      	push	{r0, r1, r4, lr}
     2e6:	466b      	mov	r3, sp
     2e8:	1ddc      	adds	r4, r3, #7
     2ea:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi169_start_xfer(wrt_addr, WRT);
     2ec:	2101      	movs	r1, #1
     2ee:	4b05      	ldr	r3, [pc, #20]	; (304 <spi169_wr8+0x20>)
     2f0:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi169_write(&wrt_byte, 1);
     2f2:	2101      	movs	r1, #1
     2f4:	0020      	movs	r0, r4
     2f6:	4b04      	ldr	r3, [pc, #16]	; (308 <spi169_wr8+0x24>)
     2f8:	4798      	blx	r3
     2fa:	0004      	movs	r4, r0
    
    spi169_stop_xfer();
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <spi169_wr8+0x28>)
     2fe:	4798      	blx	r3
    
    return status_result;
}
     300:	0020      	movs	r0, r4
     302:	bd16      	pop	{r1, r2, r4, pc}
     304:	00000211 	.word	0x00000211
     308:	000002cd 	.word	0x000002cd
     30c:	0000026d 	.word	0x0000026d

00000310 <spi169_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi169_autorange(void)
{
     310:	b510      	push	{r4, lr}
    spi169_wr8(AX5043_PLLRANGINGA, 0xFF);
     312:	21ff      	movs	r1, #255	; 0xff
     314:	2033      	movs	r0, #51	; 0x33
     316:	4b04      	ldr	r3, [pc, #16]	; (328 <spi169_autorange+0x18>)
     318:	4798      	blx	r3
    
    while(spi169_rd8(AX5043_PLLRANGINGA) & 0x10);   
     31a:	2410      	movs	r4, #16
     31c:	2033      	movs	r0, #51	; 0x33
     31e:	4b03      	ldr	r3, [pc, #12]	; (32c <spi169_autorange+0x1c>)
     320:	4798      	blx	r3
     322:	4220      	tst	r0, r4
     324:	d1fa      	bne.n	31c <spi169_autorange+0xc>
    
}
     326:	bd10      	pop	{r4, pc}
     328:	000002e5 	.word	0x000002e5
     32c:	000002a1 	.word	0x000002a1

00000330 <spi169_tx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 169 MHz module for transmitting.
 */
void spi169_tx_init(void)
{
     330:	b570      	push	{r4, r5, r6, lr}
    // set 169 MHz module to standby power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     332:	2165      	movs	r1, #101	; 0x65
     334:	4cfe      	ldr	r4, [pc, #1016]	; (730 <spi169_tx_init+0x400>)
     336:	2002      	movs	r0, #2
     338:	47a0      	blx	r4
    delay_ms(100);
     33a:	4dfe      	ldr	r5, [pc, #1016]	; (734 <spi169_tx_init+0x404>)
     33c:	2064      	movs	r0, #100	; 0x64
     33e:	47a8      	blx	r5
    
    // register settings generated by Radiolab software
    spi169_wr8(AX5043_MODULATION, 0x08);
     340:	2108      	movs	r1, #8
     342:	2010      	movs	r0, #16
     344:	47a0      	blx	r4
    spi169_wr8(AX5043_ENCODING, 0x00);
     346:	2100      	movs	r1, #0
     348:	2011      	movs	r0, #17
     34a:	47a0      	blx	r4
    spi169_wr8(AX5043_FRAMING, 0x06);
     34c:	2106      	movs	r1, #6
     34e:	2012      	movs	r0, #18
     350:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     352:	2102      	movs	r1, #2
     354:	2021      	movs	r0, #33	; 0x21
     356:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCDCLK, 0x02);
     358:	2102      	movs	r1, #2
     35a:	2022      	movs	r0, #34	; 0x22
     35c:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCDATA, 0x02);
     35e:	2102      	movs	r1, #2
     360:	2023      	movs	r0, #35	; 0x23
     362:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCANTSEL, 0x02);
     364:	2102      	movs	r1, #2
     366:	2025      	movs	r0, #37	; 0x25
     368:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     36a:	2102      	movs	r1, #2
     36c:	2026      	movs	r0, #38	; 0x26
     36e:	47a0      	blx	r4
    spi169_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     370:	2101      	movs	r1, #1
     372:	206e      	movs	r0, #110	; 0x6e
     374:	47a0      	blx	r4
    spi169_wr8(AX5043_IFFREQ1, 0x06);
     376:	2080      	movs	r0, #128	; 0x80
     378:	2106      	movs	r1, #6
     37a:	0040      	lsls	r0, r0, #1
     37c:	47a0      	blx	r4
    spi169_wr8(AX5043_IFFREQ0, 0x66);
     37e:	2002      	movs	r0, #2
     380:	2166      	movs	r1, #102	; 0x66
     382:	30ff      	adds	r0, #255	; 0xff
     384:	47a0      	blx	r4
    spi169_wr8(AX5043_DECIMATION, 0x05);
     386:	2081      	movs	r0, #129	; 0x81
     388:	2105      	movs	r1, #5
     38a:	0040      	lsls	r0, r0, #1
     38c:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE2, 0x05);
     38e:	2004      	movs	r0, #4
     390:	2105      	movs	r1, #5
     392:	30ff      	adds	r0, #255	; 0xff
     394:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE1, 0x35);
     396:	2082      	movs	r0, #130	; 0x82
     398:	2135      	movs	r1, #53	; 0x35
     39a:	0040      	lsls	r0, r0, #1
     39c:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE0, 0x55);
     39e:	2006      	movs	r0, #6
     3a0:	2155      	movs	r1, #85	; 0x55
     3a2:	30ff      	adds	r0, #255	; 0xff
     3a4:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET2, 0x00);
     3a6:	2083      	movs	r0, #131	; 0x83
     3a8:	2100      	movs	r1, #0
     3aa:	0040      	lsls	r0, r0, #1
     3ac:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET1, 0x00);
     3ae:	2008      	movs	r0, #8
     3b0:	2100      	movs	r1, #0
     3b2:	30ff      	adds	r0, #255	; 0xff
     3b4:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET0, 0x00);
     3b6:	2084      	movs	r0, #132	; 0x84
     3b8:	2100      	movs	r1, #0
     3ba:	0040      	lsls	r0, r0, #1
     3bc:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET2, 0x80);
     3be:	200a      	movs	r0, #10
     3c0:	2180      	movs	r1, #128	; 0x80
     3c2:	30ff      	adds	r0, #255	; 0xff
     3c4:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET1, 0x29);
     3c6:	2085      	movs	r0, #133	; 0x85
     3c8:	2129      	movs	r1, #41	; 0x29
     3ca:	0040      	lsls	r0, r0, #1
     3cc:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET0, 0x89);
     3ce:	200c      	movs	r0, #12
     3d0:	2189      	movs	r1, #137	; 0x89
     3d2:	30ff      	adds	r0, #255	; 0xff
     3d4:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMAX1, 0x22);
     3d6:	2086      	movs	r0, #134	; 0x86
     3d8:	2122      	movs	r1, #34	; 0x22
     3da:	0040      	lsls	r0, r0, #1
     3dc:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMAX0, 0xC0);
     3de:	200e      	movs	r0, #14
     3e0:	21c0      	movs	r1, #192	; 0xc0
     3e2:	30ff      	adds	r0, #255	; 0xff
     3e4:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMIN1, 0xDD);
     3e6:	2087      	movs	r0, #135	; 0x87
     3e8:	21dd      	movs	r1, #221	; 0xdd
     3ea:	0040      	lsls	r0, r0, #1
     3ec:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMIN0, 0x40);
     3ee:	2010      	movs	r0, #16
     3f0:	2140      	movs	r1, #64	; 0x40
     3f2:	30ff      	adds	r0, #255	; 0xff
     3f4:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLFILTER, 0x00);
     3f6:	2016      	movs	r0, #22
     3f8:	2100      	movs	r1, #0
     3fa:	30ff      	adds	r0, #255	; 0xff
     3fc:	47a0      	blx	r4
    spi169_wr8(AX5043_RXPARAMSETS, 0xF4);
     3fe:	2018      	movs	r0, #24
     400:	21f4      	movs	r1, #244	; 0xf4
     402:	30ff      	adds	r0, #255	; 0xff
     404:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN0, 0xE8);
     406:	2090      	movs	r0, #144	; 0x90
     408:	21e8      	movs	r1, #232	; 0xe8
     40a:	0040      	lsls	r0, r0, #1
     40c:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET0, 0x84);
     40e:	2022      	movs	r0, #34	; 0x22
     410:	2184      	movs	r1, #132	; 0x84
     412:	30ff      	adds	r0, #255	; 0xff
     414:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN0, 0xAD);
     416:	2092      	movs	r0, #146	; 0x92
     418:	21ad      	movs	r1, #173	; 0xad
     41a:	0040      	lsls	r0, r0, #1
     41c:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN0, 0xA7);
     41e:	2026      	movs	r0, #38	; 0x26
     420:	21a7      	movs	r1, #167	; 0xa7
     422:	30ff      	adds	r0, #255	; 0xff
     424:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN0, 0xC3);
     426:	2093      	movs	r0, #147	; 0x93
     428:	21c3      	movs	r1, #195	; 0xc3
     42a:	0040      	lsls	r0, r0, #1
     42c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA0, 0x0F);
     42e:	2028      	movs	r0, #40	; 0x28
     430:	210f      	movs	r1, #15
     432:	30ff      	adds	r0, #255	; 0xff
     434:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB0, 0x1F);
     436:	2094      	movs	r0, #148	; 0x94
     438:	211f      	movs	r1, #31
     43a:	0040      	lsls	r0, r0, #1
     43c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC0, 0x0A);
     43e:	202a      	movs	r0, #42	; 0x2a
     440:	210a      	movs	r1, #10
     442:	30ff      	adds	r0, #255	; 0xff
     444:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND0, 0x0A);
     446:	2095      	movs	r0, #149	; 0x95
     448:	210a      	movs	r1, #10
     44a:	0040      	lsls	r0, r0, #1
     44c:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN0, 0x06);
     44e:	202c      	movs	r0, #44	; 0x2c
     450:	2106      	movs	r1, #6
     452:	30ff      	adds	r0, #255	; 0xff
     454:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV10, 0x00);
     456:	2096      	movs	r0, #150	; 0x96
     458:	2100      	movs	r1, #0
     45a:	0040      	lsls	r0, r0, #1
     45c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV00, 0x00);
     45e:	202e      	movs	r0, #46	; 0x2e
     460:	2100      	movs	r1, #0
     462:	30ff      	adds	r0, #255	; 0xff
     464:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
     466:	2030      	movs	r0, #48	; 0x30
     468:	2100      	movs	r1, #0
     46a:	30ff      	adds	r0, #255	; 0xff
     46c:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
     46e:	2098      	movs	r0, #152	; 0x98
     470:	21e8      	movs	r1, #232	; 0xe8
     472:	0040      	lsls	r0, r0, #1
     474:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
     476:	2032      	movs	r0, #50	; 0x32
     478:	2184      	movs	r1, #132	; 0x84
     47a:	30ff      	adds	r0, #255	; 0xff
     47c:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     47e:	2099      	movs	r0, #153	; 0x99
     480:	2100      	movs	r1, #0
     482:	0040      	lsls	r0, r0, #1
     484:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     486:	2034      	movs	r0, #52	; 0x34
     488:	2100      	movs	r1, #0
     48a:	30ff      	adds	r0, #255	; 0xff
     48c:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     48e:	209a      	movs	r0, #154	; 0x9a
     490:	21ab      	movs	r1, #171	; 0xab
     492:	0040      	lsls	r0, r0, #1
     494:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     496:	2036      	movs	r0, #54	; 0x36
     498:	21a6      	movs	r1, #166	; 0xa6
     49a:	30ff      	adds	r0, #255	; 0xff
     49c:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     49e:	209b      	movs	r0, #155	; 0x9b
     4a0:	21c3      	movs	r1, #195	; 0xc3
     4a2:	0040      	lsls	r0, r0, #1
     4a4:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     4a6:	2038      	movs	r0, #56	; 0x38
     4a8:	210f      	movs	r1, #15
     4aa:	30ff      	adds	r0, #255	; 0xff
     4ac:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     4ae:	209c      	movs	r0, #156	; 0x9c
     4b0:	211f      	movs	r1, #31
     4b2:	0040      	lsls	r0, r0, #1
     4b4:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     4b6:	203a      	movs	r0, #58	; 0x3a
     4b8:	210a      	movs	r1, #10
     4ba:	30ff      	adds	r0, #255	; 0xff
     4bc:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     4be:	209d      	movs	r0, #157	; 0x9d
     4c0:	210a      	movs	r1, #10
     4c2:	0040      	lsls	r0, r0, #1
     4c4:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     4c6:	203c      	movs	r0, #60	; 0x3c
     4c8:	2106      	movs	r1, #6
     4ca:	30ff      	adds	r0, #255	; 0xff
     4cc:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     4ce:	209e      	movs	r0, #158	; 0x9e
     4d0:	2100      	movs	r1, #0
     4d2:	0040      	lsls	r0, r0, #1
     4d4:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     4d6:	203e      	movs	r0, #62	; 0x3e
     4d8:	214b      	movs	r1, #75	; 0x4b
     4da:	30ff      	adds	r0, #255	; 0xff
     4dc:	47a0      	blx	r4
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     4de:	209f      	movs	r0, #159	; 0x9f
     4e0:	2116      	movs	r1, #22
     4e2:	0040      	lsls	r0, r0, #1
     4e4:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     4e6:	2040      	movs	r0, #64	; 0x40
     4e8:	2100      	movs	r1, #0
     4ea:	30ff      	adds	r0, #255	; 0xff
     4ec:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     4ee:	20a8      	movs	r0, #168	; 0xa8
     4f0:	21ff      	movs	r1, #255	; 0xff
     4f2:	0040      	lsls	r0, r0, #1
     4f4:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     4f6:	2052      	movs	r0, #82	; 0x52
     4f8:	2184      	movs	r1, #132	; 0x84
     4fa:	30ff      	adds	r0, #255	; 0xff
     4fc:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     4fe:	20a9      	movs	r0, #169	; 0xa9
     500:	2100      	movs	r1, #0
     502:	0040      	lsls	r0, r0, #1
     504:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     506:	2054      	movs	r0, #84	; 0x54
     508:	2100      	movs	r1, #0
     50a:	30ff      	adds	r0, #255	; 0xff
     50c:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     50e:	20aa      	movs	r0, #170	; 0xaa
     510:	21aa      	movs	r1, #170	; 0xaa
     512:	0040      	lsls	r0, r0, #1
     514:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     516:	2056      	movs	r0, #86	; 0x56
     518:	21a5      	movs	r1, #165	; 0xa5
     51a:	30ff      	adds	r0, #255	; 0xff
     51c:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     51e:	20ab      	movs	r0, #171	; 0xab
     520:	21c3      	movs	r1, #195	; 0xc3
     522:	0040      	lsls	r0, r0, #1
     524:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     526:	2058      	movs	r0, #88	; 0x58
     528:	210f      	movs	r1, #15
     52a:	30ff      	adds	r0, #255	; 0xff
     52c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     52e:	20ac      	movs	r0, #172	; 0xac
     530:	211f      	movs	r1, #31
     532:	0040      	lsls	r0, r0, #1
     534:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC3, 0x0D);
     536:	205a      	movs	r0, #90	; 0x5a
     538:	210d      	movs	r1, #13
     53a:	30ff      	adds	r0, #255	; 0xff
     53c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND3, 0x0D);
     53e:	20ad      	movs	r0, #173	; 0xad
     540:	210d      	movs	r1, #13
     542:	0040      	lsls	r0, r0, #1
     544:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN3, 0x06);
     546:	205c      	movs	r0, #92	; 0x5c
     548:	2106      	movs	r1, #6
     54a:	30ff      	adds	r0, #255	; 0xff
     54c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV13, 0x00);
     54e:	20ae      	movs	r0, #174	; 0xae
     550:	2100      	movs	r1, #0
     552:	0040      	lsls	r0, r0, #1
     554:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV03, 0x4B);
     556:	205e      	movs	r0, #94	; 0x5e
     558:	214b      	movs	r1, #75	; 0x4b
     55a:	30ff      	adds	r0, #255	; 0xff
     55c:	47a0      	blx	r4
    spi169_wr8(AX5043_FOURFSK3, 0x16);
     55e:	20af      	movs	r0, #175	; 0xaf
     560:	2116      	movs	r1, #22
     562:	0040      	lsls	r0, r0, #1
     564:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES3, 0x00);
     566:	2060      	movs	r0, #96	; 0x60
     568:	2100      	movs	r1, #0
     56a:	30ff      	adds	r0, #255	; 0xff
     56c:	47a0      	blx	r4
    spi169_wr8(AX5043_MODCFGF, 0x00);
     56e:	20b0      	movs	r0, #176	; 0xb0
     570:	2100      	movs	r1, #0
     572:	0040      	lsls	r0, r0, #1
     574:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV2, 0x00);
     576:	2062      	movs	r0, #98	; 0x62
     578:	2100      	movs	r1, #0
     57a:	30ff      	adds	r0, #255	; 0xff
     57c:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV1, 0x02);
     57e:	20b1      	movs	r0, #177	; 0xb1
     580:	2102      	movs	r1, #2
     582:	0040      	lsls	r0, r0, #1
     584:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV0, 0x0C);
     586:	2064      	movs	r0, #100	; 0x64
     588:	210c      	movs	r1, #12
     58a:	30ff      	adds	r0, #255	; 0xff
     58c:	47a0      	blx	r4
    spi169_wr8(AX5043_MODCFGA, 0x01);
     58e:	20b2      	movs	r0, #178	; 0xb2
     590:	2101      	movs	r1, #1
     592:	0040      	lsls	r0, r0, #1
     594:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE2, 0x00);
     596:	2066      	movs	r0, #102	; 0x66
     598:	2100      	movs	r1, #0
     59a:	30ff      	adds	r0, #255	; 0xff
     59c:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE1, 0x04);
     59e:	20b3      	movs	r0, #179	; 0xb3
     5a0:	2104      	movs	r1, #4
     5a2:	0040      	lsls	r0, r0, #1
     5a4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE0, 0xEA);
     5a6:	2068      	movs	r0, #104	; 0x68
     5a8:	21ea      	movs	r1, #234	; 0xea
     5aa:	30ff      	adds	r0, #255	; 0xff
     5ac:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFA1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5ae:	20b4      	movs	r0, #180	; 0xb4
     5b0:	210a      	movs	r1, #10
     5b2:	0040      	lsls	r0, r0, #1
     5b4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFA0, TXPWR0);
     5b6:	206a      	movs	r0, #106	; 0x6a
     5b8:	21aa      	movs	r1, #170	; 0xaa
     5ba:	30ff      	adds	r0, #255	; 0xff
     5bc:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFB1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5be:	20b5      	movs	r0, #181	; 0xb5
     5c0:	210a      	movs	r1, #10
     5c2:	0040      	lsls	r0, r0, #1
     5c4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFB0, TXPWR0);
     5c6:	206c      	movs	r0, #108	; 0x6c
     5c8:	21aa      	movs	r1, #170	; 0xaa
     5ca:	30ff      	adds	r0, #255	; 0xff
     5cc:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFC1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5ce:	20b6      	movs	r0, #182	; 0xb6
     5d0:	210a      	movs	r1, #10
     5d2:	0040      	lsls	r0, r0, #1
     5d4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFC0, TXPWR0);
     5d6:	206e      	movs	r0, #110	; 0x6e
     5d8:	21aa      	movs	r1, #170	; 0xaa
     5da:	30ff      	adds	r0, #255	; 0xff
     5dc:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFD1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5de:	20b7      	movs	r0, #183	; 0xb7
     5e0:	210a      	movs	r1, #10
     5e2:	0040      	lsls	r0, r0, #1
     5e4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFD0, TXPWR0);
     5e6:	2070      	movs	r0, #112	; 0x70
     5e8:	21aa      	movs	r1, #170	; 0xaa
     5ea:	30ff      	adds	r0, #255	; 0xff
     5ec:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLVCOI, 0x8A);
     5ee:	20c0      	movs	r0, #192	; 0xc0
     5f0:	218a      	movs	r1, #138	; 0x8a
     5f2:	0040      	lsls	r0, r0, #1
     5f4:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLRNGCLK, 0x03);
     5f6:	2084      	movs	r0, #132	; 0x84
     5f8:	2103      	movs	r1, #3
     5fa:	30ff      	adds	r0, #255	; 0xff
     5fc:	47a0      	blx	r4
    spi169_wr8(AX5043_BBTUNE, 0x0F);
     5fe:	20c4      	movs	r0, #196	; 0xc4
     600:	210f      	movs	r1, #15
     602:	0040      	lsls	r0, r0, #1
     604:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSCAP, 0x77);
     606:	208a      	movs	r0, #138	; 0x8a
     608:	2177      	movs	r1, #119	; 0x77
     60a:	30ff      	adds	r0, #255	; 0xff
     60c:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTADDRCFG, 0x80);
     60e:	2080      	movs	r0, #128	; 0x80
     610:	2180      	movs	r1, #128	; 0x80
     612:	0080      	lsls	r0, r0, #2
     614:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTLENCFG, 0x00);
     616:	2100      	movs	r1, #0
     618:	4847      	ldr	r0, [pc, #284]	; (738 <spi169_tx_init+0x408>)
     61a:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTLENOFFSET, 0x04);
     61c:	2104      	movs	r1, #4
     61e:	4847      	ldr	r0, [pc, #284]	; (73c <spi169_tx_init+0x40c>)
     620:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTMAXLEN, 0xC8);
     622:	21c8      	movs	r1, #200	; 0xc8
     624:	4846      	ldr	r0, [pc, #280]	; (740 <spi169_tx_init+0x410>)
     626:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT3, 0xAA);
     628:	2084      	movs	r0, #132	; 0x84
     62a:	21aa      	movs	r1, #170	; 0xaa
     62c:	0080      	lsls	r0, r0, #2
     62e:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT2, 0xCC);
     630:	21cc      	movs	r1, #204	; 0xcc
     632:	4844      	ldr	r0, [pc, #272]	; (744 <spi169_tx_init+0x414>)
     634:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT1, 0xAA);
     636:	21aa      	movs	r1, #170	; 0xaa
     638:	4843      	ldr	r0, [pc, #268]	; (748 <spi169_tx_init+0x418>)
     63a:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT0, 0xCC);
     63c:	21cc      	movs	r1, #204	; 0xcc
     63e:	4843      	ldr	r0, [pc, #268]	; (74c <spi169_tx_init+0x41c>)
     640:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0LEN, 0x9F);
     642:	2085      	movs	r0, #133	; 0x85
     644:	219f      	movs	r1, #159	; 0x9f
     646:	0080      	lsls	r0, r0, #2
     648:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0MAX, 0x1F);
     64a:	211f      	movs	r1, #31
     64c:	4840      	ldr	r0, [pc, #256]	; (750 <spi169_tx_init+0x420>)
     64e:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1PAT1, 0x55);
     650:	2086      	movs	r0, #134	; 0x86
     652:	2155      	movs	r1, #85	; 0x55
     654:	0080      	lsls	r0, r0, #2
     656:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1PAT0, 0x55);
     658:	2155      	movs	r1, #85	; 0x55
     65a:	483e      	ldr	r0, [pc, #248]	; (754 <spi169_tx_init+0x424>)
     65c:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1LEN, 0x8A);
     65e:	2087      	movs	r0, #135	; 0x87
     660:	218a      	movs	r1, #138	; 0x8a
     662:	0080      	lsls	r0, r0, #2
     664:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1MAX, 0x0A);
     666:	210a      	movs	r1, #10
     668:	483b      	ldr	r0, [pc, #236]	; (758 <spi169_tx_init+0x428>)
     66a:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGTXBOOST, 0x32);
     66c:	2088      	movs	r0, #136	; 0x88
     66e:	2132      	movs	r1, #50	; 0x32
     670:	0080      	lsls	r0, r0, #2
     672:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGTXSETTLE, 0x14);
     674:	2114      	movs	r1, #20
     676:	4839      	ldr	r0, [pc, #228]	; (75c <spi169_tx_init+0x42c>)
     678:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXBOOST, 0x32);
     67a:	2132      	movs	r1, #50	; 0x32
     67c:	4838      	ldr	r0, [pc, #224]	; (760 <spi169_tx_init+0x430>)
     67e:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXSETTLE, 0x14);
     680:	2089      	movs	r0, #137	; 0x89
     682:	2114      	movs	r1, #20
     684:	0080      	lsls	r0, r0, #2
     686:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     688:	2100      	movs	r1, #0
     68a:	4836      	ldr	r0, [pc, #216]	; (764 <spi169_tx_init+0x434>)
     68c:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     68e:	2173      	movs	r1, #115	; 0x73
     690:	4835      	ldr	r0, [pc, #212]	; (768 <spi169_tx_init+0x438>)
     692:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXRSSI, 0x03);
     694:	208a      	movs	r0, #138	; 0x8a
     696:	2103      	movs	r1, #3
     698:	0080      	lsls	r0, r0, #2
     69a:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     69c:	2135      	movs	r1, #53	; 0x35
     69e:	4833      	ldr	r0, [pc, #204]	; (76c <spi169_tx_init+0x43c>)
     6a0:	47a0      	blx	r4
    spi169_wr8(AX5043_RSSIABSTHR, 0xE6);
     6a2:	21e6      	movs	r1, #230	; 0xe6
     6a4:	4832      	ldr	r0, [pc, #200]	; (770 <spi169_tx_init+0x440>)
     6a6:	47a0      	blx	r4
    spi169_wr8(AX5043_BGNDRSSITHR, 0x00);
     6a8:	2100      	movs	r1, #0
     6aa:	4832      	ldr	r0, [pc, #200]	; (774 <spi169_tx_init+0x444>)
     6ac:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     6ae:	208c      	movs	r0, #140	; 0x8c
     6b0:	210d      	movs	r1, #13
     6b2:	0080      	lsls	r0, r0, #2
     6b4:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     6b6:	2120      	movs	r1, #32
     6b8:	482f      	ldr	r0, [pc, #188]	; (778 <spi169_tx_init+0x448>)
     6ba:	47a0      	blx	r4
    spi169_wr8(AX5043_DACVALUE1, 0x00);
     6bc:	20cc      	movs	r0, #204	; 0xcc
     6be:	2100      	movs	r1, #0
     6c0:	0080      	lsls	r0, r0, #2
     6c2:	47a0      	blx	r4
    spi169_wr8(AX5043_DACVALUE0, 0x00);
     6c4:	2100      	movs	r1, #0
     6c6:	482d      	ldr	r0, [pc, #180]	; (77c <spi169_tx_init+0x44c>)
     6c8:	47a0      	blx	r4
    spi169_wr8(AX5043_DACCONFIG, 0x00);
     6ca:	2100      	movs	r1, #0
     6cc:	482c      	ldr	r0, [pc, #176]	; (780 <spi169_tx_init+0x450>)
     6ce:	47a0      	blx	r4
    spi169_wr8(AX5043_REF, 0x03);
     6d0:	2103      	movs	r1, #3
     6d2:	482c      	ldr	r0, [pc, #176]	; (784 <spi169_tx_init+0x454>)
     6d4:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALOSC, 0x03);
     6d6:	20f1      	movs	r0, #241	; 0xf1
     6d8:	2103      	movs	r1, #3
     6da:	0100      	lsls	r0, r0, #4
     6dc:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALAMPL, 0x07);
     6de:	2107      	movs	r1, #7
     6e0:	4829      	ldr	r0, [pc, #164]	; (788 <spi169_tx_init+0x458>)
     6e2:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF1C, 0x07);
     6e4:	2107      	movs	r1, #7
     6e6:	4829      	ldr	r0, [pc, #164]	; (78c <spi169_tx_init+0x45c>)
     6e8:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF21, 0x68);
     6ea:	2168      	movs	r1, #104	; 0x68
     6ec:	4828      	ldr	r0, [pc, #160]	; (790 <spi169_tx_init+0x460>)
     6ee:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF22, 0xFF);
     6f0:	21ff      	movs	r1, #255	; 0xff
     6f2:	4828      	ldr	r0, [pc, #160]	; (794 <spi169_tx_init+0x464>)
     6f4:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF23, 0x84);
     6f6:	2184      	movs	r1, #132	; 0x84
     6f8:	4827      	ldr	r0, [pc, #156]	; (798 <spi169_tx_init+0x468>)
     6fa:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF26, 0x98);
     6fc:	2198      	movs	r1, #152	; 0x98
     6fe:	4827      	ldr	r0, [pc, #156]	; (79c <spi169_tx_init+0x46c>)
     700:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF34, 0x08);
     702:	2108      	movs	r1, #8
     704:	4826      	ldr	r0, [pc, #152]	; (7a0 <spi169_tx_init+0x470>)
     706:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF35, 0x10);
     708:	2110      	movs	r1, #16
     70a:	4826      	ldr	r0, [pc, #152]	; (7a4 <spi169_tx_init+0x474>)
     70c:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF44, 0x25);
     70e:	2125      	movs	r1, #37	; 0x25
     710:	4825      	ldr	r0, [pc, #148]	; (7a8 <spi169_tx_init+0x478>)
     712:	47a0      	blx	r4
    
    spi169_wr8(AX5043_PLLLOOP, 0x09);
     714:	2109      	movs	r1, #9
     716:	2030      	movs	r0, #48	; 0x30
     718:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLCPI, 0x02);
     71a:	2102      	movs	r1, #2
     71c:	2031      	movs	r0, #49	; 0x31
     71e:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLVCODIV, 0x30);
     720:	2130      	movs	r1, #48	; 0x30
     722:	2032      	movs	r0, #50	; 0x32
     724:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALCAP, 0x13);
     726:	20c2      	movs	r0, #194	; 0xc2
     728:	2113      	movs	r1, #19
     72a:	0040      	lsls	r0, r0, #1
     72c:	e03e      	b.n	7ac <spi169_tx_init+0x47c>
     72e:	46c0      	nop			; (mov r8, r8)
     730:	000002e5 	.word	0x000002e5
     734:	00000899 	.word	0x00000899
     738:	00000201 	.word	0x00000201
     73c:	00000202 	.word	0x00000202
     740:	00000203 	.word	0x00000203
     744:	00000211 	.word	0x00000211
     748:	00000212 	.word	0x00000212
     74c:	00000213 	.word	0x00000213
     750:	00000216 	.word	0x00000216
     754:	00000219 	.word	0x00000219
     758:	0000021e 	.word	0x0000021e
     75c:	00000221 	.word	0x00000221
     760:	00000223 	.word	0x00000223
     764:	00000225 	.word	0x00000225
     768:	00000226 	.word	0x00000226
     76c:	0000022a 	.word	0x0000022a
     770:	0000022d 	.word	0x0000022d
     774:	0000022f 	.word	0x0000022f
     778:	00000233 	.word	0x00000233
     77c:	00000331 	.word	0x00000331
     780:	00000332 	.word	0x00000332
     784:	00000f0d 	.word	0x00000f0d
     788:	00000f11 	.word	0x00000f11
     78c:	00000f1c 	.word	0x00000f1c
     790:	00000f21 	.word	0x00000f21
     794:	00000f22 	.word	0x00000f22
     798:	00000f23 	.word	0x00000f23
     79c:	00000f26 	.word	0x00000f26
     7a0:	00000f34 	.word	0x00000f34
     7a4:	00000f35 	.word	0x00000f35
     7a8:	00000f44 	.word	0x00000f44
     7ac:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF00, 0x0F);
     7ae:	20f0      	movs	r0, #240	; 0xf0
     7b0:	210f      	movs	r1, #15
     7b2:	0100      	lsls	r0, r0, #4
     7b4:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF18, 0x06);
     7b6:	2106      	movs	r1, #6
     7b8:	480c      	ldr	r0, [pc, #48]	; (7ec <spi169_tx_init+0x4bc>)
     7ba:	47a0      	blx	r4
    
    //set the freqeuency (169 MHz) according to calculation pg.46 AX5043 programmers guide
    spi169_wr8(AX5043_FREQA0, 0x01);
     7bc:	2101      	movs	r1, #1
     7be:	2037      	movs	r0, #55	; 0x37
     7c0:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA1, 0x00);
     7c2:	2100      	movs	r1, #0
     7c4:	2036      	movs	r0, #54	; 0x36
     7c6:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA2, 0x00);
     7c8:	2100      	movs	r1, #0
     7ca:	2035      	movs	r0, #53	; 0x35
     7cc:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA3, 0x1F);
     7ce:	211f      	movs	r1, #31
     7d0:	2034      	movs	r0, #52	; 0x34
     7d2:	47a0      	blx	r4
    
    // wait for crystal to start COMMENTED OUT FOR DEBUG PURPOSESSS AAHAHHHHH
//    while((spi169_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    
    // autorange the PLL once crystal has settled
    spi169_autorange();
     7d4:	4b06      	ldr	r3, [pc, #24]	; (7f0 <spi169_tx_init+0x4c0>)
     7d6:	4798      	blx	r3
    
    // clear the FIFO
    spi169_wr8(AX5043_FIFOSTAT, (1 << 7));
     7d8:	2180      	movs	r1, #128	; 0x80
     7da:	2028      	movs	r0, #40	; 0x28
     7dc:	47a0      	blx	r4

    // set to full transmit power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLTX);
     7de:	216d      	movs	r1, #109	; 0x6d
     7e0:	2002      	movs	r0, #2
     7e2:	47a0      	blx	r4
    delay_ms(100);
     7e4:	2064      	movs	r0, #100	; 0x64
     7e6:	47a8      	blx	r5
     7e8:	bd70      	pop	{r4, r5, r6, pc}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	00000f18 	.word	0x00000f18
     7f0:	00000311 	.word	0x00000311

000007f4 <uart915_write_cmd>:
 * Return Values(s) : void
 * Description      : Sends a string to the MTXDOT and waits for an 
 *  "OK\r\n" response.
 */
void uart915_write_cmd(const char* cmd_str)
{
     7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // clear the flag
    flag_ok_received = false;
     7f6:	2300      	movs	r3, #0
{
     7f8:	0004      	movs	r4, r0
    flag_ok_received = false;
     7fa:	4a0f      	ldr	r2, [pc, #60]	; (838 <uart915_write_cmd+0x44>)
    
    // reset state machine for determining okay_received
    rx_state = START;
    
    // clear the ring buffer
    ringbuff_clear(&uart915_ringbuff);
     7fc:	480f      	ldr	r0, [pc, #60]	; (83c <uart915_write_cmd+0x48>)
    flag_ok_received = false;
     7fe:	7013      	strb	r3, [r2, #0]
    rx_state = START;
     800:	4a0f      	ldr	r2, [pc, #60]	; (840 <uart915_write_cmd+0x4c>)
     802:	7013      	strb	r3, [r2, #0]
    ringbuff_clear(&uart915_ringbuff);
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <uart915_write_cmd+0x50>)
     806:	4798      	blx	r3
    
    // write the AT command
    usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     808:	0020      	movs	r0, r4
     80a:	4d0f      	ldr	r5, [pc, #60]	; (848 <uart915_write_cmd+0x54>)
     80c:	47a8      	blx	r5
     80e:	4e0f      	ldr	r6, [pc, #60]	; (84c <uart915_write_cmd+0x58>)
     810:	b282      	uxth	r2, r0
     812:	0021      	movs	r1, r4
     814:	0030      	movs	r0, r6
     816:	4f0e      	ldr	r7, [pc, #56]	; (850 <uart915_write_cmd+0x5c>)
     818:	47b8      	blx	r7
    
    while(!flag_ok_received){
     81a:	4b07      	ldr	r3, [pc, #28]	; (838 <uart915_write_cmd+0x44>)
     81c:	781b      	ldrb	r3, [r3, #0]
     81e:	2b00      	cmp	r3, #0
     820:	d000      	beq.n	824 <uart915_write_cmd+0x30>
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
		delay_ms(10);
		};
}
     822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usart_write_buffer_wait(&uart915_inst, (const uint8_t*) cmd_str, strlen(cmd_str));
     824:	0020      	movs	r0, r4
     826:	47a8      	blx	r5
     828:	0021      	movs	r1, r4
     82a:	b282      	uxth	r2, r0
     82c:	0030      	movs	r0, r6
     82e:	47b8      	blx	r7
		delay_ms(10);
     830:	200a      	movs	r0, #10
     832:	4b08      	ldr	r3, [pc, #32]	; (854 <uart915_write_cmd+0x60>)
     834:	4798      	blx	r3
     836:	e7f0      	b.n	81a <uart915_write_cmd+0x26>
     838:	2000003c 	.word	0x2000003c
     83c:	20000000 	.word	0x20000000
     840:	2000003d 	.word	0x2000003d
     844:	00000115 	.word	0x00000115
     848:	00001fe7 	.word	0x00001fe7
     84c:	20000040 	.word	0x20000040
     850:	00000b19 	.word	0x00000b19
     854:	00000899 	.word	0x00000899

00000858 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     858:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     85a:	4b09      	ldr	r3, [pc, #36]	; (880 <delay_init+0x28>)
     85c:	2000      	movs	r0, #0
     85e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     860:	21fa      	movs	r1, #250	; 0xfa
     862:	4c08      	ldr	r4, [pc, #32]	; (884 <delay_init+0x2c>)
     864:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     866:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     868:	47a0      	blx	r4
     86a:	4b07      	ldr	r3, [pc, #28]	; (888 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     86c:	4907      	ldr	r1, [pc, #28]	; (88c <delay_init+0x34>)
	cycles_per_ms /= 1000;
     86e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     870:	0028      	movs	r0, r5
     872:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     874:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     876:	4b06      	ldr	r3, [pc, #24]	; (890 <delay_init+0x38>)
     878:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     87a:	4b06      	ldr	r3, [pc, #24]	; (894 <delay_init+0x3c>)
     87c:	601a      	str	r2, [r3, #0]
}
     87e:	bd70      	pop	{r4, r5, r6, pc}
     880:	000019d1 	.word	0x000019d1
     884:	00001e65 	.word	0x00001e65
     888:	20000010 	.word	0x20000010
     88c:	000f4240 	.word	0x000f4240
     890:	20000014 	.word	0x20000014
     894:	e000e010 	.word	0xe000e010

00000898 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     898:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     89a:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     89c:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     89e:	4b07      	ldr	r3, [pc, #28]	; (8bc <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8a0:	0264      	lsls	r4, r4, #9
     8a2:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     8a4:	4b06      	ldr	r3, [pc, #24]	; (8c0 <delay_cycles_ms+0x28>)
	while (n--) {
     8a6:	3801      	subs	r0, #1
     8a8:	d200      	bcs.n	8ac <delay_cycles_ms+0x14>
	}
}
     8aa:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     8ac:	2a00      	cmp	r2, #0
     8ae:	d0fa      	beq.n	8a6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     8b0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     8b2:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8b4:	681d      	ldr	r5, [r3, #0]
     8b6:	4225      	tst	r5, r4
     8b8:	d0fc      	beq.n	8b4 <delay_cycles_ms+0x1c>
     8ba:	e7f4      	b.n	8a6 <delay_cycles_ms+0xe>
     8bc:	20000010 	.word	0x20000010
     8c0:	e000e010 	.word	0xe000e010

000008c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8c4:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8c6:	2280      	movs	r2, #128	; 0x80
     8c8:	ab01      	add	r3, sp, #4
     8ca:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     8cc:	780a      	ldrb	r2, [r1, #0]
     8ce:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     8d0:	784a      	ldrb	r2, [r1, #1]
     8d2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     8d4:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8d6:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     8d8:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     8da:	4b01      	ldr	r3, [pc, #4]	; (8e0 <port_pin_set_config+0x1c>)
     8dc:	4798      	blx	r3
}
     8de:	bd07      	pop	{r0, r1, r2, pc}
     8e0:	00001bb5 	.word	0x00001bb5

000008e4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8e4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8e6:	0849      	lsrs	r1, r1, #1
{
     8e8:	0004      	movs	r4, r0
     8ea:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8ec:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     8ee:	42a1      	cmp	r1, r4
     8f0:	d201      	bcs.n	8f6 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8f2:	bd10      	pop	{r4, pc}
		baud_calculated++;
     8f4:	0003      	movs	r3, r0
     8f6:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     8f8:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     8fa:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     8fc:	428c      	cmp	r4, r1
     8fe:	d9f9      	bls.n	8f4 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     900:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     902:	2bff      	cmp	r3, #255	; 0xff
     904:	d8f5      	bhi.n	8f2 <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     906:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     908:	2000      	movs	r0, #0
     90a:	e7f2      	b.n	8f2 <_sercom_get_sync_baud_val+0xe>

0000090c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     90e:	4c0d      	ldr	r4, [pc, #52]	; (944 <sercom_set_gclk_generator+0x38>)
{
     910:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     912:	7823      	ldrb	r3, [r4, #0]
     914:	2b00      	cmp	r3, #0
     916:	d001      	beq.n	91c <sercom_set_gclk_generator+0x10>
     918:	2900      	cmp	r1, #0
     91a:	d00c      	beq.n	936 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     91c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     91e:	2013      	movs	r0, #19
     920:	4b09      	ldr	r3, [pc, #36]	; (948 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     922:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     924:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     926:	2013      	movs	r0, #19
     928:	4b08      	ldr	r3, [pc, #32]	; (94c <sercom_set_gclk_generator+0x40>)
     92a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     92c:	2301      	movs	r3, #1

		return STATUS_OK;
     92e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     930:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     932:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     934:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     936:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     938:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     93a:	42ab      	cmp	r3, r5
     93c:	d0fa      	beq.n	934 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     93e:	201d      	movs	r0, #29
     940:	e7f8      	b.n	934 <sercom_set_gclk_generator+0x28>
     942:	46c0      	nop			; (mov r8, r8)
     944:	200000f4 	.word	0x200000f4
     948:	00001ae1 	.word	0x00001ae1
     94c:	00001a59 	.word	0x00001a59

00000950 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     950:	4a39      	ldr	r2, [pc, #228]	; (a38 <_sercom_get_default_pad+0xe8>)
{
     952:	0003      	movs	r3, r0
     954:	b500      	push	{lr}
     956:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     958:	4293      	cmp	r3, r2
     95a:	d033      	beq.n	9c4 <_sercom_get_default_pad+0x74>
     95c:	d807      	bhi.n	96e <_sercom_get_default_pad+0x1e>
     95e:	4a37      	ldr	r2, [pc, #220]	; (a3c <_sercom_get_default_pad+0xec>)
     960:	4293      	cmp	r3, r2
     962:	d014      	beq.n	98e <_sercom_get_default_pad+0x3e>
     964:	4a36      	ldr	r2, [pc, #216]	; (a40 <_sercom_get_default_pad+0xf0>)
     966:	4293      	cmp	r3, r2
     968:	d01f      	beq.n	9aa <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     96a:	2300      	movs	r3, #0
     96c:	e017      	b.n	99e <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     96e:	4a35      	ldr	r2, [pc, #212]	; (a44 <_sercom_get_default_pad+0xf4>)
     970:	4293      	cmp	r3, r2
     972:	d03a      	beq.n	9ea <_sercom_get_default_pad+0x9a>
     974:	4a34      	ldr	r2, [pc, #208]	; (a48 <_sercom_get_default_pad+0xf8>)
     976:	4293      	cmp	r3, r2
     978:	d044      	beq.n	a04 <_sercom_get_default_pad+0xb4>
     97a:	4a34      	ldr	r2, [pc, #208]	; (a4c <_sercom_get_default_pad+0xfc>)
     97c:	4293      	cmp	r3, r2
     97e:	d1f4      	bne.n	96a <_sercom_get_default_pad+0x1a>
	return 0;
     980:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     982:	2903      	cmp	r1, #3
     984:	d80b      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     986:	f001 fa63 	bl	1e50 <__gnu_thumb1_case_uqi>
     98a:	2a50      	.short	0x2a50
     98c:	2e2c      	.short	0x2e2c
	return 0;
     98e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     990:	2903      	cmp	r1, #3
     992:	d804      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     994:	f001 fa5c 	bl	1e50 <__gnu_thumb1_case_uqi>
     998:	07050243 	.word	0x07050243
     99c:	4b2c      	ldr	r3, [pc, #176]	; (a50 <_sercom_get_default_pad+0x100>)
}
     99e:	0018      	movs	r0, r3
     9a0:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a2:	4b2c      	ldr	r3, [pc, #176]	; (a54 <_sercom_get_default_pad+0x104>)
     9a4:	e7fb      	b.n	99e <_sercom_get_default_pad+0x4e>
     9a6:	4b2c      	ldr	r3, [pc, #176]	; (a58 <_sercom_get_default_pad+0x108>)
     9a8:	e7f9      	b.n	99e <_sercom_get_default_pad+0x4e>
	return 0;
     9aa:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ac:	2903      	cmp	r1, #3
     9ae:	d8f6      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     9b0:	f001 fa4e 	bl	1e50 <__gnu_thumb1_case_uqi>
     9b4:	06040237 	.word	0x06040237
     9b8:	4b28      	ldr	r3, [pc, #160]	; (a5c <_sercom_get_default_pad+0x10c>)
     9ba:	e7f0      	b.n	99e <_sercom_get_default_pad+0x4e>
     9bc:	4b28      	ldr	r3, [pc, #160]	; (a60 <_sercom_get_default_pad+0x110>)
     9be:	e7ee      	b.n	99e <_sercom_get_default_pad+0x4e>
     9c0:	4b28      	ldr	r3, [pc, #160]	; (a64 <_sercom_get_default_pad+0x114>)
     9c2:	e7ec      	b.n	99e <_sercom_get_default_pad+0x4e>
	return 0;
     9c4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c6:	2903      	cmp	r1, #3
     9c8:	d8e9      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     9ca:	f001 fa41 	bl	1e50 <__gnu_thumb1_case_uqi>
     9ce:	022c      	.short	0x022c
     9d0:	0604      	.short	0x0604
     9d2:	4b25      	ldr	r3, [pc, #148]	; (a68 <_sercom_get_default_pad+0x118>)
     9d4:	e7e3      	b.n	99e <_sercom_get_default_pad+0x4e>
     9d6:	4b25      	ldr	r3, [pc, #148]	; (a6c <_sercom_get_default_pad+0x11c>)
     9d8:	e7e1      	b.n	99e <_sercom_get_default_pad+0x4e>
     9da:	4b25      	ldr	r3, [pc, #148]	; (a70 <_sercom_get_default_pad+0x120>)
     9dc:	e7df      	b.n	99e <_sercom_get_default_pad+0x4e>
     9de:	4b25      	ldr	r3, [pc, #148]	; (a74 <_sercom_get_default_pad+0x124>)
     9e0:	e7dd      	b.n	99e <_sercom_get_default_pad+0x4e>
     9e2:	4b25      	ldr	r3, [pc, #148]	; (a78 <_sercom_get_default_pad+0x128>)
     9e4:	e7db      	b.n	99e <_sercom_get_default_pad+0x4e>
     9e6:	4b25      	ldr	r3, [pc, #148]	; (a7c <_sercom_get_default_pad+0x12c>)
     9e8:	e7d9      	b.n	99e <_sercom_get_default_pad+0x4e>
	return 0;
     9ea:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ec:	2903      	cmp	r1, #3
     9ee:	d8d6      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     9f0:	f001 fa2e 	bl	1e50 <__gnu_thumb1_case_uqi>
     9f4:	0604021d 	.word	0x0604021d
     9f8:	4b21      	ldr	r3, [pc, #132]	; (a80 <_sercom_get_default_pad+0x130>)
     9fa:	e7d0      	b.n	99e <_sercom_get_default_pad+0x4e>
     9fc:	4b21      	ldr	r3, [pc, #132]	; (a84 <_sercom_get_default_pad+0x134>)
     9fe:	e7ce      	b.n	99e <_sercom_get_default_pad+0x4e>
     a00:	4b21      	ldr	r3, [pc, #132]	; (a88 <_sercom_get_default_pad+0x138>)
     a02:	e7cc      	b.n	99e <_sercom_get_default_pad+0x4e>
	return 0;
     a04:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a06:	2903      	cmp	r1, #3
     a08:	d8c9      	bhi.n	99e <_sercom_get_default_pad+0x4e>
     a0a:	f001 fa21 	bl	1e50 <__gnu_thumb1_case_uqi>
     a0e:	0212      	.short	0x0212
     a10:	0604      	.short	0x0604
     a12:	4b1e      	ldr	r3, [pc, #120]	; (a8c <_sercom_get_default_pad+0x13c>)
     a14:	e7c3      	b.n	99e <_sercom_get_default_pad+0x4e>
     a16:	4b1e      	ldr	r3, [pc, #120]	; (a90 <_sercom_get_default_pad+0x140>)
     a18:	e7c1      	b.n	99e <_sercom_get_default_pad+0x4e>
     a1a:	4b1e      	ldr	r3, [pc, #120]	; (a94 <_sercom_get_default_pad+0x144>)
     a1c:	e7bf      	b.n	99e <_sercom_get_default_pad+0x4e>
     a1e:	4b1e      	ldr	r3, [pc, #120]	; (a98 <_sercom_get_default_pad+0x148>)
     a20:	e7bd      	b.n	99e <_sercom_get_default_pad+0x4e>
     a22:	2303      	movs	r3, #3
     a24:	e7bb      	b.n	99e <_sercom_get_default_pad+0x4e>
     a26:	4b1d      	ldr	r3, [pc, #116]	; (a9c <_sercom_get_default_pad+0x14c>)
     a28:	e7b9      	b.n	99e <_sercom_get_default_pad+0x4e>
     a2a:	4b1d      	ldr	r3, [pc, #116]	; (aa0 <_sercom_get_default_pad+0x150>)
     a2c:	e7b7      	b.n	99e <_sercom_get_default_pad+0x4e>
     a2e:	4b1d      	ldr	r3, [pc, #116]	; (aa4 <_sercom_get_default_pad+0x154>)
     a30:	e7b5      	b.n	99e <_sercom_get_default_pad+0x4e>
     a32:	4b1d      	ldr	r3, [pc, #116]	; (aa8 <_sercom_get_default_pad+0x158>)
     a34:	e7b3      	b.n	99e <_sercom_get_default_pad+0x4e>
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	42001000 	.word	0x42001000
     a3c:	42000800 	.word	0x42000800
     a40:	42000c00 	.word	0x42000c00
     a44:	42001800 	.word	0x42001800
     a48:	42001c00 	.word	0x42001c00
     a4c:	42001400 	.word	0x42001400
     a50:	00050003 	.word	0x00050003
     a54:	00060003 	.word	0x00060003
     a58:	00070003 	.word	0x00070003
     a5c:	00010003 	.word	0x00010003
     a60:	001e0003 	.word	0x001e0003
     a64:	001f0003 	.word	0x001f0003
     a68:	00090003 	.word	0x00090003
     a6c:	000a0003 	.word	0x000a0003
     a70:	000b0003 	.word	0x000b0003
     a74:	00110003 	.word	0x00110003
     a78:	00120003 	.word	0x00120003
     a7c:	00130003 	.word	0x00130003
     a80:	000d0003 	.word	0x000d0003
     a84:	000e0003 	.word	0x000e0003
     a88:	000f0003 	.word	0x000f0003
     a8c:	00170003 	.word	0x00170003
     a90:	00180003 	.word	0x00180003
     a94:	00190003 	.word	0x00190003
     a98:	00040003 	.word	0x00040003
     a9c:	00080003 	.word	0x00080003
     aa0:	00100003 	.word	0x00100003
     aa4:	000c0003 	.word	0x000c0003
     aa8:	00160003 	.word	0x00160003

00000aac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     aac:	b570      	push	{r4, r5, r6, lr}
     aae:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ab0:	4669      	mov	r1, sp
     ab2:	4b09      	ldr	r3, [pc, #36]	; (ad8 <_sercom_get_sercom_inst_index+0x2c>)
     ab4:	466a      	mov	r2, sp
     ab6:	cb70      	ldmia	r3!, {r4, r5, r6}
     ab8:	c170      	stmia	r1!, {r4, r5, r6}
     aba:	cb70      	ldmia	r3!, {r4, r5, r6}
     abc:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     abe:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ac0:	0099      	lsls	r1, r3, #2
     ac2:	5851      	ldr	r1, [r2, r1]
     ac4:	4281      	cmp	r1, r0
     ac6:	d102      	bne.n	ace <_sercom_get_sercom_inst_index+0x22>
			return i;
     ac8:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     aca:	b006      	add	sp, #24
     acc:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ace:	3301      	adds	r3, #1
     ad0:	2b06      	cmp	r3, #6
     ad2:	d1f5      	bne.n	ac0 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     ad4:	2000      	movs	r0, #0
     ad6:	e7f8      	b.n	aca <_sercom_get_sercom_inst_index+0x1e>
     ad8:	00001ff4 	.word	0x00001ff4

00000adc <_usart_wait_for_sync>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     adc:	6802      	ldr	r2, [r0, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ade:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ae0:	2b00      	cmp	r3, #0
     ae2:	d1fc      	bne.n	ade <_usart_wait_for_sync+0x2>
		/* Wait until the synchronization is complete */
	}
}
     ae4:	4770      	bx	lr
	...

00000ae8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     ae8:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     aea:	79c2      	ldrb	r2, [r0, #7]
{
     aec:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
     aee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     af0:	2a00      	cmp	r2, #0
     af2:	d00c      	beq.n	b0e <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     af4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
     af6:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     af8:	2a00      	cmp	r2, #0
     afa:	d108      	bne.n	b0e <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
     afe:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
     b00:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b02:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
     b04:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b06:	7e22      	ldrb	r2, [r4, #24]
     b08:	421a      	tst	r2, r3
     b0a:	d0fc      	beq.n	b06 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     b0c:	2300      	movs	r3, #0
}
     b0e:	0018      	movs	r0, r3
     b10:	bd70      	pop	{r4, r5, r6, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	00000add 	.word	0x00000add

00000b18 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     b1a:	0006      	movs	r6, r0
     b1c:	000f      	movs	r7, r1
     b1e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b20:	2017      	movs	r0, #23
	if (length == 0) {
     b22:	2a00      	cmp	r2, #0
     b24:	d027      	beq.n	b76 <usart_write_buffer_wait+0x5e>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b26:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     b28:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     b2a:	2b00      	cmp	r3, #0
     b2c:	d023      	beq.n	b76 <usart_write_buffer_wait+0x5e>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b2e:	6833      	ldr	r3, [r6, #0]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     b30:	0030      	movs	r0, r6
	SercomUsart *const usart_hw = &(module->hw->USART);
     b32:	9301      	str	r3, [sp, #4]
	_usart_wait_for_sync(module);
     b34:	4b18      	ldr	r3, [pc, #96]	; (b98 <usart_write_buffer_wait+0x80>)
     b36:	4798      	blx	r3

	uint16_t tx_pos = 0;
     b38:	2400      	movs	r4, #0
     b3a:	2380      	movs	r3, #128	; 0x80
     b3c:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b3e:	2101      	movs	r1, #1
     b40:	9a01      	ldr	r2, [sp, #4]
     b42:	7e12      	ldrb	r2, [r2, #24]
     b44:	420a      	tst	r2, r1
     b46:	d017      	beq.n	b78 <usart_write_buffer_wait+0x60>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b48:	7972      	ldrb	r2, [r6, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
     b4a:	1863      	adds	r3, r4, r1
     b4c:	b29b      	uxth	r3, r3
     b4e:	5d39      	ldrb	r1, [r7, r4]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b50:	2a01      	cmp	r2, #1
     b52:	d016      	beq.n	b82 <usart_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
     b54:	001c      	movs	r4, r3
     b56:	b289      	uxth	r1, r1
     b58:	3d01      	subs	r5, #1
			data_to_send |= (tx_data[tx_pos++] << 8);
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     b5a:	0030      	movs	r0, r6
     b5c:	4b0f      	ldr	r3, [pc, #60]	; (b9c <usart_write_buffer_wait+0x84>)
     b5e:	b2ad      	uxth	r5, r5
     b60:	4798      	blx	r3
	while (length--) {
     b62:	2d00      	cmp	r5, #0
     b64:	d1e9      	bne.n	b3a <usart_write_buffer_wait+0x22>
     b66:	2380      	movs	r3, #128	; 0x80
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b68:	2202      	movs	r2, #2
     b6a:	025b      	lsls	r3, r3, #9
     b6c:	9901      	ldr	r1, [sp, #4]
     b6e:	7e09      	ldrb	r1, [r1, #24]
     b70:	4211      	tst	r1, r2
     b72:	d00c      	beq.n	b8e <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     b74:	2000      	movs	r0, #0
}
     b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     b78:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
     b7a:	2b00      	cmp	r3, #0
     b7c:	d1df      	bne.n	b3e <usart_write_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
     b7e:	2012      	movs	r0, #18
     b80:	e7f9      	b.n	b76 <usart_write_buffer_wait+0x5e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b82:	5cfb      	ldrb	r3, [r7, r3]
     b84:	3402      	adds	r4, #2
     b86:	021b      	lsls	r3, r3, #8
     b88:	b2a4      	uxth	r4, r4
     b8a:	4319      	orrs	r1, r3
     b8c:	e7e4      	b.n	b58 <usart_write_buffer_wait+0x40>
     b8e:	3b01      	subs	r3, #1
		} else if (i == USART_TIMEOUT) {
     b90:	2b00      	cmp	r3, #0
     b92:	d1eb      	bne.n	b6c <usart_write_buffer_wait+0x54>
     b94:	e7f3      	b.n	b7e <usart_write_buffer_wait+0x66>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	00000add 	.word	0x00000add
     b9c:	00000ae9 	.word	0x00000ae9

00000ba0 <port_pin_set_output_level>:
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ba0:	2200      	movs	r2, #0
{
     ba2:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
     ba4:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
     ba6:	09c4      	lsrs	r4, r0, #7
     ba8:	4294      	cmp	r4, r2
     baa:	d102      	bne.n	bb2 <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
     bac:	01da      	lsls	r2, r3, #7
     bae:	4b06      	ldr	r3, [pc, #24]	; (bc8 <port_pin_set_output_level+0x28>)
     bb0:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bb2:	231f      	movs	r3, #31
     bb4:	4018      	ands	r0, r3
     bb6:	3b1e      	subs	r3, #30
     bb8:	4083      	lsls	r3, r0
	if (level) {
     bba:	2900      	cmp	r1, #0
     bbc:	d001      	beq.n	bc2 <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
     bbe:	6193      	str	r3, [r2, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     bc0:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
     bc2:	6153      	str	r3, [r2, #20]
}
     bc4:	e7fc      	b.n	bc0 <port_pin_set_output_level+0x20>
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	41004400 	.word	0x41004400

00000bcc <spi_is_write_complete>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bcc:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     bce:	7e18      	ldrb	r0, [r3, #24]
     bd0:	0780      	lsls	r0, r0, #30
     bd2:	0fc0      	lsrs	r0, r0, #31
}
     bd4:	4770      	bx	lr

00000bd6 <spi_is_ready_to_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bd6:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     bd8:	7e18      	ldrb	r0, [r3, #24]
     bda:	2301      	movs	r3, #1
     bdc:	4018      	ands	r0, r3
}
     bde:	4770      	bx	lr

00000be0 <spi_is_ready_to_read>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     be0:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     be2:	7e18      	ldrb	r0, [r3, #24]
     be4:	0740      	lsls	r0, r0, #29
     be6:	0fc0      	lsrs	r0, r0, #31
}
     be8:	4770      	bx	lr
	...

00000bec <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     bec:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     bee:	4b06      	ldr	r3, [pc, #24]	; (c08 <spi_write+0x1c>)
{
     bf0:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     bf2:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
     bf4:	4798      	blx	r3
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     bf6:	2305      	movs	r3, #5
	if (!spi_is_ready_to_write(module)) {
     bf8:	2800      	cmp	r0, #0
     bfa:	d003      	beq.n	c04 <spi_write+0x18>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
     bfc:	2300      	movs	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     bfe:	05e4      	lsls	r4, r4, #23
     c00:	0de4      	lsrs	r4, r4, #23
     c02:	62ac      	str	r4, [r5, #40]	; 0x28
}
     c04:	0018      	movs	r0, r3
     c06:	bd70      	pop	{r4, r5, r6, pc}
     c08:	00000bd7 	.word	0x00000bd7

00000c0c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     c0c:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     c0e:	4b0d      	ldr	r3, [pc, #52]	; (c44 <spi_read+0x38>)
{
     c10:	0006      	movs	r6, r0
     c12:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     c14:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_read(module)) {
     c16:	4798      	blx	r3
		/* No data has been received, return */
		return STATUS_ERR_IO;
     c18:	2210      	movs	r2, #16
	if (!spi_is_ready_to_read(module)) {
     c1a:	2800      	cmp	r0, #0
     c1c:	d00d      	beq.n	c3a <spi_read+0x2e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c1e:	2304      	movs	r3, #4
     c20:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
     c22:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c24:	4219      	tst	r1, r3
     c26:	d001      	beq.n	c2c <spi_read+0x20>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     c28:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
     c2a:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c2c:	79b3      	ldrb	r3, [r6, #6]
     c2e:	2b01      	cmp	r3, #1
     c30:	d105      	bne.n	c3e <spi_read+0x32>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c32:	6aab      	ldr	r3, [r5, #40]	; 0x28
     c34:	05db      	lsls	r3, r3, #23
     c36:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c38:	8023      	strh	r3, [r4, #0]
	}

	return retval;
}
     c3a:	0010      	movs	r0, r2
     c3c:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     c40:	b2db      	uxtb	r3, r3
     c42:	e7f9      	b.n	c38 <spi_read+0x2c>
     c44:	00000be1 	.word	0x00000be1

00000c48 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c4c:	6029      	str	r1, [r5, #0]
{
     c4e:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c50:	680a      	ldr	r2, [r1, #0]
{
     c52:	b089      	sub	sp, #36	; 0x24
     c54:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     c56:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c58:	0792      	lsls	r2, r2, #30
     c5a:	d500      	bpl.n	c5e <spi_init+0x16>
     c5c:	e0d4      	b.n	e08 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c5e:	2701      	movs	r7, #1
     c60:	680b      	ldr	r3, [r1, #0]
     c62:	403b      	ands	r3, r7
     c64:	9301      	str	r3, [sp, #4]
     c66:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     c68:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c6a:	2a00      	cmp	r2, #0
     c6c:	d000      	beq.n	c70 <spi_init+0x28>
     c6e:	e0cb      	b.n	e08 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c70:	0008      	movs	r0, r1
     c72:	4b6a      	ldr	r3, [pc, #424]	; (e1c <spi_init+0x1d4>)
     c74:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c76:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c78:	408f      	lsls	r7, r1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     c7a:	4b69      	ldr	r3, [pc, #420]	; (e20 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c7c:	3014      	adds	r0, #20
     c7e:	6a1a      	ldr	r2, [r3, #32]
     c80:	4317      	orrs	r7, r2
     c82:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     c84:	1d63      	adds	r3, r4, #5
     c86:	7fdb      	ldrb	r3, [r3, #31]
     c88:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c8a:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
     c8c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c8e:	0011      	movs	r1, r2
     c90:	0038      	movs	r0, r7
     c92:	4b64      	ldr	r3, [pc, #400]	; (e24 <spi_init+0x1dc>)
     c94:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c96:	0038      	movs	r0, r7
     c98:	4b63      	ldr	r3, [pc, #396]	; (e28 <spi_init+0x1e0>)
     c9a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c9c:	1d63      	adds	r3, r4, #5
     c9e:	7fd8      	ldrb	r0, [r3, #31]
     ca0:	9901      	ldr	r1, [sp, #4]
     ca2:	4b62      	ldr	r3, [pc, #392]	; (e2c <spi_init+0x1e4>)
     ca4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     ca6:	7823      	ldrb	r3, [r4, #0]
     ca8:	2b01      	cmp	r3, #1
     caa:	d103      	bne.n	cb4 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     cac:	6832      	ldr	r2, [r6, #0]
     cae:	330b      	adds	r3, #11
     cb0:	4313      	orrs	r3, r2
     cb2:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     cb4:	7823      	ldrb	r3, [r4, #0]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d103      	bne.n	cc2 <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     cba:	6832      	ldr	r2, [r6, #0]
     cbc:	3308      	adds	r3, #8
     cbe:	4313      	orrs	r3, r2
     cc0:	6033      	str	r3, [r6, #0]
     cc2:	002b      	movs	r3, r5
     cc4:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     cc6:	2600      	movs	r6, #0
     cc8:	330c      	adds	r3, #12
     cca:	3228      	adds	r2, #40	; 0x28
     ccc:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     cce:	429a      	cmp	r2, r3
     cd0:	d1fc      	bne.n	ccc <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     cd2:	002b      	movs	r3, r5
     cd4:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
     cd6:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
     cd8:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     cda:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
     cdc:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
     cde:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
     ce0:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
     ce2:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
     ce4:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     ce6:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
     ce8:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cea:	4b4c      	ldr	r3, [pc, #304]	; (e1c <spi_init+0x1d4>)
	module->locked                     = false;
     cec:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     cee:	4798      	blx	r3
     cf0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     cf2:	4b4f      	ldr	r3, [pc, #316]	; (e30 <spi_init+0x1e8>)
     cf4:	494f      	ldr	r1, [pc, #316]	; (e34 <spi_init+0x1ec>)
     cf6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     cf8:	4b4f      	ldr	r3, [pc, #316]	; (e38 <spi_init+0x1f0>)
     cfa:	00bf      	lsls	r7, r7, #2
     cfc:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cfe:	2380      	movs	r3, #128	; 0x80
     d00:	aa02      	add	r2, sp, #8
     d02:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d04:	2301      	movs	r3, #1
     d06:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
     d08:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d0a:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d0c:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
     d0e:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
     d10:	2b00      	cmp	r3, #0
     d12:	d100      	bne.n	d16 <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d14:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
     d16:	2600      	movs	r6, #0
     d18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     d1a:	9304      	str	r3, [sp, #16]
     d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     d1e:	9305      	str	r3, [sp, #20]
     d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
     d22:	9306      	str	r3, [sp, #24]
     d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
     d26:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d28:	00b3      	lsls	r3, r6, #2
     d2a:	aa04      	add	r2, sp, #16
     d2c:	5898      	ldr	r0, [r3, r2]
     d2e:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
     d30:	2800      	cmp	r0, #0
     d32:	d102      	bne.n	d3a <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d34:	0038      	movs	r0, r7
     d36:	4b41      	ldr	r3, [pc, #260]	; (e3c <spi_init+0x1f4>)
     d38:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
     d3a:	1c43      	adds	r3, r0, #1
     d3c:	d006      	beq.n	d4c <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d3e:	ab02      	add	r3, sp, #8
     d40:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d42:	0c00      	lsrs	r0, r0, #16
     d44:	b2c0      	uxtb	r0, r0
     d46:	a903      	add	r1, sp, #12
     d48:	4b3d      	ldr	r3, [pc, #244]	; (e40 <spi_init+0x1f8>)
     d4a:	4798      	blx	r3
     d4c:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d4e:	2e04      	cmp	r6, #4
     d50:	d1ea      	bne.n	d28 <spi_init+0xe0>
	module->mode             = config->mode;
     d52:	7823      	ldrb	r3, [r4, #0]
     d54:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     d56:	7c23      	ldrb	r3, [r4, #16]
     d58:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     d5a:	7ca3      	ldrb	r3, [r4, #18]
     d5c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     d5e:	7d23      	ldrb	r3, [r4, #20]
     d60:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     d62:	ab02      	add	r3, sp, #8
     d64:	1c9e      	adds	r6, r3, #2
     d66:	2300      	movs	r3, #0
     d68:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
     d6a:	7823      	ldrb	r3, [r4, #0]
     d6c:	2b01      	cmp	r3, #1
     d6e:	d110      	bne.n	d92 <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d70:	4b2a      	ldr	r3, [pc, #168]	; (e1c <spi_init+0x1d4>)
     d72:	6828      	ldr	r0, [r5, #0]
     d74:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d76:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d78:	4b32      	ldr	r3, [pc, #200]	; (e44 <spi_init+0x1fc>)
     d7a:	b2c0      	uxtb	r0, r0
     d7c:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
     d7e:	4b32      	ldr	r3, [pc, #200]	; (e48 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d80:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     d82:	0032      	movs	r2, r6
     d84:	69a0      	ldr	r0, [r4, #24]
     d86:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
     d88:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
     d8a:	2800      	cmp	r0, #0
     d8c:	d13c      	bne.n	e08 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
     d8e:	7833      	ldrb	r3, [r6, #0]
     d90:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
     d92:	7823      	ldrb	r3, [r4, #0]
     d94:	2b00      	cmp	r3, #0
     d96:	d13d      	bne.n	e14 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     d98:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     d9a:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
     d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     d9e:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     da0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     da2:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
     da4:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     da6:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     da8:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
     daa:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     dac:	7fdb      	ldrb	r3, [r3, #31]
     dae:	2b00      	cmp	r3, #0
     db0:	d12d      	bne.n	e0e <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
     db2:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
     db4:	68a1      	ldr	r1, [r4, #8]
     db6:	6862      	ldr	r2, [r4, #4]
     db8:	430a      	orrs	r2, r1
     dba:	68e1      	ldr	r1, [r4, #12]
     dbc:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
     dbe:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
     dc0:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
     dc2:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     dc4:	7c61      	ldrb	r1, [r4, #17]
     dc6:	2900      	cmp	r1, #0
     dc8:	d103      	bne.n	dd2 <spi_init+0x18a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     dca:	4920      	ldr	r1, [pc, #128]	; (e4c <spi_init+0x204>)
     dcc:	7889      	ldrb	r1, [r1, #2]
     dce:	0789      	lsls	r1, r1, #30
     dd0:	d501      	bpl.n	dd6 <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     dd2:	2180      	movs	r1, #128	; 0x80
     dd4:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
     dd6:	7ca1      	ldrb	r1, [r4, #18]
     dd8:	2900      	cmp	r1, #0
     dda:	d002      	beq.n	de2 <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ddc:	2180      	movs	r1, #128	; 0x80
     dde:	0289      	lsls	r1, r1, #10
     de0:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
     de2:	7ce1      	ldrb	r1, [r4, #19]
     de4:	2900      	cmp	r1, #0
     de6:	d002      	beq.n	dee <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     de8:	2180      	movs	r1, #128	; 0x80
     dea:	0089      	lsls	r1, r1, #2
     dec:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
     dee:	7d21      	ldrb	r1, [r4, #20]
     df0:	2900      	cmp	r1, #0
     df2:	d002      	beq.n	dfa <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     df4:	2180      	movs	r1, #128	; 0x80
     df6:	0189      	lsls	r1, r1, #6
     df8:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
     dfa:	6839      	ldr	r1, [r7, #0]
     dfc:	430a      	orrs	r2, r1
     dfe:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     e00:	687a      	ldr	r2, [r7, #4]
     e02:	4313      	orrs	r3, r2
     e04:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     e06:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     e08:	0018      	movs	r0, r3
     e0a:	b009      	add	sp, #36	; 0x24
     e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     e0e:	2340      	movs	r3, #64	; 0x40
     e10:	4313      	orrs	r3, r2
     e12:	e7cf      	b.n	db4 <spi_init+0x16c>
	uint32_t ctrlb = 0;
     e14:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
     e16:	0018      	movs	r0, r3
     e18:	e7cc      	b.n	db4 <spi_init+0x16c>
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	00000aad 	.word	0x00000aad
     e20:	40000400 	.word	0x40000400
     e24:	00001ae1 	.word	0x00001ae1
     e28:	00001a59 	.word	0x00001a59
     e2c:	0000090d 	.word	0x0000090d
     e30:	0000159d 	.word	0x0000159d
     e34:	0000139d 	.word	0x0000139d
     e38:	20000174 	.word	0x20000174
     e3c:	00000951 	.word	0x00000951
     e40:	00001bb5 	.word	0x00001bb5
     e44:	00001afd 	.word	0x00001afd
     e48:	000008e5 	.word	0x000008e5
     e4c:	41002000 	.word	0x41002000

00000e50 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
     e52:	b087      	sub	sp, #28
     e54:	9303      	str	r3, [sp, #12]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e56:	0003      	movs	r3, r0
{
     e58:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     e5a:	2005      	movs	r0, #5
{
     e5c:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
     e5e:	3338      	adds	r3, #56	; 0x38
     e60:	781b      	ldrb	r3, [r3, #0]
{
     e62:	0017      	movs	r7, r2
	if (module->status == STATUS_BUSY) {
     e64:	4283      	cmp	r3, r0
     e66:	d036      	beq.n	ed6 <spi_read_buffer_wait+0x86>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e68:	3012      	adds	r0, #18
	if (length == 0) {
     e6a:	2a00      	cmp	r2, #0
     e6c:	d033      	beq.n	ed6 <spi_read_buffer_wait+0x86>
	}

	if (!(module->receiver_enabled)) {
     e6e:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
     e70:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     e72:	2b00      	cmp	r3, #0
     e74:	d02f      	beq.n	ed6 <spi_read_buffer_wait+0x86>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e76:	7963      	ldrb	r3, [r4, #5]
     e78:	2b00      	cmp	r3, #0
     e7a:	d107      	bne.n	e8c <spi_read_buffer_wait+0x3c>
     e7c:	0020      	movs	r0, r4
     e7e:	4b2b      	ldr	r3, [pc, #172]	; (f2c <spi_read_buffer_wait+0xdc>)
     e80:	4798      	blx	r3
     e82:	2800      	cmp	r0, #0
     e84:	d002      	beq.n	e8c <spi_read_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e86:	2302      	movs	r3, #2
     e88:	6822      	ldr	r2, [r4, #0]
     e8a:	7613      	strb	r3, [r2, #24]
{
     e8c:	2500      	movs	r5, #0
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     e8e:	7963      	ldrb	r3, [r4, #5]
     e90:	2b01      	cmp	r3, #1
     e92:	d108      	bne.n	ea6 <spi_read_buffer_wait+0x56>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     e94:	0020      	movs	r0, r4
     e96:	4b26      	ldr	r3, [pc, #152]	; (f30 <spi_read_buffer_wait+0xe0>)
     e98:	4798      	blx	r3
     e9a:	2800      	cmp	r0, #0
     e9c:	d0fa      	beq.n	e94 <spi_read_buffer_wait+0x44>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
     e9e:	9903      	ldr	r1, [sp, #12]
     ea0:	0020      	movs	r0, r4
     ea2:	4b24      	ldr	r3, [pc, #144]	; (f34 <spi_read_buffer_wait+0xe4>)
     ea4:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     ea6:	7963      	ldrb	r3, [r4, #5]
     ea8:	4e23      	ldr	r6, [pc, #140]	; (f38 <spi_read_buffer_wait+0xe8>)
     eaa:	2b00      	cmp	r3, #0
     eac:	d11b      	bne.n	ee6 <spi_read_buffer_wait+0x96>
     eae:	4b23      	ldr	r3, [pc, #140]	; (f3c <spi_read_buffer_wait+0xec>)
     eb0:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     eb2:	0020      	movs	r0, r4
     eb4:	47b0      	blx	r6
     eb6:	2800      	cmp	r0, #0
     eb8:	d104      	bne.n	ec4 <spi_read_buffer_wait+0x74>
     eba:	9b01      	ldr	r3, [sp, #4]
     ebc:	3b01      	subs	r3, #1
     ebe:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ec0:	2b00      	cmp	r3, #0
     ec2:	d1f6      	bne.n	eb2 <spi_read_buffer_wait+0x62>
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ec4:	0020      	movs	r0, r4
     ec6:	4b19      	ldr	r3, [pc, #100]	; (f2c <spi_read_buffer_wait+0xdc>)
     ec8:	4798      	blx	r3
     eca:	2800      	cmp	r0, #0
     ecc:	d005      	beq.n	eda <spi_read_buffer_wait+0x8a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ece:	2202      	movs	r2, #2
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     ed0:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
     ed2:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ed4:	761a      	strb	r2, [r3, #24]
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     ed6:	b007      	add	sp, #28
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_read(module)) {
     eda:	0020      	movs	r0, r4
     edc:	47b0      	blx	r6
     ede:	2800      	cmp	r0, #0
     ee0:	d101      	bne.n	ee6 <spi_read_buffer_wait+0x96>
				return STATUS_ERR_TIMEOUT;
     ee2:	3012      	adds	r0, #18
     ee4:	e7f7      	b.n	ed6 <spi_read_buffer_wait+0x86>
		while (!spi_is_ready_to_read(module)) {
     ee6:	0020      	movs	r0, r4
     ee8:	47b0      	blx	r6
     eea:	2800      	cmp	r0, #0
     eec:	d0fb      	beq.n	ee6 <spi_read_buffer_wait+0x96>
		uint16_t received_data = 0;
     eee:	ab04      	add	r3, sp, #16
     ef0:	1d9e      	adds	r6, r3, #6
     ef2:	2300      	movs	r3, #0
		enum status_code retval = spi_read(module, &received_data);
     ef4:	0031      	movs	r1, r6
		uint16_t received_data = 0;
     ef6:	8033      	strh	r3, [r6, #0]
		enum status_code retval = spi_read(module, &received_data);
     ef8:	0020      	movs	r0, r4
     efa:	4b11      	ldr	r3, [pc, #68]	; (f40 <spi_read_buffer_wait+0xf0>)
     efc:	4798      	blx	r3
		if (retval != STATUS_OK) {
     efe:	2800      	cmp	r0, #0
     f00:	d1e9      	bne.n	ed6 <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
     f02:	9902      	ldr	r1, [sp, #8]
     f04:	8832      	ldrh	r2, [r6, #0]
     f06:	1c6b      	adds	r3, r5, #1
     f08:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f0a:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
     f0c:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f0e:	2901      	cmp	r1, #1
     f10:	d109      	bne.n	f26 <spi_read_buffer_wait+0xd6>
			rx_data[rx_pos++] = (received_data >> 8);
     f12:	9902      	ldr	r1, [sp, #8]
     f14:	3502      	adds	r5, #2
     f16:	0a12      	lsrs	r2, r2, #8
     f18:	b2ad      	uxth	r5, r5
     f1a:	54ca      	strb	r2, [r1, r3]
     f1c:	3f01      	subs	r7, #1
     f1e:	b2bf      	uxth	r7, r7
	while (length--) {
     f20:	2f00      	cmp	r7, #0
     f22:	d1b4      	bne.n	e8e <spi_read_buffer_wait+0x3e>
     f24:	e7d7      	b.n	ed6 <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
     f26:	001d      	movs	r5, r3
     f28:	e7f8      	b.n	f1c <spi_read_buffer_wait+0xcc>
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000bcd 	.word	0x00000bcd
     f30:	00000bd7 	.word	0x00000bd7
     f34:	00000bed 	.word	0x00000bed
     f38:	00000be1 	.word	0x00000be1
     f3c:	00002711 	.word	0x00002711
     f40:	00000c0d 	.word	0x00000c0d

00000f44 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     f44:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     f46:	7943      	ldrb	r3, [r0, #5]
{
     f48:	b085      	sub	sp, #20
     f4a:	0005      	movs	r5, r0
     f4c:	000e      	movs	r6, r1
     f4e:	0014      	movs	r4, r2
	if (module->mode != SPI_MODE_MASTER) {
     f50:	9300      	str	r3, [sp, #0]
		return STATUS_ERR_UNSUPPORTED_DEV;
     f52:	2015      	movs	r0, #21
	if (module->mode != SPI_MODE_MASTER) {
     f54:	2b01      	cmp	r3, #1
     f56:	d104      	bne.n	f62 <spi_select_slave+0x1e>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     f58:	7a2b      	ldrb	r3, [r5, #8]
     f5a:	9301      	str	r3, [sp, #4]
     f5c:	2b00      	cmp	r3, #0
     f5e:	d002      	beq.n	f66 <spi_select_slave+0x22>
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     f60:	2000      	movs	r0, #0
}
     f62:	b005      	add	sp, #20
     f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f66:	4f18      	ldr	r7, [pc, #96]	; (fc8 <spi_select_slave+0x84>)
		if (select) {
     f68:	2a00      	cmp	r2, #0
     f6a:	d027      	beq.n	fbc <spi_select_slave+0x78>
			if (slave->address_enabled) {
     f6c:	784c      	ldrb	r4, [r1, #1]
     f6e:	2c00      	cmp	r4, #0
     f70:	d020      	beq.n	fb4 <spi_select_slave+0x70>
				if (!spi_is_ready_to_write(module)) {
     f72:	4b16      	ldr	r3, [pc, #88]	; (fcc <spi_select_slave+0x88>)
     f74:	0028      	movs	r0, r5
     f76:	4798      	blx	r3
     f78:	0003      	movs	r3, r0
     f7a:	7830      	ldrb	r0, [r6, #0]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d103      	bne.n	f88 <spi_select_slave+0x44>
					port_pin_set_output_level(slave->ss_pin, true);
     f80:	9900      	ldr	r1, [sp, #0]
     f82:	47b8      	blx	r7
					return STATUS_BUSY;
     f84:	2005      	movs	r0, #5
     f86:	e7ec      	b.n	f62 <spi_select_slave+0x1e>
				port_pin_set_output_level(slave->ss_pin, false);
     f88:	9901      	ldr	r1, [sp, #4]
     f8a:	47b8      	blx	r7
				spi_write(module, slave->address);
     f8c:	4b10      	ldr	r3, [pc, #64]	; (fd0 <spi_select_slave+0x8c>)
     f8e:	78b1      	ldrb	r1, [r6, #2]
     f90:	0028      	movs	r0, r5
     f92:	4798      	blx	r3
				if (!(module->receiver_enabled)) {
     f94:	79eb      	ldrb	r3, [r5, #7]
     f96:	2b00      	cmp	r3, #0
     f98:	d1e2      	bne.n	f60 <spi_select_slave+0x1c>
					while (!spi_is_ready_to_read(module)) {
     f9a:	0028      	movs	r0, r5
     f9c:	4b0d      	ldr	r3, [pc, #52]	; (fd4 <spi_select_slave+0x90>)
     f9e:	4798      	blx	r3
     fa0:	2800      	cmp	r0, #0
     fa2:	d0fa      	beq.n	f9a <spi_select_slave+0x56>
					uint16_t flush = 0;
     fa4:	2400      	movs	r4, #0
     fa6:	ab02      	add	r3, sp, #8
     fa8:	1d99      	adds	r1, r3, #6
					spi_read(module, &flush);
     faa:	0028      	movs	r0, r5
     fac:	4b0a      	ldr	r3, [pc, #40]	; (fd8 <spi_select_slave+0x94>)
					uint16_t flush = 0;
     fae:	800c      	strh	r4, [r1, #0]
					spi_read(module, &flush);
     fb0:	4798      	blx	r3
     fb2:	e7d5      	b.n	f60 <spi_select_slave+0x1c>
				port_pin_set_output_level(slave->ss_pin, false);
     fb4:	7808      	ldrb	r0, [r1, #0]
     fb6:	0021      	movs	r1, r4
     fb8:	47b8      	blx	r7
     fba:	e7d1      	b.n	f60 <spi_select_slave+0x1c>
			port_pin_set_output_level(slave->ss_pin, true);
     fbc:	7808      	ldrb	r0, [r1, #0]
     fbe:	9900      	ldr	r1, [sp, #0]
     fc0:	47b8      	blx	r7
	return STATUS_OK;
     fc2:	0020      	movs	r0, r4
     fc4:	e7cd      	b.n	f62 <spi_select_slave+0x1e>
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	00000ba1 	.word	0x00000ba1
     fcc:	00000bd7 	.word	0x00000bd7
     fd0:	00000bed 	.word	0x00000bed
     fd4:	00000be1 	.word	0x00000be1
     fd8:	00000c0d 	.word	0x00000c0d

00000fdc <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     fdc:	0003      	movs	r3, r0
{
     fde:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe0:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     fe2:	2005      	movs	r0, #5
{
     fe4:	b087      	sub	sp, #28
     fe6:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
     fe8:	3338      	adds	r3, #56	; 0x38
     fea:	781b      	ldrb	r3, [r3, #0]
{
     fec:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
     fee:	4283      	cmp	r3, r0
     ff0:	d032      	beq.n	1058 <spi_write_buffer_wait+0x7c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ff2:	3012      	adds	r0, #18
	if (length == 0) {
     ff4:	2a00      	cmp	r2, #0
     ff6:	d02f      	beq.n	1058 <spi_write_buffer_wait+0x7c>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     ff8:	7963      	ldrb	r3, [r4, #5]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d107      	bne.n	100e <spi_write_buffer_wait+0x32>
     ffe:	0020      	movs	r0, r4
    1000:	4b5f      	ldr	r3, [pc, #380]	; (1180 <spi_write_buffer_wait+0x1a4>)
    1002:	4798      	blx	r3
    1004:	2800      	cmp	r0, #0
    1006:	d002      	beq.n	100e <spi_write_buffer_wait+0x32>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1008:	2302      	movs	r3, #2
    100a:	6822      	ldr	r2, [r4, #0]
    100c:	7613      	strb	r3, [r2, #24]
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    100e:	2600      	movs	r6, #0
    1010:	9501      	str	r5, [sp, #4]
    1012:	3d01      	subs	r5, #1
    1014:	b2ad      	uxth	r5, r5
	while (length--) {
    1016:	4a5b      	ldr	r2, [pc, #364]	; (1184 <spi_write_buffer_wait+0x1a8>)
    1018:	7963      	ldrb	r3, [r4, #5]
    101a:	4295      	cmp	r5, r2
    101c:	d108      	bne.n	1030 <spi_write_buffer_wait+0x54>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    101e:	2b01      	cmp	r3, #1
    1020:	d100      	bne.n	1024 <spi_write_buffer_wait+0x48>
    1022:	e087      	b.n	1134 <spi_write_buffer_wait+0x158>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1024:	7963      	ldrb	r3, [r4, #5]
    1026:	2b00      	cmp	r3, #0
    1028:	d100      	bne.n	102c <spi_write_buffer_wait+0x50>
    102a:	e089      	b.n	1140 <spi_write_buffer_wait+0x164>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    102c:	2000      	movs	r0, #0
    102e:	e013      	b.n	1058 <spi_write_buffer_wait+0x7c>
		if (module->mode == SPI_MODE_SLAVE) {
    1030:	2b00      	cmp	r3, #0
    1032:	d11a      	bne.n	106a <spi_write_buffer_wait+0x8e>
    1034:	4f54      	ldr	r7, [pc, #336]	; (1188 <spi_write_buffer_wait+0x1ac>)
				if (spi_is_ready_to_write(module)) {
    1036:	0020      	movs	r0, r4
    1038:	4b54      	ldr	r3, [pc, #336]	; (118c <spi_write_buffer_wait+0x1b0>)
    103a:	4798      	blx	r3
    103c:	2800      	cmp	r0, #0
    103e:	d102      	bne.n	1046 <spi_write_buffer_wait+0x6a>
    1040:	3f01      	subs	r7, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1042:	2f00      	cmp	r7, #0
    1044:	d1f7      	bne.n	1036 <spi_write_buffer_wait+0x5a>
			if (spi_is_write_complete(module)) {
    1046:	0020      	movs	r0, r4
    1048:	4b4d      	ldr	r3, [pc, #308]	; (1180 <spi_write_buffer_wait+0x1a4>)
    104a:	4798      	blx	r3
    104c:	2800      	cmp	r0, #0
    104e:	d005      	beq.n	105c <spi_write_buffer_wait+0x80>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1050:	2202      	movs	r2, #2
					return STATUS_ABORTED;
    1052:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    1054:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1056:	761a      	strb	r2, [r3, #24]
}
    1058:	b007      	add	sp, #28
    105a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    105c:	0020      	movs	r0, r4
    105e:	4b4b      	ldr	r3, [pc, #300]	; (118c <spi_write_buffer_wait+0x1b0>)
    1060:	4798      	blx	r3
    1062:	2800      	cmp	r0, #0
    1064:	d101      	bne.n	106a <spi_write_buffer_wait+0x8e>
					return STATUS_ERR_TIMEOUT;
    1066:	3012      	adds	r0, #18
    1068:	e7f6      	b.n	1058 <spi_write_buffer_wait+0x7c>
		while (!spi_is_ready_to_write(module)) {
    106a:	0020      	movs	r0, r4
    106c:	4b47      	ldr	r3, [pc, #284]	; (118c <spi_write_buffer_wait+0x1b0>)
    106e:	4798      	blx	r3
    1070:	2800      	cmp	r0, #0
    1072:	d0fa      	beq.n	106a <spi_write_buffer_wait+0x8e>
		uint16_t data_to_send = tx_data[tx_pos++];
    1074:	9a02      	ldr	r2, [sp, #8]
    1076:	1c73      	adds	r3, r6, #1
    1078:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    107a:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    107c:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    107e:	2a01      	cmp	r2, #1
    1080:	d040      	beq.n	1104 <spi_write_buffer_wait+0x128>
		uint16_t data_to_send = tx_data[tx_pos++];
    1082:	001e      	movs	r6, r3
    1084:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    1086:	4b42      	ldr	r3, [pc, #264]	; (1190 <spi_write_buffer_wait+0x1b4>)
    1088:	0020      	movs	r0, r4
    108a:	4798      	blx	r3
		if (module->receiver_enabled) {
    108c:	79e2      	ldrb	r2, [r4, #7]
    108e:	1e6b      	subs	r3, r5, #1
    1090:	b29b      	uxth	r3, r3
    1092:	2a00      	cmp	r2, #0
    1094:	d04c      	beq.n	1130 <spi_write_buffer_wait+0x154>
			if (module->mode == SPI_MODE_SLAVE) {
    1096:	7963      	ldrb	r3, [r4, #5]
    1098:	2b00      	cmp	r3, #0
    109a:	d124      	bne.n	10e6 <spi_write_buffer_wait+0x10a>
    109c:	4b3a      	ldr	r3, [pc, #232]	; (1188 <spi_write_buffer_wait+0x1ac>)
    109e:	9303      	str	r3, [sp, #12]
					if (length && spi_is_ready_to_write(module)) {
    10a0:	2d00      	cmp	r5, #0
    10a2:	d012      	beq.n	10ca <spi_write_buffer_wait+0xee>
    10a4:	0020      	movs	r0, r4
    10a6:	4b39      	ldr	r3, [pc, #228]	; (118c <spi_write_buffer_wait+0x1b0>)
    10a8:	4798      	blx	r3
    10aa:	2800      	cmp	r0, #0
    10ac:	d00d      	beq.n	10ca <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    10ae:	9b02      	ldr	r3, [sp, #8]
    10b0:	1c77      	adds	r7, r6, #1
    10b2:	5d99      	ldrb	r1, [r3, r6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10b4:	79a3      	ldrb	r3, [r4, #6]
						data_to_send = tx_data[tx_pos++];
    10b6:	b2bf      	uxth	r7, r7
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10b8:	2b01      	cmp	r3, #1
    10ba:	d02a      	beq.n	1112 <spi_write_buffer_wait+0x136>
						data_to_send = tx_data[tx_pos++];
    10bc:	b289      	uxth	r1, r1
						spi_write(module, data_to_send);
    10be:	0020      	movs	r0, r4
    10c0:	4b33      	ldr	r3, [pc, #204]	; (1190 <spi_write_buffer_wait+0x1b4>)
    10c2:	4798      	blx	r3
						length--;
    10c4:	003e      	movs	r6, r7
    10c6:	3d01      	subs	r5, #1
    10c8:	b2ad      	uxth	r5, r5
					if (spi_is_ready_to_read(module)) {
    10ca:	0020      	movs	r0, r4
    10cc:	4f31      	ldr	r7, [pc, #196]	; (1194 <spi_write_buffer_wait+0x1b8>)
    10ce:	47b8      	blx	r7
    10d0:	2800      	cmp	r0, #0
    10d2:	d025      	beq.n	1120 <spi_write_buffer_wait+0x144>
				if (spi_is_write_complete(module)) {
    10d4:	0020      	movs	r0, r4
    10d6:	4b2a      	ldr	r3, [pc, #168]	; (1180 <spi_write_buffer_wait+0x1a4>)
    10d8:	4798      	blx	r3
    10da:	2800      	cmp	r0, #0
    10dc:	d1b8      	bne.n	1050 <spi_write_buffer_wait+0x74>
				if (!spi_is_ready_to_read(module)) {
    10de:	0020      	movs	r0, r4
    10e0:	47b8      	blx	r7
    10e2:	2800      	cmp	r0, #0
    10e4:	d022      	beq.n	112c <spi_write_buffer_wait+0x150>
			while (!spi_is_ready_to_read(module)) {
    10e6:	0020      	movs	r0, r4
    10e8:	4b2a      	ldr	r3, [pc, #168]	; (1194 <spi_write_buffer_wait+0x1b8>)
    10ea:	4798      	blx	r3
    10ec:	2800      	cmp	r0, #0
    10ee:	d0fa      	beq.n	10e6 <spi_write_buffer_wait+0x10a>
			spi_read(module, &flush);
    10f0:	ab04      	add	r3, sp, #16
    10f2:	1d99      	adds	r1, r3, #6
    10f4:	0020      	movs	r0, r4
    10f6:	4b28      	ldr	r3, [pc, #160]	; (1198 <spi_write_buffer_wait+0x1bc>)
    10f8:	4798      	blx	r3
			flush_length--;
    10fa:	9b01      	ldr	r3, [sp, #4]
    10fc:	3b01      	subs	r3, #1
    10fe:	b29b      	uxth	r3, r3
    1100:	9301      	str	r3, [sp, #4]
    1102:	e786      	b.n	1012 <spi_write_buffer_wait+0x36>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1104:	9a02      	ldr	r2, [sp, #8]
    1106:	3602      	adds	r6, #2
    1108:	5cd3      	ldrb	r3, [r2, r3]
    110a:	b2b6      	uxth	r6, r6
    110c:	021b      	lsls	r3, r3, #8
    110e:	4319      	orrs	r1, r3
    1110:	e7b9      	b.n	1086 <spi_write_buffer_wait+0xaa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1112:	9b02      	ldr	r3, [sp, #8]
    1114:	3602      	adds	r6, #2
    1116:	5ddb      	ldrb	r3, [r3, r7]
    1118:	b2b7      	uxth	r7, r6
    111a:	021b      	lsls	r3, r3, #8
    111c:	4319      	orrs	r1, r3
    111e:	e7ce      	b.n	10be <spi_write_buffer_wait+0xe2>
    1120:	9b03      	ldr	r3, [sp, #12]
    1122:	3b01      	subs	r3, #1
    1124:	9303      	str	r3, [sp, #12]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1126:	2b00      	cmp	r3, #0
    1128:	d1ba      	bne.n	10a0 <spi_write_buffer_wait+0xc4>
    112a:	e7d3      	b.n	10d4 <spi_write_buffer_wait+0xf8>
					return STATUS_ERR_TIMEOUT;
    112c:	2012      	movs	r0, #18
    112e:	e793      	b.n	1058 <spi_write_buffer_wait+0x7c>
		if (module->receiver_enabled) {
    1130:	001d      	movs	r5, r3
    1132:	e770      	b.n	1016 <spi_write_buffer_wait+0x3a>
		while (!spi_is_write_complete(module)) {
    1134:	0020      	movs	r0, r4
    1136:	4b12      	ldr	r3, [pc, #72]	; (1180 <spi_write_buffer_wait+0x1a4>)
    1138:	4798      	blx	r3
    113a:	2800      	cmp	r0, #0
    113c:	d0fa      	beq.n	1134 <spi_write_buffer_wait+0x158>
    113e:	e771      	b.n	1024 <spi_write_buffer_wait+0x48>
		if (module->receiver_enabled) {
    1140:	79e3      	ldrb	r3, [r4, #7]
    1142:	2b00      	cmp	r3, #0
    1144:	d100      	bne.n	1148 <spi_write_buffer_wait+0x16c>
    1146:	e771      	b.n	102c <spi_write_buffer_wait+0x50>
			while (flush_length) {
    1148:	9b01      	ldr	r3, [sp, #4]
    114a:	2b00      	cmp	r3, #0
    114c:	d100      	bne.n	1150 <spi_write_buffer_wait+0x174>
    114e:	e76d      	b.n	102c <spi_write_buffer_wait+0x50>
    1150:	4d0d      	ldr	r5, [pc, #52]	; (1188 <spi_write_buffer_wait+0x1ac>)
					if (spi_is_ready_to_read(module)) {
    1152:	0020      	movs	r0, r4
    1154:	4e0f      	ldr	r6, [pc, #60]	; (1194 <spi_write_buffer_wait+0x1b8>)
    1156:	47b0      	blx	r6
    1158:	2800      	cmp	r0, #0
    115a:	d102      	bne.n	1162 <spi_write_buffer_wait+0x186>
    115c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    115e:	2d00      	cmp	r5, #0
    1160:	d1f7      	bne.n	1152 <spi_write_buffer_wait+0x176>
				if (!spi_is_ready_to_read(module)) {
    1162:	0020      	movs	r0, r4
    1164:	47b0      	blx	r6
    1166:	2800      	cmp	r0, #0
    1168:	d100      	bne.n	116c <spi_write_buffer_wait+0x190>
    116a:	e77c      	b.n	1066 <spi_write_buffer_wait+0x8a>
				spi_read(module, &flush);
    116c:	ab04      	add	r3, sp, #16
    116e:	1d99      	adds	r1, r3, #6
    1170:	0020      	movs	r0, r4
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <spi_write_buffer_wait+0x1bc>)
    1174:	4798      	blx	r3
				flush_length--;
    1176:	9b01      	ldr	r3, [sp, #4]
    1178:	3b01      	subs	r3, #1
    117a:	b29b      	uxth	r3, r3
    117c:	9301      	str	r3, [sp, #4]
    117e:	e7e3      	b.n	1148 <spi_write_buffer_wait+0x16c>
    1180:	00000bcd 	.word	0x00000bcd
    1184:	0000ffff 	.word	0x0000ffff
    1188:	00002711 	.word	0x00002711
    118c:	00000bd7 	.word	0x00000bd7
    1190:	00000bed 	.word	0x00000bed
    1194:	00000be1 	.word	0x00000be1
    1198:	00000c0d 	.word	0x00000c0d

0000119c <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    119c:	b5f0      	push	{r4, r5, r6, r7, lr}
    119e:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    11a0:	0003      	movs	r3, r0
{
    11a2:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    11a4:	2005      	movs	r0, #5
{
    11a6:	b089      	sub	sp, #36	; 0x24
    11a8:	9102      	str	r1, [sp, #8]
    11aa:	9203      	str	r2, [sp, #12]
	if (module->status == STATUS_BUSY) {
    11ac:	3338      	adds	r3, #56	; 0x38
    11ae:	781b      	ldrb	r3, [r3, #0]
    11b0:	4283      	cmp	r3, r0
    11b2:	d037      	beq.n	1224 <spi_transceive_buffer_wait+0x88>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11b4:	3012      	adds	r0, #18
	if (length == 0) {
    11b6:	2e00      	cmp	r6, #0
    11b8:	d034      	beq.n	1224 <spi_transceive_buffer_wait+0x88>
	}

	if (!(module->receiver_enabled)) {
    11ba:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    11bc:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    11be:	2b00      	cmp	r3, #0
    11c0:	d030      	beq.n	1224 <spi_transceive_buffer_wait+0x88>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    11c2:	7963      	ldrb	r3, [r4, #5]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d107      	bne.n	11d8 <spi_transceive_buffer_wait+0x3c>
    11c8:	0020      	movs	r0, r4
    11ca:	4b6e      	ldr	r3, [pc, #440]	; (1384 <spi_transceive_buffer_wait+0x1e8>)
    11cc:	4798      	blx	r3
    11ce:	2800      	cmp	r0, #0
    11d0:	d002      	beq.n	11d8 <spi_transceive_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    11d2:	2302      	movs	r3, #2
    11d4:	6822      	ldr	r2, [r4, #0]
    11d6:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    11d8:	2500      	movs	r5, #0
    11da:	002f      	movs	r7, r5
    11dc:	9601      	str	r6, [sp, #4]
	while (length--) {
    11de:	1e73      	subs	r3, r6, #1
    11e0:	b29b      	uxth	r3, r3
    11e2:	9304      	str	r3, [sp, #16]
    11e4:	7963      	ldrb	r3, [r4, #5]
    11e6:	2e00      	cmp	r6, #0
    11e8:	d108      	bne.n	11fc <spi_transceive_buffer_wait+0x60>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    11ea:	2b01      	cmp	r3, #1
    11ec:	d100      	bne.n	11f0 <spi_transceive_buffer_wait+0x54>
    11ee:	e092      	b.n	1316 <spi_transceive_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    11f0:	7963      	ldrb	r3, [r4, #5]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d100      	bne.n	11f8 <spi_transceive_buffer_wait+0x5c>
    11f6:	e0be      	b.n	1376 <spi_transceive_buffer_wait+0x1da>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    11f8:	2000      	movs	r0, #0
    11fa:	e013      	b.n	1224 <spi_transceive_buffer_wait+0x88>
		if (module->mode == SPI_MODE_SLAVE) {
    11fc:	2b00      	cmp	r3, #0
    11fe:	d119      	bne.n	1234 <spi_transceive_buffer_wait+0x98>
    1200:	4e61      	ldr	r6, [pc, #388]	; (1388 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_write(module)) {
    1202:	0020      	movs	r0, r4
    1204:	4b61      	ldr	r3, [pc, #388]	; (138c <spi_transceive_buffer_wait+0x1f0>)
    1206:	4798      	blx	r3
    1208:	2800      	cmp	r0, #0
    120a:	d102      	bne.n	1212 <spi_transceive_buffer_wait+0x76>
    120c:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    120e:	2e00      	cmp	r6, #0
    1210:	d1f7      	bne.n	1202 <spi_transceive_buffer_wait+0x66>
			if (spi_is_write_complete(module)) {
    1212:	0020      	movs	r0, r4
    1214:	4b5b      	ldr	r3, [pc, #364]	; (1384 <spi_transceive_buffer_wait+0x1e8>)
    1216:	4798      	blx	r3
    1218:	2800      	cmp	r0, #0
    121a:	d005      	beq.n	1228 <spi_transceive_buffer_wait+0x8c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    121c:	2202      	movs	r2, #2
				return STATUS_ABORTED;
    121e:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    1220:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1222:	761a      	strb	r2, [r3, #24]
}
    1224:	b009      	add	sp, #36	; 0x24
    1226:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    1228:	0020      	movs	r0, r4
    122a:	4b58      	ldr	r3, [pc, #352]	; (138c <spi_transceive_buffer_wait+0x1f0>)
    122c:	4798      	blx	r3
    122e:	2800      	cmp	r0, #0
    1230:	d100      	bne.n	1234 <spi_transceive_buffer_wait+0x98>
    1232:	e0a4      	b.n	137e <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_write(module)) {
    1234:	0020      	movs	r0, r4
    1236:	4b55      	ldr	r3, [pc, #340]	; (138c <spi_transceive_buffer_wait+0x1f0>)
    1238:	4798      	blx	r3
    123a:	2800      	cmp	r0, #0
    123c:	d0fa      	beq.n	1234 <spi_transceive_buffer_wait+0x98>
		uint16_t data_to_send = tx_data[tx_pos++];
    123e:	9b02      	ldr	r3, [sp, #8]
    1240:	1c7e      	adds	r6, r7, #1
    1242:	5dd9      	ldrb	r1, [r3, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1244:	79a3      	ldrb	r3, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    1246:	b2b6      	uxth	r6, r6
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1248:	2b01      	cmp	r3, #1
    124a:	d050      	beq.n	12ee <spi_transceive_buffer_wait+0x152>
		uint16_t data_to_send = tx_data[tx_pos++];
    124c:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    124e:	4b50      	ldr	r3, [pc, #320]	; (1390 <spi_transceive_buffer_wait+0x1f4>)
    1250:	0020      	movs	r0, r4
    1252:	4798      	blx	r3
		if (module->mode == SPI_MODE_SLAVE) {
    1254:	7963      	ldrb	r3, [r4, #5]
    1256:	2b00      	cmp	r3, #0
    1258:	d125      	bne.n	12a6 <spi_transceive_buffer_wait+0x10a>
    125a:	4b4b      	ldr	r3, [pc, #300]	; (1388 <spi_transceive_buffer_wait+0x1ec>)
    125c:	9305      	str	r3, [sp, #20]
				if (spi_is_ready_to_write(module)) {
    125e:	0020      	movs	r0, r4
    1260:	4b4a      	ldr	r3, [pc, #296]	; (138c <spi_transceive_buffer_wait+0x1f0>)
    1262:	4798      	blx	r3
    1264:	2800      	cmp	r0, #0
    1266:	d00f      	beq.n	1288 <spi_transceive_buffer_wait+0xec>
					data_to_send = tx_data[tx_pos++];
    1268:	9b02      	ldr	r3, [sp, #8]
    126a:	1c77      	adds	r7, r6, #1
    126c:	5d99      	ldrb	r1, [r3, r6]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    126e:	79a3      	ldrb	r3, [r4, #6]
					data_to_send = tx_data[tx_pos++];
    1270:	b2bf      	uxth	r7, r7
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1272:	2b01      	cmp	r3, #1
    1274:	d042      	beq.n	12fc <spi_transceive_buffer_wait+0x160>
					data_to_send = tx_data[tx_pos++];
    1276:	b289      	uxth	r1, r1
					length--;
    1278:	003e      	movs	r6, r7
					spi_write(module, data_to_send);
    127a:	4b45      	ldr	r3, [pc, #276]	; (1390 <spi_transceive_buffer_wait+0x1f4>)
    127c:	0020      	movs	r0, r4
    127e:	4798      	blx	r3
					length--;
    1280:	9b04      	ldr	r3, [sp, #16]
    1282:	3b01      	subs	r3, #1
    1284:	b29b      	uxth	r3, r3
    1286:	9304      	str	r3, [sp, #16]
				if (spi_is_ready_to_read(module)) {
    1288:	0020      	movs	r0, r4
    128a:	4b42      	ldr	r3, [pc, #264]	; (1394 <spi_transceive_buffer_wait+0x1f8>)
    128c:	4798      	blx	r3
    128e:	2800      	cmp	r0, #0
    1290:	d03b      	beq.n	130a <spi_transceive_buffer_wait+0x16e>
			if (spi_is_write_complete(module)) {
    1292:	0020      	movs	r0, r4
    1294:	4b3b      	ldr	r3, [pc, #236]	; (1384 <spi_transceive_buffer_wait+0x1e8>)
    1296:	4798      	blx	r3
    1298:	2800      	cmp	r0, #0
    129a:	d1bf      	bne.n	121c <spi_transceive_buffer_wait+0x80>
			if (!spi_is_ready_to_read(module)) {
    129c:	0020      	movs	r0, r4
    129e:	4b3d      	ldr	r3, [pc, #244]	; (1394 <spi_transceive_buffer_wait+0x1f8>)
    12a0:	4798      	blx	r3
    12a2:	2800      	cmp	r0, #0
    12a4:	d06b      	beq.n	137e <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_read(module)) {
    12a6:	0020      	movs	r0, r4
    12a8:	4b3a      	ldr	r3, [pc, #232]	; (1394 <spi_transceive_buffer_wait+0x1f8>)
    12aa:	4798      	blx	r3
    12ac:	2800      	cmp	r0, #0
    12ae:	d0fa      	beq.n	12a6 <spi_transceive_buffer_wait+0x10a>
		uint16_t received_data = 0;
    12b0:	ab06      	add	r3, sp, #24
    12b2:	1d9f      	adds	r7, r3, #6
    12b4:	2300      	movs	r3, #0
    12b6:	803b      	strh	r3, [r7, #0]
		rx_length--;
    12b8:	9b01      	ldr	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    12ba:	0039      	movs	r1, r7
		rx_length--;
    12bc:	3b01      	subs	r3, #1
    12be:	b29b      	uxth	r3, r3
    12c0:	9301      	str	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    12c2:	0020      	movs	r0, r4
    12c4:	4b34      	ldr	r3, [pc, #208]	; (1398 <spi_transceive_buffer_wait+0x1fc>)
    12c6:	4798      	blx	r3
		if (retval != STATUS_OK) {
    12c8:	2800      	cmp	r0, #0
    12ca:	d1ab      	bne.n	1224 <spi_transceive_buffer_wait+0x88>
		rx_data[rx_pos++] = received_data;
    12cc:	9903      	ldr	r1, [sp, #12]
    12ce:	883a      	ldrh	r2, [r7, #0]
    12d0:	1c6b      	adds	r3, r5, #1
    12d2:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12d4:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    12d6:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12d8:	2901      	cmp	r1, #1
    12da:	d104      	bne.n	12e6 <spi_transceive_buffer_wait+0x14a>
			rx_data[rx_pos++] = (received_data >> 8);
    12dc:	9903      	ldr	r1, [sp, #12]
    12de:	3502      	adds	r5, #2
    12e0:	0a12      	lsrs	r2, r2, #8
    12e2:	54ca      	strb	r2, [r1, r3]
    12e4:	b2ab      	uxth	r3, r5
    12e6:	0037      	movs	r7, r6
    12e8:	001d      	movs	r5, r3
    12ea:	9e04      	ldr	r6, [sp, #16]
    12ec:	e777      	b.n	11de <spi_transceive_buffer_wait+0x42>
			data_to_send |= (tx_data[tx_pos++] << 8);
    12ee:	9b02      	ldr	r3, [sp, #8]
    12f0:	3702      	adds	r7, #2
    12f2:	5d9b      	ldrb	r3, [r3, r6]
    12f4:	b2be      	uxth	r6, r7
    12f6:	021b      	lsls	r3, r3, #8
    12f8:	4319      	orrs	r1, r3
    12fa:	e7a8      	b.n	124e <spi_transceive_buffer_wait+0xb2>
						data_to_send |= (tx_data[tx_pos++] << 8);
    12fc:	9b02      	ldr	r3, [sp, #8]
    12fe:	3602      	adds	r6, #2
    1300:	5ddb      	ldrb	r3, [r3, r7]
    1302:	b2b7      	uxth	r7, r6
    1304:	021b      	lsls	r3, r3, #8
    1306:	4319      	orrs	r1, r3
    1308:	e7b6      	b.n	1278 <spi_transceive_buffer_wait+0xdc>
    130a:	9b05      	ldr	r3, [sp, #20]
    130c:	3b01      	subs	r3, #1
    130e:	9305      	str	r3, [sp, #20]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1310:	2b00      	cmp	r3, #0
    1312:	d1a4      	bne.n	125e <spi_transceive_buffer_wait+0xc2>
    1314:	e7bd      	b.n	1292 <spi_transceive_buffer_wait+0xf6>
		while (!spi_is_write_complete(module)) {
    1316:	0020      	movs	r0, r4
    1318:	4b1a      	ldr	r3, [pc, #104]	; (1384 <spi_transceive_buffer_wait+0x1e8>)
    131a:	4798      	blx	r3
    131c:	2800      	cmp	r0, #0
    131e:	d0fa      	beq.n	1316 <spi_transceive_buffer_wait+0x17a>
    1320:	e766      	b.n	11f0 <spi_transceive_buffer_wait+0x54>
    1322:	4e19      	ldr	r6, [pc, #100]	; (1388 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_read(module)) {
    1324:	0020      	movs	r0, r4
    1326:	4f1b      	ldr	r7, [pc, #108]	; (1394 <spi_transceive_buffer_wait+0x1f8>)
    1328:	47b8      	blx	r7
    132a:	2800      	cmp	r0, #0
    132c:	d102      	bne.n	1334 <spi_transceive_buffer_wait+0x198>
    132e:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1330:	2e00      	cmp	r6, #0
    1332:	d1f7      	bne.n	1324 <spi_transceive_buffer_wait+0x188>
			if (!spi_is_ready_to_read(module)) {
    1334:	0020      	movs	r0, r4
    1336:	47b8      	blx	r7
    1338:	2800      	cmp	r0, #0
    133a:	d020      	beq.n	137e <spi_transceive_buffer_wait+0x1e2>
			uint16_t received_data = 0;
    133c:	ab06      	add	r3, sp, #24
    133e:	1d9e      	adds	r6, r3, #6
    1340:	2300      	movs	r3, #0
    1342:	8033      	strh	r3, [r6, #0]
			rx_length--;
    1344:	9b01      	ldr	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    1346:	0031      	movs	r1, r6
			rx_length--;
    1348:	3b01      	subs	r3, #1
    134a:	b29b      	uxth	r3, r3
    134c:	9301      	str	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    134e:	0020      	movs	r0, r4
    1350:	4b11      	ldr	r3, [pc, #68]	; (1398 <spi_transceive_buffer_wait+0x1fc>)
    1352:	4798      	blx	r3
			if (retval != STATUS_OK) {
    1354:	2800      	cmp	r0, #0
    1356:	d000      	beq.n	135a <spi_transceive_buffer_wait+0x1be>
    1358:	e764      	b.n	1224 <spi_transceive_buffer_wait+0x88>
			rx_data[rx_pos++] = received_data;
    135a:	9903      	ldr	r1, [sp, #12]
    135c:	8832      	ldrh	r2, [r6, #0]
    135e:	1c6b      	adds	r3, r5, #1
    1360:	554a      	strb	r2, [r1, r5]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1362:	79a1      	ldrb	r1, [r4, #6]
			rx_data[rx_pos++] = received_data;
    1364:	b29b      	uxth	r3, r3
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1366:	2901      	cmp	r1, #1
    1368:	d104      	bne.n	1374 <spi_transceive_buffer_wait+0x1d8>
				rx_data[rx_pos++] = (received_data >> 8);
    136a:	9903      	ldr	r1, [sp, #12]
    136c:	3502      	adds	r5, #2
    136e:	0a12      	lsrs	r2, r2, #8
    1370:	54ca      	strb	r2, [r1, r3]
    1372:	b2ab      	uxth	r3, r5
    1374:	001d      	movs	r5, r3
		while (rx_length) {
    1376:	9b01      	ldr	r3, [sp, #4]
    1378:	2b00      	cmp	r3, #0
    137a:	d1d2      	bne.n	1322 <spi_transceive_buffer_wait+0x186>
    137c:	e73c      	b.n	11f8 <spi_transceive_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    137e:	2012      	movs	r0, #18
    1380:	e750      	b.n	1224 <spi_transceive_buffer_wait+0x88>
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	00000bcd 	.word	0x00000bcd
    1388:	00002711 	.word	0x00002711
    138c:	00000bd7 	.word	0x00000bd7
    1390:	00000bed 	.word	0x00000bed
    1394:	00000be1 	.word	0x00000be1
    1398:	00000c0d 	.word	0x00000c0d

0000139c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    139e:	4b7c      	ldr	r3, [pc, #496]	; (1590 <_spi_interrupt_handler+0x1f4>)
    13a0:	0080      	lsls	r0, r0, #2
    13a2:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    13a4:	0023      	movs	r3, r4
    13a6:	0022      	movs	r2, r4
    13a8:	3337      	adds	r3, #55	; 0x37
    13aa:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13ac:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	7816      	ldrb	r6, [r2, #0]
    13b2:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    13b4:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    13b6:	7daf      	ldrb	r7, [r5, #22]
    13b8:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    13ba:	07fb      	lsls	r3, r7, #31
    13bc:	d539      	bpl.n	1432 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    13be:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    13c0:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    13c2:	2a01      	cmp	r2, #1
    13c4:	d133      	bne.n	142e <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    13c6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    13c8:	2b00      	cmp	r3, #0
    13ca:	d10d      	bne.n	13e8 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
    13cc:	4b71      	ldr	r3, [pc, #452]	; (1594 <_spi_interrupt_handler+0x1f8>)
    13ce:	881b      	ldrh	r3, [r3, #0]
    13d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    13d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13d4:	3b01      	subs	r3, #1
    13d6:	b29b      	uxth	r3, r3
    13d8:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    13da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13dc:	2b00      	cmp	r3, #0
    13de:	d100      	bne.n	13e2 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    13e0:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    13e2:	7963      	ldrb	r3, [r4, #5]
		if (0
    13e4:	2b01      	cmp	r3, #1
    13e6:	d122      	bne.n	142e <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
    13e8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    13ea:	2b00      	cmp	r3, #0
    13ec:	d021      	beq.n	1432 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    13ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13f0:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    13f2:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    13f4:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    13f6:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13f8:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    13fa:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13fc:	2801      	cmp	r0, #1
    13fe:	d100      	bne.n	1402 <_spi_interrupt_handler+0x66>
    1400:	e074      	b.n	14ec <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1402:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1404:	05db      	lsls	r3, r3, #23
    1406:	0ddb      	lsrs	r3, r3, #23
    1408:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    140a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    140c:	3b01      	subs	r3, #1
    140e:	b29b      	uxth	r3, r3
    1410:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1412:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1414:	2b00      	cmp	r3, #0
    1416:	d10c      	bne.n	1432 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1418:	3301      	adds	r3, #1
    141a:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    141c:	7a63      	ldrb	r3, [r4, #9]
    141e:	2b01      	cmp	r3, #1
    1420:	d107      	bne.n	1432 <_spi_interrupt_handler+0x96>
    1422:	79e3      	ldrb	r3, [r4, #7]
    1424:	2b00      	cmp	r3, #0
    1426:	d104      	bne.n	1432 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1428:	3302      	adds	r3, #2
    142a:	75ab      	strb	r3, [r5, #22]
    142c:	e001      	b.n	1432 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
    142e:	2b00      	cmp	r3, #0
    1430:	d0da      	beq.n	13e8 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1432:	2104      	movs	r1, #4
    1434:	420f      	tst	r7, r1
    1436:	d015      	beq.n	1464 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1438:	8b6b      	ldrh	r3, [r5, #26]
    143a:	420b      	tst	r3, r1
    143c:	d05c      	beq.n	14f8 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
    143e:	7a63      	ldrb	r3, [r4, #9]
    1440:	2b01      	cmp	r3, #1
    1442:	d00c      	beq.n	145e <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1444:	0023      	movs	r3, r4
    1446:	221e      	movs	r2, #30
    1448:	3338      	adds	r3, #56	; 0x38
    144a:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    144c:	2303      	movs	r3, #3
    144e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1450:	3302      	adds	r3, #2
    1452:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1454:	0733      	lsls	r3, r6, #28
    1456:	d502      	bpl.n	145e <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1458:	0020      	movs	r0, r4
    145a:	69a3      	ldr	r3, [r4, #24]
    145c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    145e:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1460:	2304      	movs	r3, #4
    1462:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1464:	2202      	movs	r2, #2
    1466:	4217      	tst	r7, r2
    1468:	d027      	beq.n	14ba <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    146a:	7963      	ldrb	r3, [r4, #5]
    146c:	2b00      	cmp	r3, #0
    146e:	d10e      	bne.n	148e <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1470:	2107      	movs	r1, #7
    1472:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1474:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1476:	3201      	adds	r2, #1
    1478:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    147a:	0022      	movs	r2, r4
    147c:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    147e:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1480:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1482:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    1484:	06f3      	lsls	r3, r6, #27
    1486:	d502      	bpl.n	148e <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1488:	0020      	movs	r0, r4
    148a:	69e3      	ldr	r3, [r4, #28]
    148c:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    148e:	7963      	ldrb	r3, [r4, #5]
    1490:	2b01      	cmp	r3, #1
    1492:	d112      	bne.n	14ba <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1494:	7a63      	ldrb	r3, [r4, #9]
    1496:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1498:	2b01      	cmp	r3, #1
    149a:	d10e      	bne.n	14ba <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    149c:	79e2      	ldrb	r2, [r4, #7]
    149e:	2a00      	cmp	r2, #0
    14a0:	d10b      	bne.n	14ba <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    14a2:	2102      	movs	r1, #2
    14a4:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    14a6:	3101      	adds	r1, #1
    14a8:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    14aa:	0021      	movs	r1, r4
    14ac:	3138      	adds	r1, #56	; 0x38
    14ae:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    14b0:	421e      	tst	r6, r3
    14b2:	d002      	beq.n	14ba <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    14b4:	0020      	movs	r0, r4
    14b6:	68e3      	ldr	r3, [r4, #12]
    14b8:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    14ba:	2308      	movs	r3, #8
    14bc:	421f      	tst	r7, r3
    14be:	d009      	beq.n	14d4 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    14c0:	7962      	ldrb	r2, [r4, #5]
    14c2:	2a00      	cmp	r2, #0
    14c4:	d106      	bne.n	14d4 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    14c6:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    14c8:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    14ca:	06b3      	lsls	r3, r6, #26
    14cc:	d502      	bpl.n	14d4 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    14ce:	0020      	movs	r0, r4
    14d0:	6a23      	ldr	r3, [r4, #32]
    14d2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    14d4:	b27f      	sxtb	r7, r7
    14d6:	2f00      	cmp	r7, #0
    14d8:	da07      	bge.n	14ea <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    14da:	2380      	movs	r3, #128	; 0x80
    14dc:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    14de:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    14e0:	0673      	lsls	r3, r6, #25
    14e2:	d502      	bpl.n	14ea <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    14e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14e6:	0020      	movs	r0, r4
    14e8:	4798      	blx	r3
		}
	}
#  endif
}
    14ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    14ec:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    14ee:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    14f0:	0200      	lsls	r0, r0, #8
    14f2:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    14f4:	62e1      	str	r1, [r4, #44]	; 0x2c
    14f6:	e785      	b.n	1404 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    14f8:	7a62      	ldrb	r2, [r4, #9]
    14fa:	6823      	ldr	r3, [r4, #0]
    14fc:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    14fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    1500:	2a01      	cmp	r2, #1
    1502:	d113      	bne.n	152c <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    1504:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1506:	3b01      	subs	r3, #1
    1508:	b29b      	uxth	r3, r3
    150a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    150c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    150e:	b29b      	uxth	r3, r3
    1510:	2b00      	cmp	r3, #0
    1512:	d1a7      	bne.n	1464 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1514:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    1516:	0021      	movs	r1, r4
    1518:	3138      	adds	r1, #56	; 0x38
    151a:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    151c:	3303      	adds	r3, #3
    151e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1520:	4216      	tst	r6, r2
    1522:	d09f      	beq.n	1464 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1524:	0020      	movs	r0, r4
    1526:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1528:	4798      	blx	r3
    152a:	e79b      	b.n	1464 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    152c:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    152e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1530:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1532:	b2da      	uxtb	r2, r3
    1534:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1536:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1538:	1c51      	adds	r1, r2, #1
    153a:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    153c:	79a1      	ldrb	r1, [r4, #6]
    153e:	2901      	cmp	r1, #1
    1540:	d104      	bne.n	154c <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1542:	0a1b      	lsrs	r3, r3, #8
    1544:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1548:	3301      	adds	r3, #1
    154a:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    154c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    154e:	3b01      	subs	r3, #1
    1550:	b29b      	uxth	r3, r3
    1552:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1554:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1556:	b29b      	uxth	r3, r3
    1558:	2b00      	cmp	r3, #0
    155a:	d000      	beq.n	155e <_spi_interrupt_handler+0x1c2>
    155c:	e782      	b.n	1464 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    155e:	0022      	movs	r2, r4
    1560:	3238      	adds	r2, #56	; 0x38
    1562:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1564:	3304      	adds	r3, #4
    1566:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1568:	7a62      	ldrb	r2, [r4, #9]
    156a:	2a02      	cmp	r2, #2
    156c:	d105      	bne.n	157a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    156e:	421e      	tst	r6, r3
    1570:	d100      	bne.n	1574 <_spi_interrupt_handler+0x1d8>
    1572:	e777      	b.n	1464 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1574:	0020      	movs	r0, r4
    1576:	6963      	ldr	r3, [r4, #20]
    1578:	e7d6      	b.n	1528 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    157a:	7a63      	ldrb	r3, [r4, #9]
    157c:	2b00      	cmp	r3, #0
    157e:	d000      	beq.n	1582 <_spi_interrupt_handler+0x1e6>
    1580:	e770      	b.n	1464 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1582:	07b3      	lsls	r3, r6, #30
    1584:	d400      	bmi.n	1588 <_spi_interrupt_handler+0x1ec>
    1586:	e76d      	b.n	1464 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1588:	0020      	movs	r0, r4
    158a:	6923      	ldr	r3, [r4, #16]
    158c:	e7cc      	b.n	1528 <_spi_interrupt_handler+0x18c>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000174 	.word	0x20000174
    1594:	20000170 	.word	0x20000170

00001598 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1598:	4770      	bx	lr
	...

0000159c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    159c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    159e:	4c09      	ldr	r4, [pc, #36]	; (15c4 <_sercom_set_handler+0x28>)
    15a0:	4a09      	ldr	r2, [pc, #36]	; (15c8 <_sercom_set_handler+0x2c>)
    15a2:	7823      	ldrb	r3, [r4, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d109      	bne.n	15bc <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    15a8:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15aa:	4f08      	ldr	r7, [pc, #32]	; (15cc <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    15ac:	4d08      	ldr	r5, [pc, #32]	; (15d0 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    15ae:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    15b0:	50ee      	str	r6, [r5, r3]
    15b2:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15b4:	2b18      	cmp	r3, #24
    15b6:	d1fa      	bne.n	15ae <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    15b8:	3b17      	subs	r3, #23
    15ba:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    15bc:	0080      	lsls	r0, r0, #2
    15be:	5011      	str	r1, [r2, r0]
}
    15c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	200000f6 	.word	0x200000f6
    15c8:	200000f8 	.word	0x200000f8
    15cc:	00001599 	.word	0x00001599
    15d0:	20000174 	.word	0x20000174

000015d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    15d4:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    15d6:	2309      	movs	r3, #9
    15d8:	466a      	mov	r2, sp
    15da:	7013      	strb	r3, [r2, #0]
    15dc:	3301      	adds	r3, #1
    15de:	7053      	strb	r3, [r2, #1]
    15e0:	3301      	adds	r3, #1
    15e2:	7093      	strb	r3, [r2, #2]
    15e4:	3301      	adds	r3, #1
    15e6:	70d3      	strb	r3, [r2, #3]
    15e8:	3301      	adds	r3, #1
    15ea:	7113      	strb	r3, [r2, #4]
    15ec:	3301      	adds	r3, #1
    15ee:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    15f0:	4b02      	ldr	r3, [pc, #8]	; (15fc <_sercom_get_interrupt_vector+0x28>)
    15f2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    15f4:	466b      	mov	r3, sp
    15f6:	5618      	ldrsb	r0, [r3, r0]
}
    15f8:	bd0e      	pop	{r1, r2, r3, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00000aad 	.word	0x00000aad

00001600 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1600:	b510      	push	{r4, lr}
    1602:	4b02      	ldr	r3, [pc, #8]	; (160c <SERCOM0_Handler+0xc>)
    1604:	2000      	movs	r0, #0
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	4798      	blx	r3
    160a:	bd10      	pop	{r4, pc}
    160c:	200000f8 	.word	0x200000f8

00001610 <SERCOM1_Handler>:
    1610:	b510      	push	{r4, lr}
    1612:	4b02      	ldr	r3, [pc, #8]	; (161c <SERCOM1_Handler+0xc>)
    1614:	2001      	movs	r0, #1
    1616:	685b      	ldr	r3, [r3, #4]
    1618:	4798      	blx	r3
    161a:	bd10      	pop	{r4, pc}
    161c:	200000f8 	.word	0x200000f8

00001620 <SERCOM2_Handler>:
    1620:	b510      	push	{r4, lr}
    1622:	4b02      	ldr	r3, [pc, #8]	; (162c <SERCOM2_Handler+0xc>)
    1624:	2002      	movs	r0, #2
    1626:	689b      	ldr	r3, [r3, #8]
    1628:	4798      	blx	r3
    162a:	bd10      	pop	{r4, pc}
    162c:	200000f8 	.word	0x200000f8

00001630 <SERCOM3_Handler>:
    1630:	b510      	push	{r4, lr}
    1632:	4b02      	ldr	r3, [pc, #8]	; (163c <SERCOM3_Handler+0xc>)
    1634:	2003      	movs	r0, #3
    1636:	68db      	ldr	r3, [r3, #12]
    1638:	4798      	blx	r3
    163a:	bd10      	pop	{r4, pc}
    163c:	200000f8 	.word	0x200000f8

00001640 <SERCOM4_Handler>:
    1640:	b510      	push	{r4, lr}
    1642:	4b02      	ldr	r3, [pc, #8]	; (164c <SERCOM4_Handler+0xc>)
    1644:	2004      	movs	r0, #4
    1646:	691b      	ldr	r3, [r3, #16]
    1648:	4798      	blx	r3
    164a:	bd10      	pop	{r4, pc}
    164c:	200000f8 	.word	0x200000f8

00001650 <SERCOM5_Handler>:
    1650:	b510      	push	{r4, lr}
    1652:	4b02      	ldr	r3, [pc, #8]	; (165c <SERCOM5_Handler+0xc>)
    1654:	2005      	movs	r0, #5
    1656:	695b      	ldr	r3, [r3, #20]
    1658:	4798      	blx	r3
    165a:	bd10      	pop	{r4, pc}
    165c:	200000f8 	.word	0x200000f8

00001660 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1660:	4770      	bx	lr
	...

00001664 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1664:	4b09      	ldr	r3, [pc, #36]	; (168c <cpu_irq_enter_critical+0x28>)
    1666:	6819      	ldr	r1, [r3, #0]
    1668:	2900      	cmp	r1, #0
    166a:	d10b      	bne.n	1684 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    166c:	f3ef 8010 	mrs	r0, PRIMASK
    1670:	4a07      	ldr	r2, [pc, #28]	; (1690 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    1672:	2800      	cmp	r0, #0
    1674:	d105      	bne.n	1682 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    1676:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1678:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    167c:	4905      	ldr	r1, [pc, #20]	; (1694 <cpu_irq_enter_critical+0x30>)
    167e:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1680:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1682:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1684:	681a      	ldr	r2, [r3, #0]
    1686:	3201      	adds	r2, #1
    1688:	601a      	str	r2, [r3, #0]
}
    168a:	4770      	bx	lr
    168c:	20000110 	.word	0x20000110
    1690:	20000114 	.word	0x20000114
    1694:	20000018 	.word	0x20000018

00001698 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1698:	4b08      	ldr	r3, [pc, #32]	; (16bc <cpu_irq_leave_critical+0x24>)
    169a:	681a      	ldr	r2, [r3, #0]
    169c:	3a01      	subs	r2, #1
    169e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	2b00      	cmp	r3, #0
    16a4:	d109      	bne.n	16ba <cpu_irq_leave_critical+0x22>
    16a6:	4b06      	ldr	r3, [pc, #24]	; (16c0 <cpu_irq_leave_critical+0x28>)
    16a8:	781b      	ldrb	r3, [r3, #0]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d005      	beq.n	16ba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    16ae:	2201      	movs	r2, #1
    16b0:	4b04      	ldr	r3, [pc, #16]	; (16c4 <cpu_irq_leave_critical+0x2c>)
    16b2:	701a      	strb	r2, [r3, #0]
    16b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    16b8:	b662      	cpsie	i
	}
}
    16ba:	4770      	bx	lr
    16bc:	20000110 	.word	0x20000110
    16c0:	20000114 	.word	0x20000114
    16c4:	20000018 	.word	0x20000018

000016c8 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16c8:	2310      	movs	r3, #16
    16ca:	4902      	ldr	r1, [pc, #8]	; (16d4 <_system_dfll_wait_for_sync+0xc>)
    16cc:	68ca      	ldr	r2, [r1, #12]
    16ce:	421a      	tst	r2, r3
    16d0:	d0fc      	beq.n	16cc <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    16d2:	4770      	bx	lr
    16d4:	40000800 	.word	0x40000800

000016d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16d8:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    16da:	2808      	cmp	r0, #8
    16dc:	d806      	bhi.n	16ec <system_clock_source_get_hz+0x14>
    16de:	f000 fbb7 	bl	1e50 <__gnu_thumb1_case_uqi>
    16e2:	0508      	.short	0x0508
    16e4:	122e2e05 	.word	0x122e2e05
    16e8:	150b      	.short	0x150b
    16ea:	26          	.byte	0x26
    16eb:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    16ec:	2400      	movs	r4, #0
	}
}
    16ee:	0020      	movs	r0, r4
    16f0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    16f2:	4b15      	ldr	r3, [pc, #84]	; (1748 <system_clock_source_get_hz+0x70>)
    16f4:	691c      	ldr	r4, [r3, #16]
    16f6:	e7fa      	b.n	16ee <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16f8:	4b14      	ldr	r3, [pc, #80]	; (174c <system_clock_source_get_hz+0x74>)
    16fa:	4c15      	ldr	r4, [pc, #84]	; (1750 <system_clock_source_get_hz+0x78>)
    16fc:	6a1b      	ldr	r3, [r3, #32]
    16fe:	059b      	lsls	r3, r3, #22
    1700:	0f9b      	lsrs	r3, r3, #30
    1702:	40dc      	lsrs	r4, r3
    1704:	e7f3      	b.n	16ee <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    1706:	4b10      	ldr	r3, [pc, #64]	; (1748 <system_clock_source_get_hz+0x70>)
    1708:	695c      	ldr	r4, [r3, #20]
    170a:	e7f0      	b.n	16ee <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    170c:	4d0e      	ldr	r5, [pc, #56]	; (1748 <system_clock_source_get_hz+0x70>)
			return 0;
    170e:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1710:	682b      	ldr	r3, [r5, #0]
    1712:	079b      	lsls	r3, r3, #30
    1714:	d5eb      	bpl.n	16ee <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    1716:	4b0f      	ldr	r3, [pc, #60]	; (1754 <system_clock_source_get_hz+0x7c>)
    1718:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    171a:	682b      	ldr	r3, [r5, #0]
    171c:	075b      	lsls	r3, r3, #29
    171e:	d511      	bpl.n	1744 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1720:	0020      	movs	r0, r4
    1722:	4b0d      	ldr	r3, [pc, #52]	; (1758 <system_clock_source_get_hz+0x80>)
    1724:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1726:	68ac      	ldr	r4, [r5, #8]
    1728:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    172a:	4344      	muls	r4, r0
    172c:	e7df      	b.n	16ee <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    172e:	4b0b      	ldr	r3, [pc, #44]	; (175c <system_clock_source_get_hz+0x84>)
			return 0;
    1730:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	075b      	lsls	r3, r3, #29
    1736:	d5da      	bpl.n	16ee <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <system_clock_source_get_hz+0x70>)
    173a:	68dc      	ldr	r4, [r3, #12]
    173c:	e7d7      	b.n	16ee <system_clock_source_get_hz+0x16>
		return 32768UL;
    173e:	2480      	movs	r4, #128	; 0x80
    1740:	0224      	lsls	r4, r4, #8
    1742:	e7d4      	b.n	16ee <system_clock_source_get_hz+0x16>
		return 48000000UL;
    1744:	4c06      	ldr	r4, [pc, #24]	; (1760 <system_clock_source_get_hz+0x88>)
    1746:	e7d2      	b.n	16ee <system_clock_source_get_hz+0x16>
    1748:	20000118 	.word	0x20000118
    174c:	40000800 	.word	0x40000800
    1750:	007a1200 	.word	0x007a1200
    1754:	000016c9 	.word	0x000016c9
    1758:	00001afd 	.word	0x00001afd
    175c:	40000850 	.word	0x40000850
    1760:	02dc6c00 	.word	0x02dc6c00

00001764 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1764:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    1766:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1768:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    176a:	7845      	ldrb	r5, [r0, #1]
    176c:	2001      	movs	r0, #1
    176e:	2640      	movs	r6, #64	; 0x40
    1770:	4005      	ands	r5, r0
    1772:	4020      	ands	r0, r4
    1774:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1776:	4908      	ldr	r1, [pc, #32]	; (1798 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1778:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    177a:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    177c:	01c0      	lsls	r0, r0, #7
    177e:	43b3      	bics	r3, r6
    1780:	432b      	orrs	r3, r5
    1782:	43a3      	bics	r3, r4
    1784:	4303      	orrs	r3, r0
    1786:	2003      	movs	r0, #3
    1788:	4002      	ands	r2, r0
    178a:	4804      	ldr	r0, [pc, #16]	; (179c <system_clock_source_osc8m_set_config+0x38>)
    178c:	0212      	lsls	r2, r2, #8
    178e:	4003      	ands	r3, r0
    1790:	4313      	orrs	r3, r2
    1792:	620b      	str	r3, [r1, #32]
}
    1794:	bd70      	pop	{r4, r5, r6, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	40000800 	.word	0x40000800
    179c:	fffffcff 	.word	0xfffffcff

000017a0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    17a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    17a2:	2808      	cmp	r0, #8
    17a4:	d806      	bhi.n	17b4 <system_clock_source_enable+0x14>
    17a6:	f000 fb53 	bl	1e50 <__gnu_thumb1_case_uqi>
    17aa:	0514      	.short	0x0514
    17ac:	1a0e0c05 	.word	0x1a0e0c05
    17b0:	2007      	.short	0x2007
    17b2:	34          	.byte	0x34
    17b3:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17b4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    17b8:	2302      	movs	r3, #2
    17ba:	4a19      	ldr	r2, [pc, #100]	; (1820 <system_clock_source_enable+0x80>)
    17bc:	6a11      	ldr	r1, [r2, #32]
    17be:	430b      	orrs	r3, r1
    17c0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    17c2:	2000      	movs	r0, #0
    17c4:	e7f7      	b.n	17b6 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    17c6:	2302      	movs	r3, #2
    17c8:	4a15      	ldr	r2, [pc, #84]	; (1820 <system_clock_source_enable+0x80>)
    17ca:	6991      	ldr	r1, [r2, #24]
    17cc:	430b      	orrs	r3, r1
    17ce:	6193      	str	r3, [r2, #24]
    17d0:	e7f7      	b.n	17c2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    17d2:	2302      	movs	r3, #2
    17d4:	4a12      	ldr	r2, [pc, #72]	; (1820 <system_clock_source_enable+0x80>)
    17d6:	8a11      	ldrh	r1, [r2, #16]
    17d8:	430b      	orrs	r3, r1
    17da:	8213      	strh	r3, [r2, #16]
    17dc:	e7f1      	b.n	17c2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    17de:	2302      	movs	r3, #2
    17e0:	4a0f      	ldr	r2, [pc, #60]	; (1820 <system_clock_source_enable+0x80>)
    17e2:	8a91      	ldrh	r1, [r2, #20]
    17e4:	430b      	orrs	r3, r1
    17e6:	8293      	strh	r3, [r2, #20]
    17e8:	e7eb      	b.n	17c2 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17ea:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    17ec:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17ee:	4e0d      	ldr	r6, [pc, #52]	; (1824 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    17f0:	4d0b      	ldr	r5, [pc, #44]	; (1820 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17f2:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    17f4:	4f0c      	ldr	r7, [pc, #48]	; (1828 <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    17f6:	4313      	orrs	r3, r2
    17f8:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    17fa:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    17fc:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    17fe:	68b3      	ldr	r3, [r6, #8]
    1800:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1802:	6873      	ldr	r3, [r6, #4]
    1804:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1806:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1808:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    180a:	6833      	ldr	r3, [r6, #0]
    180c:	b29b      	uxth	r3, r3
    180e:	84ab      	strh	r3, [r5, #36]	; 0x24
    1810:	e7d7      	b.n	17c2 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1812:	2302      	movs	r3, #2
    1814:	4a05      	ldr	r2, [pc, #20]	; (182c <system_clock_source_enable+0x8c>)
    1816:	7811      	ldrb	r1, [r2, #0]
    1818:	430b      	orrs	r3, r1
    181a:	7013      	strb	r3, [r2, #0]
    181c:	e7d1      	b.n	17c2 <system_clock_source_enable+0x22>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	40000800 	.word	0x40000800
    1824:	20000118 	.word	0x20000118
    1828:	000016c9 	.word	0x000016c9
    182c:	40000844 	.word	0x40000844

00001830 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1832:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1834:	211e      	movs	r1, #30
    1836:	4b19      	ldr	r3, [pc, #100]	; (189c <system_clock_init+0x6c>)
    1838:	00d2      	lsls	r2, r2, #3
    183a:	609a      	str	r2, [r3, #8]
    183c:	4a18      	ldr	r2, [pc, #96]	; (18a0 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    183e:	2400      	movs	r4, #0
    1840:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1842:	ad01      	add	r5, sp, #4
    1844:	438b      	bics	r3, r1
    1846:	6053      	str	r3, [r2, #4]
    1848:	2301      	movs	r3, #1
    184a:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    184c:	b2e0      	uxtb	r0, r4
    184e:	0029      	movs	r1, r5
    1850:	4b14      	ldr	r3, [pc, #80]	; (18a4 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1852:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1854:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1856:	2c25      	cmp	r4, #37	; 0x25
    1858:	d1f8      	bne.n	184c <system_clock_init+0x1c>
	config->run_in_standby  = false;
    185a:	2400      	movs	r4, #0
    185c:	466b      	mov	r3, sp
	config->on_demand       = true;
    185e:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    1860:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    1862:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1864:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1866:	4668      	mov	r0, sp
    1868:	4b0f      	ldr	r3, [pc, #60]	; (18a8 <system_clock_init+0x78>)
    186a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    186c:	4b0f      	ldr	r3, [pc, #60]	; (18ac <system_clock_init+0x7c>)
    186e:	2006      	movs	r0, #6
    1870:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1872:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <system_clock_init+0x80>)
    1874:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1876:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1878:	0029      	movs	r1, r5
    187a:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    187c:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    187e:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1880:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1882:	2306      	movs	r3, #6
    1884:	0020      	movs	r0, r4
    1886:	702b      	strb	r3, [r5, #0]
    1888:	4b0b      	ldr	r3, [pc, #44]	; (18b8 <system_clock_init+0x88>)
	config->division_factor    = 1;
    188a:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    188c:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    188e:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1890:	726c      	strb	r4, [r5, #9]
    1892:	4798      	blx	r3
    1894:	0020      	movs	r0, r4
    1896:	4b09      	ldr	r3, [pc, #36]	; (18bc <system_clock_init+0x8c>)
    1898:	4798      	blx	r3
#endif
}
    189a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    189c:	40000800 	.word	0x40000800
    18a0:	41004000 	.word	0x41004000
    18a4:	00001ae1 	.word	0x00001ae1
    18a8:	00001765 	.word	0x00001765
    18ac:	000017a1 	.word	0x000017a1
    18b0:	000018cd 	.word	0x000018cd
    18b4:	40000400 	.word	0x40000400
    18b8:	000018ed 	.word	0x000018ed
    18bc:	00001991 	.word	0x00001991

000018c0 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c0:	4b01      	ldr	r3, [pc, #4]	; (18c8 <system_gclk_is_syncing+0x8>)
    18c2:	7858      	ldrb	r0, [r3, #1]
    18c4:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    18c6:	4770      	bx	lr
    18c8:	40000c00 	.word	0x40000c00

000018cc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18cc:	2308      	movs	r3, #8
    18ce:	4a05      	ldr	r2, [pc, #20]	; (18e4 <system_gclk_init+0x18>)
    18d0:	6991      	ldr	r1, [r2, #24]
    18d2:	430b      	orrs	r3, r1
    18d4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18d6:	2301      	movs	r3, #1
    18d8:	4a03      	ldr	r2, [pc, #12]	; (18e8 <system_gclk_init+0x1c>)
    18da:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18dc:	7811      	ldrb	r1, [r2, #0]
    18de:	4219      	tst	r1, r3
    18e0:	d1fc      	bne.n	18dc <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    18e2:	4770      	bx	lr
    18e4:	40000400 	.word	0x40000400
    18e8:	40000c00 	.word	0x40000c00

000018ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18ee:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18f0:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18f2:	0224      	lsls	r4, r4, #8
{
    18f4:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18f6:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18f8:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    18fa:	2b00      	cmp	r3, #0
    18fc:	d002      	beq.n	1904 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18fe:	2380      	movs	r3, #128	; 0x80
    1900:	02db      	lsls	r3, r3, #11
    1902:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1904:	7a4b      	ldrb	r3, [r1, #9]
    1906:	2b00      	cmp	r3, #0
    1908:	d002      	beq.n	1910 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	031b      	lsls	r3, r3, #12
    190e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1910:	684b      	ldr	r3, [r1, #4]
    1912:	2b01      	cmp	r3, #1
    1914:	d912      	bls.n	193c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1916:	1e5d      	subs	r5, r3, #1
    1918:	401d      	ands	r5, r3
    191a:	2202      	movs	r2, #2
    191c:	2d00      	cmp	r5, #0
    191e:	d006      	beq.n	192e <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1920:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1922:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    1924:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1926:	029b      	lsls	r3, r3, #10
    1928:	e007      	b.n	193a <system_gclk_gen_set_config+0x4e>
				div2_count++;
    192a:	3501      	adds	r5, #1
						mask <<= 1) {
    192c:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    192e:	429a      	cmp	r2, r3
    1930:	d3fb      	bcc.n	192a <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1932:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1934:	022d      	lsls	r5, r5, #8
    1936:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1938:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    193a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    193c:	7a0b      	ldrb	r3, [r1, #8]
    193e:	2b00      	cmp	r3, #0
    1940:	d002      	beq.n	1948 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1942:	2380      	movs	r3, #128	; 0x80
    1944:	039b      	lsls	r3, r3, #14
    1946:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1948:	4f0c      	ldr	r7, [pc, #48]	; (197c <system_gclk_gen_set_config+0x90>)
    194a:	47b8      	blx	r7
    194c:	2800      	cmp	r0, #0
    194e:	d1fb      	bne.n	1948 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1950:	4b0b      	ldr	r3, [pc, #44]	; (1980 <system_gclk_gen_set_config+0x94>)
    1952:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1954:	4b0b      	ldr	r3, [pc, #44]	; (1984 <system_gclk_gen_set_config+0x98>)
    1956:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1958:	47b8      	blx	r7
    195a:	2800      	cmp	r0, #0
    195c:	d1fc      	bne.n	1958 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    195e:	4b0a      	ldr	r3, [pc, #40]	; (1988 <system_gclk_gen_set_config+0x9c>)
    1960:	609d      	str	r5, [r3, #8]
    1962:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    1964:	47b8      	blx	r7
    1966:	2800      	cmp	r0, #0
    1968:	d1fc      	bne.n	1964 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    196a:	2280      	movs	r2, #128	; 0x80
    196c:	686b      	ldr	r3, [r5, #4]
    196e:	0252      	lsls	r2, r2, #9
    1970:	4013      	ands	r3, r2
    1972:	431c      	orrs	r4, r3
    1974:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    1976:	4b05      	ldr	r3, [pc, #20]	; (198c <system_gclk_gen_set_config+0xa0>)
    1978:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    197c:	000018c1 	.word	0x000018c1
    1980:	00001665 	.word	0x00001665
    1984:	40000c08 	.word	0x40000c08
    1988:	40000c00 	.word	0x40000c00
    198c:	00001699 	.word	0x00001699

00001990 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1990:	b570      	push	{r4, r5, r6, lr}
    1992:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    1994:	4c09      	ldr	r4, [pc, #36]	; (19bc <system_gclk_gen_enable+0x2c>)
    1996:	47a0      	blx	r4
    1998:	2800      	cmp	r0, #0
    199a:	d1fb      	bne.n	1994 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    199c:	4b08      	ldr	r3, [pc, #32]	; (19c0 <system_gclk_gen_enable+0x30>)
    199e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19a0:	4b08      	ldr	r3, [pc, #32]	; (19c4 <system_gclk_gen_enable+0x34>)
    19a2:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    19a4:	47a0      	blx	r4
    19a6:	2800      	cmp	r0, #0
    19a8:	d1fc      	bne.n	19a4 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19aa:	2380      	movs	r3, #128	; 0x80
    19ac:	4a06      	ldr	r2, [pc, #24]	; (19c8 <system_gclk_gen_enable+0x38>)
    19ae:	025b      	lsls	r3, r3, #9
    19b0:	6851      	ldr	r1, [r2, #4]
    19b2:	430b      	orrs	r3, r1
    19b4:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19b6:	4b05      	ldr	r3, [pc, #20]	; (19cc <system_gclk_gen_enable+0x3c>)
    19b8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19ba:	bd70      	pop	{r4, r5, r6, pc}
    19bc:	000018c1 	.word	0x000018c1
    19c0:	00001665 	.word	0x00001665
    19c4:	40000c04 	.word	0x40000c04
    19c8:	40000c00 	.word	0x40000c00
    19cc:	00001699 	.word	0x00001699

000019d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19d2:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    19d4:	4e18      	ldr	r6, [pc, #96]	; (1a38 <system_gclk_gen_get_hz+0x68>)
    19d6:	47b0      	blx	r6
    19d8:	2800      	cmp	r0, #0
    19da:	d1fb      	bne.n	19d4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    19dc:	4b17      	ldr	r3, [pc, #92]	; (1a3c <system_gclk_gen_get_hz+0x6c>)
    19de:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19e0:	4b17      	ldr	r3, [pc, #92]	; (1a40 <system_gclk_gen_get_hz+0x70>)
    19e2:	701f      	strb	r7, [r3, #0]
    19e4:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    19e6:	47b0      	blx	r6
    19e8:	2800      	cmp	r0, #0
    19ea:	d1fc      	bne.n	19e6 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    19ec:	4d15      	ldr	r5, [pc, #84]	; (1a44 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19ee:	4b16      	ldr	r3, [pc, #88]	; (1a48 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    19f0:	6868      	ldr	r0, [r5, #4]
    19f2:	04c0      	lsls	r0, r0, #19
    19f4:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19f6:	4798      	blx	r3
    19f8:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19fa:	9b01      	ldr	r3, [sp, #4]
    19fc:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19fe:	686b      	ldr	r3, [r5, #4]
    1a00:	02db      	lsls	r3, r3, #11
    1a02:	0fdb      	lsrs	r3, r3, #31
    1a04:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a06:	4b11      	ldr	r3, [pc, #68]	; (1a4c <system_gclk_gen_get_hz+0x7c>)
    1a08:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    1a0a:	47b0      	blx	r6
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d1fc      	bne.n	1a0a <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a10:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    1a12:	4b0f      	ldr	r3, [pc, #60]	; (1a50 <system_gclk_gen_get_hz+0x80>)
    1a14:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a16:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a18:	022d      	lsls	r5, r5, #8
    1a1a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d108      	bne.n	1a32 <system_gclk_gen_get_hz+0x62>
    1a20:	2d01      	cmp	r5, #1
    1a22:	d904      	bls.n	1a2e <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    1a24:	0020      	movs	r0, r4
    1a26:	0029      	movs	r1, r5
    1a28:	4b0a      	ldr	r3, [pc, #40]	; (1a54 <system_gclk_gen_get_hz+0x84>)
    1a2a:	4798      	blx	r3
    1a2c:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    1a2e:	0020      	movs	r0, r4
    1a30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1a32:	3501      	adds	r5, #1
    1a34:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    1a36:	e7fa      	b.n	1a2e <system_gclk_gen_get_hz+0x5e>
    1a38:	000018c1 	.word	0x000018c1
    1a3c:	00001665 	.word	0x00001665
    1a40:	40000c04 	.word	0x40000c04
    1a44:	40000c00 	.word	0x40000c00
    1a48:	000016d9 	.word	0x000016d9
    1a4c:	40000c08 	.word	0x40000c08
    1a50:	00001699 	.word	0x00001699
    1a54:	00001e65 	.word	0x00001e65

00001a58 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a58:	b510      	push	{r4, lr}
    1a5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a5c:	4b06      	ldr	r3, [pc, #24]	; (1a78 <system_gclk_chan_enable+0x20>)
    1a5e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a60:	4b06      	ldr	r3, [pc, #24]	; (1a7c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a62:	4a07      	ldr	r2, [pc, #28]	; (1a80 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a64:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a66:	2380      	movs	r3, #128	; 0x80
    1a68:	8851      	ldrh	r1, [r2, #2]
    1a6a:	01db      	lsls	r3, r3, #7
    1a6c:	430b      	orrs	r3, r1
    1a6e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a70:	4b04      	ldr	r3, [pc, #16]	; (1a84 <system_gclk_chan_enable+0x2c>)
    1a72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a74:	bd10      	pop	{r4, pc}
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	00001665 	.word	0x00001665
    1a7c:	40000c02 	.word	0x40000c02
    1a80:	40000c00 	.word	0x40000c00
    1a84:	00001699 	.word	0x00001699

00001a88 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a88:	b510      	push	{r4, lr}
    1a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a8c:	4b0e      	ldr	r3, [pc, #56]	; (1ac8 <system_gclk_chan_disable+0x40>)
    1a8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a90:	4b0e      	ldr	r3, [pc, #56]	; (1acc <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1a92:	4a0f      	ldr	r2, [pc, #60]	; (1ad0 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a94:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a96:	4b0f      	ldr	r3, [pc, #60]	; (1ad4 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a98:	4c0f      	ldr	r4, [pc, #60]	; (1ad8 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a9a:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1a9c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a9e:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1aa0:	4011      	ands	r1, r2
    1aa2:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1aa4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa6:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1aa8:	4021      	ands	r1, r4
    1aaa:	8059      	strh	r1, [r3, #2]
    1aac:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1aae:	2280      	movs	r2, #128	; 0x80
    1ab0:	01d2      	lsls	r2, r2, #7
    1ab2:	885c      	ldrh	r4, [r3, #2]
    1ab4:	4214      	tst	r4, r2
    1ab6:	d1fc      	bne.n	1ab2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ab8:	885a      	ldrh	r2, [r3, #2]
    1aba:	0200      	lsls	r0, r0, #8
    1abc:	400a      	ands	r2, r1
    1abe:	4302      	orrs	r2, r0
    1ac0:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <system_gclk_chan_disable+0x54>)
    1ac4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ac6:	bd10      	pop	{r4, pc}
    1ac8:	00001665 	.word	0x00001665
    1acc:	40000c02 	.word	0x40000c02
    1ad0:	fffff0ff 	.word	0xfffff0ff
    1ad4:	40000c00 	.word	0x40000c00
    1ad8:	ffffbfff 	.word	0xffffbfff
    1adc:	00001699 	.word	0x00001699

00001ae0 <system_gclk_chan_set_config>:
{
    1ae0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ae2:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1ae4:	4b03      	ldr	r3, [pc, #12]	; (1af4 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ae6:	0224      	lsls	r4, r4, #8
    1ae8:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1aea:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1aec:	4b02      	ldr	r3, [pc, #8]	; (1af8 <system_gclk_chan_set_config+0x18>)
    1aee:	b2a4      	uxth	r4, r4
    1af0:	805c      	strh	r4, [r3, #2]
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	00001a89 	.word	0x00001a89
    1af8:	40000c00 	.word	0x40000c00

00001afc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1afc:	b510      	push	{r4, lr}
    1afe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <system_gclk_chan_get_hz+0x20>)
    1b02:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <system_gclk_chan_get_hz+0x24>)
    1b06:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b08:	4b06      	ldr	r3, [pc, #24]	; (1b24 <system_gclk_chan_get_hz+0x28>)
    1b0a:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1b0c:	4b06      	ldr	r3, [pc, #24]	; (1b28 <system_gclk_chan_get_hz+0x2c>)
    1b0e:	0524      	lsls	r4, r4, #20
    1b10:	0f24      	lsrs	r4, r4, #28
    1b12:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b14:	0020      	movs	r0, r4
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <system_gclk_chan_get_hz+0x30>)
    1b18:	4798      	blx	r3
}
    1b1a:	bd10      	pop	{r4, pc}
    1b1c:	00001665 	.word	0x00001665
    1b20:	40000c02 	.word	0x40000c02
    1b24:	40000c00 	.word	0x40000c00
    1b28:	00001699 	.word	0x00001699
    1b2c:	000019d1 	.word	0x000019d1

00001b30 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b30:	78d3      	ldrb	r3, [r2, #3]
{
    1b32:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1b34:	2b00      	cmp	r3, #0
    1b36:	d135      	bne.n	1ba4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b38:	7814      	ldrb	r4, [r2, #0]
    1b3a:	2c80      	cmp	r4, #128	; 0x80
    1b3c:	d003      	beq.n	1b46 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b3e:	2380      	movs	r3, #128	; 0x80
    1b40:	0624      	lsls	r4, r4, #24
    1b42:	025b      	lsls	r3, r3, #9
    1b44:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b46:	2502      	movs	r5, #2
    1b48:	7854      	ldrb	r4, [r2, #1]
    1b4a:	43ac      	bics	r4, r5
    1b4c:	d106      	bne.n	1b5c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b4e:	7894      	ldrb	r4, [r2, #2]
    1b50:	2c00      	cmp	r4, #0
    1b52:	d124      	bne.n	1b9e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b54:	2480      	movs	r4, #128	; 0x80
    1b56:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b58:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b5a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b5c:	7854      	ldrb	r4, [r2, #1]
    1b5e:	3c01      	subs	r4, #1
    1b60:	2c01      	cmp	r4, #1
    1b62:	d801      	bhi.n	1b68 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b64:	4c12      	ldr	r4, [pc, #72]	; (1bb0 <_system_pinmux_config+0x80>)
    1b66:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b68:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b6a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b6c:	05e4      	lsls	r4, r4, #23
    1b6e:	432c      	orrs	r4, r5
    1b70:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b72:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b74:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b76:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b78:	0624      	lsls	r4, r4, #24
    1b7a:	432c      	orrs	r4, r5
    1b7c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b7e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b80:	78d4      	ldrb	r4, [r2, #3]
    1b82:	2c00      	cmp	r4, #0
    1b84:	d10a      	bne.n	1b9c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b86:	035b      	lsls	r3, r3, #13
    1b88:	d503      	bpl.n	1b92 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b8a:	7893      	ldrb	r3, [r2, #2]
    1b8c:	2b01      	cmp	r3, #1
    1b8e:	d10c      	bne.n	1baa <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1b90:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b92:	7853      	ldrb	r3, [r2, #1]
    1b94:	3b01      	subs	r3, #1
    1b96:	2b01      	cmp	r3, #1
    1b98:	d800      	bhi.n	1b9c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b9a:	6081      	str	r1, [r0, #8]
		}
	}
}
    1b9c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b9e:	24c0      	movs	r4, #192	; 0xc0
    1ba0:	02e4      	lsls	r4, r4, #11
    1ba2:	e7d9      	b.n	1b58 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1ba4:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1ba6:	2300      	movs	r3, #0
    1ba8:	e7de      	b.n	1b68 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1baa:	6141      	str	r1, [r0, #20]
    1bac:	e7f1      	b.n	1b92 <_system_pinmux_config+0x62>
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	fffbffff 	.word	0xfffbffff

00001bb4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bb4:	b510      	push	{r4, lr}
    1bb6:	0003      	movs	r3, r0
    1bb8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    1bba:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    1bbc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1bbe:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1bc0:	4281      	cmp	r1, r0
    1bc2:	d102      	bne.n	1bca <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bc4:	4904      	ldr	r1, [pc, #16]	; (1bd8 <system_pinmux_pin_set_config+0x24>)
    1bc6:	01e0      	lsls	r0, r4, #7
    1bc8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bca:	211f      	movs	r1, #31
    1bcc:	400b      	ands	r3, r1
    1bce:	391e      	subs	r1, #30
    1bd0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1bd2:	4b02      	ldr	r3, [pc, #8]	; (1bdc <system_pinmux_pin_set_config+0x28>)
    1bd4:	4798      	blx	r3
}
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	41004400 	.word	0x41004400
    1bdc:	00001b31 	.word	0x00001b31

00001be0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1be0:	4770      	bx	lr
	...

00001be4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1be4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1be6:	4b05      	ldr	r3, [pc, #20]	; (1bfc <system_init+0x18>)
    1be8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bea:	4b05      	ldr	r3, [pc, #20]	; (1c00 <system_init+0x1c>)
    1bec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bee:	4b05      	ldr	r3, [pc, #20]	; (1c04 <system_init+0x20>)
    1bf0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bf2:	4b05      	ldr	r3, [pc, #20]	; (1c08 <system_init+0x24>)
    1bf4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bf6:	4b05      	ldr	r3, [pc, #20]	; (1c0c <system_init+0x28>)
    1bf8:	4798      	blx	r3
}
    1bfa:	bd10      	pop	{r4, pc}
    1bfc:	00001831 	.word	0x00001831
    1c00:	00001661 	.word	0x00001661
    1c04:	00001be1 	.word	0x00001be1
    1c08:	00001be1 	.word	0x00001be1
    1c0c:	00001be1 	.word	0x00001be1

00001c10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c10:	e7fe      	b.n	1c10 <Dummy_Handler>
	...

00001c14 <Reset_Handler>:
        if (pSrc != pDest) {
    1c14:	4821      	ldr	r0, [pc, #132]	; (1c9c <Reset_Handler+0x88>)
    1c16:	4922      	ldr	r1, [pc, #136]	; (1ca0 <Reset_Handler+0x8c>)
{
    1c18:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1c1a:	4288      	cmp	r0, r1
    1c1c:	d004      	beq.n	1c28 <Reset_Handler+0x14>
    1c1e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1c20:	4c20      	ldr	r4, [pc, #128]	; (1ca4 <Reset_Handler+0x90>)
    1c22:	18ca      	adds	r2, r1, r3
    1c24:	42a2      	cmp	r2, r4
    1c26:	d332      	bcc.n	1c8e <Reset_Handler+0x7a>
                *pDest++ = 0;
    1c28:	2100      	movs	r1, #0
    1c2a:	4b1f      	ldr	r3, [pc, #124]	; (1ca8 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1c2c:	4a1f      	ldr	r2, [pc, #124]	; (1cac <Reset_Handler+0x98>)
    1c2e:	4293      	cmp	r3, r2
    1c30:	d331      	bcc.n	1c96 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c32:	21ff      	movs	r1, #255	; 0xff
    1c34:	4b1e      	ldr	r3, [pc, #120]	; (1cb0 <Reset_Handler+0x9c>)
    1c36:	4a1f      	ldr	r2, [pc, #124]	; (1cb4 <Reset_Handler+0xa0>)
    1c38:	438b      	bics	r3, r1
    1c3a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c3c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c3e:	250c      	movs	r5, #12
    1c40:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c42:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c44:	4b1c      	ldr	r3, [pc, #112]	; (1cb8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c46:	481d      	ldr	r0, [pc, #116]	; (1cbc <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c48:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c4a:	78c3      	ldrb	r3, [r0, #3]
    1c4c:	39fc      	subs	r1, #252	; 0xfc
    1c4e:	438b      	bics	r3, r1
    1c50:	4313      	orrs	r3, r2
    1c52:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c54:	78c3      	ldrb	r3, [r0, #3]
    1c56:	43ab      	bics	r3, r5
    1c58:	4323      	orrs	r3, r4
    1c5a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c5c:	4b18      	ldr	r3, [pc, #96]	; (1cc0 <Reset_Handler+0xac>)
    1c5e:	7b98      	ldrb	r0, [r3, #14]
    1c60:	43b0      	bics	r0, r6
    1c62:	0006      	movs	r6, r0
    1c64:	2020      	movs	r0, #32
    1c66:	4330      	orrs	r0, r6
    1c68:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c6a:	7b98      	ldrb	r0, [r3, #14]
    1c6c:	43a8      	bics	r0, r5
    1c6e:	4304      	orrs	r4, r0
    1c70:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c72:	7b98      	ldrb	r0, [r3, #14]
    1c74:	4388      	bics	r0, r1
    1c76:	4302      	orrs	r2, r0
    1c78:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c7a:	2380      	movs	r3, #128	; 0x80
    1c7c:	4a11      	ldr	r2, [pc, #68]	; (1cc4 <Reset_Handler+0xb0>)
    1c7e:	6851      	ldr	r1, [r2, #4]
    1c80:	430b      	orrs	r3, r1
    1c82:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c84:	4b10      	ldr	r3, [pc, #64]	; (1cc8 <Reset_Handler+0xb4>)
    1c86:	4798      	blx	r3
        main();
    1c88:	4b10      	ldr	r3, [pc, #64]	; (1ccc <Reset_Handler+0xb8>)
    1c8a:	4798      	blx	r3
    1c8c:	e7fe      	b.n	1c8c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1c8e:	58c5      	ldr	r5, [r0, r3]
    1c90:	3304      	adds	r3, #4
    1c92:	6015      	str	r5, [r2, #0]
    1c94:	e7c5      	b.n	1c22 <Reset_Handler+0xe>
                *pDest++ = 0;
    1c96:	c302      	stmia	r3!, {r1}
    1c98:	e7c9      	b.n	1c2e <Reset_Handler+0x1a>
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	00002040 	.word	0x00002040
    1ca0:	20000000 	.word	0x20000000
    1ca4:	2000001c 	.word	0x2000001c
    1ca8:	2000001c 	.word	0x2000001c
    1cac:	2000018c 	.word	0x2000018c
    1cb0:	00000000 	.word	0x00000000
    1cb4:	e000ed00 	.word	0xe000ed00
    1cb8:	410070fc 	.word	0x410070fc
    1cbc:	41005000 	.word	0x41005000
    1cc0:	41004800 	.word	0x41004800
    1cc4:	41004000 	.word	0x41004000
    1cc8:	00001f7d 	.word	0x00001f7d
    1ccc:	00001dfd 	.word	0x00001dfd

00001cd0 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    1cd0:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cd4:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    1cd6:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    1cd8:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    1cda:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1cdc:	4d20      	ldr	r5, [pc, #128]	; (1d60 <conf_port_pin+0x90>)
    1cde:	0021      	movs	r1, r4
    1ce0:	200b      	movs	r0, #11
    1ce2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1ce4:	7067      	strb	r7, [r4, #1]
    1ce6:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    1ce8:	0021      	movs	r1, r4
    1cea:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1cec:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1cee:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1cf0:	2380      	movs	r3, #128	; 0x80
    1cf2:	4e1c      	ldr	r6, [pc, #112]	; (1d64 <conf_port_pin+0x94>)
    1cf4:	00db      	lsls	r3, r3, #3
    1cf6:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1cf8:	0021      	movs	r1, r4
    1cfa:	2005      	movs	r0, #5
    1cfc:	47a8      	blx	r5
    1cfe:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1d00:	0021      	movs	r1, r4
    1d02:	61b3      	str	r3, [r6, #24]
    1d04:	2006      	movs	r0, #6
    1d06:	47a8      	blx	r5
    1d08:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1d0a:	0021      	movs	r1, r4
    1d0c:	61b3      	str	r3, [r6, #24]
    1d0e:	2007      	movs	r0, #7
    1d10:	47a8      	blx	r5
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d16:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    1d18:	0021      	movs	r1, r4
    1d1a:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d1c:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1d1e:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1d20:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    1d22:	0021      	movs	r1, r4
    1d24:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d26:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1d28:	47a8      	blx	r5
    1d2a:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    1d2c:	0021      	movs	r1, r4
    1d2e:	61b3      	str	r3, [r6, #24]
    1d30:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1d32:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d34:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1d36:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1d38:	47a8      	blx	r5
    1d3a:	0033      	movs	r3, r6
    1d3c:	2280      	movs	r2, #128	; 0x80
    1d3e:	3398      	adds	r3, #152	; 0x98
    1d40:	0212      	lsls	r2, r2, #8
    1d42:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    1d44:	0021      	movs	r1, r4
    1d46:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1d48:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1d4a:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    1d4c:	47a8      	blx	r5
    1d4e:	2380      	movs	r3, #128	; 0x80
    1d50:	029b      	lsls	r3, r3, #10
    1d52:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d54:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    1d56:	0021      	movs	r1, r4
    1d58:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1d5a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    1d5c:	47a8      	blx	r5
} // end conf_port_pin(void)
    1d5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1d60:	000008c5 	.word	0x000008c5
    1d64:	41004400 	.word	0x41004400

00001d68 <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1d68:	2300      	movs	r3, #0
{
    1d6a:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    1d6c:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1d6e:	a801      	add	r0, sp, #4
    1d70:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1d72:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1d74:	4b01      	ldr	r3, [pc, #4]	; (1d7c <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    1d76:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    1d78:	4798      	blx	r3
}
    1d7a:	bd07      	pop	{r0, r1, r2, pc}
    1d7c:	00001765 	.word	0x00001765

00001d80 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1d82:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1d84:	4b09      	ldr	r3, [pc, #36]	; (1dac <clk_gclk0_init+0x2c>)
    1d86:	4798      	blx	r3
    1d88:	4b09      	ldr	r3, [pc, #36]	; (1db0 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	721c      	strb	r4, [r3, #8]
    1d8e:	2306      	movs	r3, #6
    1d90:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1d92:	3b05      	subs	r3, #5
    1d94:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1d96:	0020      	movs	r0, r4
    1d98:	4b06      	ldr	r3, [pc, #24]	; (1db4 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    1d9a:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    1d9c:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    1d9e:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1da0:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1da2:	0020      	movs	r0, r4
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <clk_gclk0_init+0x38>)
    1da6:	4798      	blx	r3
}
    1da8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	000018cd 	.word	0x000018cd
    1db0:	40000400 	.word	0x40000400
    1db4:	000018ed 	.word	0x000018ed
    1db8:	00001991 	.word	0x00001991

00001dbc <sys_clk_init>:
{
    1dbc:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1dbe:	4b03      	ldr	r3, [pc, #12]	; (1dcc <sys_clk_init+0x10>)
    1dc0:	4798      	blx	r3
	clk_gclk0_init();
    1dc2:	4b03      	ldr	r3, [pc, #12]	; (1dd0 <sys_clk_init+0x14>)
    1dc4:	4798      	blx	r3
    delay_init();
    1dc6:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <sys_clk_init+0x18>)
    1dc8:	4798      	blx	r3
}
    1dca:	bd10      	pop	{r4, pc}
    1dcc:	00001d69 	.word	0x00001d69
    1dd0:	00001d81 	.word	0x00001d81
    1dd4:	00000859 	.word	0x00000859

00001dd8 <simSysInit>:
{
    1dd8:	b510      	push	{r4, lr}
	system_init();
    1dda:	4b04      	ldr	r3, [pc, #16]	; (1dec <simSysInit+0x14>)
    1ddc:	4798      	blx	r3
	sys_clk_init();
    1dde:	4b04      	ldr	r3, [pc, #16]	; (1df0 <simSysInit+0x18>)
    1de0:	4798      	blx	r3
	conf_port_pin();
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <simSysInit+0x1c>)
    1de4:	4798      	blx	r3
    spi169_init();
    1de6:	4b04      	ldr	r3, [pc, #16]	; (1df8 <simSysInit+0x20>)
    1de8:	4798      	blx	r3
}
    1dea:	bd10      	pop	{r4, pc}
    1dec:	00001be5 	.word	0x00001be5
    1df0:	00001dbd 	.word	0x00001dbd
    1df4:	00001cd1 	.word	0x00001cd1
    1df8:	00000125 	.word	0x00000125

00001dfc <main>:
{
    1dfc:	b507      	push	{r0, r1, r2, lr}
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xAA};
    1dfe:	4b0b      	ldr	r3, [pc, #44]	; (1e2c <main+0x30>)
    1e00:	2204      	movs	r2, #4
    1e02:	490b      	ldr	r1, [pc, #44]	; (1e30 <main+0x34>)
    1e04:	a801      	add	r0, sp, #4
    1e06:	4798      	blx	r3
    simSysInit();
    1e08:	4b0a      	ldr	r3, [pc, #40]	; (1e34 <main+0x38>)
    1e0a:	4798      	blx	r3
    spi169_tx_init();
    1e0c:	4b0a      	ldr	r3, [pc, #40]	; (1e38 <main+0x3c>)
    1e0e:	4798      	blx	r3
     spi169_start_xfer(AX5043_FIFODATA, WRT);
    1e10:	2101      	movs	r1, #1
    1e12:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <main+0x40>)
    1e14:	2029      	movs	r0, #41	; 0x29
    1e16:	4798      	blx	r3
     spi169_write(tx_preamble, 4);
    1e18:	2104      	movs	r1, #4
    1e1a:	a801      	add	r0, sp, #4
    1e1c:	4b08      	ldr	r3, [pc, #32]	; (1e40 <main+0x44>)
    1e1e:	4798      	blx	r3
	 spi169_stop_xfer();
    1e20:	4b08      	ldr	r3, [pc, #32]	; (1e44 <main+0x48>)
    1e22:	4798      	blx	r3
      uart915_write_cmd("AT+SEND=test\r\n");
    1e24:	4808      	ldr	r0, [pc, #32]	; (1e48 <main+0x4c>)
    1e26:	4b09      	ldr	r3, [pc, #36]	; (1e4c <main+0x50>)
    1e28:	4798      	blx	r3
    1e2a:	e7f1      	b.n	1e10 <main+0x14>
    1e2c:	00001fc5 	.word	0x00001fc5
    1e30:	0000200c 	.word	0x0000200c
    1e34:	00001dd9 	.word	0x00001dd9
    1e38:	00000331 	.word	0x00000331
    1e3c:	00000211 	.word	0x00000211
    1e40:	000002cd 	.word	0x000002cd
    1e44:	0000026d 	.word	0x0000026d
    1e48:	00002010 	.word	0x00002010
    1e4c:	000007f5 	.word	0x000007f5

00001e50 <__gnu_thumb1_case_uqi>:
    1e50:	b402      	push	{r1}
    1e52:	4671      	mov	r1, lr
    1e54:	0849      	lsrs	r1, r1, #1
    1e56:	0049      	lsls	r1, r1, #1
    1e58:	5c09      	ldrb	r1, [r1, r0]
    1e5a:	0049      	lsls	r1, r1, #1
    1e5c:	448e      	add	lr, r1
    1e5e:	bc02      	pop	{r1}
    1e60:	4770      	bx	lr
    1e62:	46c0      	nop			; (mov r8, r8)

00001e64 <__udivsi3>:
    1e64:	2200      	movs	r2, #0
    1e66:	0843      	lsrs	r3, r0, #1
    1e68:	428b      	cmp	r3, r1
    1e6a:	d374      	bcc.n	1f56 <__udivsi3+0xf2>
    1e6c:	0903      	lsrs	r3, r0, #4
    1e6e:	428b      	cmp	r3, r1
    1e70:	d35f      	bcc.n	1f32 <__udivsi3+0xce>
    1e72:	0a03      	lsrs	r3, r0, #8
    1e74:	428b      	cmp	r3, r1
    1e76:	d344      	bcc.n	1f02 <__udivsi3+0x9e>
    1e78:	0b03      	lsrs	r3, r0, #12
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d328      	bcc.n	1ed0 <__udivsi3+0x6c>
    1e7e:	0c03      	lsrs	r3, r0, #16
    1e80:	428b      	cmp	r3, r1
    1e82:	d30d      	bcc.n	1ea0 <__udivsi3+0x3c>
    1e84:	22ff      	movs	r2, #255	; 0xff
    1e86:	0209      	lsls	r1, r1, #8
    1e88:	ba12      	rev	r2, r2
    1e8a:	0c03      	lsrs	r3, r0, #16
    1e8c:	428b      	cmp	r3, r1
    1e8e:	d302      	bcc.n	1e96 <__udivsi3+0x32>
    1e90:	1212      	asrs	r2, r2, #8
    1e92:	0209      	lsls	r1, r1, #8
    1e94:	d065      	beq.n	1f62 <__udivsi3+0xfe>
    1e96:	0b03      	lsrs	r3, r0, #12
    1e98:	428b      	cmp	r3, r1
    1e9a:	d319      	bcc.n	1ed0 <__udivsi3+0x6c>
    1e9c:	e000      	b.n	1ea0 <__udivsi3+0x3c>
    1e9e:	0a09      	lsrs	r1, r1, #8
    1ea0:	0bc3      	lsrs	r3, r0, #15
    1ea2:	428b      	cmp	r3, r1
    1ea4:	d301      	bcc.n	1eaa <__udivsi3+0x46>
    1ea6:	03cb      	lsls	r3, r1, #15
    1ea8:	1ac0      	subs	r0, r0, r3
    1eaa:	4152      	adcs	r2, r2
    1eac:	0b83      	lsrs	r3, r0, #14
    1eae:	428b      	cmp	r3, r1
    1eb0:	d301      	bcc.n	1eb6 <__udivsi3+0x52>
    1eb2:	038b      	lsls	r3, r1, #14
    1eb4:	1ac0      	subs	r0, r0, r3
    1eb6:	4152      	adcs	r2, r2
    1eb8:	0b43      	lsrs	r3, r0, #13
    1eba:	428b      	cmp	r3, r1
    1ebc:	d301      	bcc.n	1ec2 <__udivsi3+0x5e>
    1ebe:	034b      	lsls	r3, r1, #13
    1ec0:	1ac0      	subs	r0, r0, r3
    1ec2:	4152      	adcs	r2, r2
    1ec4:	0b03      	lsrs	r3, r0, #12
    1ec6:	428b      	cmp	r3, r1
    1ec8:	d301      	bcc.n	1ece <__udivsi3+0x6a>
    1eca:	030b      	lsls	r3, r1, #12
    1ecc:	1ac0      	subs	r0, r0, r3
    1ece:	4152      	adcs	r2, r2
    1ed0:	0ac3      	lsrs	r3, r0, #11
    1ed2:	428b      	cmp	r3, r1
    1ed4:	d301      	bcc.n	1eda <__udivsi3+0x76>
    1ed6:	02cb      	lsls	r3, r1, #11
    1ed8:	1ac0      	subs	r0, r0, r3
    1eda:	4152      	adcs	r2, r2
    1edc:	0a83      	lsrs	r3, r0, #10
    1ede:	428b      	cmp	r3, r1
    1ee0:	d301      	bcc.n	1ee6 <__udivsi3+0x82>
    1ee2:	028b      	lsls	r3, r1, #10
    1ee4:	1ac0      	subs	r0, r0, r3
    1ee6:	4152      	adcs	r2, r2
    1ee8:	0a43      	lsrs	r3, r0, #9
    1eea:	428b      	cmp	r3, r1
    1eec:	d301      	bcc.n	1ef2 <__udivsi3+0x8e>
    1eee:	024b      	lsls	r3, r1, #9
    1ef0:	1ac0      	subs	r0, r0, r3
    1ef2:	4152      	adcs	r2, r2
    1ef4:	0a03      	lsrs	r3, r0, #8
    1ef6:	428b      	cmp	r3, r1
    1ef8:	d301      	bcc.n	1efe <__udivsi3+0x9a>
    1efa:	020b      	lsls	r3, r1, #8
    1efc:	1ac0      	subs	r0, r0, r3
    1efe:	4152      	adcs	r2, r2
    1f00:	d2cd      	bcs.n	1e9e <__udivsi3+0x3a>
    1f02:	09c3      	lsrs	r3, r0, #7
    1f04:	428b      	cmp	r3, r1
    1f06:	d301      	bcc.n	1f0c <__udivsi3+0xa8>
    1f08:	01cb      	lsls	r3, r1, #7
    1f0a:	1ac0      	subs	r0, r0, r3
    1f0c:	4152      	adcs	r2, r2
    1f0e:	0983      	lsrs	r3, r0, #6
    1f10:	428b      	cmp	r3, r1
    1f12:	d301      	bcc.n	1f18 <__udivsi3+0xb4>
    1f14:	018b      	lsls	r3, r1, #6
    1f16:	1ac0      	subs	r0, r0, r3
    1f18:	4152      	adcs	r2, r2
    1f1a:	0943      	lsrs	r3, r0, #5
    1f1c:	428b      	cmp	r3, r1
    1f1e:	d301      	bcc.n	1f24 <__udivsi3+0xc0>
    1f20:	014b      	lsls	r3, r1, #5
    1f22:	1ac0      	subs	r0, r0, r3
    1f24:	4152      	adcs	r2, r2
    1f26:	0903      	lsrs	r3, r0, #4
    1f28:	428b      	cmp	r3, r1
    1f2a:	d301      	bcc.n	1f30 <__udivsi3+0xcc>
    1f2c:	010b      	lsls	r3, r1, #4
    1f2e:	1ac0      	subs	r0, r0, r3
    1f30:	4152      	adcs	r2, r2
    1f32:	08c3      	lsrs	r3, r0, #3
    1f34:	428b      	cmp	r3, r1
    1f36:	d301      	bcc.n	1f3c <__udivsi3+0xd8>
    1f38:	00cb      	lsls	r3, r1, #3
    1f3a:	1ac0      	subs	r0, r0, r3
    1f3c:	4152      	adcs	r2, r2
    1f3e:	0883      	lsrs	r3, r0, #2
    1f40:	428b      	cmp	r3, r1
    1f42:	d301      	bcc.n	1f48 <__udivsi3+0xe4>
    1f44:	008b      	lsls	r3, r1, #2
    1f46:	1ac0      	subs	r0, r0, r3
    1f48:	4152      	adcs	r2, r2
    1f4a:	0843      	lsrs	r3, r0, #1
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d301      	bcc.n	1f54 <__udivsi3+0xf0>
    1f50:	004b      	lsls	r3, r1, #1
    1f52:	1ac0      	subs	r0, r0, r3
    1f54:	4152      	adcs	r2, r2
    1f56:	1a41      	subs	r1, r0, r1
    1f58:	d200      	bcs.n	1f5c <__udivsi3+0xf8>
    1f5a:	4601      	mov	r1, r0
    1f5c:	4152      	adcs	r2, r2
    1f5e:	4610      	mov	r0, r2
    1f60:	4770      	bx	lr
    1f62:	e7ff      	b.n	1f64 <__udivsi3+0x100>
    1f64:	b501      	push	{r0, lr}
    1f66:	2000      	movs	r0, #0
    1f68:	f000 f806 	bl	1f78 <__aeabi_idiv0>
    1f6c:	bd02      	pop	{r1, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)

00001f70 <__aeabi_uidivmod>:
    1f70:	2900      	cmp	r1, #0
    1f72:	d0f7      	beq.n	1f64 <__udivsi3+0x100>
    1f74:	e776      	b.n	1e64 <__udivsi3>
    1f76:	4770      	bx	lr

00001f78 <__aeabi_idiv0>:
    1f78:	4770      	bx	lr
    1f7a:	46c0      	nop			; (mov r8, r8)

00001f7c <__libc_init_array>:
    1f7c:	b570      	push	{r4, r5, r6, lr}
    1f7e:	2600      	movs	r6, #0
    1f80:	4d0c      	ldr	r5, [pc, #48]	; (1fb4 <__libc_init_array+0x38>)
    1f82:	4c0d      	ldr	r4, [pc, #52]	; (1fb8 <__libc_init_array+0x3c>)
    1f84:	1b64      	subs	r4, r4, r5
    1f86:	10a4      	asrs	r4, r4, #2
    1f88:	42a6      	cmp	r6, r4
    1f8a:	d109      	bne.n	1fa0 <__libc_init_array+0x24>
    1f8c:	2600      	movs	r6, #0
    1f8e:	f000 f847 	bl	2020 <_init>
    1f92:	4d0a      	ldr	r5, [pc, #40]	; (1fbc <__libc_init_array+0x40>)
    1f94:	4c0a      	ldr	r4, [pc, #40]	; (1fc0 <__libc_init_array+0x44>)
    1f96:	1b64      	subs	r4, r4, r5
    1f98:	10a4      	asrs	r4, r4, #2
    1f9a:	42a6      	cmp	r6, r4
    1f9c:	d105      	bne.n	1faa <__libc_init_array+0x2e>
    1f9e:	bd70      	pop	{r4, r5, r6, pc}
    1fa0:	00b3      	lsls	r3, r6, #2
    1fa2:	58eb      	ldr	r3, [r5, r3]
    1fa4:	4798      	blx	r3
    1fa6:	3601      	adds	r6, #1
    1fa8:	e7ee      	b.n	1f88 <__libc_init_array+0xc>
    1faa:	00b3      	lsls	r3, r6, #2
    1fac:	58eb      	ldr	r3, [r5, r3]
    1fae:	4798      	blx	r3
    1fb0:	3601      	adds	r6, #1
    1fb2:	e7f2      	b.n	1f9a <__libc_init_array+0x1e>
    1fb4:	0000202c 	.word	0x0000202c
    1fb8:	0000202c 	.word	0x0000202c
    1fbc:	0000202c 	.word	0x0000202c
    1fc0:	00002030 	.word	0x00002030

00001fc4 <memcpy>:
    1fc4:	2300      	movs	r3, #0
    1fc6:	b510      	push	{r4, lr}
    1fc8:	429a      	cmp	r2, r3
    1fca:	d100      	bne.n	1fce <memcpy+0xa>
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	5ccc      	ldrb	r4, [r1, r3]
    1fd0:	54c4      	strb	r4, [r0, r3]
    1fd2:	3301      	adds	r3, #1
    1fd4:	e7f8      	b.n	1fc8 <memcpy+0x4>

00001fd6 <memset>:
    1fd6:	0003      	movs	r3, r0
    1fd8:	1882      	adds	r2, r0, r2
    1fda:	4293      	cmp	r3, r2
    1fdc:	d100      	bne.n	1fe0 <memset+0xa>
    1fde:	4770      	bx	lr
    1fe0:	7019      	strb	r1, [r3, #0]
    1fe2:	3301      	adds	r3, #1
    1fe4:	e7f9      	b.n	1fda <memset+0x4>

00001fe6 <strlen>:
    1fe6:	2300      	movs	r3, #0
    1fe8:	5cc2      	ldrb	r2, [r0, r3]
    1fea:	3301      	adds	r3, #1
    1fec:	2a00      	cmp	r2, #0
    1fee:	d1fb      	bne.n	1fe8 <strlen+0x2>
    1ff0:	1e58      	subs	r0, r3, #1
    1ff2:	4770      	bx	lr
    1ff4:	42000800 	.word	0x42000800
    1ff8:	42000c00 	.word	0x42000c00
    1ffc:	42001000 	.word	0x42001000
    2000:	42001400 	.word	0x42001400
    2004:	42001800 	.word	0x42001800
    2008:	42001c00 	.word	0x42001c00
    200c:	aa083862 	.word	0xaa083862
    2010:	532b5441 	.word	0x532b5441
    2014:	3d444e45 	.word	0x3d444e45
    2018:	74736574 	.word	0x74736574
    201c:	00000a0d 	.word	0x00000a0d

00002020 <_init>:
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2026:	bc08      	pop	{r3}
    2028:	469e      	mov	lr, r3
    202a:	4770      	bx	lr

0000202c <__init_array_start>:
    202c:	000000dd 	.word	0x000000dd

00002030 <_fini>:
    2030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2036:	bc08      	pop	{r3}
    2038:	469e      	mov	lr, r3
    203a:	4770      	bx	lr

0000203c <__fini_array_start>:
    203c:	000000b5 	.word	0x000000b5
