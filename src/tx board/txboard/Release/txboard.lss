
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ee0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  2000000c  00001eec  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000c4  00001fa4  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023f3d  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000300a  00000000  00000000  00043fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000044ad  00000000  00000000  00046fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000488  00000000  00000000  0004b481  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008c0  00000000  00000000  0004b909  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004caf  00000000  00000000  0004c1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005bf1  00000000  00000000  00050e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bc0  00000000  00000000  00056a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 20 00 20 dd 1a 00 00 d9 1a 00 00 d9 1a 00 00     . . ............
	...
      2c:	d9 1a 00 00 00 00 00 00 00 00 00 00 d9 1a 00 00     ................
      3c:	d9 1a 00 00 d9 1a 00 00 d9 1a 00 00 d9 1a 00 00     ................
      4c:	d9 1a 00 00 d9 1a 00 00 d9 1a 00 00 d9 1a 00 00     ................
      5c:	d9 1a 00 00 d9 1a 00 00 c9 14 00 00 d9 14 00 00     ................
      6c:	e9 14 00 00 f9 14 00 00 09 15 00 00 19 15 00 00     ................
      7c:	d9 1a 00 00 d9 1a 00 00 d9 1a 00 00 d9 1a 00 00     ................
      8c:	d9 1a 00 00 d9 1a 00 00 d9 1a 00 00 d9 1a 00 00     ................
      9c:	d9 1a 00 00 d9 1a 00 00 d9 1a 00 00 d9 1a 00 00     ................
      ac:	d9 1a 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001ee0 	.word	0x00001ee0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001ee0 	.word	0x00001ee0
     10c:	00001ee0 	.word	0x00001ee0
     110:	00000000 	.word	0x00000000

00000114 <spi169_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initialize the SPI SERCOM for the 169 MHz module
 */
void spi169_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (spi169InitComp == true)
     116:	4e2c      	ldr	r6, [pc, #176]	; (1c8 <spi169_init+0xb4>)
{
     118:	b091      	sub	sp, #68	; 0x44
	if (spi169InitComp == true)
     11a:	7831      	ldrb	r1, [r6, #0]
     11c:	2900      	cmp	r1, #0
     11e:	d14f      	bne.n	1c0 <spi169_init+0xac>
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     120:	230d      	movs	r3, #13
	config->mode             = SPI_MODE_MASTER;
     122:	2501      	movs	r5, #1
	config->generator_source = GCLK_GENERATOR_0;
     124:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
     126:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
     128:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     12a:	220c      	movs	r2, #12
     12c:	4b27      	ldr	r3, [pc, #156]	; (1cc <spi169_init+0xb8>)
     12e:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
     130:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     132:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
     134:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
     136:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     138:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     13a:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
     13c:	9103      	str	r1, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     13e:	9104      	str	r1, [sp, #16]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     140:	4798      	blx	r3
	port_get_config_defaults(&pinConf);
    
    // get defaults for lcd master config
	spi_get_config_defaults(&spi169MasterConf);
    
    spi169MasterConf.mux_setting = SPI169_PINXMUX;
     142:	2398      	movs	r3, #152	; 0x98
     144:	035b      	lsls	r3, r3, #13
     146:	60e3      	str	r3, [r4, #12]
    spi169MasterConf.pinmux_pad0 = MOSI169;
     148:	4b21      	ldr	r3, [pc, #132]	; (1d0 <spi169_init+0xbc>)
	// clock source should always be GLCK0
	spi169MasterConf.generator_source = SPI169_CLK;
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;

	// enable the master
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     14a:	4f22      	ldr	r7, [pc, #136]	; (1d4 <spi169_init+0xc0>)
    spi169MasterConf.pinmux_pad0 = MOSI169;
     14c:	62a3      	str	r3, [r4, #40]	; 0x28
    spi169MasterConf.pinmux_pad1 = SCK169;
     14e:	4b22      	ldr	r3, [pc, #136]	; (1d8 <spi169_init+0xc4>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     150:	0022      	movs	r2, r4
    spi169MasterConf.pinmux_pad1 = SCK169;
     152:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi169MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     154:	2301      	movs	r3, #1
     156:	425b      	negs	r3, r3
     158:	6323      	str	r3, [r4, #48]	; 0x30
    spi169MasterConf.pinmux_pad3 = MISO169;
     15a:	4b20      	ldr	r3, [pc, #128]	; (1dc <spi169_init+0xc8>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     15c:	4920      	ldr	r1, [pc, #128]	; (1e0 <spi169_init+0xcc>)
    spi169MasterConf.pinmux_pad3 = MISO169;
     15e:	6363      	str	r3, [r4, #52]	; 0x34
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;
     160:	4b20      	ldr	r3, [pc, #128]	; (1e4 <spi169_init+0xd0>)
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     162:	0038      	movs	r0, r7
	spi169MasterConf.mode_specific.master.baudrate = SPI169MAXCLK;
     164:	61a3      	str	r3, [r4, #24]
	spi_init(&spi169Master, SPI169, &spi169MasterConf);
     166:	4b20      	ldr	r3, [pc, #128]	; (1e8 <spi169_init+0xd4>)
     168:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     16a:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     16c:	4b1f      	ldr	r3, [pc, #124]	; (1ec <spi169_init+0xd8>)
     16e:	0020      	movs	r0, r4
     170:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     172:	231f      	movs	r3, #31
     174:	4018      	ands	r0, r3
     176:	4085      	lsls	r5, r0
     178:	4b1d      	ldr	r3, [pc, #116]	; (1f0 <spi169_init+0xdc>)
     17a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     17c:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     17e:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     180:	2d00      	cmp	r5, #0
     182:	d1fc      	bne.n	17e <spi169_init+0x6a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     184:	2302      	movs	r3, #2
     186:	6822      	ldr	r2, [r4, #0]
	slave->ss_pin          = config->ss_pin;
     188:	2011      	movs	r0, #17
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     18a:	4313      	orrs	r3, r2
     18c:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     18e:	2401      	movs	r4, #1
	slave->ss_pin          = config->ss_pin;
     190:	4f18      	ldr	r7, [pc, #96]	; (1f4 <spi169_init+0xe0>)
     192:	a901      	add	r1, sp, #4
	port_pin_set_config(slave->ss_pin, &pin_conf);
     194:	4b18      	ldr	r3, [pc, #96]	; (1f8 <spi169_init+0xe4>)
     196:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
     198:	708d      	strb	r5, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     19a:	700c      	strb	r4, [r1, #0]
	slave->ss_pin          = config->ss_pin;
     19c:	7038      	strb	r0, [r7, #0]
	slave->address_enabled = config->address_enabled;
     19e:	707d      	strb	r5, [r7, #1]
	slave->address         = config->address;
     1a0:	70bd      	strb	r5, [r7, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1a2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1a4:	783a      	ldrb	r2, [r7, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     1a6:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1a8:	09d1      	lsrs	r1, r2, #7
     1aa:	d10b      	bne.n	1c4 <spi169_init+0xb0>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ac:	311f      	adds	r1, #31
     1ae:	400a      	ands	r2, r1
     1b0:	0021      	movs	r1, r4
     1b2:	4091      	lsls	r1, r2
     1b4:	000a      	movs	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1b6:	4911      	ldr	r1, [pc, #68]	; (1fc <spi169_init+0xe8>)
     1b8:	01db      	lsls	r3, r3, #7
     1ba:	185b      	adds	r3, r3, r1
     1bc:	619a      	str	r2, [r3, #24]
	// change configs as necessary
	spi169SlaveConf.ss_pin = SS169;
	// attach the slave configs to the slave
	spi_attach_slave(&spi169Slave, &spi169SlaveConf);
    
    spi169InitComp = true;
     1be:	7034      	strb	r4, [r6, #0]
}
     1c0:	b011      	add	sp, #68	; 0x44
     1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1c4:	61ad      	str	r5, [r5, #24]
     1c6:	deff      	udf	#255	; 0xff
     1c8:	20000028 	.word	0x20000028
     1cc:	00001e93 	.word	0x00001e93
     1d0:	00100002 	.word	0x00100002
     1d4:	20000068 	.word	0x20000068
     1d8:	00130002 	.word	0x00130002
     1dc:	00120002 	.word	0x00120002
     1e0:	42000c00 	.word	0x42000c00
     1e4:	000f4240 	.word	0x000f4240
     1e8:	00000b11 	.word	0x00000b11
     1ec:	0000149d 	.word	0x0000149d
     1f0:	e000e100 	.word	0xe000e100
     1f4:	200000a4 	.word	0x200000a4
     1f8:	00000851 	.word	0x00000851
     1fc:	41004400 	.word	0x41004400

00000200 <spi169_start_xfer>:
 * Return Values(s) : ASF general status code
 * Description      : Begins a SPI transfer with the 169 MHz module. Sends the
 *  starting address of the read/write and reads the status bits of the module.
 */
status_code_genare_t spi169_start_xfer(spiAddr169 paramAddr, xferDir169 dir)
{
     200:	b537      	push	{r0, r1, r2, r4, r5, lr}
     202:	466b      	mov	r3, sp
     204:	1d9c      	adds	r4, r3, #6
    status_code_genare_t read_status;

    // set the upper nibble of the address to all ones
    paramAddr |= 0xF000;
    
    if(dir == READ)
     206:	2900      	cmp	r1, #0
     208:	d016      	beq.n	238 <spi169_start_xfer+0x38>
    paramAddr |= 0xF000;
     20a:	4b0e      	ldr	r3, [pc, #56]	; (244 <spi169_start_xfer+0x44>)
    {
        //clear the MSB of the address if it's a read
        paramAddr &= 0x7FFF;
     20c:	4318      	orrs	r0, r3
     20e:	8020      	strh	r0, [r4, #0]
    }        
    // else leave it unchanged, because the MSB = 1 if it's a write
    
    // swap the address bytes so the most significant byte is transferred first
    paramAddr = ((paramAddr >> 8) & 0x00FF) | (paramAddr << 8);
     210:	8823      	ldrh	r3, [r4, #0]
     212:	0a1a      	lsrs	r2, r3, #8
     214:	021b      	lsls	r3, r3, #8
     216:	4313      	orrs	r3, r2
     218:	8023      	strh	r3, [r4, #0]
    
    do{
        // select the slave
        read_status = spi_select_slave(&spi169Master, &spi169Slave, true);
     21a:	4d0b      	ldr	r5, [pc, #44]	; (248 <spi169_start_xfer+0x48>)
     21c:	2201      	movs	r2, #1
     21e:	490b      	ldr	r1, [pc, #44]	; (24c <spi169_start_xfer+0x4c>)
     220:	0028      	movs	r0, r5
     222:	4b0b      	ldr	r3, [pc, #44]	; (250 <spi169_start_xfer+0x50>)
     224:	4798      	blx	r3
    }while(read_status == STATUS_BUSY);
     226:	2805      	cmp	r0, #5
     228:	d0f7      	beq.n	21a <spi169_start_xfer+0x1a>
    
    /* perform a SPI transceive (write AND read). Write the param address and
     * read the status bits from the module */
    read_status = spi_transceive_buffer_wait(&spi169Master, (uint8_t*) &paramAddr, 
     22a:	0021      	movs	r1, r4
     22c:	0028      	movs	r0, r5
     22e:	2302      	movs	r3, #2
     230:	4a08      	ldr	r2, [pc, #32]	; (254 <spi169_start_xfer+0x54>)
     232:	4c09      	ldr	r4, [pc, #36]	; (258 <spi169_start_xfer+0x58>)
     234:	47a0      	blx	r4
                    (uint8_t*) &spi169_status_bits, 2);
    
    return read_status;
}
     236:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        paramAddr &= 0x7FFF;
     238:	23e0      	movs	r3, #224	; 0xe0
     23a:	0440      	lsls	r0, r0, #17
     23c:	0c40      	lsrs	r0, r0, #17
     23e:	01db      	lsls	r3, r3, #7
     240:	e7e4      	b.n	20c <spi169_start_xfer+0xc>
     242:	46c0      	nop			; (mov r8, r8)
     244:	fffff000 	.word	0xfffff000
     248:	20000068 	.word	0x20000068
     24c:	200000a4 	.word	0x200000a4
     250:	00000e0d 	.word	0x00000e0d
     254:	2000002a 	.word	0x2000002a
     258:	00001065 	.word	0x00001065

0000025c <spi169_stop_xfer>:
 * Parameters       : void
 * Return Values(s) : ASF general status code
 * Description      : Stops a transfer, i.e. releases slave select.
 */
status_code_genare_t spi169_stop_xfer(void)
{
     25c:	b510      	push	{r4, lr}
    // deselect slave
    return spi_select_slave(&spi169Master, &spi169Slave, false);
     25e:	2200      	movs	r2, #0
     260:	4902      	ldr	r1, [pc, #8]	; (26c <spi169_stop_xfer+0x10>)
     262:	4803      	ldr	r0, [pc, #12]	; (270 <spi169_stop_xfer+0x14>)
     264:	4b03      	ldr	r3, [pc, #12]	; (274 <spi169_stop_xfer+0x18>)
     266:	4798      	blx	r3
}
     268:	bd10      	pop	{r4, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	200000a4 	.word	0x200000a4
     270:	20000068 	.word	0x20000068
     274:	00000e0d 	.word	0x00000e0d

00000278 <spi169_read>:
 * Description      : Reads a number of bytes specified by amount_bytes into
 *  read_buff. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_read(uint8_t* read_buff, \
    uint16_t amount_bytes)
{
     278:	b510      	push	{r4, lr}
     27a:	000a      	movs	r2, r1
    status_code_genare_t read_status;
    
    // data read
    read_status = spi_read_buffer_wait(&spi169Master, \
     27c:	2300      	movs	r3, #0
     27e:	0001      	movs	r1, r0
     280:	4c01      	ldr	r4, [pc, #4]	; (288 <spi169_read+0x10>)
     282:	4802      	ldr	r0, [pc, #8]	; (28c <spi169_read+0x14>)
     284:	47a0      	blx	r4
                    read_buff, amount_bytes, 0x0000);
    
    return read_status;
}
     286:	bd10      	pop	{r4, pc}
     288:	00000d19 	.word	0x00000d19
     28c:	20000068 	.word	0x20000068

00000290 <spi169_rd8>:
 * Parameters       : read_addr (address to read from)
 * Return Values(s) : a byte
 * Description      : Reads a single byte from the 169 MHz module at read_addr.
 */
uint8_t spi169_rd8(spiAddr169 read_addr)
{
     290:	b513      	push	{r0, r1, r4, lr}
    uint8_t read_byte = 0;
     292:	2100      	movs	r1, #0
     294:	466b      	mov	r3, sp
     296:	1ddc      	adds	r4, r3, #7
     298:	71d9      	strb	r1, [r3, #7]
    
    spi169_start_xfer(read_addr, READ);
     29a:	4b05      	ldr	r3, [pc, #20]	; (2b0 <spi169_rd8+0x20>)
     29c:	4798      	blx	r3
    
    // read one byte
    spi169_read(&read_byte, 1);
     29e:	2101      	movs	r1, #1
     2a0:	0020      	movs	r0, r4
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <spi169_rd8+0x24>)
     2a4:	4798      	blx	r3
    
    spi169_stop_xfer();
     2a6:	4b04      	ldr	r3, [pc, #16]	; (2b8 <spi169_rd8+0x28>)
     2a8:	4798      	blx	r3
    
    return read_byte;
     2aa:	7820      	ldrb	r0, [r4, #0]
}
     2ac:	bd16      	pop	{r1, r2, r4, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00000201 	.word	0x00000201
     2b4:	00000279 	.word	0x00000279
     2b8:	0000025d 	.word	0x0000025d

000002bc <spi169_write>:
 * Return Values(s) : ASF general status code
 * Description      : Writes a number of bytes specified by amount_bytes to
 *  the 169 MHz module. Used with spi169_start_xfer and spi169_stop_xfer().
 */
status_code_genare_t spi169_write(uint8_t* wrt_buff, uint16_t amount_bytes)
{
     2bc:	b510      	push	{r4, lr}
     2be:	000a      	movs	r2, r1
    status_code_genare_t wrt_status;
    
    wrt_status = spi_write_buffer_wait(&spi169Master, wrt_buff, amount_bytes);
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <spi169_write+0x10>)
     2c2:	0001      	movs	r1, r0
     2c4:	4802      	ldr	r0, [pc, #8]	; (2d0 <spi169_write+0x14>)
     2c6:	4798      	blx	r3
    
    return wrt_status;
}
     2c8:	bd10      	pop	{r4, pc}
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	00000ea5 	.word	0x00000ea5
     2d0:	20000068 	.word	0x20000068

000002d4 <spi169_wr8>:
 * Parameters       : wrt_addr (address to write to), wrt_byte
 * Return Values(s) : ASF general status code
 * Description      : Writes a single byte to the 169 MHz module at wrt_addr.
 */
status_code_genare_t spi169_wr8(spiAddr169 wrt_addr, uint8_t wrt_byte)
{
     2d4:	b513      	push	{r0, r1, r4, lr}
     2d6:	466b      	mov	r3, sp
     2d8:	1ddc      	adds	r4, r3, #7
     2da:	71d9      	strb	r1, [r3, #7]
    status_code_genare_t status_result;
    
    spi169_start_xfer(wrt_addr, WRT);
     2dc:	2101      	movs	r1, #1
     2de:	4b05      	ldr	r3, [pc, #20]	; (2f4 <spi169_wr8+0x20>)
     2e0:	4798      	blx	r3
    
    // specify the buffer length to be one byte
    status_result = spi169_write(&wrt_byte, 1);
     2e2:	2101      	movs	r1, #1
     2e4:	0020      	movs	r0, r4
     2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <spi169_wr8+0x24>)
     2e8:	4798      	blx	r3
     2ea:	0004      	movs	r4, r0
    
    spi169_stop_xfer();
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <spi169_wr8+0x28>)
     2ee:	4798      	blx	r3
    
    return status_result;
}
     2f0:	0020      	movs	r0, r4
     2f2:	bd16      	pop	{r1, r2, r4, pc}
     2f4:	00000201 	.word	0x00000201
     2f8:	000002bd 	.word	0x000002bd
     2fc:	0000025d 	.word	0x0000025d

00000300 <spi169_autorange>:
 * Return Values(s) : void
 * Description      : Performs autoranging on the AX5043 PLL. See
 *  pg13 of the AX043 programmer's manual for more information.
 */
void spi169_autorange(void)
{
     300:	b510      	push	{r4, lr}
    spi169_wr8(AX5043_PLLRANGINGA, 0xFF);
     302:	21ff      	movs	r1, #255	; 0xff
     304:	2033      	movs	r0, #51	; 0x33
     306:	4b04      	ldr	r3, [pc, #16]	; (318 <spi169_autorange+0x18>)
     308:	4798      	blx	r3
    
    while(spi169_rd8(AX5043_PLLRANGINGA) & 0x10);   
     30a:	2410      	movs	r4, #16
     30c:	2033      	movs	r0, #51	; 0x33
     30e:	4b03      	ldr	r3, [pc, #12]	; (31c <spi169_autorange+0x1c>)
     310:	4798      	blx	r3
     312:	4220      	tst	r0, r4
     314:	d1fa      	bne.n	30c <spi169_autorange+0xc>
    
}
     316:	bd10      	pop	{r4, pc}
     318:	000002d5 	.word	0x000002d5
     31c:	00000291 	.word	0x00000291

00000320 <spi169_tx_init>:
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Initializes a 169 MHz module for transmitting.
 */
void spi169_tx_init(void)
{
     320:	b570      	push	{r4, r5, r6, lr}
    // set 169 MHz module to standby power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_STANDBY);
     322:	2165      	movs	r1, #101	; 0x65
     324:	4cfe      	ldr	r4, [pc, #1016]	; (720 <spi169_tx_init+0x400>)
     326:	2002      	movs	r0, #2
     328:	47a0      	blx	r4
    delay_ms(100);
     32a:	4dfe      	ldr	r5, [pc, #1016]	; (724 <spi169_tx_init+0x404>)
     32c:	2064      	movs	r0, #100	; 0x64
     32e:	47a8      	blx	r5
    
    // register settings generated by Radiolab software
    spi169_wr8(AX5043_MODULATION, 0x08);
     330:	2108      	movs	r1, #8
     332:	2010      	movs	r0, #16
     334:	47a0      	blx	r4
    spi169_wr8(AX5043_ENCODING, 0x00);
     336:	2100      	movs	r1, #0
     338:	2011      	movs	r0, #17
     33a:	47a0      	blx	r4
    spi169_wr8(AX5043_FRAMING, 0x06);
     33c:	2106      	movs	r1, #6
     33e:	2012      	movs	r0, #18
     340:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCSYSCLK, 0x02);
     342:	2102      	movs	r1, #2
     344:	2021      	movs	r0, #33	; 0x21
     346:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCDCLK, 0x02);
     348:	2102      	movs	r1, #2
     34a:	2022      	movs	r0, #34	; 0x22
     34c:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCDATA, 0x02);
     34e:	2102      	movs	r1, #2
     350:	2023      	movs	r0, #35	; 0x23
     352:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCANTSEL, 0x02);
     354:	2102      	movs	r1, #2
     356:	2025      	movs	r0, #37	; 0x25
     358:	47a0      	blx	r4
    spi169_wr8(AX5043_PINFUNCPWRAMP, 0x02);
     35a:	2102      	movs	r1, #2
     35c:	2026      	movs	r0, #38	; 0x26
     35e:	47a0      	blx	r4
    spi169_wr8(AX5043_WAKEUPXOEARLY, 0x01);
     360:	2101      	movs	r1, #1
     362:	206e      	movs	r0, #110	; 0x6e
     364:	47a0      	blx	r4
    spi169_wr8(AX5043_IFFREQ1, 0x06);
     366:	2080      	movs	r0, #128	; 0x80
     368:	2106      	movs	r1, #6
     36a:	0040      	lsls	r0, r0, #1
     36c:	47a0      	blx	r4
    spi169_wr8(AX5043_IFFREQ0, 0x66);
     36e:	2002      	movs	r0, #2
     370:	2166      	movs	r1, #102	; 0x66
     372:	30ff      	adds	r0, #255	; 0xff
     374:	47a0      	blx	r4
    spi169_wr8(AX5043_DECIMATION, 0x05);
     376:	2081      	movs	r0, #129	; 0x81
     378:	2105      	movs	r1, #5
     37a:	0040      	lsls	r0, r0, #1
     37c:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE2, 0x05);
     37e:	2004      	movs	r0, #4
     380:	2105      	movs	r1, #5
     382:	30ff      	adds	r0, #255	; 0xff
     384:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE1, 0x35);
     386:	2082      	movs	r0, #130	; 0x82
     388:	2135      	movs	r1, #53	; 0x35
     38a:	0040      	lsls	r0, r0, #1
     38c:	47a0      	blx	r4
    spi169_wr8(AX5043_RXDATARATE0, 0x55);
     38e:	2006      	movs	r0, #6
     390:	2155      	movs	r1, #85	; 0x55
     392:	30ff      	adds	r0, #255	; 0xff
     394:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET2, 0x00);
     396:	2083      	movs	r0, #131	; 0x83
     398:	2100      	movs	r1, #0
     39a:	0040      	lsls	r0, r0, #1
     39c:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET1, 0x00);
     39e:	2008      	movs	r0, #8
     3a0:	2100      	movs	r1, #0
     3a2:	30ff      	adds	r0, #255	; 0xff
     3a4:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXDROFFSET0, 0x00);
     3a6:	2084      	movs	r0, #132	; 0x84
     3a8:	2100      	movs	r1, #0
     3aa:	0040      	lsls	r0, r0, #1
     3ac:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET2, 0x80);
     3ae:	200a      	movs	r0, #10
     3b0:	2180      	movs	r1, #128	; 0x80
     3b2:	30ff      	adds	r0, #255	; 0xff
     3b4:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET1, 0x29);
     3b6:	2085      	movs	r0, #133	; 0x85
     3b8:	2129      	movs	r1, #41	; 0x29
     3ba:	0040      	lsls	r0, r0, #1
     3bc:	47a0      	blx	r4
    spi169_wr8(AX5043_MAXRFOFFSET0, 0x89);
     3be:	200c      	movs	r0, #12
     3c0:	2189      	movs	r1, #137	; 0x89
     3c2:	30ff      	adds	r0, #255	; 0xff
     3c4:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMAX1, 0x22);
     3c6:	2086      	movs	r0, #134	; 0x86
     3c8:	2122      	movs	r1, #34	; 0x22
     3ca:	0040      	lsls	r0, r0, #1
     3cc:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMAX0, 0xC0);
     3ce:	200e      	movs	r0, #14
     3d0:	21c0      	movs	r1, #192	; 0xc0
     3d2:	30ff      	adds	r0, #255	; 0xff
     3d4:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMIN1, 0xDD);
     3d6:	2087      	movs	r0, #135	; 0x87
     3d8:	21dd      	movs	r1, #221	; 0xdd
     3da:	0040      	lsls	r0, r0, #1
     3dc:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDMIN0, 0x40);
     3de:	2010      	movs	r0, #16
     3e0:	2140      	movs	r1, #64	; 0x40
     3e2:	30ff      	adds	r0, #255	; 0xff
     3e4:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLFILTER, 0x00);
     3e6:	2016      	movs	r0, #22
     3e8:	2100      	movs	r1, #0
     3ea:	30ff      	adds	r0, #255	; 0xff
     3ec:	47a0      	blx	r4
    spi169_wr8(AX5043_RXPARAMSETS, 0xF4);
     3ee:	2018      	movs	r0, #24
     3f0:	21f4      	movs	r1, #244	; 0xf4
     3f2:	30ff      	adds	r0, #255	; 0xff
     3f4:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN0, 0xE8);
     3f6:	2090      	movs	r0, #144	; 0x90
     3f8:	21e8      	movs	r1, #232	; 0xe8
     3fa:	0040      	lsls	r0, r0, #1
     3fc:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET0, 0x84);
     3fe:	2022      	movs	r0, #34	; 0x22
     400:	2184      	movs	r1, #132	; 0x84
     402:	30ff      	adds	r0, #255	; 0xff
     404:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN0, 0xAD);
     406:	2092      	movs	r0, #146	; 0x92
     408:	21ad      	movs	r1, #173	; 0xad
     40a:	0040      	lsls	r0, r0, #1
     40c:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN0, 0xA7);
     40e:	2026      	movs	r0, #38	; 0x26
     410:	21a7      	movs	r1, #167	; 0xa7
     412:	30ff      	adds	r0, #255	; 0xff
     414:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN0, 0xC3);
     416:	2093      	movs	r0, #147	; 0x93
     418:	21c3      	movs	r1, #195	; 0xc3
     41a:	0040      	lsls	r0, r0, #1
     41c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA0, 0x0F);
     41e:	2028      	movs	r0, #40	; 0x28
     420:	210f      	movs	r1, #15
     422:	30ff      	adds	r0, #255	; 0xff
     424:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB0, 0x1F);
     426:	2094      	movs	r0, #148	; 0x94
     428:	211f      	movs	r1, #31
     42a:	0040      	lsls	r0, r0, #1
     42c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC0, 0x0A);
     42e:	202a      	movs	r0, #42	; 0x2a
     430:	210a      	movs	r1, #10
     432:	30ff      	adds	r0, #255	; 0xff
     434:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND0, 0x0A);
     436:	2095      	movs	r0, #149	; 0x95
     438:	210a      	movs	r1, #10
     43a:	0040      	lsls	r0, r0, #1
     43c:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN0, 0x06);
     43e:	202c      	movs	r0, #44	; 0x2c
     440:	2106      	movs	r1, #6
     442:	30ff      	adds	r0, #255	; 0xff
     444:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV10, 0x00);
     446:	2096      	movs	r0, #150	; 0x96
     448:	2100      	movs	r1, #0
     44a:	0040      	lsls	r0, r0, #1
     44c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV00, 0x00);
     44e:	202e      	movs	r0, #46	; 0x2e
     450:	2100      	movs	r1, #0
     452:	30ff      	adds	r0, #255	; 0xff
     454:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES0, 0x00);
     456:	2030      	movs	r0, #48	; 0x30
     458:	2100      	movs	r1, #0
     45a:	30ff      	adds	r0, #255	; 0xff
     45c:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN1, 0xE8);
     45e:	2098      	movs	r0, #152	; 0x98
     460:	21e8      	movs	r1, #232	; 0xe8
     462:	0040      	lsls	r0, r0, #1
     464:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET1, 0x84);
     466:	2032      	movs	r0, #50	; 0x32
     468:	2184      	movs	r1, #132	; 0x84
     46a:	30ff      	adds	r0, #255	; 0xff
     46c:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCAHYST1, 0x00);
     46e:	2099      	movs	r0, #153	; 0x99
     470:	2100      	movs	r1, #0
     472:	0040      	lsls	r0, r0, #1
     474:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCMINMAX1, 0x00);
     476:	2034      	movs	r0, #52	; 0x34
     478:	2100      	movs	r1, #0
     47a:	30ff      	adds	r0, #255	; 0xff
     47c:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN1, 0xAB);
     47e:	209a      	movs	r0, #154	; 0x9a
     480:	21ab      	movs	r1, #171	; 0xab
     482:	0040      	lsls	r0, r0, #1
     484:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN1, 0xA6);
     486:	2036      	movs	r0, #54	; 0x36
     488:	21a6      	movs	r1, #166	; 0xa6
     48a:	30ff      	adds	r0, #255	; 0xff
     48c:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN1, 0xC3);
     48e:	209b      	movs	r0, #155	; 0x9b
     490:	21c3      	movs	r1, #195	; 0xc3
     492:	0040      	lsls	r0, r0, #1
     494:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA1, 0x0F);
     496:	2038      	movs	r0, #56	; 0x38
     498:	210f      	movs	r1, #15
     49a:	30ff      	adds	r0, #255	; 0xff
     49c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB1, 0x1F);
     49e:	209c      	movs	r0, #156	; 0x9c
     4a0:	211f      	movs	r1, #31
     4a2:	0040      	lsls	r0, r0, #1
     4a4:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC1, 0x0A);
     4a6:	203a      	movs	r0, #58	; 0x3a
     4a8:	210a      	movs	r1, #10
     4aa:	30ff      	adds	r0, #255	; 0xff
     4ac:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND1, 0x0A);
     4ae:	209d      	movs	r0, #157	; 0x9d
     4b0:	210a      	movs	r1, #10
     4b2:	0040      	lsls	r0, r0, #1
     4b4:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN1, 0x06);
     4b6:	203c      	movs	r0, #60	; 0x3c
     4b8:	2106      	movs	r1, #6
     4ba:	30ff      	adds	r0, #255	; 0xff
     4bc:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV11, 0x00);
     4be:	209e      	movs	r0, #158	; 0x9e
     4c0:	2100      	movs	r1, #0
     4c2:	0040      	lsls	r0, r0, #1
     4c4:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV01, 0x4B);
     4c6:	203e      	movs	r0, #62	; 0x3e
     4c8:	214b      	movs	r1, #75	; 0x4b
     4ca:	30ff      	adds	r0, #255	; 0xff
     4cc:	47a0      	blx	r4
    spi169_wr8(AX5043_FOURFSK1, 0x16);
     4ce:	209f      	movs	r0, #159	; 0x9f
     4d0:	2116      	movs	r1, #22
     4d2:	0040      	lsls	r0, r0, #1
     4d4:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES1, 0x00);
     4d6:	2040      	movs	r0, #64	; 0x40
     4d8:	2100      	movs	r1, #0
     4da:	30ff      	adds	r0, #255	; 0xff
     4dc:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCGAIN3, 0xFF);
     4de:	20a8      	movs	r0, #168	; 0xa8
     4e0:	21ff      	movs	r1, #255	; 0xff
     4e2:	0040      	lsls	r0, r0, #1
     4e4:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCTARGET3, 0x84);
     4e6:	2052      	movs	r0, #82	; 0x52
     4e8:	2184      	movs	r1, #132	; 0x84
     4ea:	30ff      	adds	r0, #255	; 0xff
     4ec:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCAHYST3, 0x00);
     4ee:	20a9      	movs	r0, #169	; 0xa9
     4f0:	2100      	movs	r1, #0
     4f2:	0040      	lsls	r0, r0, #1
     4f4:	47a0      	blx	r4
    spi169_wr8(AX5043_AGCMINMAX3, 0x00);
     4f6:	2054      	movs	r0, #84	; 0x54
     4f8:	2100      	movs	r1, #0
     4fa:	30ff      	adds	r0, #255	; 0xff
     4fc:	47a0      	blx	r4
    spi169_wr8(AX5043_TIMEGAIN3, 0xAA);
     4fe:	20aa      	movs	r0, #170	; 0xaa
     500:	21aa      	movs	r1, #170	; 0xaa
     502:	0040      	lsls	r0, r0, #1
     504:	47a0      	blx	r4
    spi169_wr8(AX5043_DRGAIN3, 0xA5);
     506:	2056      	movs	r0, #86	; 0x56
     508:	21a5      	movs	r1, #165	; 0xa5
     50a:	30ff      	adds	r0, #255	; 0xff
     50c:	47a0      	blx	r4
    spi169_wr8(AX5043_PHASEGAIN3, 0xC3);
     50e:	20ab      	movs	r0, #171	; 0xab
     510:	21c3      	movs	r1, #195	; 0xc3
     512:	0040      	lsls	r0, r0, #1
     514:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINA3, 0x0F);
     516:	2058      	movs	r0, #88	; 0x58
     518:	210f      	movs	r1, #15
     51a:	30ff      	adds	r0, #255	; 0xff
     51c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINB3, 0x1F);
     51e:	20ac      	movs	r0, #172	; 0xac
     520:	211f      	movs	r1, #31
     522:	0040      	lsls	r0, r0, #1
     524:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAINC3, 0x0D);
     526:	205a      	movs	r0, #90	; 0x5a
     528:	210d      	movs	r1, #13
     52a:	30ff      	adds	r0, #255	; 0xff
     52c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQGAIND3, 0x0D);
     52e:	20ad      	movs	r0, #173	; 0xad
     530:	210d      	movs	r1, #13
     532:	0040      	lsls	r0, r0, #1
     534:	47a0      	blx	r4
    spi169_wr8(AX5043_AMPLGAIN3, 0x06);
     536:	205c      	movs	r0, #92	; 0x5c
     538:	2106      	movs	r1, #6
     53a:	30ff      	adds	r0, #255	; 0xff
     53c:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV13, 0x00);
     53e:	20ae      	movs	r0, #174	; 0xae
     540:	2100      	movs	r1, #0
     542:	0040      	lsls	r0, r0, #1
     544:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQDEV03, 0x4B);
     546:	205e      	movs	r0, #94	; 0x5e
     548:	214b      	movs	r1, #75	; 0x4b
     54a:	30ff      	adds	r0, #255	; 0xff
     54c:	47a0      	blx	r4
    spi169_wr8(AX5043_FOURFSK3, 0x16);
     54e:	20af      	movs	r0, #175	; 0xaf
     550:	2116      	movs	r1, #22
     552:	0040      	lsls	r0, r0, #1
     554:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSRES3, 0x00);
     556:	2060      	movs	r0, #96	; 0x60
     558:	2100      	movs	r1, #0
     55a:	30ff      	adds	r0, #255	; 0xff
     55c:	47a0      	blx	r4
    spi169_wr8(AX5043_MODCFGF, 0x00);
     55e:	20b0      	movs	r0, #176	; 0xb0
     560:	2100      	movs	r1, #0
     562:	0040      	lsls	r0, r0, #1
     564:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV2, 0x00);
     566:	2062      	movs	r0, #98	; 0x62
     568:	2100      	movs	r1, #0
     56a:	30ff      	adds	r0, #255	; 0xff
     56c:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV1, 0x02);
     56e:	20b1      	movs	r0, #177	; 0xb1
     570:	2102      	movs	r1, #2
     572:	0040      	lsls	r0, r0, #1
     574:	47a0      	blx	r4
    spi169_wr8(AX5043_FSKDEV0, 0x0C);
     576:	2064      	movs	r0, #100	; 0x64
     578:	210c      	movs	r1, #12
     57a:	30ff      	adds	r0, #255	; 0xff
     57c:	47a0      	blx	r4
    spi169_wr8(AX5043_MODCFGA, 0x01);
     57e:	20b2      	movs	r0, #178	; 0xb2
     580:	2101      	movs	r1, #1
     582:	0040      	lsls	r0, r0, #1
     584:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE2, 0x00);
     586:	2066      	movs	r0, #102	; 0x66
     588:	2100      	movs	r1, #0
     58a:	30ff      	adds	r0, #255	; 0xff
     58c:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE1, 0x04);
     58e:	20b3      	movs	r0, #179	; 0xb3
     590:	2104      	movs	r1, #4
     592:	0040      	lsls	r0, r0, #1
     594:	47a0      	blx	r4
    spi169_wr8(AX5043_TXRATE0, 0xEA);
     596:	2068      	movs	r0, #104	; 0x68
     598:	21ea      	movs	r1, #234	; 0xea
     59a:	30ff      	adds	r0, #255	; 0xff
     59c:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFA1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     59e:	20b4      	movs	r0, #180	; 0xb4
     5a0:	210f      	movs	r1, #15
     5a2:	0040      	lsls	r0, r0, #1
     5a4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFA0, TXPWR0);
     5a6:	206a      	movs	r0, #106	; 0x6a
     5a8:	21ff      	movs	r1, #255	; 0xff
     5aa:	30ff      	adds	r0, #255	; 0xff
     5ac:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFB1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5ae:	20b5      	movs	r0, #181	; 0xb5
     5b0:	210f      	movs	r1, #15
     5b2:	0040      	lsls	r0, r0, #1
     5b4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFB0, TXPWR0);
     5b6:	206c      	movs	r0, #108	; 0x6c
     5b8:	21ff      	movs	r1, #255	; 0xff
     5ba:	30ff      	adds	r0, #255	; 0xff
     5bc:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFC1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5be:	20b6      	movs	r0, #182	; 0xb6
     5c0:	210f      	movs	r1, #15
     5c2:	0040      	lsls	r0, r0, #1
     5c4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFC0, TXPWR0);
     5c6:	206e      	movs	r0, #110	; 0x6e
     5c8:	21ff      	movs	r1, #255	; 0xff
     5ca:	30ff      	adds	r0, #255	; 0xff
     5cc:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFD1, TXPWR1); //0 = 0x207, -10 = 0x0AA
     5ce:	20b7      	movs	r0, #183	; 0xb7
     5d0:	210f      	movs	r1, #15
     5d2:	0040      	lsls	r0, r0, #1
     5d4:	47a0      	blx	r4
    spi169_wr8(AX5043_TXPWRCOEFFD0, TXPWR0);
     5d6:	2070      	movs	r0, #112	; 0x70
     5d8:	21ff      	movs	r1, #255	; 0xff
     5da:	30ff      	adds	r0, #255	; 0xff
     5dc:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLVCOI, 0x8A);
     5de:	20c0      	movs	r0, #192	; 0xc0
     5e0:	218a      	movs	r1, #138	; 0x8a
     5e2:	0040      	lsls	r0, r0, #1
     5e4:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLRNGCLK, 0x03);
     5e6:	2084      	movs	r0, #132	; 0x84
     5e8:	2103      	movs	r1, #3
     5ea:	30ff      	adds	r0, #255	; 0xff
     5ec:	47a0      	blx	r4
    spi169_wr8(AX5043_BBTUNE, 0x0F);
     5ee:	20c4      	movs	r0, #196	; 0xc4
     5f0:	210f      	movs	r1, #15
     5f2:	0040      	lsls	r0, r0, #1
     5f4:	47a0      	blx	r4
    spi169_wr8(AX5043_BBOFFSCAP, 0x77);
     5f6:	208a      	movs	r0, #138	; 0x8a
     5f8:	2177      	movs	r1, #119	; 0x77
     5fa:	30ff      	adds	r0, #255	; 0xff
     5fc:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTADDRCFG, 0x80);
     5fe:	2080      	movs	r0, #128	; 0x80
     600:	2180      	movs	r1, #128	; 0x80
     602:	0080      	lsls	r0, r0, #2
     604:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTLENCFG, 0x00);
     606:	2100      	movs	r1, #0
     608:	4847      	ldr	r0, [pc, #284]	; (728 <spi169_tx_init+0x408>)
     60a:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTLENOFFSET, 0x04);
     60c:	2104      	movs	r1, #4
     60e:	4847      	ldr	r0, [pc, #284]	; (72c <spi169_tx_init+0x40c>)
     610:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTMAXLEN, 0xC8);
     612:	21c8      	movs	r1, #200	; 0xc8
     614:	4846      	ldr	r0, [pc, #280]	; (730 <spi169_tx_init+0x410>)
     616:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT3, 0xAA);
     618:	2084      	movs	r0, #132	; 0x84
     61a:	21aa      	movs	r1, #170	; 0xaa
     61c:	0080      	lsls	r0, r0, #2
     61e:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT2, 0xCC);
     620:	21cc      	movs	r1, #204	; 0xcc
     622:	4844      	ldr	r0, [pc, #272]	; (734 <spi169_tx_init+0x414>)
     624:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT1, 0xAA);
     626:	21aa      	movs	r1, #170	; 0xaa
     628:	4843      	ldr	r0, [pc, #268]	; (738 <spi169_tx_init+0x418>)
     62a:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0PAT0, 0xCC);
     62c:	21cc      	movs	r1, #204	; 0xcc
     62e:	4843      	ldr	r0, [pc, #268]	; (73c <spi169_tx_init+0x41c>)
     630:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0LEN, 0x9F);
     632:	2085      	movs	r0, #133	; 0x85
     634:	219f      	movs	r1, #159	; 0x9f
     636:	0080      	lsls	r0, r0, #2
     638:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH0MAX, 0x1F);
     63a:	211f      	movs	r1, #31
     63c:	4840      	ldr	r0, [pc, #256]	; (740 <spi169_tx_init+0x420>)
     63e:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1PAT1, 0x55);
     640:	2086      	movs	r0, #134	; 0x86
     642:	2155      	movs	r1, #85	; 0x55
     644:	0080      	lsls	r0, r0, #2
     646:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1PAT0, 0x55);
     648:	2155      	movs	r1, #85	; 0x55
     64a:	483e      	ldr	r0, [pc, #248]	; (744 <spi169_tx_init+0x424>)
     64c:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1LEN, 0x8A);
     64e:	2087      	movs	r0, #135	; 0x87
     650:	218a      	movs	r1, #138	; 0x8a
     652:	0080      	lsls	r0, r0, #2
     654:	47a0      	blx	r4
    spi169_wr8(AX5043_MATCH1MAX, 0x0A);
     656:	210a      	movs	r1, #10
     658:	483b      	ldr	r0, [pc, #236]	; (748 <spi169_tx_init+0x428>)
     65a:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGTXBOOST, 0x32);
     65c:	2088      	movs	r0, #136	; 0x88
     65e:	2132      	movs	r1, #50	; 0x32
     660:	0080      	lsls	r0, r0, #2
     662:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGTXSETTLE, 0x14);
     664:	2114      	movs	r1, #20
     666:	4839      	ldr	r0, [pc, #228]	; (74c <spi169_tx_init+0x42c>)
     668:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXBOOST, 0x32);
     66a:	2132      	movs	r1, #50	; 0x32
     66c:	4838      	ldr	r0, [pc, #224]	; (750 <spi169_tx_init+0x430>)
     66e:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXSETTLE, 0x14);
     670:	2089      	movs	r0, #137	; 0x89
     672:	2114      	movs	r1, #20
     674:	0080      	lsls	r0, r0, #2
     676:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXOFFSACQ, 0x00);
     678:	2100      	movs	r1, #0
     67a:	4836      	ldr	r0, [pc, #216]	; (754 <spi169_tx_init+0x434>)
     67c:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXCOARSEAGC, 0x73);
     67e:	2173      	movs	r1, #115	; 0x73
     680:	4835      	ldr	r0, [pc, #212]	; (758 <spi169_tx_init+0x438>)
     682:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXRSSI, 0x03);
     684:	208a      	movs	r0, #138	; 0x8a
     686:	2103      	movs	r1, #3
     688:	0080      	lsls	r0, r0, #2
     68a:	47a0      	blx	r4
    spi169_wr8(AX5043_TMGRXPREAMBLE2, 0x35);
     68c:	2135      	movs	r1, #53	; 0x35
     68e:	4833      	ldr	r0, [pc, #204]	; (75c <spi169_tx_init+0x43c>)
     690:	47a0      	blx	r4
    spi169_wr8(AX5043_RSSIABSTHR, 0xE6);
     692:	21e6      	movs	r1, #230	; 0xe6
     694:	4832      	ldr	r0, [pc, #200]	; (760 <spi169_tx_init+0x440>)
     696:	47a0      	blx	r4
    spi169_wr8(AX5043_BGNDRSSITHR, 0x00);
     698:	2100      	movs	r1, #0
     69a:	4832      	ldr	r0, [pc, #200]	; (764 <spi169_tx_init+0x444>)
     69c:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTCHUNKSIZE, 0x0D);
     69e:	208c      	movs	r0, #140	; 0x8c
     6a0:	210d      	movs	r1, #13
     6a2:	0080      	lsls	r0, r0, #2
     6a4:	47a0      	blx	r4
    spi169_wr8(AX5043_PKTACCEPTFLAGS, 0x20);
     6a6:	2120      	movs	r1, #32
     6a8:	482f      	ldr	r0, [pc, #188]	; (768 <spi169_tx_init+0x448>)
     6aa:	47a0      	blx	r4
    spi169_wr8(AX5043_DACVALUE1, 0x00);
     6ac:	20cc      	movs	r0, #204	; 0xcc
     6ae:	2100      	movs	r1, #0
     6b0:	0080      	lsls	r0, r0, #2
     6b2:	47a0      	blx	r4
    spi169_wr8(AX5043_DACVALUE0, 0x00);
     6b4:	2100      	movs	r1, #0
     6b6:	482d      	ldr	r0, [pc, #180]	; (76c <spi169_tx_init+0x44c>)
     6b8:	47a0      	blx	r4
    spi169_wr8(AX5043_DACCONFIG, 0x00);
     6ba:	2100      	movs	r1, #0
     6bc:	482c      	ldr	r0, [pc, #176]	; (770 <spi169_tx_init+0x450>)
     6be:	47a0      	blx	r4
    spi169_wr8(AX5043_REF, 0x03);
     6c0:	2103      	movs	r1, #3
     6c2:	482c      	ldr	r0, [pc, #176]	; (774 <spi169_tx_init+0x454>)
     6c4:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALOSC, 0x03);
     6c6:	20f1      	movs	r0, #241	; 0xf1
     6c8:	2103      	movs	r1, #3
     6ca:	0100      	lsls	r0, r0, #4
     6cc:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALAMPL, 0x07);
     6ce:	2107      	movs	r1, #7
     6d0:	4829      	ldr	r0, [pc, #164]	; (778 <spi169_tx_init+0x458>)
     6d2:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF1C, 0x07);
     6d4:	2107      	movs	r1, #7
     6d6:	4829      	ldr	r0, [pc, #164]	; (77c <spi169_tx_init+0x45c>)
     6d8:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF21, 0x68);
     6da:	2168      	movs	r1, #104	; 0x68
     6dc:	4828      	ldr	r0, [pc, #160]	; (780 <spi169_tx_init+0x460>)
     6de:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF22, 0xFF);
     6e0:	21ff      	movs	r1, #255	; 0xff
     6e2:	4828      	ldr	r0, [pc, #160]	; (784 <spi169_tx_init+0x464>)
     6e4:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF23, 0x84);
     6e6:	2184      	movs	r1, #132	; 0x84
     6e8:	4827      	ldr	r0, [pc, #156]	; (788 <spi169_tx_init+0x468>)
     6ea:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF26, 0x98);
     6ec:	2198      	movs	r1, #152	; 0x98
     6ee:	4827      	ldr	r0, [pc, #156]	; (78c <spi169_tx_init+0x46c>)
     6f0:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF34, 0x08);
     6f2:	2108      	movs	r1, #8
     6f4:	4826      	ldr	r0, [pc, #152]	; (790 <spi169_tx_init+0x470>)
     6f6:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF35, 0x10);
     6f8:	2110      	movs	r1, #16
     6fa:	4826      	ldr	r0, [pc, #152]	; (794 <spi169_tx_init+0x474>)
     6fc:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF44, 0x25);
     6fe:	2125      	movs	r1, #37	; 0x25
     700:	4825      	ldr	r0, [pc, #148]	; (798 <spi169_tx_init+0x478>)
     702:	47a0      	blx	r4
    
    spi169_wr8(AX5043_PLLLOOP, 0x09);
     704:	2109      	movs	r1, #9
     706:	2030      	movs	r0, #48	; 0x30
     708:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLCPI, 0x02);
     70a:	2102      	movs	r1, #2
     70c:	2031      	movs	r0, #49	; 0x31
     70e:	47a0      	blx	r4
    spi169_wr8(AX5043_PLLVCODIV, 0x30);
     710:	2130      	movs	r1, #48	; 0x30
     712:	2032      	movs	r0, #50	; 0x32
     714:	47a0      	blx	r4
    spi169_wr8(AX5043_XTALCAP, 0x13);
     716:	20c2      	movs	r0, #194	; 0xc2
     718:	2113      	movs	r1, #19
     71a:	0040      	lsls	r0, r0, #1
     71c:	e03e      	b.n	79c <spi169_tx_init+0x47c>
     71e:	46c0      	nop			; (mov r8, r8)
     720:	000002d5 	.word	0x000002d5
     724:	00000825 	.word	0x00000825
     728:	00000201 	.word	0x00000201
     72c:	00000202 	.word	0x00000202
     730:	00000203 	.word	0x00000203
     734:	00000211 	.word	0x00000211
     738:	00000212 	.word	0x00000212
     73c:	00000213 	.word	0x00000213
     740:	00000216 	.word	0x00000216
     744:	00000219 	.word	0x00000219
     748:	0000021e 	.word	0x0000021e
     74c:	00000221 	.word	0x00000221
     750:	00000223 	.word	0x00000223
     754:	00000225 	.word	0x00000225
     758:	00000226 	.word	0x00000226
     75c:	0000022a 	.word	0x0000022a
     760:	0000022d 	.word	0x0000022d
     764:	0000022f 	.word	0x0000022f
     768:	00000233 	.word	0x00000233
     76c:	00000331 	.word	0x00000331
     770:	00000332 	.word	0x00000332
     774:	00000f0d 	.word	0x00000f0d
     778:	00000f11 	.word	0x00000f11
     77c:	00000f1c 	.word	0x00000f1c
     780:	00000f21 	.word	0x00000f21
     784:	00000f22 	.word	0x00000f22
     788:	00000f23 	.word	0x00000f23
     78c:	00000f26 	.word	0x00000f26
     790:	00000f34 	.word	0x00000f34
     794:	00000f35 	.word	0x00000f35
     798:	00000f44 	.word	0x00000f44
     79c:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF00, 0x0F);
     79e:	20f0      	movs	r0, #240	; 0xf0
     7a0:	210f      	movs	r1, #15
     7a2:	0100      	lsls	r0, r0, #4
     7a4:	47a0      	blx	r4
    spi169_wr8(AX5043_0xF18, 0x06);
     7a6:	2106      	movs	r1, #6
     7a8:	480c      	ldr	r0, [pc, #48]	; (7dc <spi169_tx_init+0x4bc>)
     7aa:	47a0      	blx	r4
    
    //set the freqeuency (169 MHz)
    spi169_wr8(AX5043_FREQA0, 0x01);
     7ac:	2101      	movs	r1, #1
     7ae:	2037      	movs	r0, #55	; 0x37
     7b0:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA1, 0x00);
     7b2:	2100      	movs	r1, #0
     7b4:	2036      	movs	r0, #54	; 0x36
     7b6:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA2, 0x90);
     7b8:	2190      	movs	r1, #144	; 0x90
     7ba:	2035      	movs	r0, #53	; 0x35
     7bc:	47a0      	blx	r4
    spi169_wr8(AX5043_FREQA3, 0x0A);
     7be:	210a      	movs	r1, #10
     7c0:	2034      	movs	r0, #52	; 0x34
     7c2:	47a0      	blx	r4
    
    // wait for crystal to start COMMENTED OUT FOR DEBUG PURPOSESSS AAHAHHHHH
//    while((spi169_rd8(AX5043_XTALSTATUS) & 0x01) != 1);
    
    // autorange the PLL once crystal has settled
    spi169_autorange();
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <spi169_tx_init+0x4c0>)
     7c6:	4798      	blx	r3
    
    // clear the FIFO
    spi169_wr8(AX5043_FIFOSTAT, (1 << 7));
     7c8:	2180      	movs	r1, #128	; 0x80
     7ca:	2028      	movs	r0, #40	; 0x28
     7cc:	47a0      	blx	r4

    // set to full transmit power mode
    spi169_wr8(AX5043_PWRMODE, 0x60 | AX5043_FULLTX);
     7ce:	216d      	movs	r1, #109	; 0x6d
     7d0:	2002      	movs	r0, #2
     7d2:	47a0      	blx	r4
    delay_ms(100);
     7d4:	2064      	movs	r0, #100	; 0x64
     7d6:	47a8      	blx	r5
     7d8:	bd70      	pop	{r4, r5, r6, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	00000f18 	.word	0x00000f18
     7e0:	00000301 	.word	0x00000301

000007e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7e6:	4b09      	ldr	r3, [pc, #36]	; (80c <delay_init+0x28>)
     7e8:	2000      	movs	r0, #0
     7ea:	4798      	blx	r3
	cycles_per_ms /= 1000;
     7ec:	21fa      	movs	r1, #250	; 0xfa
     7ee:	4c08      	ldr	r4, [pc, #32]	; (810 <delay_init+0x2c>)
     7f0:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7f2:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7f4:	47a0      	blx	r4
     7f6:	4b07      	ldr	r3, [pc, #28]	; (814 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     7f8:	4907      	ldr	r1, [pc, #28]	; (818 <delay_init+0x34>)
	cycles_per_ms /= 1000;
     7fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7fc:	0028      	movs	r0, r5
     7fe:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     800:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     802:	4b06      	ldr	r3, [pc, #24]	; (81c <delay_init+0x38>)
     804:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     806:	4b06      	ldr	r3, [pc, #24]	; (820 <delay_init+0x3c>)
     808:	601a      	str	r2, [r3, #0]
}
     80a:	bd70      	pop	{r4, r5, r6, pc}
     80c:	00001899 	.word	0x00001899
     810:	00001d21 	.word	0x00001d21
     814:	20000000 	.word	0x20000000
     818:	000f4240 	.word	0x000f4240
     81c:	20000004 	.word	0x20000004
     820:	e000e010 	.word	0xe000e010

00000824 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     824:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     826:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     828:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     82a:	4b07      	ldr	r3, [pc, #28]	; (848 <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     82c:	0264      	lsls	r4, r4, #9
     82e:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     830:	4b06      	ldr	r3, [pc, #24]	; (84c <delay_cycles_ms+0x28>)
	while (n--) {
     832:	3801      	subs	r0, #1
     834:	d200      	bcs.n	838 <delay_cycles_ms+0x14>
	}
}
     836:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     838:	2a00      	cmp	r2, #0
     83a:	d0fa      	beq.n	832 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     83c:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     83e:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     840:	681d      	ldr	r5, [r3, #0]
     842:	4225      	tst	r5, r4
     844:	d0fc      	beq.n	840 <delay_cycles_ms+0x1c>
     846:	e7f4      	b.n	832 <delay_cycles_ms+0xe>
     848:	20000000 	.word	0x20000000
     84c:	e000e010 	.word	0xe000e010

00000850 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     850:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     852:	2280      	movs	r2, #128	; 0x80
     854:	ab01      	add	r3, sp, #4
     856:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     858:	780a      	ldrb	r2, [r1, #0]
     85a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     85c:	784a      	ldrb	r2, [r1, #1]
     85e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     860:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     862:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     864:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     866:	4b01      	ldr	r3, [pc, #4]	; (86c <port_pin_set_config+0x1c>)
     868:	4798      	blx	r3
}
     86a:	bd07      	pop	{r0, r1, r2, pc}
     86c:	00001a7d 	.word	0x00001a7d

00000870 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     870:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     872:	0849      	lsrs	r1, r1, #1
{
     874:	0004      	movs	r4, r0
     876:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     878:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     87a:	42a1      	cmp	r1, r4
     87c:	d201      	bcs.n	882 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     87e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     880:	0003      	movs	r3, r0
     882:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     884:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     886:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     888:	428c      	cmp	r4, r1
     88a:	d9f9      	bls.n	880 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     88c:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     88e:	2bff      	cmp	r3, #255	; 0xff
     890:	d8f5      	bhi.n	87e <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     892:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     894:	2000      	movs	r0, #0
     896:	e7f2      	b.n	87e <_sercom_get_sync_baud_val+0xe>

00000898 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     898:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     89a:	4c0d      	ldr	r4, [pc, #52]	; (8d0 <sercom_set_gclk_generator+0x38>)
{
     89c:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     89e:	7823      	ldrb	r3, [r4, #0]
     8a0:	2b00      	cmp	r3, #0
     8a2:	d001      	beq.n	8a8 <sercom_set_gclk_generator+0x10>
     8a4:	2900      	cmp	r1, #0
     8a6:	d00c      	beq.n	8c2 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     8a8:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8aa:	2013      	movs	r0, #19
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     8ae:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     8b0:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8b2:	2013      	movs	r0, #19
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <sercom_set_gclk_generator+0x40>)
     8b6:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     8b8:	2301      	movs	r3, #1

		return STATUS_OK;
     8ba:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     8bc:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     8be:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     8c2:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     8c4:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     8c6:	42ab      	cmp	r3, r5
     8c8:	d0fa      	beq.n	8c0 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     8ca:	201d      	movs	r0, #29
     8cc:	e7f8      	b.n	8c0 <sercom_set_gclk_generator+0x28>
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	2000002c 	.word	0x2000002c
     8d4:	000019a9 	.word	0x000019a9
     8d8:	00001921 	.word	0x00001921

000008dc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8dc:	4a39      	ldr	r2, [pc, #228]	; (9c4 <_sercom_get_default_pad+0xe8>)
{
     8de:	0003      	movs	r3, r0
     8e0:	b500      	push	{lr}
     8e2:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     8e4:	4293      	cmp	r3, r2
     8e6:	d033      	beq.n	950 <_sercom_get_default_pad+0x74>
     8e8:	d807      	bhi.n	8fa <_sercom_get_default_pad+0x1e>
     8ea:	4a37      	ldr	r2, [pc, #220]	; (9c8 <_sercom_get_default_pad+0xec>)
     8ec:	4293      	cmp	r3, r2
     8ee:	d014      	beq.n	91a <_sercom_get_default_pad+0x3e>
     8f0:	4a36      	ldr	r2, [pc, #216]	; (9cc <_sercom_get_default_pad+0xf0>)
     8f2:	4293      	cmp	r3, r2
     8f4:	d01f      	beq.n	936 <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8f6:	2300      	movs	r3, #0
     8f8:	e017      	b.n	92a <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     8fa:	4a35      	ldr	r2, [pc, #212]	; (9d0 <_sercom_get_default_pad+0xf4>)
     8fc:	4293      	cmp	r3, r2
     8fe:	d03a      	beq.n	976 <_sercom_get_default_pad+0x9a>
     900:	4a34      	ldr	r2, [pc, #208]	; (9d4 <_sercom_get_default_pad+0xf8>)
     902:	4293      	cmp	r3, r2
     904:	d044      	beq.n	990 <_sercom_get_default_pad+0xb4>
     906:	4a34      	ldr	r2, [pc, #208]	; (9d8 <_sercom_get_default_pad+0xfc>)
     908:	4293      	cmp	r3, r2
     90a:	d1f4      	bne.n	8f6 <_sercom_get_default_pad+0x1a>
	return 0;
     90c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90e:	2903      	cmp	r1, #3
     910:	d80b      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     912:	f001 f9fb 	bl	1d0c <__gnu_thumb1_case_uqi>
     916:	2a50      	.short	0x2a50
     918:	2e2c      	.short	0x2e2c
	return 0;
     91a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91c:	2903      	cmp	r1, #3
     91e:	d804      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     920:	f001 f9f4 	bl	1d0c <__gnu_thumb1_case_uqi>
     924:	07050243 	.word	0x07050243
     928:	4b2c      	ldr	r3, [pc, #176]	; (9dc <_sercom_get_default_pad+0x100>)
}
     92a:	0018      	movs	r0, r3
     92c:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     92e:	4b2c      	ldr	r3, [pc, #176]	; (9e0 <_sercom_get_default_pad+0x104>)
     930:	e7fb      	b.n	92a <_sercom_get_default_pad+0x4e>
     932:	4b2c      	ldr	r3, [pc, #176]	; (9e4 <_sercom_get_default_pad+0x108>)
     934:	e7f9      	b.n	92a <_sercom_get_default_pad+0x4e>
	return 0;
     936:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     938:	2903      	cmp	r1, #3
     93a:	d8f6      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     93c:	f001 f9e6 	bl	1d0c <__gnu_thumb1_case_uqi>
     940:	06040237 	.word	0x06040237
     944:	4b28      	ldr	r3, [pc, #160]	; (9e8 <_sercom_get_default_pad+0x10c>)
     946:	e7f0      	b.n	92a <_sercom_get_default_pad+0x4e>
     948:	4b28      	ldr	r3, [pc, #160]	; (9ec <_sercom_get_default_pad+0x110>)
     94a:	e7ee      	b.n	92a <_sercom_get_default_pad+0x4e>
     94c:	4b28      	ldr	r3, [pc, #160]	; (9f0 <_sercom_get_default_pad+0x114>)
     94e:	e7ec      	b.n	92a <_sercom_get_default_pad+0x4e>
	return 0;
     950:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     952:	2903      	cmp	r1, #3
     954:	d8e9      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     956:	f001 f9d9 	bl	1d0c <__gnu_thumb1_case_uqi>
     95a:	022c      	.short	0x022c
     95c:	0604      	.short	0x0604
     95e:	4b25      	ldr	r3, [pc, #148]	; (9f4 <_sercom_get_default_pad+0x118>)
     960:	e7e3      	b.n	92a <_sercom_get_default_pad+0x4e>
     962:	4b25      	ldr	r3, [pc, #148]	; (9f8 <_sercom_get_default_pad+0x11c>)
     964:	e7e1      	b.n	92a <_sercom_get_default_pad+0x4e>
     966:	4b25      	ldr	r3, [pc, #148]	; (9fc <_sercom_get_default_pad+0x120>)
     968:	e7df      	b.n	92a <_sercom_get_default_pad+0x4e>
     96a:	4b25      	ldr	r3, [pc, #148]	; (a00 <_sercom_get_default_pad+0x124>)
     96c:	e7dd      	b.n	92a <_sercom_get_default_pad+0x4e>
     96e:	4b25      	ldr	r3, [pc, #148]	; (a04 <_sercom_get_default_pad+0x128>)
     970:	e7db      	b.n	92a <_sercom_get_default_pad+0x4e>
     972:	4b25      	ldr	r3, [pc, #148]	; (a08 <_sercom_get_default_pad+0x12c>)
     974:	e7d9      	b.n	92a <_sercom_get_default_pad+0x4e>
	return 0;
     976:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     978:	2903      	cmp	r1, #3
     97a:	d8d6      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     97c:	f001 f9c6 	bl	1d0c <__gnu_thumb1_case_uqi>
     980:	0604021d 	.word	0x0604021d
     984:	4b21      	ldr	r3, [pc, #132]	; (a0c <_sercom_get_default_pad+0x130>)
     986:	e7d0      	b.n	92a <_sercom_get_default_pad+0x4e>
     988:	4b21      	ldr	r3, [pc, #132]	; (a10 <_sercom_get_default_pad+0x134>)
     98a:	e7ce      	b.n	92a <_sercom_get_default_pad+0x4e>
     98c:	4b21      	ldr	r3, [pc, #132]	; (a14 <_sercom_get_default_pad+0x138>)
     98e:	e7cc      	b.n	92a <_sercom_get_default_pad+0x4e>
	return 0;
     990:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     992:	2903      	cmp	r1, #3
     994:	d8c9      	bhi.n	92a <_sercom_get_default_pad+0x4e>
     996:	f001 f9b9 	bl	1d0c <__gnu_thumb1_case_uqi>
     99a:	0212      	.short	0x0212
     99c:	0604      	.short	0x0604
     99e:	4b1e      	ldr	r3, [pc, #120]	; (a18 <_sercom_get_default_pad+0x13c>)
     9a0:	e7c3      	b.n	92a <_sercom_get_default_pad+0x4e>
     9a2:	4b1e      	ldr	r3, [pc, #120]	; (a1c <_sercom_get_default_pad+0x140>)
     9a4:	e7c1      	b.n	92a <_sercom_get_default_pad+0x4e>
     9a6:	4b1e      	ldr	r3, [pc, #120]	; (a20 <_sercom_get_default_pad+0x144>)
     9a8:	e7bf      	b.n	92a <_sercom_get_default_pad+0x4e>
     9aa:	4b1e      	ldr	r3, [pc, #120]	; (a24 <_sercom_get_default_pad+0x148>)
     9ac:	e7bd      	b.n	92a <_sercom_get_default_pad+0x4e>
     9ae:	2303      	movs	r3, #3
     9b0:	e7bb      	b.n	92a <_sercom_get_default_pad+0x4e>
     9b2:	4b1d      	ldr	r3, [pc, #116]	; (a28 <_sercom_get_default_pad+0x14c>)
     9b4:	e7b9      	b.n	92a <_sercom_get_default_pad+0x4e>
     9b6:	4b1d      	ldr	r3, [pc, #116]	; (a2c <_sercom_get_default_pad+0x150>)
     9b8:	e7b7      	b.n	92a <_sercom_get_default_pad+0x4e>
     9ba:	4b1d      	ldr	r3, [pc, #116]	; (a30 <_sercom_get_default_pad+0x154>)
     9bc:	e7b5      	b.n	92a <_sercom_get_default_pad+0x4e>
     9be:	4b1d      	ldr	r3, [pc, #116]	; (a34 <_sercom_get_default_pad+0x158>)
     9c0:	e7b3      	b.n	92a <_sercom_get_default_pad+0x4e>
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	42001000 	.word	0x42001000
     9c8:	42000800 	.word	0x42000800
     9cc:	42000c00 	.word	0x42000c00
     9d0:	42001800 	.word	0x42001800
     9d4:	42001c00 	.word	0x42001c00
     9d8:	42001400 	.word	0x42001400
     9dc:	00050003 	.word	0x00050003
     9e0:	00060003 	.word	0x00060003
     9e4:	00070003 	.word	0x00070003
     9e8:	00010003 	.word	0x00010003
     9ec:	001e0003 	.word	0x001e0003
     9f0:	001f0003 	.word	0x001f0003
     9f4:	00090003 	.word	0x00090003
     9f8:	000a0003 	.word	0x000a0003
     9fc:	000b0003 	.word	0x000b0003
     a00:	00110003 	.word	0x00110003
     a04:	00120003 	.word	0x00120003
     a08:	00130003 	.word	0x00130003
     a0c:	000d0003 	.word	0x000d0003
     a10:	000e0003 	.word	0x000e0003
     a14:	000f0003 	.word	0x000f0003
     a18:	00170003 	.word	0x00170003
     a1c:	00180003 	.word	0x00180003
     a20:	00190003 	.word	0x00190003
     a24:	00040003 	.word	0x00040003
     a28:	00080003 	.word	0x00080003
     a2c:	00100003 	.word	0x00100003
     a30:	000c0003 	.word	0x000c0003
     a34:	00160003 	.word	0x00160003

00000a38 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a38:	b570      	push	{r4, r5, r6, lr}
     a3a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a3c:	4669      	mov	r1, sp
     a3e:	4b09      	ldr	r3, [pc, #36]	; (a64 <_sercom_get_sercom_inst_index+0x2c>)
     a40:	466a      	mov	r2, sp
     a42:	cb70      	ldmia	r3!, {r4, r5, r6}
     a44:	c170      	stmia	r1!, {r4, r5, r6}
     a46:	cb70      	ldmia	r3!, {r4, r5, r6}
     a48:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a4a:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a4c:	0099      	lsls	r1, r3, #2
     a4e:	5851      	ldr	r1, [r2, r1]
     a50:	4281      	cmp	r1, r0
     a52:	d102      	bne.n	a5a <_sercom_get_sercom_inst_index+0x22>
			return i;
     a54:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     a56:	b006      	add	sp, #24
     a58:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a5a:	3301      	adds	r3, #1
     a5c:	2b06      	cmp	r3, #6
     a5e:	d1f5      	bne.n	a4c <_sercom_get_sercom_inst_index+0x14>
	return 0;
     a60:	2000      	movs	r0, #0
     a62:	e7f8      	b.n	a56 <_sercom_get_sercom_inst_index+0x1e>
     a64:	00001ea4 	.word	0x00001ea4

00000a68 <port_pin_set_output_level>:
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a68:	2200      	movs	r2, #0
{
     a6a:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
     a6c:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
     a6e:	09c4      	lsrs	r4, r0, #7
     a70:	4294      	cmp	r4, r2
     a72:	d102      	bne.n	a7a <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
     a74:	01da      	lsls	r2, r3, #7
     a76:	4b06      	ldr	r3, [pc, #24]	; (a90 <port_pin_set_output_level+0x28>)
     a78:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a7a:	231f      	movs	r3, #31
     a7c:	4018      	ands	r0, r3
     a7e:	3b1e      	subs	r3, #30
     a80:	4083      	lsls	r3, r0
	if (level) {
     a82:	2900      	cmp	r1, #0
     a84:	d001      	beq.n	a8a <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
     a86:	6193      	str	r3, [r2, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     a88:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
     a8a:	6153      	str	r3, [r2, #20]
}
     a8c:	e7fc      	b.n	a88 <port_pin_set_output_level+0x20>
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	41004400 	.word	0x41004400

00000a94 <spi_is_write_complete>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a94:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     a96:	7e18      	ldrb	r0, [r3, #24]
     a98:	0780      	lsls	r0, r0, #30
     a9a:	0fc0      	lsrs	r0, r0, #31
}
     a9c:	4770      	bx	lr

00000a9e <spi_is_ready_to_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a9e:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     aa0:	7e18      	ldrb	r0, [r3, #24]
     aa2:	2301      	movs	r3, #1
     aa4:	4018      	ands	r0, r3
}
     aa6:	4770      	bx	lr

00000aa8 <spi_is_ready_to_read>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     aa8:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     aaa:	7e18      	ldrb	r0, [r3, #24]
     aac:	0740      	lsls	r0, r0, #29
     aae:	0fc0      	lsrs	r0, r0, #31
}
     ab0:	4770      	bx	lr
	...

00000ab4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     ab4:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ab6:	4b06      	ldr	r3, [pc, #24]	; (ad0 <spi_write+0x1c>)
{
     ab8:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     aba:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
     abc:	4798      	blx	r3
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     abe:	2305      	movs	r3, #5
	if (!spi_is_ready_to_write(module)) {
     ac0:	2800      	cmp	r0, #0
     ac2:	d003      	beq.n	acc <spi_write+0x18>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
     ac4:	2300      	movs	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ac6:	05e4      	lsls	r4, r4, #23
     ac8:	0de4      	lsrs	r4, r4, #23
     aca:	62ac      	str	r4, [r5, #40]	; 0x28
}
     acc:	0018      	movs	r0, r3
     ace:	bd70      	pop	{r4, r5, r6, pc}
     ad0:	00000a9f 	.word	0x00000a9f

00000ad4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ad6:	4b0d      	ldr	r3, [pc, #52]	; (b0c <spi_read+0x38>)
{
     ad8:	0006      	movs	r6, r0
     ada:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     adc:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_read(module)) {
     ade:	4798      	blx	r3
		/* No data has been received, return */
		return STATUS_ERR_IO;
     ae0:	2210      	movs	r2, #16
	if (!spi_is_ready_to_read(module)) {
     ae2:	2800      	cmp	r0, #0
     ae4:	d00d      	beq.n	b02 <spi_read+0x2e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ae6:	2304      	movs	r3, #4
     ae8:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
     aea:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     aec:	4219      	tst	r1, r3
     aee:	d001      	beq.n	af4 <spi_read+0x20>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     af0:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
     af2:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     af4:	79b3      	ldrb	r3, [r6, #6]
     af6:	2b01      	cmp	r3, #1
     af8:	d105      	bne.n	b06 <spi_read+0x32>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     afa:	6aab      	ldr	r3, [r5, #40]	; 0x28
     afc:	05db      	lsls	r3, r3, #23
     afe:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b00:	8023      	strh	r3, [r4, #0]
	}

	return retval;
}
     b02:	0010      	movs	r0, r2
     b04:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b06:	6aab      	ldr	r3, [r5, #40]	; 0x28
     b08:	b2db      	uxtb	r3, r3
     b0a:	e7f9      	b.n	b00 <spi_read+0x2c>
     b0c:	00000aa9 	.word	0x00000aa9

00000b10 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     b10:	b5f0      	push	{r4, r5, r6, r7, lr}
     b12:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b14:	6029      	str	r1, [r5, #0]
{
     b16:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b18:	680a      	ldr	r2, [r1, #0]
{
     b1a:	b089      	sub	sp, #36	; 0x24
     b1c:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b1e:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b20:	0792      	lsls	r2, r2, #30
     b22:	d500      	bpl.n	b26 <spi_init+0x16>
     b24:	e0d4      	b.n	cd0 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b26:	2701      	movs	r7, #1
     b28:	680b      	ldr	r3, [r1, #0]
     b2a:	403b      	ands	r3, r7
     b2c:	9301      	str	r3, [sp, #4]
     b2e:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     b30:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b32:	2a00      	cmp	r2, #0
     b34:	d000      	beq.n	b38 <spi_init+0x28>
     b36:	e0cb      	b.n	cd0 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b38:	0008      	movs	r0, r1
     b3a:	4b6a      	ldr	r3, [pc, #424]	; (ce4 <spi_init+0x1d4>)
     b3c:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b3e:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b40:	408f      	lsls	r7, r1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b42:	4b69      	ldr	r3, [pc, #420]	; (ce8 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b44:	3014      	adds	r0, #20
     b46:	6a1a      	ldr	r2, [r3, #32]
     b48:	4317      	orrs	r7, r2
     b4a:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b4c:	1d63      	adds	r3, r4, #5
     b4e:	7fdb      	ldrb	r3, [r3, #31]
     b50:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b52:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
     b54:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b56:	0011      	movs	r1, r2
     b58:	0038      	movs	r0, r7
     b5a:	4b64      	ldr	r3, [pc, #400]	; (cec <spi_init+0x1dc>)
     b5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b5e:	0038      	movs	r0, r7
     b60:	4b63      	ldr	r3, [pc, #396]	; (cf0 <spi_init+0x1e0>)
     b62:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b64:	1d63      	adds	r3, r4, #5
     b66:	7fd8      	ldrb	r0, [r3, #31]
     b68:	9901      	ldr	r1, [sp, #4]
     b6a:	4b62      	ldr	r3, [pc, #392]	; (cf4 <spi_init+0x1e4>)
     b6c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b6e:	7823      	ldrb	r3, [r4, #0]
     b70:	2b01      	cmp	r3, #1
     b72:	d103      	bne.n	b7c <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b74:	6832      	ldr	r2, [r6, #0]
     b76:	330b      	adds	r3, #11
     b78:	4313      	orrs	r3, r2
     b7a:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b7c:	7823      	ldrb	r3, [r4, #0]
     b7e:	2b00      	cmp	r3, #0
     b80:	d103      	bne.n	b8a <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b82:	6832      	ldr	r2, [r6, #0]
     b84:	3308      	adds	r3, #8
     b86:	4313      	orrs	r3, r2
     b88:	6033      	str	r3, [r6, #0]
     b8a:	002b      	movs	r3, r5
     b8c:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     b8e:	2600      	movs	r6, #0
     b90:	330c      	adds	r3, #12
     b92:	3228      	adds	r2, #40	; 0x28
     b94:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b96:	429a      	cmp	r2, r3
     b98:	d1fc      	bne.n	b94 <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     b9a:	002b      	movs	r3, r5
     b9c:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
     b9e:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
     ba0:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     ba2:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
     ba4:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
     ba6:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
     ba8:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
     baa:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
     bac:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     bae:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
     bb0:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     bb2:	4b4c      	ldr	r3, [pc, #304]	; (ce4 <spi_init+0x1d4>)
	module->locked                     = false;
     bb4:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     bb6:	4798      	blx	r3
     bb8:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     bba:	4b4f      	ldr	r3, [pc, #316]	; (cf8 <spi_init+0x1e8>)
     bbc:	494f      	ldr	r1, [pc, #316]	; (cfc <spi_init+0x1ec>)
     bbe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bc0:	4b4f      	ldr	r3, [pc, #316]	; (d00 <spi_init+0x1f0>)
     bc2:	00bf      	lsls	r7, r7, #2
     bc4:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bc6:	2380      	movs	r3, #128	; 0x80
     bc8:	aa02      	add	r2, sp, #8
     bca:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     bcc:	2301      	movs	r3, #1
     bce:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
     bd0:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     bd2:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bd4:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
     bd6:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
     bd8:	2b00      	cmp	r3, #0
     bda:	d100      	bne.n	bde <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bdc:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
     bde:	2600      	movs	r6, #0
     be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     be2:	9304      	str	r3, [sp, #16]
     be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     be6:	9305      	str	r3, [sp, #20]
     be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
     bea:	9306      	str	r3, [sp, #24]
     bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
     bee:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bf0:	00b3      	lsls	r3, r6, #2
     bf2:	aa04      	add	r2, sp, #16
     bf4:	5898      	ldr	r0, [r3, r2]
     bf6:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
     bf8:	2800      	cmp	r0, #0
     bfa:	d102      	bne.n	c02 <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bfc:	0038      	movs	r0, r7
     bfe:	4b41      	ldr	r3, [pc, #260]	; (d04 <spi_init+0x1f4>)
     c00:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
     c02:	1c43      	adds	r3, r0, #1
     c04:	d006      	beq.n	c14 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c06:	ab02      	add	r3, sp, #8
     c08:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c0a:	0c00      	lsrs	r0, r0, #16
     c0c:	b2c0      	uxtb	r0, r0
     c0e:	a903      	add	r1, sp, #12
     c10:	4b3d      	ldr	r3, [pc, #244]	; (d08 <spi_init+0x1f8>)
     c12:	4798      	blx	r3
     c14:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c16:	2e04      	cmp	r6, #4
     c18:	d1ea      	bne.n	bf0 <spi_init+0xe0>
	module->mode             = config->mode;
     c1a:	7823      	ldrb	r3, [r4, #0]
     c1c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     c1e:	7c23      	ldrb	r3, [r4, #16]
     c20:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     c22:	7ca3      	ldrb	r3, [r4, #18]
     c24:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     c26:	7d23      	ldrb	r3, [r4, #20]
     c28:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     c2a:	ab02      	add	r3, sp, #8
     c2c:	1c9e      	adds	r6, r3, #2
     c2e:	2300      	movs	r3, #0
     c30:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
     c32:	7823      	ldrb	r3, [r4, #0]
     c34:	2b01      	cmp	r3, #1
     c36:	d110      	bne.n	c5a <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c38:	4b2a      	ldr	r3, [pc, #168]	; (ce4 <spi_init+0x1d4>)
     c3a:	6828      	ldr	r0, [r5, #0]
     c3c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c3e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c40:	4b32      	ldr	r3, [pc, #200]	; (d0c <spi_init+0x1fc>)
     c42:	b2c0      	uxtb	r0, r0
     c44:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
     c46:	4b32      	ldr	r3, [pc, #200]	; (d10 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c48:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     c4a:	0032      	movs	r2, r6
     c4c:	69a0      	ldr	r0, [r4, #24]
     c4e:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
     c50:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
     c52:	2800      	cmp	r0, #0
     c54:	d13c      	bne.n	cd0 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
     c56:	7833      	ldrb	r3, [r6, #0]
     c58:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
     c5a:	7823      	ldrb	r3, [r4, #0]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d13d      	bne.n	cdc <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     c60:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c62:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
     c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     c66:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     c68:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     c6a:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
     c6c:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     c6e:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     c70:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
     c72:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     c74:	7fdb      	ldrb	r3, [r3, #31]
     c76:	2b00      	cmp	r3, #0
     c78:	d12d      	bne.n	cd6 <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
     c7a:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
     c7c:	68a1      	ldr	r1, [r4, #8]
     c7e:	6862      	ldr	r2, [r4, #4]
     c80:	430a      	orrs	r2, r1
     c82:	68e1      	ldr	r1, [r4, #12]
     c84:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
     c86:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
     c88:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
     c8a:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     c8c:	7c61      	ldrb	r1, [r4, #17]
     c8e:	2900      	cmp	r1, #0
     c90:	d103      	bne.n	c9a <spi_init+0x18a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c92:	4920      	ldr	r1, [pc, #128]	; (d14 <spi_init+0x204>)
     c94:	7889      	ldrb	r1, [r1, #2]
     c96:	0789      	lsls	r1, r1, #30
     c98:	d501      	bpl.n	c9e <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c9a:	2180      	movs	r1, #128	; 0x80
     c9c:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
     c9e:	7ca1      	ldrb	r1, [r4, #18]
     ca0:	2900      	cmp	r1, #0
     ca2:	d002      	beq.n	caa <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ca4:	2180      	movs	r1, #128	; 0x80
     ca6:	0289      	lsls	r1, r1, #10
     ca8:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
     caa:	7ce1      	ldrb	r1, [r4, #19]
     cac:	2900      	cmp	r1, #0
     cae:	d002      	beq.n	cb6 <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     cb0:	2180      	movs	r1, #128	; 0x80
     cb2:	0089      	lsls	r1, r1, #2
     cb4:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
     cb6:	7d21      	ldrb	r1, [r4, #20]
     cb8:	2900      	cmp	r1, #0
     cba:	d002      	beq.n	cc2 <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     cbc:	2180      	movs	r1, #128	; 0x80
     cbe:	0189      	lsls	r1, r1, #6
     cc0:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
     cc2:	6839      	ldr	r1, [r7, #0]
     cc4:	430a      	orrs	r2, r1
     cc6:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     cc8:	687a      	ldr	r2, [r7, #4]
     cca:	4313      	orrs	r3, r2
     ccc:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     cce:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     cd0:	0018      	movs	r0, r3
     cd2:	b009      	add	sp, #36	; 0x24
     cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     cd6:	2340      	movs	r3, #64	; 0x40
     cd8:	4313      	orrs	r3, r2
     cda:	e7cf      	b.n	c7c <spi_init+0x16c>
	uint32_t ctrlb = 0;
     cdc:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
     cde:	0018      	movs	r0, r3
     ce0:	e7cc      	b.n	c7c <spi_init+0x16c>
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000a39 	.word	0x00000a39
     ce8:	40000400 	.word	0x40000400
     cec:	000019a9 	.word	0x000019a9
     cf0:	00001921 	.word	0x00001921
     cf4:	00000899 	.word	0x00000899
     cf8:	00001465 	.word	0x00001465
     cfc:	00001265 	.word	0x00001265
     d00:	200000ac 	.word	0x200000ac
     d04:	000008dd 	.word	0x000008dd
     d08:	00001a7d 	.word	0x00001a7d
     d0c:	000019c5 	.word	0x000019c5
     d10:	00000871 	.word	0x00000871
     d14:	41002000 	.word	0x41002000

00000d18 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     d18:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1a:	b087      	sub	sp, #28
     d1c:	9303      	str	r3, [sp, #12]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     d1e:	0003      	movs	r3, r0
{
     d20:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     d22:	2005      	movs	r0, #5
{
     d24:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
     d26:	3338      	adds	r3, #56	; 0x38
     d28:	781b      	ldrb	r3, [r3, #0]
{
     d2a:	0017      	movs	r7, r2
	if (module->status == STATUS_BUSY) {
     d2c:	4283      	cmp	r3, r0
     d2e:	d036      	beq.n	d9e <spi_read_buffer_wait+0x86>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d30:	3012      	adds	r0, #18
	if (length == 0) {
     d32:	2a00      	cmp	r2, #0
     d34:	d033      	beq.n	d9e <spi_read_buffer_wait+0x86>
	}

	if (!(module->receiver_enabled)) {
     d36:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
     d38:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     d3a:	2b00      	cmp	r3, #0
     d3c:	d02f      	beq.n	d9e <spi_read_buffer_wait+0x86>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     d3e:	7963      	ldrb	r3, [r4, #5]
     d40:	2b00      	cmp	r3, #0
     d42:	d107      	bne.n	d54 <spi_read_buffer_wait+0x3c>
     d44:	0020      	movs	r0, r4
     d46:	4b2b      	ldr	r3, [pc, #172]	; (df4 <spi_read_buffer_wait+0xdc>)
     d48:	4798      	blx	r3
     d4a:	2800      	cmp	r0, #0
     d4c:	d002      	beq.n	d54 <spi_read_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d4e:	2302      	movs	r3, #2
     d50:	6822      	ldr	r2, [r4, #0]
     d52:	7613      	strb	r3, [r2, #24]
{
     d54:	2500      	movs	r5, #0
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     d56:	7963      	ldrb	r3, [r4, #5]
     d58:	2b01      	cmp	r3, #1
     d5a:	d108      	bne.n	d6e <spi_read_buffer_wait+0x56>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     d5c:	0020      	movs	r0, r4
     d5e:	4b26      	ldr	r3, [pc, #152]	; (df8 <spi_read_buffer_wait+0xe0>)
     d60:	4798      	blx	r3
     d62:	2800      	cmp	r0, #0
     d64:	d0fa      	beq.n	d5c <spi_read_buffer_wait+0x44>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
     d66:	9903      	ldr	r1, [sp, #12]
     d68:	0020      	movs	r0, r4
     d6a:	4b24      	ldr	r3, [pc, #144]	; (dfc <spi_read_buffer_wait+0xe4>)
     d6c:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     d6e:	7963      	ldrb	r3, [r4, #5]
     d70:	4e23      	ldr	r6, [pc, #140]	; (e00 <spi_read_buffer_wait+0xe8>)
     d72:	2b00      	cmp	r3, #0
     d74:	d11b      	bne.n	dae <spi_read_buffer_wait+0x96>
     d76:	4b23      	ldr	r3, [pc, #140]	; (e04 <spi_read_buffer_wait+0xec>)
     d78:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     d7a:	0020      	movs	r0, r4
     d7c:	47b0      	blx	r6
     d7e:	2800      	cmp	r0, #0
     d80:	d104      	bne.n	d8c <spi_read_buffer_wait+0x74>
     d82:	9b01      	ldr	r3, [sp, #4]
     d84:	3b01      	subs	r3, #1
     d86:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     d88:	2b00      	cmp	r3, #0
     d8a:	d1f6      	bne.n	d7a <spi_read_buffer_wait+0x62>
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     d8c:	0020      	movs	r0, r4
     d8e:	4b19      	ldr	r3, [pc, #100]	; (df4 <spi_read_buffer_wait+0xdc>)
     d90:	4798      	blx	r3
     d92:	2800      	cmp	r0, #0
     d94:	d005      	beq.n	da2 <spi_read_buffer_wait+0x8a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d96:	2202      	movs	r2, #2
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     d98:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
     d9a:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d9c:	761a      	strb	r2, [r3, #24]
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     d9e:	b007      	add	sp, #28
     da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_read(module)) {
     da2:	0020      	movs	r0, r4
     da4:	47b0      	blx	r6
     da6:	2800      	cmp	r0, #0
     da8:	d101      	bne.n	dae <spi_read_buffer_wait+0x96>
				return STATUS_ERR_TIMEOUT;
     daa:	3012      	adds	r0, #18
     dac:	e7f7      	b.n	d9e <spi_read_buffer_wait+0x86>
		while (!spi_is_ready_to_read(module)) {
     dae:	0020      	movs	r0, r4
     db0:	47b0      	blx	r6
     db2:	2800      	cmp	r0, #0
     db4:	d0fb      	beq.n	dae <spi_read_buffer_wait+0x96>
		uint16_t received_data = 0;
     db6:	ab04      	add	r3, sp, #16
     db8:	1d9e      	adds	r6, r3, #6
     dba:	2300      	movs	r3, #0
		enum status_code retval = spi_read(module, &received_data);
     dbc:	0031      	movs	r1, r6
		uint16_t received_data = 0;
     dbe:	8033      	strh	r3, [r6, #0]
		enum status_code retval = spi_read(module, &received_data);
     dc0:	0020      	movs	r0, r4
     dc2:	4b11      	ldr	r3, [pc, #68]	; (e08 <spi_read_buffer_wait+0xf0>)
     dc4:	4798      	blx	r3
		if (retval != STATUS_OK) {
     dc6:	2800      	cmp	r0, #0
     dc8:	d1e9      	bne.n	d9e <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
     dca:	9902      	ldr	r1, [sp, #8]
     dcc:	8832      	ldrh	r2, [r6, #0]
     dce:	1c6b      	adds	r3, r5, #1
     dd0:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dd2:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
     dd4:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dd6:	2901      	cmp	r1, #1
     dd8:	d109      	bne.n	dee <spi_read_buffer_wait+0xd6>
			rx_data[rx_pos++] = (received_data >> 8);
     dda:	9902      	ldr	r1, [sp, #8]
     ddc:	3502      	adds	r5, #2
     dde:	0a12      	lsrs	r2, r2, #8
     de0:	b2ad      	uxth	r5, r5
     de2:	54ca      	strb	r2, [r1, r3]
     de4:	3f01      	subs	r7, #1
     de6:	b2bf      	uxth	r7, r7
	while (length--) {
     de8:	2f00      	cmp	r7, #0
     dea:	d1b4      	bne.n	d56 <spi_read_buffer_wait+0x3e>
     dec:	e7d7      	b.n	d9e <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
     dee:	001d      	movs	r5, r3
     df0:	e7f8      	b.n	de4 <spi_read_buffer_wait+0xcc>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000a95 	.word	0x00000a95
     df8:	00000a9f 	.word	0x00000a9f
     dfc:	00000ab5 	.word	0x00000ab5
     e00:	00000aa9 	.word	0x00000aa9
     e04:	00002711 	.word	0x00002711
     e08:	00000ad5 	.word	0x00000ad5

00000e0c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     e0e:	7943      	ldrb	r3, [r0, #5]
{
     e10:	b085      	sub	sp, #20
     e12:	0005      	movs	r5, r0
     e14:	000e      	movs	r6, r1
     e16:	0014      	movs	r4, r2
	if (module->mode != SPI_MODE_MASTER) {
     e18:	9300      	str	r3, [sp, #0]
		return STATUS_ERR_UNSUPPORTED_DEV;
     e1a:	2015      	movs	r0, #21
	if (module->mode != SPI_MODE_MASTER) {
     e1c:	2b01      	cmp	r3, #1
     e1e:	d104      	bne.n	e2a <spi_select_slave+0x1e>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     e20:	7a2b      	ldrb	r3, [r5, #8]
     e22:	9301      	str	r3, [sp, #4]
     e24:	2b00      	cmp	r3, #0
     e26:	d002      	beq.n	e2e <spi_select_slave+0x22>
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     e28:	2000      	movs	r0, #0
}
     e2a:	b005      	add	sp, #20
     e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e2e:	4f18      	ldr	r7, [pc, #96]	; (e90 <spi_select_slave+0x84>)
		if (select) {
     e30:	2a00      	cmp	r2, #0
     e32:	d027      	beq.n	e84 <spi_select_slave+0x78>
			if (slave->address_enabled) {
     e34:	784c      	ldrb	r4, [r1, #1]
     e36:	2c00      	cmp	r4, #0
     e38:	d020      	beq.n	e7c <spi_select_slave+0x70>
				if (!spi_is_ready_to_write(module)) {
     e3a:	4b16      	ldr	r3, [pc, #88]	; (e94 <spi_select_slave+0x88>)
     e3c:	0028      	movs	r0, r5
     e3e:	4798      	blx	r3
     e40:	0003      	movs	r3, r0
     e42:	7830      	ldrb	r0, [r6, #0]
     e44:	2b00      	cmp	r3, #0
     e46:	d103      	bne.n	e50 <spi_select_slave+0x44>
					port_pin_set_output_level(slave->ss_pin, true);
     e48:	9900      	ldr	r1, [sp, #0]
     e4a:	47b8      	blx	r7
					return STATUS_BUSY;
     e4c:	2005      	movs	r0, #5
     e4e:	e7ec      	b.n	e2a <spi_select_slave+0x1e>
				port_pin_set_output_level(slave->ss_pin, false);
     e50:	9901      	ldr	r1, [sp, #4]
     e52:	47b8      	blx	r7
				spi_write(module, slave->address);
     e54:	4b10      	ldr	r3, [pc, #64]	; (e98 <spi_select_slave+0x8c>)
     e56:	78b1      	ldrb	r1, [r6, #2]
     e58:	0028      	movs	r0, r5
     e5a:	4798      	blx	r3
				if (!(module->receiver_enabled)) {
     e5c:	79eb      	ldrb	r3, [r5, #7]
     e5e:	2b00      	cmp	r3, #0
     e60:	d1e2      	bne.n	e28 <spi_select_slave+0x1c>
					while (!spi_is_ready_to_read(module)) {
     e62:	0028      	movs	r0, r5
     e64:	4b0d      	ldr	r3, [pc, #52]	; (e9c <spi_select_slave+0x90>)
     e66:	4798      	blx	r3
     e68:	2800      	cmp	r0, #0
     e6a:	d0fa      	beq.n	e62 <spi_select_slave+0x56>
					uint16_t flush = 0;
     e6c:	2400      	movs	r4, #0
     e6e:	ab02      	add	r3, sp, #8
     e70:	1d99      	adds	r1, r3, #6
					spi_read(module, &flush);
     e72:	0028      	movs	r0, r5
     e74:	4b0a      	ldr	r3, [pc, #40]	; (ea0 <spi_select_slave+0x94>)
					uint16_t flush = 0;
     e76:	800c      	strh	r4, [r1, #0]
					spi_read(module, &flush);
     e78:	4798      	blx	r3
     e7a:	e7d5      	b.n	e28 <spi_select_slave+0x1c>
				port_pin_set_output_level(slave->ss_pin, false);
     e7c:	7808      	ldrb	r0, [r1, #0]
     e7e:	0021      	movs	r1, r4
     e80:	47b8      	blx	r7
     e82:	e7d1      	b.n	e28 <spi_select_slave+0x1c>
			port_pin_set_output_level(slave->ss_pin, true);
     e84:	7808      	ldrb	r0, [r1, #0]
     e86:	9900      	ldr	r1, [sp, #0]
     e88:	47b8      	blx	r7
	return STATUS_OK;
     e8a:	0020      	movs	r0, r4
     e8c:	e7cd      	b.n	e2a <spi_select_slave+0x1e>
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00000a69 	.word	0x00000a69
     e94:	00000a9f 	.word	0x00000a9f
     e98:	00000ab5 	.word	0x00000ab5
     e9c:	00000aa9 	.word	0x00000aa9
     ea0:	00000ad5 	.word	0x00000ad5

00000ea4 <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     ea4:	0003      	movs	r3, r0
{
     ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea8:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     eaa:	2005      	movs	r0, #5
{
     eac:	b087      	sub	sp, #28
     eae:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
     eb0:	3338      	adds	r3, #56	; 0x38
     eb2:	781b      	ldrb	r3, [r3, #0]
{
     eb4:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
     eb6:	4283      	cmp	r3, r0
     eb8:	d032      	beq.n	f20 <spi_write_buffer_wait+0x7c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     eba:	3012      	adds	r0, #18
	if (length == 0) {
     ebc:	2a00      	cmp	r2, #0
     ebe:	d02f      	beq.n	f20 <spi_write_buffer_wait+0x7c>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     ec0:	7963      	ldrb	r3, [r4, #5]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d107      	bne.n	ed6 <spi_write_buffer_wait+0x32>
     ec6:	0020      	movs	r0, r4
     ec8:	4b5f      	ldr	r3, [pc, #380]	; (1048 <spi_write_buffer_wait+0x1a4>)
     eca:	4798      	blx	r3
     ecc:	2800      	cmp	r0, #0
     ece:	d002      	beq.n	ed6 <spi_write_buffer_wait+0x32>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ed0:	2302      	movs	r3, #2
     ed2:	6822      	ldr	r2, [r4, #0]
     ed4:	7613      	strb	r3, [r2, #24]
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     ed6:	2600      	movs	r6, #0
     ed8:	9501      	str	r5, [sp, #4]
     eda:	3d01      	subs	r5, #1
     edc:	b2ad      	uxth	r5, r5
	while (length--) {
     ede:	4a5b      	ldr	r2, [pc, #364]	; (104c <spi_write_buffer_wait+0x1a8>)
     ee0:	7963      	ldrb	r3, [r4, #5]
     ee2:	4295      	cmp	r5, r2
     ee4:	d108      	bne.n	ef8 <spi_write_buffer_wait+0x54>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     ee6:	2b01      	cmp	r3, #1
     ee8:	d100      	bne.n	eec <spi_write_buffer_wait+0x48>
     eea:	e087      	b.n	ffc <spi_write_buffer_wait+0x158>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     eec:	7963      	ldrb	r3, [r4, #5]
     eee:	2b00      	cmp	r3, #0
     ef0:	d100      	bne.n	ef4 <spi_write_buffer_wait+0x50>
     ef2:	e089      	b.n	1008 <spi_write_buffer_wait+0x164>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     ef4:	2000      	movs	r0, #0
     ef6:	e013      	b.n	f20 <spi_write_buffer_wait+0x7c>
		if (module->mode == SPI_MODE_SLAVE) {
     ef8:	2b00      	cmp	r3, #0
     efa:	d11a      	bne.n	f32 <spi_write_buffer_wait+0x8e>
     efc:	4f54      	ldr	r7, [pc, #336]	; (1050 <spi_write_buffer_wait+0x1ac>)
				if (spi_is_ready_to_write(module)) {
     efe:	0020      	movs	r0, r4
     f00:	4b54      	ldr	r3, [pc, #336]	; (1054 <spi_write_buffer_wait+0x1b0>)
     f02:	4798      	blx	r3
     f04:	2800      	cmp	r0, #0
     f06:	d102      	bne.n	f0e <spi_write_buffer_wait+0x6a>
     f08:	3f01      	subs	r7, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     f0a:	2f00      	cmp	r7, #0
     f0c:	d1f7      	bne.n	efe <spi_write_buffer_wait+0x5a>
			if (spi_is_write_complete(module)) {
     f0e:	0020      	movs	r0, r4
     f10:	4b4d      	ldr	r3, [pc, #308]	; (1048 <spi_write_buffer_wait+0x1a4>)
     f12:	4798      	blx	r3
     f14:	2800      	cmp	r0, #0
     f16:	d005      	beq.n	f24 <spi_write_buffer_wait+0x80>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f18:	2202      	movs	r2, #2
					return STATUS_ABORTED;
     f1a:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
     f1c:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     f1e:	761a      	strb	r2, [r3, #24]
}
     f20:	b007      	add	sp, #28
     f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
     f24:	0020      	movs	r0, r4
     f26:	4b4b      	ldr	r3, [pc, #300]	; (1054 <spi_write_buffer_wait+0x1b0>)
     f28:	4798      	blx	r3
     f2a:	2800      	cmp	r0, #0
     f2c:	d101      	bne.n	f32 <spi_write_buffer_wait+0x8e>
					return STATUS_ERR_TIMEOUT;
     f2e:	3012      	adds	r0, #18
     f30:	e7f6      	b.n	f20 <spi_write_buffer_wait+0x7c>
		while (!spi_is_ready_to_write(module)) {
     f32:	0020      	movs	r0, r4
     f34:	4b47      	ldr	r3, [pc, #284]	; (1054 <spi_write_buffer_wait+0x1b0>)
     f36:	4798      	blx	r3
     f38:	2800      	cmp	r0, #0
     f3a:	d0fa      	beq.n	f32 <spi_write_buffer_wait+0x8e>
		uint16_t data_to_send = tx_data[tx_pos++];
     f3c:	9a02      	ldr	r2, [sp, #8]
     f3e:	1c73      	adds	r3, r6, #1
     f40:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f42:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
     f44:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f46:	2a01      	cmp	r2, #1
     f48:	d040      	beq.n	fcc <spi_write_buffer_wait+0x128>
		uint16_t data_to_send = tx_data[tx_pos++];
     f4a:	001e      	movs	r6, r3
     f4c:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
     f4e:	4b42      	ldr	r3, [pc, #264]	; (1058 <spi_write_buffer_wait+0x1b4>)
     f50:	0020      	movs	r0, r4
     f52:	4798      	blx	r3
		if (module->receiver_enabled) {
     f54:	79e2      	ldrb	r2, [r4, #7]
     f56:	1e6b      	subs	r3, r5, #1
     f58:	b29b      	uxth	r3, r3
     f5a:	2a00      	cmp	r2, #0
     f5c:	d04c      	beq.n	ff8 <spi_write_buffer_wait+0x154>
			if (module->mode == SPI_MODE_SLAVE) {
     f5e:	7963      	ldrb	r3, [r4, #5]
     f60:	2b00      	cmp	r3, #0
     f62:	d124      	bne.n	fae <spi_write_buffer_wait+0x10a>
     f64:	4b3a      	ldr	r3, [pc, #232]	; (1050 <spi_write_buffer_wait+0x1ac>)
     f66:	9303      	str	r3, [sp, #12]
					if (length && spi_is_ready_to_write(module)) {
     f68:	2d00      	cmp	r5, #0
     f6a:	d012      	beq.n	f92 <spi_write_buffer_wait+0xee>
     f6c:	0020      	movs	r0, r4
     f6e:	4b39      	ldr	r3, [pc, #228]	; (1054 <spi_write_buffer_wait+0x1b0>)
     f70:	4798      	blx	r3
     f72:	2800      	cmp	r0, #0
     f74:	d00d      	beq.n	f92 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
     f76:	9b02      	ldr	r3, [sp, #8]
     f78:	1c77      	adds	r7, r6, #1
     f7a:	5d99      	ldrb	r1, [r3, r6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f7c:	79a3      	ldrb	r3, [r4, #6]
						data_to_send = tx_data[tx_pos++];
     f7e:	b2bf      	uxth	r7, r7
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f80:	2b01      	cmp	r3, #1
     f82:	d02a      	beq.n	fda <spi_write_buffer_wait+0x136>
						data_to_send = tx_data[tx_pos++];
     f84:	b289      	uxth	r1, r1
						spi_write(module, data_to_send);
     f86:	0020      	movs	r0, r4
     f88:	4b33      	ldr	r3, [pc, #204]	; (1058 <spi_write_buffer_wait+0x1b4>)
     f8a:	4798      	blx	r3
						length--;
     f8c:	003e      	movs	r6, r7
     f8e:	3d01      	subs	r5, #1
     f90:	b2ad      	uxth	r5, r5
					if (spi_is_ready_to_read(module)) {
     f92:	0020      	movs	r0, r4
     f94:	4f31      	ldr	r7, [pc, #196]	; (105c <spi_write_buffer_wait+0x1b8>)
     f96:	47b8      	blx	r7
     f98:	2800      	cmp	r0, #0
     f9a:	d025      	beq.n	fe8 <spi_write_buffer_wait+0x144>
				if (spi_is_write_complete(module)) {
     f9c:	0020      	movs	r0, r4
     f9e:	4b2a      	ldr	r3, [pc, #168]	; (1048 <spi_write_buffer_wait+0x1a4>)
     fa0:	4798      	blx	r3
     fa2:	2800      	cmp	r0, #0
     fa4:	d1b8      	bne.n	f18 <spi_write_buffer_wait+0x74>
				if (!spi_is_ready_to_read(module)) {
     fa6:	0020      	movs	r0, r4
     fa8:	47b8      	blx	r7
     faa:	2800      	cmp	r0, #0
     fac:	d022      	beq.n	ff4 <spi_write_buffer_wait+0x150>
			while (!spi_is_ready_to_read(module)) {
     fae:	0020      	movs	r0, r4
     fb0:	4b2a      	ldr	r3, [pc, #168]	; (105c <spi_write_buffer_wait+0x1b8>)
     fb2:	4798      	blx	r3
     fb4:	2800      	cmp	r0, #0
     fb6:	d0fa      	beq.n	fae <spi_write_buffer_wait+0x10a>
			spi_read(module, &flush);
     fb8:	ab04      	add	r3, sp, #16
     fba:	1d99      	adds	r1, r3, #6
     fbc:	0020      	movs	r0, r4
     fbe:	4b28      	ldr	r3, [pc, #160]	; (1060 <spi_write_buffer_wait+0x1bc>)
     fc0:	4798      	blx	r3
			flush_length--;
     fc2:	9b01      	ldr	r3, [sp, #4]
     fc4:	3b01      	subs	r3, #1
     fc6:	b29b      	uxth	r3, r3
     fc8:	9301      	str	r3, [sp, #4]
     fca:	e786      	b.n	eda <spi_write_buffer_wait+0x36>
			data_to_send |= (tx_data[tx_pos++] << 8);
     fcc:	9a02      	ldr	r2, [sp, #8]
     fce:	3602      	adds	r6, #2
     fd0:	5cd3      	ldrb	r3, [r2, r3]
     fd2:	b2b6      	uxth	r6, r6
     fd4:	021b      	lsls	r3, r3, #8
     fd6:	4319      	orrs	r1, r3
     fd8:	e7b9      	b.n	f4e <spi_write_buffer_wait+0xaa>
							data_to_send |= (tx_data[tx_pos++] << 8);
     fda:	9b02      	ldr	r3, [sp, #8]
     fdc:	3602      	adds	r6, #2
     fde:	5ddb      	ldrb	r3, [r3, r7]
     fe0:	b2b7      	uxth	r7, r6
     fe2:	021b      	lsls	r3, r3, #8
     fe4:	4319      	orrs	r1, r3
     fe6:	e7ce      	b.n	f86 <spi_write_buffer_wait+0xe2>
     fe8:	9b03      	ldr	r3, [sp, #12]
     fea:	3b01      	subs	r3, #1
     fec:	9303      	str	r3, [sp, #12]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     fee:	2b00      	cmp	r3, #0
     ff0:	d1ba      	bne.n	f68 <spi_write_buffer_wait+0xc4>
     ff2:	e7d3      	b.n	f9c <spi_write_buffer_wait+0xf8>
					return STATUS_ERR_TIMEOUT;
     ff4:	2012      	movs	r0, #18
     ff6:	e793      	b.n	f20 <spi_write_buffer_wait+0x7c>
		if (module->receiver_enabled) {
     ff8:	001d      	movs	r5, r3
     ffa:	e770      	b.n	ede <spi_write_buffer_wait+0x3a>
		while (!spi_is_write_complete(module)) {
     ffc:	0020      	movs	r0, r4
     ffe:	4b12      	ldr	r3, [pc, #72]	; (1048 <spi_write_buffer_wait+0x1a4>)
    1000:	4798      	blx	r3
    1002:	2800      	cmp	r0, #0
    1004:	d0fa      	beq.n	ffc <spi_write_buffer_wait+0x158>
    1006:	e771      	b.n	eec <spi_write_buffer_wait+0x48>
		if (module->receiver_enabled) {
    1008:	79e3      	ldrb	r3, [r4, #7]
    100a:	2b00      	cmp	r3, #0
    100c:	d100      	bne.n	1010 <spi_write_buffer_wait+0x16c>
    100e:	e771      	b.n	ef4 <spi_write_buffer_wait+0x50>
			while (flush_length) {
    1010:	9b01      	ldr	r3, [sp, #4]
    1012:	2b00      	cmp	r3, #0
    1014:	d100      	bne.n	1018 <spi_write_buffer_wait+0x174>
    1016:	e76d      	b.n	ef4 <spi_write_buffer_wait+0x50>
    1018:	4d0d      	ldr	r5, [pc, #52]	; (1050 <spi_write_buffer_wait+0x1ac>)
					if (spi_is_ready_to_read(module)) {
    101a:	0020      	movs	r0, r4
    101c:	4e0f      	ldr	r6, [pc, #60]	; (105c <spi_write_buffer_wait+0x1b8>)
    101e:	47b0      	blx	r6
    1020:	2800      	cmp	r0, #0
    1022:	d102      	bne.n	102a <spi_write_buffer_wait+0x186>
    1024:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1026:	2d00      	cmp	r5, #0
    1028:	d1f7      	bne.n	101a <spi_write_buffer_wait+0x176>
				if (!spi_is_ready_to_read(module)) {
    102a:	0020      	movs	r0, r4
    102c:	47b0      	blx	r6
    102e:	2800      	cmp	r0, #0
    1030:	d100      	bne.n	1034 <spi_write_buffer_wait+0x190>
    1032:	e77c      	b.n	f2e <spi_write_buffer_wait+0x8a>
				spi_read(module, &flush);
    1034:	ab04      	add	r3, sp, #16
    1036:	1d99      	adds	r1, r3, #6
    1038:	0020      	movs	r0, r4
    103a:	4b09      	ldr	r3, [pc, #36]	; (1060 <spi_write_buffer_wait+0x1bc>)
    103c:	4798      	blx	r3
				flush_length--;
    103e:	9b01      	ldr	r3, [sp, #4]
    1040:	3b01      	subs	r3, #1
    1042:	b29b      	uxth	r3, r3
    1044:	9301      	str	r3, [sp, #4]
    1046:	e7e3      	b.n	1010 <spi_write_buffer_wait+0x16c>
    1048:	00000a95 	.word	0x00000a95
    104c:	0000ffff 	.word	0x0000ffff
    1050:	00002711 	.word	0x00002711
    1054:	00000a9f 	.word	0x00000a9f
    1058:	00000ab5 	.word	0x00000ab5
    105c:	00000aa9 	.word	0x00000aa9
    1060:	00000ad5 	.word	0x00000ad5

00001064 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1064:	b5f0      	push	{r4, r5, r6, r7, lr}
    1066:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1068:	0003      	movs	r3, r0
{
    106a:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    106c:	2005      	movs	r0, #5
{
    106e:	b089      	sub	sp, #36	; 0x24
    1070:	9102      	str	r1, [sp, #8]
    1072:	9203      	str	r2, [sp, #12]
	if (module->status == STATUS_BUSY) {
    1074:	3338      	adds	r3, #56	; 0x38
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	4283      	cmp	r3, r0
    107a:	d037      	beq.n	10ec <spi_transceive_buffer_wait+0x88>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    107c:	3012      	adds	r0, #18
	if (length == 0) {
    107e:	2e00      	cmp	r6, #0
    1080:	d034      	beq.n	10ec <spi_transceive_buffer_wait+0x88>
	}

	if (!(module->receiver_enabled)) {
    1082:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    1084:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1086:	2b00      	cmp	r3, #0
    1088:	d030      	beq.n	10ec <spi_transceive_buffer_wait+0x88>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    108a:	7963      	ldrb	r3, [r4, #5]
    108c:	2b00      	cmp	r3, #0
    108e:	d107      	bne.n	10a0 <spi_transceive_buffer_wait+0x3c>
    1090:	0020      	movs	r0, r4
    1092:	4b6e      	ldr	r3, [pc, #440]	; (124c <spi_transceive_buffer_wait+0x1e8>)
    1094:	4798      	blx	r3
    1096:	2800      	cmp	r0, #0
    1098:	d002      	beq.n	10a0 <spi_transceive_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    109a:	2302      	movs	r3, #2
    109c:	6822      	ldr	r2, [r4, #0]
    109e:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    10a0:	2500      	movs	r5, #0
    10a2:	002f      	movs	r7, r5
    10a4:	9601      	str	r6, [sp, #4]
	while (length--) {
    10a6:	1e73      	subs	r3, r6, #1
    10a8:	b29b      	uxth	r3, r3
    10aa:	9304      	str	r3, [sp, #16]
    10ac:	7963      	ldrb	r3, [r4, #5]
    10ae:	2e00      	cmp	r6, #0
    10b0:	d108      	bne.n	10c4 <spi_transceive_buffer_wait+0x60>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    10b2:	2b01      	cmp	r3, #1
    10b4:	d100      	bne.n	10b8 <spi_transceive_buffer_wait+0x54>
    10b6:	e092      	b.n	11de <spi_transceive_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    10b8:	7963      	ldrb	r3, [r4, #5]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d100      	bne.n	10c0 <spi_transceive_buffer_wait+0x5c>
    10be:	e0be      	b.n	123e <spi_transceive_buffer_wait+0x1da>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    10c0:	2000      	movs	r0, #0
    10c2:	e013      	b.n	10ec <spi_transceive_buffer_wait+0x88>
		if (module->mode == SPI_MODE_SLAVE) {
    10c4:	2b00      	cmp	r3, #0
    10c6:	d119      	bne.n	10fc <spi_transceive_buffer_wait+0x98>
    10c8:	4e61      	ldr	r6, [pc, #388]	; (1250 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_write(module)) {
    10ca:	0020      	movs	r0, r4
    10cc:	4b61      	ldr	r3, [pc, #388]	; (1254 <spi_transceive_buffer_wait+0x1f0>)
    10ce:	4798      	blx	r3
    10d0:	2800      	cmp	r0, #0
    10d2:	d102      	bne.n	10da <spi_transceive_buffer_wait+0x76>
    10d4:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    10d6:	2e00      	cmp	r6, #0
    10d8:	d1f7      	bne.n	10ca <spi_transceive_buffer_wait+0x66>
			if (spi_is_write_complete(module)) {
    10da:	0020      	movs	r0, r4
    10dc:	4b5b      	ldr	r3, [pc, #364]	; (124c <spi_transceive_buffer_wait+0x1e8>)
    10de:	4798      	blx	r3
    10e0:	2800      	cmp	r0, #0
    10e2:	d005      	beq.n	10f0 <spi_transceive_buffer_wait+0x8c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    10e4:	2202      	movs	r2, #2
				return STATUS_ABORTED;
    10e6:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    10e8:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    10ea:	761a      	strb	r2, [r3, #24]
}
    10ec:	b009      	add	sp, #36	; 0x24
    10ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    10f0:	0020      	movs	r0, r4
    10f2:	4b58      	ldr	r3, [pc, #352]	; (1254 <spi_transceive_buffer_wait+0x1f0>)
    10f4:	4798      	blx	r3
    10f6:	2800      	cmp	r0, #0
    10f8:	d100      	bne.n	10fc <spi_transceive_buffer_wait+0x98>
    10fa:	e0a4      	b.n	1246 <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_write(module)) {
    10fc:	0020      	movs	r0, r4
    10fe:	4b55      	ldr	r3, [pc, #340]	; (1254 <spi_transceive_buffer_wait+0x1f0>)
    1100:	4798      	blx	r3
    1102:	2800      	cmp	r0, #0
    1104:	d0fa      	beq.n	10fc <spi_transceive_buffer_wait+0x98>
		uint16_t data_to_send = tx_data[tx_pos++];
    1106:	9b02      	ldr	r3, [sp, #8]
    1108:	1c7e      	adds	r6, r7, #1
    110a:	5dd9      	ldrb	r1, [r3, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    110c:	79a3      	ldrb	r3, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    110e:	b2b6      	uxth	r6, r6
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1110:	2b01      	cmp	r3, #1
    1112:	d050      	beq.n	11b6 <spi_transceive_buffer_wait+0x152>
		uint16_t data_to_send = tx_data[tx_pos++];
    1114:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    1116:	4b50      	ldr	r3, [pc, #320]	; (1258 <spi_transceive_buffer_wait+0x1f4>)
    1118:	0020      	movs	r0, r4
    111a:	4798      	blx	r3
		if (module->mode == SPI_MODE_SLAVE) {
    111c:	7963      	ldrb	r3, [r4, #5]
    111e:	2b00      	cmp	r3, #0
    1120:	d125      	bne.n	116e <spi_transceive_buffer_wait+0x10a>
    1122:	4b4b      	ldr	r3, [pc, #300]	; (1250 <spi_transceive_buffer_wait+0x1ec>)
    1124:	9305      	str	r3, [sp, #20]
				if (spi_is_ready_to_write(module)) {
    1126:	0020      	movs	r0, r4
    1128:	4b4a      	ldr	r3, [pc, #296]	; (1254 <spi_transceive_buffer_wait+0x1f0>)
    112a:	4798      	blx	r3
    112c:	2800      	cmp	r0, #0
    112e:	d00f      	beq.n	1150 <spi_transceive_buffer_wait+0xec>
					data_to_send = tx_data[tx_pos++];
    1130:	9b02      	ldr	r3, [sp, #8]
    1132:	1c77      	adds	r7, r6, #1
    1134:	5d99      	ldrb	r1, [r3, r6]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1136:	79a3      	ldrb	r3, [r4, #6]
					data_to_send = tx_data[tx_pos++];
    1138:	b2bf      	uxth	r7, r7
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    113a:	2b01      	cmp	r3, #1
    113c:	d042      	beq.n	11c4 <spi_transceive_buffer_wait+0x160>
					data_to_send = tx_data[tx_pos++];
    113e:	b289      	uxth	r1, r1
					length--;
    1140:	003e      	movs	r6, r7
					spi_write(module, data_to_send);
    1142:	4b45      	ldr	r3, [pc, #276]	; (1258 <spi_transceive_buffer_wait+0x1f4>)
    1144:	0020      	movs	r0, r4
    1146:	4798      	blx	r3
					length--;
    1148:	9b04      	ldr	r3, [sp, #16]
    114a:	3b01      	subs	r3, #1
    114c:	b29b      	uxth	r3, r3
    114e:	9304      	str	r3, [sp, #16]
				if (spi_is_ready_to_read(module)) {
    1150:	0020      	movs	r0, r4
    1152:	4b42      	ldr	r3, [pc, #264]	; (125c <spi_transceive_buffer_wait+0x1f8>)
    1154:	4798      	blx	r3
    1156:	2800      	cmp	r0, #0
    1158:	d03b      	beq.n	11d2 <spi_transceive_buffer_wait+0x16e>
			if (spi_is_write_complete(module)) {
    115a:	0020      	movs	r0, r4
    115c:	4b3b      	ldr	r3, [pc, #236]	; (124c <spi_transceive_buffer_wait+0x1e8>)
    115e:	4798      	blx	r3
    1160:	2800      	cmp	r0, #0
    1162:	d1bf      	bne.n	10e4 <spi_transceive_buffer_wait+0x80>
			if (!spi_is_ready_to_read(module)) {
    1164:	0020      	movs	r0, r4
    1166:	4b3d      	ldr	r3, [pc, #244]	; (125c <spi_transceive_buffer_wait+0x1f8>)
    1168:	4798      	blx	r3
    116a:	2800      	cmp	r0, #0
    116c:	d06b      	beq.n	1246 <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_read(module)) {
    116e:	0020      	movs	r0, r4
    1170:	4b3a      	ldr	r3, [pc, #232]	; (125c <spi_transceive_buffer_wait+0x1f8>)
    1172:	4798      	blx	r3
    1174:	2800      	cmp	r0, #0
    1176:	d0fa      	beq.n	116e <spi_transceive_buffer_wait+0x10a>
		uint16_t received_data = 0;
    1178:	ab06      	add	r3, sp, #24
    117a:	1d9f      	adds	r7, r3, #6
    117c:	2300      	movs	r3, #0
    117e:	803b      	strh	r3, [r7, #0]
		rx_length--;
    1180:	9b01      	ldr	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    1182:	0039      	movs	r1, r7
		rx_length--;
    1184:	3b01      	subs	r3, #1
    1186:	b29b      	uxth	r3, r3
    1188:	9301      	str	r3, [sp, #4]
		retval = spi_read(module, &received_data);
    118a:	0020      	movs	r0, r4
    118c:	4b34      	ldr	r3, [pc, #208]	; (1260 <spi_transceive_buffer_wait+0x1fc>)
    118e:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1190:	2800      	cmp	r0, #0
    1192:	d1ab      	bne.n	10ec <spi_transceive_buffer_wait+0x88>
		rx_data[rx_pos++] = received_data;
    1194:	9903      	ldr	r1, [sp, #12]
    1196:	883a      	ldrh	r2, [r7, #0]
    1198:	1c6b      	adds	r3, r5, #1
    119a:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    119c:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    119e:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11a0:	2901      	cmp	r1, #1
    11a2:	d104      	bne.n	11ae <spi_transceive_buffer_wait+0x14a>
			rx_data[rx_pos++] = (received_data >> 8);
    11a4:	9903      	ldr	r1, [sp, #12]
    11a6:	3502      	adds	r5, #2
    11a8:	0a12      	lsrs	r2, r2, #8
    11aa:	54ca      	strb	r2, [r1, r3]
    11ac:	b2ab      	uxth	r3, r5
    11ae:	0037      	movs	r7, r6
    11b0:	001d      	movs	r5, r3
    11b2:	9e04      	ldr	r6, [sp, #16]
    11b4:	e777      	b.n	10a6 <spi_transceive_buffer_wait+0x42>
			data_to_send |= (tx_data[tx_pos++] << 8);
    11b6:	9b02      	ldr	r3, [sp, #8]
    11b8:	3702      	adds	r7, #2
    11ba:	5d9b      	ldrb	r3, [r3, r6]
    11bc:	b2be      	uxth	r6, r7
    11be:	021b      	lsls	r3, r3, #8
    11c0:	4319      	orrs	r1, r3
    11c2:	e7a8      	b.n	1116 <spi_transceive_buffer_wait+0xb2>
						data_to_send |= (tx_data[tx_pos++] << 8);
    11c4:	9b02      	ldr	r3, [sp, #8]
    11c6:	3602      	adds	r6, #2
    11c8:	5ddb      	ldrb	r3, [r3, r7]
    11ca:	b2b7      	uxth	r7, r6
    11cc:	021b      	lsls	r3, r3, #8
    11ce:	4319      	orrs	r1, r3
    11d0:	e7b6      	b.n	1140 <spi_transceive_buffer_wait+0xdc>
    11d2:	9b05      	ldr	r3, [sp, #20]
    11d4:	3b01      	subs	r3, #1
    11d6:	9305      	str	r3, [sp, #20]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11d8:	2b00      	cmp	r3, #0
    11da:	d1a4      	bne.n	1126 <spi_transceive_buffer_wait+0xc2>
    11dc:	e7bd      	b.n	115a <spi_transceive_buffer_wait+0xf6>
		while (!spi_is_write_complete(module)) {
    11de:	0020      	movs	r0, r4
    11e0:	4b1a      	ldr	r3, [pc, #104]	; (124c <spi_transceive_buffer_wait+0x1e8>)
    11e2:	4798      	blx	r3
    11e4:	2800      	cmp	r0, #0
    11e6:	d0fa      	beq.n	11de <spi_transceive_buffer_wait+0x17a>
    11e8:	e766      	b.n	10b8 <spi_transceive_buffer_wait+0x54>
    11ea:	4e19      	ldr	r6, [pc, #100]	; (1250 <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_read(module)) {
    11ec:	0020      	movs	r0, r4
    11ee:	4f1b      	ldr	r7, [pc, #108]	; (125c <spi_transceive_buffer_wait+0x1f8>)
    11f0:	47b8      	blx	r7
    11f2:	2800      	cmp	r0, #0
    11f4:	d102      	bne.n	11fc <spi_transceive_buffer_wait+0x198>
    11f6:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11f8:	2e00      	cmp	r6, #0
    11fa:	d1f7      	bne.n	11ec <spi_transceive_buffer_wait+0x188>
			if (!spi_is_ready_to_read(module)) {
    11fc:	0020      	movs	r0, r4
    11fe:	47b8      	blx	r7
    1200:	2800      	cmp	r0, #0
    1202:	d020      	beq.n	1246 <spi_transceive_buffer_wait+0x1e2>
			uint16_t received_data = 0;
    1204:	ab06      	add	r3, sp, #24
    1206:	1d9e      	adds	r6, r3, #6
    1208:	2300      	movs	r3, #0
    120a:	8033      	strh	r3, [r6, #0]
			rx_length--;
    120c:	9b01      	ldr	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    120e:	0031      	movs	r1, r6
			rx_length--;
    1210:	3b01      	subs	r3, #1
    1212:	b29b      	uxth	r3, r3
    1214:	9301      	str	r3, [sp, #4]
			retval = spi_read(module, &received_data);
    1216:	0020      	movs	r0, r4
    1218:	4b11      	ldr	r3, [pc, #68]	; (1260 <spi_transceive_buffer_wait+0x1fc>)
    121a:	4798      	blx	r3
			if (retval != STATUS_OK) {
    121c:	2800      	cmp	r0, #0
    121e:	d000      	beq.n	1222 <spi_transceive_buffer_wait+0x1be>
    1220:	e764      	b.n	10ec <spi_transceive_buffer_wait+0x88>
			rx_data[rx_pos++] = received_data;
    1222:	9903      	ldr	r1, [sp, #12]
    1224:	8832      	ldrh	r2, [r6, #0]
    1226:	1c6b      	adds	r3, r5, #1
    1228:	554a      	strb	r2, [r1, r5]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    122a:	79a1      	ldrb	r1, [r4, #6]
			rx_data[rx_pos++] = received_data;
    122c:	b29b      	uxth	r3, r3
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    122e:	2901      	cmp	r1, #1
    1230:	d104      	bne.n	123c <spi_transceive_buffer_wait+0x1d8>
				rx_data[rx_pos++] = (received_data >> 8);
    1232:	9903      	ldr	r1, [sp, #12]
    1234:	3502      	adds	r5, #2
    1236:	0a12      	lsrs	r2, r2, #8
    1238:	54ca      	strb	r2, [r1, r3]
    123a:	b2ab      	uxth	r3, r5
    123c:	001d      	movs	r5, r3
		while (rx_length) {
    123e:	9b01      	ldr	r3, [sp, #4]
    1240:	2b00      	cmp	r3, #0
    1242:	d1d2      	bne.n	11ea <spi_transceive_buffer_wait+0x186>
    1244:	e73c      	b.n	10c0 <spi_transceive_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    1246:	2012      	movs	r0, #18
    1248:	e750      	b.n	10ec <spi_transceive_buffer_wait+0x88>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	00000a95 	.word	0x00000a95
    1250:	00002711 	.word	0x00002711
    1254:	00000a9f 	.word	0x00000a9f
    1258:	00000ab5 	.word	0x00000ab5
    125c:	00000aa9 	.word	0x00000aa9
    1260:	00000ad5 	.word	0x00000ad5

00001264 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1266:	4b7c      	ldr	r3, [pc, #496]	; (1458 <_spi_interrupt_handler+0x1f4>)
    1268:	0080      	lsls	r0, r0, #2
    126a:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    126c:	0023      	movs	r3, r4
    126e:	0022      	movs	r2, r4
    1270:	3337      	adds	r3, #55	; 0x37
    1272:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1274:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    1276:	781b      	ldrb	r3, [r3, #0]
    1278:	7816      	ldrb	r6, [r2, #0]
    127a:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    127c:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    127e:	7daf      	ldrb	r7, [r5, #22]
    1280:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1282:	07fb      	lsls	r3, r7, #31
    1284:	d539      	bpl.n	12fa <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1286:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1288:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    128a:	2a01      	cmp	r2, #1
    128c:	d133      	bne.n	12f6 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    128e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1290:	2b00      	cmp	r3, #0
    1292:	d10d      	bne.n	12b0 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
    1294:	4b71      	ldr	r3, [pc, #452]	; (145c <_spi_interrupt_handler+0x1f8>)
    1296:	881b      	ldrh	r3, [r3, #0]
    1298:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    129a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    129c:	3b01      	subs	r3, #1
    129e:	b29b      	uxth	r3, r3
    12a0:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    12a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    12a4:	2b00      	cmp	r3, #0
    12a6:	d100      	bne.n	12aa <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12a8:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    12aa:	7963      	ldrb	r3, [r4, #5]
		if (0
    12ac:	2b01      	cmp	r3, #1
    12ae:	d122      	bne.n	12f6 <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
    12b0:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12b2:	2b00      	cmp	r3, #0
    12b4:	d021      	beq.n	12fa <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12b8:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    12ba:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12bc:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    12be:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12c0:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12c2:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12c4:	2801      	cmp	r0, #1
    12c6:	d100      	bne.n	12ca <_spi_interrupt_handler+0x66>
    12c8:	e074      	b.n	13b4 <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12ca:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12cc:	05db      	lsls	r3, r3, #23
    12ce:	0ddb      	lsrs	r3, r3, #23
    12d0:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    12d2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12d4:	3b01      	subs	r3, #1
    12d6:	b29b      	uxth	r3, r3
    12d8:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    12da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12dc:	2b00      	cmp	r3, #0
    12de:	d10c      	bne.n	12fa <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12e0:	3301      	adds	r3, #1
    12e2:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    12e4:	7a63      	ldrb	r3, [r4, #9]
    12e6:	2b01      	cmp	r3, #1
    12e8:	d107      	bne.n	12fa <_spi_interrupt_handler+0x96>
    12ea:	79e3      	ldrb	r3, [r4, #7]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d104      	bne.n	12fa <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12f0:	3302      	adds	r3, #2
    12f2:	75ab      	strb	r3, [r5, #22]
    12f4:	e001      	b.n	12fa <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12f6:	2b00      	cmp	r3, #0
    12f8:	d0da      	beq.n	12b0 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12fa:	2104      	movs	r1, #4
    12fc:	420f      	tst	r7, r1
    12fe:	d015      	beq.n	132c <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1300:	8b6b      	ldrh	r3, [r5, #26]
    1302:	420b      	tst	r3, r1
    1304:	d05c      	beq.n	13c0 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1306:	7a63      	ldrb	r3, [r4, #9]
    1308:	2b01      	cmp	r3, #1
    130a:	d00c      	beq.n	1326 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    130c:	0023      	movs	r3, r4
    130e:	221e      	movs	r2, #30
    1310:	3338      	adds	r3, #56	; 0x38
    1312:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1314:	2303      	movs	r3, #3
    1316:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1318:	3302      	adds	r3, #2
    131a:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    131c:	0733      	lsls	r3, r6, #28
    131e:	d502      	bpl.n	1326 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1320:	0020      	movs	r0, r4
    1322:	69a3      	ldr	r3, [r4, #24]
    1324:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1326:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1328:	2304      	movs	r3, #4
    132a:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    132c:	2202      	movs	r2, #2
    132e:	4217      	tst	r7, r2
    1330:	d027      	beq.n	1382 <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1332:	7963      	ldrb	r3, [r4, #5]
    1334:	2b00      	cmp	r3, #0
    1336:	d10e      	bne.n	1356 <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1338:	2107      	movs	r1, #7
    133a:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    133c:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    133e:	3201      	adds	r2, #1
    1340:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    1342:	0022      	movs	r2, r4
    1344:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    1346:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1348:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    134a:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    134c:	06f3      	lsls	r3, r6, #27
    134e:	d502      	bpl.n	1356 <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1350:	0020      	movs	r0, r4
    1352:	69e3      	ldr	r3, [r4, #28]
    1354:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1356:	7963      	ldrb	r3, [r4, #5]
    1358:	2b01      	cmp	r3, #1
    135a:	d112      	bne.n	1382 <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    135c:	7a63      	ldrb	r3, [r4, #9]
    135e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1360:	2b01      	cmp	r3, #1
    1362:	d10e      	bne.n	1382 <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1364:	79e2      	ldrb	r2, [r4, #7]
    1366:	2a00      	cmp	r2, #0
    1368:	d10b      	bne.n	1382 <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    136a:	2102      	movs	r1, #2
    136c:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    136e:	3101      	adds	r1, #1
    1370:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    1372:	0021      	movs	r1, r4
    1374:	3138      	adds	r1, #56	; 0x38
    1376:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1378:	421e      	tst	r6, r3
    137a:	d002      	beq.n	1382 <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    137c:	0020      	movs	r0, r4
    137e:	68e3      	ldr	r3, [r4, #12]
    1380:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1382:	2308      	movs	r3, #8
    1384:	421f      	tst	r7, r3
    1386:	d009      	beq.n	139c <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    1388:	7962      	ldrb	r2, [r4, #5]
    138a:	2a00      	cmp	r2, #0
    138c:	d106      	bne.n	139c <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    138e:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1390:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1392:	06b3      	lsls	r3, r6, #26
    1394:	d502      	bpl.n	139c <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1396:	0020      	movs	r0, r4
    1398:	6a23      	ldr	r3, [r4, #32]
    139a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    139c:	b27f      	sxtb	r7, r7
    139e:	2f00      	cmp	r7, #0
    13a0:	da07      	bge.n	13b2 <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    13a2:	2380      	movs	r3, #128	; 0x80
    13a4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    13a6:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    13a8:	0673      	lsls	r3, r6, #25
    13aa:	d502      	bpl.n	13b2 <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    13ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13ae:	0020      	movs	r0, r4
    13b0:	4798      	blx	r3
		}
	}
#  endif
}
    13b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    13b4:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    13b6:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    13b8:	0200      	lsls	r0, r0, #8
    13ba:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    13bc:	62e1      	str	r1, [r4, #44]	; 0x2c
    13be:	e785      	b.n	12cc <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    13c0:	7a62      	ldrb	r2, [r4, #9]
    13c2:	6823      	ldr	r3, [r4, #0]
    13c4:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    13c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    13c8:	2a01      	cmp	r2, #1
    13ca:	d113      	bne.n	13f4 <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    13cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13ce:	3b01      	subs	r3, #1
    13d0:	b29b      	uxth	r3, r3
    13d2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    13d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13d6:	b29b      	uxth	r3, r3
    13d8:	2b00      	cmp	r3, #0
    13da:	d1a7      	bne.n	132c <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13dc:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    13de:	0021      	movs	r1, r4
    13e0:	3138      	adds	r1, #56	; 0x38
    13e2:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    13e4:	3303      	adds	r3, #3
    13e6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    13e8:	4216      	tst	r6, r2
    13ea:	d09f      	beq.n	132c <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    13ec:	0020      	movs	r0, r4
    13ee:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13f0:	4798      	blx	r3
    13f2:	e79b      	b.n	132c <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13f4:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13f8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13fa:	b2da      	uxtb	r2, r3
    13fc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    13fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1400:	1c51      	adds	r1, r2, #1
    1402:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1404:	79a1      	ldrb	r1, [r4, #6]
    1406:	2901      	cmp	r1, #1
    1408:	d104      	bne.n	1414 <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    140a:	0a1b      	lsrs	r3, r3, #8
    140c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    140e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1410:	3301      	adds	r3, #1
    1412:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    1414:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1416:	3b01      	subs	r3, #1
    1418:	b29b      	uxth	r3, r3
    141a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    141c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    141e:	b29b      	uxth	r3, r3
    1420:	2b00      	cmp	r3, #0
    1422:	d000      	beq.n	1426 <_spi_interrupt_handler+0x1c2>
    1424:	e782      	b.n	132c <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    1426:	0022      	movs	r2, r4
    1428:	3238      	adds	r2, #56	; 0x38
    142a:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    142c:	3304      	adds	r3, #4
    142e:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1430:	7a62      	ldrb	r2, [r4, #9]
    1432:	2a02      	cmp	r2, #2
    1434:	d105      	bne.n	1442 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1436:	421e      	tst	r6, r3
    1438:	d100      	bne.n	143c <_spi_interrupt_handler+0x1d8>
    143a:	e777      	b.n	132c <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    143c:	0020      	movs	r0, r4
    143e:	6963      	ldr	r3, [r4, #20]
    1440:	e7d6      	b.n	13f0 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1442:	7a63      	ldrb	r3, [r4, #9]
    1444:	2b00      	cmp	r3, #0
    1446:	d000      	beq.n	144a <_spi_interrupt_handler+0x1e6>
    1448:	e770      	b.n	132c <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    144a:	07b3      	lsls	r3, r6, #30
    144c:	d400      	bmi.n	1450 <_spi_interrupt_handler+0x1ec>
    144e:	e76d      	b.n	132c <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1450:	0020      	movs	r0, r4
    1452:	6923      	ldr	r3, [r4, #16]
    1454:	e7cc      	b.n	13f0 <_spi_interrupt_handler+0x18c>
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	200000ac 	.word	0x200000ac
    145c:	200000a8 	.word	0x200000a8

00001460 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1460:	4770      	bx	lr
	...

00001464 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1466:	4c09      	ldr	r4, [pc, #36]	; (148c <_sercom_set_handler+0x28>)
    1468:	4a09      	ldr	r2, [pc, #36]	; (1490 <_sercom_set_handler+0x2c>)
    146a:	7823      	ldrb	r3, [r4, #0]
    146c:	2b00      	cmp	r3, #0
    146e:	d109      	bne.n	1484 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1470:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1472:	4f08      	ldr	r7, [pc, #32]	; (1494 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    1474:	4d08      	ldr	r5, [pc, #32]	; (1498 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1476:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    1478:	50ee      	str	r6, [r5, r3]
    147a:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    147c:	2b18      	cmp	r3, #24
    147e:	d1fa      	bne.n	1476 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1480:	3b17      	subs	r3, #23
    1482:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1484:	0080      	lsls	r0, r0, #2
    1486:	5011      	str	r1, [r2, r0]
}
    1488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	2000002e 	.word	0x2000002e
    1490:	20000030 	.word	0x20000030
    1494:	00001461 	.word	0x00001461
    1498:	200000ac 	.word	0x200000ac

0000149c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    149c:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    149e:	2309      	movs	r3, #9
    14a0:	466a      	mov	r2, sp
    14a2:	7013      	strb	r3, [r2, #0]
    14a4:	3301      	adds	r3, #1
    14a6:	7053      	strb	r3, [r2, #1]
    14a8:	3301      	adds	r3, #1
    14aa:	7093      	strb	r3, [r2, #2]
    14ac:	3301      	adds	r3, #1
    14ae:	70d3      	strb	r3, [r2, #3]
    14b0:	3301      	adds	r3, #1
    14b2:	7113      	strb	r3, [r2, #4]
    14b4:	3301      	adds	r3, #1
    14b6:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    14b8:	4b02      	ldr	r3, [pc, #8]	; (14c4 <_sercom_get_interrupt_vector+0x28>)
    14ba:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    14bc:	466b      	mov	r3, sp
    14be:	5618      	ldrsb	r0, [r3, r0]
}
    14c0:	bd0e      	pop	{r1, r2, r3, pc}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	00000a39 	.word	0x00000a39

000014c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    14c8:	b510      	push	{r4, lr}
    14ca:	4b02      	ldr	r3, [pc, #8]	; (14d4 <SERCOM0_Handler+0xc>)
    14cc:	2000      	movs	r0, #0
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	4798      	blx	r3
    14d2:	bd10      	pop	{r4, pc}
    14d4:	20000030 	.word	0x20000030

000014d8 <SERCOM1_Handler>:
    14d8:	b510      	push	{r4, lr}
    14da:	4b02      	ldr	r3, [pc, #8]	; (14e4 <SERCOM1_Handler+0xc>)
    14dc:	2001      	movs	r0, #1
    14de:	685b      	ldr	r3, [r3, #4]
    14e0:	4798      	blx	r3
    14e2:	bd10      	pop	{r4, pc}
    14e4:	20000030 	.word	0x20000030

000014e8 <SERCOM2_Handler>:
    14e8:	b510      	push	{r4, lr}
    14ea:	4b02      	ldr	r3, [pc, #8]	; (14f4 <SERCOM2_Handler+0xc>)
    14ec:	2002      	movs	r0, #2
    14ee:	689b      	ldr	r3, [r3, #8]
    14f0:	4798      	blx	r3
    14f2:	bd10      	pop	{r4, pc}
    14f4:	20000030 	.word	0x20000030

000014f8 <SERCOM3_Handler>:
    14f8:	b510      	push	{r4, lr}
    14fa:	4b02      	ldr	r3, [pc, #8]	; (1504 <SERCOM3_Handler+0xc>)
    14fc:	2003      	movs	r0, #3
    14fe:	68db      	ldr	r3, [r3, #12]
    1500:	4798      	blx	r3
    1502:	bd10      	pop	{r4, pc}
    1504:	20000030 	.word	0x20000030

00001508 <SERCOM4_Handler>:
    1508:	b510      	push	{r4, lr}
    150a:	4b02      	ldr	r3, [pc, #8]	; (1514 <SERCOM4_Handler+0xc>)
    150c:	2004      	movs	r0, #4
    150e:	691b      	ldr	r3, [r3, #16]
    1510:	4798      	blx	r3
    1512:	bd10      	pop	{r4, pc}
    1514:	20000030 	.word	0x20000030

00001518 <SERCOM5_Handler>:
    1518:	b510      	push	{r4, lr}
    151a:	4b02      	ldr	r3, [pc, #8]	; (1524 <SERCOM5_Handler+0xc>)
    151c:	2005      	movs	r0, #5
    151e:	695b      	ldr	r3, [r3, #20]
    1520:	4798      	blx	r3
    1522:	bd10      	pop	{r4, pc}
    1524:	20000030 	.word	0x20000030

00001528 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1528:	4770      	bx	lr
	...

0000152c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    152c:	4b09      	ldr	r3, [pc, #36]	; (1554 <cpu_irq_enter_critical+0x28>)
    152e:	6819      	ldr	r1, [r3, #0]
    1530:	2900      	cmp	r1, #0
    1532:	d10b      	bne.n	154c <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1534:	f3ef 8010 	mrs	r0, PRIMASK
    1538:	4a07      	ldr	r2, [pc, #28]	; (1558 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    153a:	2800      	cmp	r0, #0
    153c:	d105      	bne.n	154a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    153e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1540:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1544:	4905      	ldr	r1, [pc, #20]	; (155c <cpu_irq_enter_critical+0x30>)
    1546:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1548:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    154a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    154c:	681a      	ldr	r2, [r3, #0]
    154e:	3201      	adds	r2, #1
    1550:	601a      	str	r2, [r3, #0]
}
    1552:	4770      	bx	lr
    1554:	20000048 	.word	0x20000048
    1558:	2000004c 	.word	0x2000004c
    155c:	20000008 	.word	0x20000008

00001560 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1560:	4b08      	ldr	r3, [pc, #32]	; (1584 <cpu_irq_leave_critical+0x24>)
    1562:	681a      	ldr	r2, [r3, #0]
    1564:	3a01      	subs	r2, #1
    1566:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1568:	681b      	ldr	r3, [r3, #0]
    156a:	2b00      	cmp	r3, #0
    156c:	d109      	bne.n	1582 <cpu_irq_leave_critical+0x22>
    156e:	4b06      	ldr	r3, [pc, #24]	; (1588 <cpu_irq_leave_critical+0x28>)
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	2b00      	cmp	r3, #0
    1574:	d005      	beq.n	1582 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1576:	2201      	movs	r2, #1
    1578:	4b04      	ldr	r3, [pc, #16]	; (158c <cpu_irq_leave_critical+0x2c>)
    157a:	701a      	strb	r2, [r3, #0]
    157c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1580:	b662      	cpsie	i
	}
}
    1582:	4770      	bx	lr
    1584:	20000048 	.word	0x20000048
    1588:	2000004c 	.word	0x2000004c
    158c:	20000008 	.word	0x20000008

00001590 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1590:	2310      	movs	r3, #16
    1592:	4902      	ldr	r1, [pc, #8]	; (159c <_system_dfll_wait_for_sync+0xc>)
    1594:	68ca      	ldr	r2, [r1, #12]
    1596:	421a      	tst	r2, r3
    1598:	d0fc      	beq.n	1594 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    159a:	4770      	bx	lr
    159c:	40000800 	.word	0x40000800

000015a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15a0:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    15a2:	2808      	cmp	r0, #8
    15a4:	d806      	bhi.n	15b4 <system_clock_source_get_hz+0x14>
    15a6:	f000 fbb1 	bl	1d0c <__gnu_thumb1_case_uqi>
    15aa:	0508      	.short	0x0508
    15ac:	122e2e05 	.word	0x122e2e05
    15b0:	150b      	.short	0x150b
    15b2:	26          	.byte	0x26
    15b3:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    15b4:	2400      	movs	r4, #0
	}
}
    15b6:	0020      	movs	r0, r4
    15b8:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    15ba:	4b15      	ldr	r3, [pc, #84]	; (1610 <system_clock_source_get_hz+0x70>)
    15bc:	691c      	ldr	r4, [r3, #16]
    15be:	e7fa      	b.n	15b6 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    15c0:	4b14      	ldr	r3, [pc, #80]	; (1614 <system_clock_source_get_hz+0x74>)
    15c2:	4c15      	ldr	r4, [pc, #84]	; (1618 <system_clock_source_get_hz+0x78>)
    15c4:	6a1b      	ldr	r3, [r3, #32]
    15c6:	059b      	lsls	r3, r3, #22
    15c8:	0f9b      	lsrs	r3, r3, #30
    15ca:	40dc      	lsrs	r4, r3
    15cc:	e7f3      	b.n	15b6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    15ce:	4b10      	ldr	r3, [pc, #64]	; (1610 <system_clock_source_get_hz+0x70>)
    15d0:	695c      	ldr	r4, [r3, #20]
    15d2:	e7f0      	b.n	15b6 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15d4:	4d0e      	ldr	r5, [pc, #56]	; (1610 <system_clock_source_get_hz+0x70>)
			return 0;
    15d6:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15d8:	682b      	ldr	r3, [r5, #0]
    15da:	079b      	lsls	r3, r3, #30
    15dc:	d5eb      	bpl.n	15b6 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    15de:	4b0f      	ldr	r3, [pc, #60]	; (161c <system_clock_source_get_hz+0x7c>)
    15e0:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    15e2:	682b      	ldr	r3, [r5, #0]
    15e4:	075b      	lsls	r3, r3, #29
    15e6:	d511      	bpl.n	160c <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15e8:	0020      	movs	r0, r4
    15ea:	4b0d      	ldr	r3, [pc, #52]	; (1620 <system_clock_source_get_hz+0x80>)
    15ec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    15ee:	68ac      	ldr	r4, [r5, #8]
    15f0:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    15f2:	4344      	muls	r4, r0
    15f4:	e7df      	b.n	15b6 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    15f6:	4b0b      	ldr	r3, [pc, #44]	; (1624 <system_clock_source_get_hz+0x84>)
			return 0;
    15f8:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	075b      	lsls	r3, r3, #29
    15fe:	d5da      	bpl.n	15b6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <system_clock_source_get_hz+0x70>)
    1602:	68dc      	ldr	r4, [r3, #12]
    1604:	e7d7      	b.n	15b6 <system_clock_source_get_hz+0x16>
		return 32768UL;
    1606:	2480      	movs	r4, #128	; 0x80
    1608:	0224      	lsls	r4, r4, #8
    160a:	e7d4      	b.n	15b6 <system_clock_source_get_hz+0x16>
		return 48000000UL;
    160c:	4c06      	ldr	r4, [pc, #24]	; (1628 <system_clock_source_get_hz+0x88>)
    160e:	e7d2      	b.n	15b6 <system_clock_source_get_hz+0x16>
    1610:	20000050 	.word	0x20000050
    1614:	40000800 	.word	0x40000800
    1618:	007a1200 	.word	0x007a1200
    161c:	00001591 	.word	0x00001591
    1620:	000019c5 	.word	0x000019c5
    1624:	40000850 	.word	0x40000850
    1628:	02dc6c00 	.word	0x02dc6c00

0000162c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    162c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    162e:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1630:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1632:	7845      	ldrb	r5, [r0, #1]
    1634:	2001      	movs	r0, #1
    1636:	2640      	movs	r6, #64	; 0x40
    1638:	4005      	ands	r5, r0
    163a:	4020      	ands	r0, r4
    163c:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    163e:	4908      	ldr	r1, [pc, #32]	; (1660 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1640:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1642:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    1644:	01c0      	lsls	r0, r0, #7
    1646:	43b3      	bics	r3, r6
    1648:	432b      	orrs	r3, r5
    164a:	43a3      	bics	r3, r4
    164c:	4303      	orrs	r3, r0
    164e:	2003      	movs	r0, #3
    1650:	4002      	ands	r2, r0
    1652:	4804      	ldr	r0, [pc, #16]	; (1664 <system_clock_source_osc8m_set_config+0x38>)
    1654:	0212      	lsls	r2, r2, #8
    1656:	4003      	ands	r3, r0
    1658:	4313      	orrs	r3, r2
    165a:	620b      	str	r3, [r1, #32]
}
    165c:	bd70      	pop	{r4, r5, r6, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	40000800 	.word	0x40000800
    1664:	fffffcff 	.word	0xfffffcff

00001668 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    166a:	2808      	cmp	r0, #8
    166c:	d806      	bhi.n	167c <system_clock_source_enable+0x14>
    166e:	f000 fb4d 	bl	1d0c <__gnu_thumb1_case_uqi>
    1672:	0514      	.short	0x0514
    1674:	1a0e0c05 	.word	0x1a0e0c05
    1678:	2007      	.short	0x2007
    167a:	34          	.byte	0x34
    167b:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    167c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1680:	2302      	movs	r3, #2
    1682:	4a19      	ldr	r2, [pc, #100]	; (16e8 <system_clock_source_enable+0x80>)
    1684:	6a11      	ldr	r1, [r2, #32]
    1686:	430b      	orrs	r3, r1
    1688:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    168a:	2000      	movs	r0, #0
    168c:	e7f7      	b.n	167e <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    168e:	2302      	movs	r3, #2
    1690:	4a15      	ldr	r2, [pc, #84]	; (16e8 <system_clock_source_enable+0x80>)
    1692:	6991      	ldr	r1, [r2, #24]
    1694:	430b      	orrs	r3, r1
    1696:	6193      	str	r3, [r2, #24]
    1698:	e7f7      	b.n	168a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    169a:	2302      	movs	r3, #2
    169c:	4a12      	ldr	r2, [pc, #72]	; (16e8 <system_clock_source_enable+0x80>)
    169e:	8a11      	ldrh	r1, [r2, #16]
    16a0:	430b      	orrs	r3, r1
    16a2:	8213      	strh	r3, [r2, #16]
    16a4:	e7f1      	b.n	168a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    16a6:	2302      	movs	r3, #2
    16a8:	4a0f      	ldr	r2, [pc, #60]	; (16e8 <system_clock_source_enable+0x80>)
    16aa:	8a91      	ldrh	r1, [r2, #20]
    16ac:	430b      	orrs	r3, r1
    16ae:	8293      	strh	r3, [r2, #20]
    16b0:	e7eb      	b.n	168a <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16b2:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    16b4:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16b6:	4e0d      	ldr	r6, [pc, #52]	; (16ec <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    16b8:	4d0b      	ldr	r5, [pc, #44]	; (16e8 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16ba:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    16bc:	4f0c      	ldr	r7, [pc, #48]	; (16f0 <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16be:	4313      	orrs	r3, r2
    16c0:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    16c2:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    16c4:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16c6:	68b3      	ldr	r3, [r6, #8]
    16c8:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16ca:	6873      	ldr	r3, [r6, #4]
    16cc:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    16ce:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    16d0:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    16d2:	6833      	ldr	r3, [r6, #0]
    16d4:	b29b      	uxth	r3, r3
    16d6:	84ab      	strh	r3, [r5, #36]	; 0x24
    16d8:	e7d7      	b.n	168a <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    16da:	2302      	movs	r3, #2
    16dc:	4a05      	ldr	r2, [pc, #20]	; (16f4 <system_clock_source_enable+0x8c>)
    16de:	7811      	ldrb	r1, [r2, #0]
    16e0:	430b      	orrs	r3, r1
    16e2:	7013      	strb	r3, [r2, #0]
    16e4:	e7d1      	b.n	168a <system_clock_source_enable+0x22>
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	40000800 	.word	0x40000800
    16ec:	20000050 	.word	0x20000050
    16f0:	00001591 	.word	0x00001591
    16f4:	40000844 	.word	0x40000844

000016f8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16fa:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    16fc:	211e      	movs	r1, #30
    16fe:	4b19      	ldr	r3, [pc, #100]	; (1764 <system_clock_init+0x6c>)
    1700:	00d2      	lsls	r2, r2, #3
    1702:	609a      	str	r2, [r3, #8]
    1704:	4a18      	ldr	r2, [pc, #96]	; (1768 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1706:	2400      	movs	r4, #0
    1708:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    170a:	ad01      	add	r5, sp, #4
    170c:	438b      	bics	r3, r1
    170e:	6053      	str	r3, [r2, #4]
    1710:	2301      	movs	r3, #1
    1712:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1714:	b2e0      	uxtb	r0, r4
    1716:	0029      	movs	r1, r5
    1718:	4b14      	ldr	r3, [pc, #80]	; (176c <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    171a:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    171c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    171e:	2c25      	cmp	r4, #37	; 0x25
    1720:	d1f8      	bne.n	1714 <system_clock_init+0x1c>
	config->run_in_standby  = false;
    1722:	2400      	movs	r4, #0
    1724:	466b      	mov	r3, sp
	config->on_demand       = true;
    1726:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    1728:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    172a:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    172c:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    172e:	4668      	mov	r0, sp
    1730:	4b0f      	ldr	r3, [pc, #60]	; (1770 <system_clock_init+0x78>)
    1732:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1734:	4b0f      	ldr	r3, [pc, #60]	; (1774 <system_clock_init+0x7c>)
    1736:	2006      	movs	r0, #6
    1738:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    173a:	4b0f      	ldr	r3, [pc, #60]	; (1778 <system_clock_init+0x80>)
    173c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    173e:	4b0f      	ldr	r3, [pc, #60]	; (177c <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1740:	0029      	movs	r1, r5
    1742:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1744:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1746:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1748:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    174a:	2306      	movs	r3, #6
    174c:	0020      	movs	r0, r4
    174e:	702b      	strb	r3, [r5, #0]
    1750:	4b0b      	ldr	r3, [pc, #44]	; (1780 <system_clock_init+0x88>)
	config->division_factor    = 1;
    1752:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    1754:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    1756:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    1758:	726c      	strb	r4, [r5, #9]
    175a:	4798      	blx	r3
    175c:	0020      	movs	r0, r4
    175e:	4b09      	ldr	r3, [pc, #36]	; (1784 <system_clock_init+0x8c>)
    1760:	4798      	blx	r3
#endif
}
    1762:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1764:	40000800 	.word	0x40000800
    1768:	41004000 	.word	0x41004000
    176c:	000019a9 	.word	0x000019a9
    1770:	0000162d 	.word	0x0000162d
    1774:	00001669 	.word	0x00001669
    1778:	00001795 	.word	0x00001795
    177c:	40000400 	.word	0x40000400
    1780:	000017b5 	.word	0x000017b5
    1784:	00001859 	.word	0x00001859

00001788 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1788:	4b01      	ldr	r3, [pc, #4]	; (1790 <system_gclk_is_syncing+0x8>)
    178a:	7858      	ldrb	r0, [r3, #1]
    178c:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    178e:	4770      	bx	lr
    1790:	40000c00 	.word	0x40000c00

00001794 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1794:	2308      	movs	r3, #8
    1796:	4a05      	ldr	r2, [pc, #20]	; (17ac <system_gclk_init+0x18>)
    1798:	6991      	ldr	r1, [r2, #24]
    179a:	430b      	orrs	r3, r1
    179c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    179e:	2301      	movs	r3, #1
    17a0:	4a03      	ldr	r2, [pc, #12]	; (17b0 <system_gclk_init+0x1c>)
    17a2:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17a4:	7811      	ldrb	r1, [r2, #0]
    17a6:	4219      	tst	r1, r3
    17a8:	d1fc      	bne.n	17a4 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    17aa:	4770      	bx	lr
    17ac:	40000400 	.word	0x40000400
    17b0:	40000c00 	.word	0x40000c00

000017b4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17b6:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    17b8:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17ba:	0224      	lsls	r4, r4, #8
{
    17bc:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    17be:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    17c0:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    17c2:	2b00      	cmp	r3, #0
    17c4:	d002      	beq.n	17cc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	02db      	lsls	r3, r3, #11
    17ca:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    17cc:	7a4b      	ldrb	r3, [r1, #9]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d002      	beq.n	17d8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    17d2:	2380      	movs	r3, #128	; 0x80
    17d4:	031b      	lsls	r3, r3, #12
    17d6:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    17d8:	684b      	ldr	r3, [r1, #4]
    17da:	2b01      	cmp	r3, #1
    17dc:	d912      	bls.n	1804 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17de:	1e5d      	subs	r5, r3, #1
    17e0:	401d      	ands	r5, r3
    17e2:	2202      	movs	r2, #2
    17e4:	2d00      	cmp	r5, #0
    17e6:	d006      	beq.n	17f6 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    17e8:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    17ea:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    17ec:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    17ee:	029b      	lsls	r3, r3, #10
    17f0:	e007      	b.n	1802 <system_gclk_gen_set_config+0x4e>
				div2_count++;
    17f2:	3501      	adds	r5, #1
						mask <<= 1) {
    17f4:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    17f6:	429a      	cmp	r2, r3
    17f8:	d3fb      	bcc.n	17f2 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17fa:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17fc:	022d      	lsls	r5, r5, #8
    17fe:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1800:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1802:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1804:	7a0b      	ldrb	r3, [r1, #8]
    1806:	2b00      	cmp	r3, #0
    1808:	d002      	beq.n	1810 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    180a:	2380      	movs	r3, #128	; 0x80
    180c:	039b      	lsls	r3, r3, #14
    180e:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1810:	4f0c      	ldr	r7, [pc, #48]	; (1844 <system_gclk_gen_set_config+0x90>)
    1812:	47b8      	blx	r7
    1814:	2800      	cmp	r0, #0
    1816:	d1fb      	bne.n	1810 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1818:	4b0b      	ldr	r3, [pc, #44]	; (1848 <system_gclk_gen_set_config+0x94>)
    181a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    181c:	4b0b      	ldr	r3, [pc, #44]	; (184c <system_gclk_gen_set_config+0x98>)
    181e:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1820:	47b8      	blx	r7
    1822:	2800      	cmp	r0, #0
    1824:	d1fc      	bne.n	1820 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <system_gclk_gen_set_config+0x9c>)
    1828:	609d      	str	r5, [r3, #8]
    182a:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    182c:	47b8      	blx	r7
    182e:	2800      	cmp	r0, #0
    1830:	d1fc      	bne.n	182c <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1832:	2280      	movs	r2, #128	; 0x80
    1834:	686b      	ldr	r3, [r5, #4]
    1836:	0252      	lsls	r2, r2, #9
    1838:	4013      	ands	r3, r2
    183a:	431c      	orrs	r4, r3
    183c:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    183e:	4b05      	ldr	r3, [pc, #20]	; (1854 <system_gclk_gen_set_config+0xa0>)
    1840:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1844:	00001789 	.word	0x00001789
    1848:	0000152d 	.word	0x0000152d
    184c:	40000c08 	.word	0x40000c08
    1850:	40000c00 	.word	0x40000c00
    1854:	00001561 	.word	0x00001561

00001858 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1858:	b570      	push	{r4, r5, r6, lr}
    185a:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    185c:	4c09      	ldr	r4, [pc, #36]	; (1884 <system_gclk_gen_enable+0x2c>)
    185e:	47a0      	blx	r4
    1860:	2800      	cmp	r0, #0
    1862:	d1fb      	bne.n	185c <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1864:	4b08      	ldr	r3, [pc, #32]	; (1888 <system_gclk_gen_enable+0x30>)
    1866:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1868:	4b08      	ldr	r3, [pc, #32]	; (188c <system_gclk_gen_enable+0x34>)
    186a:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    186c:	47a0      	blx	r4
    186e:	2800      	cmp	r0, #0
    1870:	d1fc      	bne.n	186c <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1872:	2380      	movs	r3, #128	; 0x80
    1874:	4a06      	ldr	r2, [pc, #24]	; (1890 <system_gclk_gen_enable+0x38>)
    1876:	025b      	lsls	r3, r3, #9
    1878:	6851      	ldr	r1, [r2, #4]
    187a:	430b      	orrs	r3, r1
    187c:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    187e:	4b05      	ldr	r3, [pc, #20]	; (1894 <system_gclk_gen_enable+0x3c>)
    1880:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1882:	bd70      	pop	{r4, r5, r6, pc}
    1884:	00001789 	.word	0x00001789
    1888:	0000152d 	.word	0x0000152d
    188c:	40000c04 	.word	0x40000c04
    1890:	40000c00 	.word	0x40000c00
    1894:	00001561 	.word	0x00001561

00001898 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    189a:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    189c:	4e18      	ldr	r6, [pc, #96]	; (1900 <system_gclk_gen_get_hz+0x68>)
    189e:	47b0      	blx	r6
    18a0:	2800      	cmp	r0, #0
    18a2:	d1fb      	bne.n	189c <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    18a4:	4b17      	ldr	r3, [pc, #92]	; (1904 <system_gclk_gen_get_hz+0x6c>)
    18a6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18a8:	4b17      	ldr	r3, [pc, #92]	; (1908 <system_gclk_gen_get_hz+0x70>)
    18aa:	701f      	strb	r7, [r3, #0]
    18ac:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    18ae:	47b0      	blx	r6
    18b0:	2800      	cmp	r0, #0
    18b2:	d1fc      	bne.n	18ae <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    18b4:	4d15      	ldr	r5, [pc, #84]	; (190c <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18b6:	4b16      	ldr	r3, [pc, #88]	; (1910 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    18b8:	6868      	ldr	r0, [r5, #4]
    18ba:	04c0      	lsls	r0, r0, #19
    18bc:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18be:	4798      	blx	r3
    18c0:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18c2:	9b01      	ldr	r3, [sp, #4]
    18c4:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18c6:	686b      	ldr	r3, [r5, #4]
    18c8:	02db      	lsls	r3, r3, #11
    18ca:	0fdb      	lsrs	r3, r3, #31
    18cc:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ce:	4b11      	ldr	r3, [pc, #68]	; (1914 <system_gclk_gen_get_hz+0x7c>)
    18d0:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    18d2:	47b0      	blx	r6
    18d4:	2800      	cmp	r0, #0
    18d6:	d1fc      	bne.n	18d2 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18d8:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    18da:	4b0f      	ldr	r3, [pc, #60]	; (1918 <system_gclk_gen_get_hz+0x80>)
    18dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18de:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18e0:	022d      	lsls	r5, r5, #8
    18e2:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    18e4:	2b00      	cmp	r3, #0
    18e6:	d108      	bne.n	18fa <system_gclk_gen_get_hz+0x62>
    18e8:	2d01      	cmp	r5, #1
    18ea:	d904      	bls.n	18f6 <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    18ec:	0020      	movs	r0, r4
    18ee:	0029      	movs	r1, r5
    18f0:	4b0a      	ldr	r3, [pc, #40]	; (191c <system_gclk_gen_get_hz+0x84>)
    18f2:	4798      	blx	r3
    18f4:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    18f6:	0020      	movs	r0, r4
    18f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    18fa:	3501      	adds	r5, #1
    18fc:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    18fe:	e7fa      	b.n	18f6 <system_gclk_gen_get_hz+0x5e>
    1900:	00001789 	.word	0x00001789
    1904:	0000152d 	.word	0x0000152d
    1908:	40000c04 	.word	0x40000c04
    190c:	40000c00 	.word	0x40000c00
    1910:	000015a1 	.word	0x000015a1
    1914:	40000c08 	.word	0x40000c08
    1918:	00001561 	.word	0x00001561
    191c:	00001d21 	.word	0x00001d21

00001920 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1920:	b510      	push	{r4, lr}
    1922:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <system_gclk_chan_enable+0x20>)
    1926:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1928:	4b06      	ldr	r3, [pc, #24]	; (1944 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    192a:	4a07      	ldr	r2, [pc, #28]	; (1948 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    192c:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    192e:	2380      	movs	r3, #128	; 0x80
    1930:	8851      	ldrh	r1, [r2, #2]
    1932:	01db      	lsls	r3, r3, #7
    1934:	430b      	orrs	r3, r1
    1936:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <system_gclk_chan_enable+0x2c>)
    193a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    193c:	bd10      	pop	{r4, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	0000152d 	.word	0x0000152d
    1944:	40000c02 	.word	0x40000c02
    1948:	40000c00 	.word	0x40000c00
    194c:	00001561 	.word	0x00001561

00001950 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1950:	b510      	push	{r4, lr}
    1952:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1954:	4b0e      	ldr	r3, [pc, #56]	; (1990 <system_gclk_chan_disable+0x40>)
    1956:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1958:	4b0e      	ldr	r3, [pc, #56]	; (1994 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    195a:	4a0f      	ldr	r2, [pc, #60]	; (1998 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    195c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    195e:	4b0f      	ldr	r3, [pc, #60]	; (199c <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1960:	4c0f      	ldr	r4, [pc, #60]	; (19a0 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1962:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1964:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1966:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1968:	4011      	ands	r1, r2
    196a:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    196c:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    196e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1970:	4021      	ands	r1, r4
    1972:	8059      	strh	r1, [r3, #2]
    1974:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1976:	2280      	movs	r2, #128	; 0x80
    1978:	01d2      	lsls	r2, r2, #7
    197a:	885c      	ldrh	r4, [r3, #2]
    197c:	4214      	tst	r4, r2
    197e:	d1fc      	bne.n	197a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1980:	885a      	ldrh	r2, [r3, #2]
    1982:	0200      	lsls	r0, r0, #8
    1984:	400a      	ands	r2, r1
    1986:	4302      	orrs	r2, r0
    1988:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    198a:	4b06      	ldr	r3, [pc, #24]	; (19a4 <system_gclk_chan_disable+0x54>)
    198c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    198e:	bd10      	pop	{r4, pc}
    1990:	0000152d 	.word	0x0000152d
    1994:	40000c02 	.word	0x40000c02
    1998:	fffff0ff 	.word	0xfffff0ff
    199c:	40000c00 	.word	0x40000c00
    19a0:	ffffbfff 	.word	0xffffbfff
    19a4:	00001561 	.word	0x00001561

000019a8 <system_gclk_chan_set_config>:
{
    19a8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    19aa:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    19ac:	4b03      	ldr	r3, [pc, #12]	; (19bc <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    19ae:	0224      	lsls	r4, r4, #8
    19b0:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    19b2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    19b4:	4b02      	ldr	r3, [pc, #8]	; (19c0 <system_gclk_chan_set_config+0x18>)
    19b6:	b2a4      	uxth	r4, r4
    19b8:	805c      	strh	r4, [r3, #2]
}
    19ba:	bd10      	pop	{r4, pc}
    19bc:	00001951 	.word	0x00001951
    19c0:	40000c00 	.word	0x40000c00

000019c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19c4:	b510      	push	{r4, lr}
    19c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19c8:	4b06      	ldr	r3, [pc, #24]	; (19e4 <system_gclk_chan_get_hz+0x20>)
    19ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19cc:	4b06      	ldr	r3, [pc, #24]	; (19e8 <system_gclk_chan_get_hz+0x24>)
    19ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19d0:	4b06      	ldr	r3, [pc, #24]	; (19ec <system_gclk_chan_get_hz+0x28>)
    19d2:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    19d4:	4b06      	ldr	r3, [pc, #24]	; (19f0 <system_gclk_chan_get_hz+0x2c>)
    19d6:	0524      	lsls	r4, r4, #20
    19d8:	0f24      	lsrs	r4, r4, #28
    19da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19dc:	0020      	movs	r0, r4
    19de:	4b05      	ldr	r3, [pc, #20]	; (19f4 <system_gclk_chan_get_hz+0x30>)
    19e0:	4798      	blx	r3
}
    19e2:	bd10      	pop	{r4, pc}
    19e4:	0000152d 	.word	0x0000152d
    19e8:	40000c02 	.word	0x40000c02
    19ec:	40000c00 	.word	0x40000c00
    19f0:	00001561 	.word	0x00001561
    19f4:	00001899 	.word	0x00001899

000019f8 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19f8:	78d3      	ldrb	r3, [r2, #3]
{
    19fa:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    19fc:	2b00      	cmp	r3, #0
    19fe:	d135      	bne.n	1a6c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a00:	7814      	ldrb	r4, [r2, #0]
    1a02:	2c80      	cmp	r4, #128	; 0x80
    1a04:	d003      	beq.n	1a0e <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a06:	2380      	movs	r3, #128	; 0x80
    1a08:	0624      	lsls	r4, r4, #24
    1a0a:	025b      	lsls	r3, r3, #9
    1a0c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a0e:	2502      	movs	r5, #2
    1a10:	7854      	ldrb	r4, [r2, #1]
    1a12:	43ac      	bics	r4, r5
    1a14:	d106      	bne.n	1a24 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a16:	7894      	ldrb	r4, [r2, #2]
    1a18:	2c00      	cmp	r4, #0
    1a1a:	d124      	bne.n	1a66 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a1c:	2480      	movs	r4, #128	; 0x80
    1a1e:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a20:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a22:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a24:	7854      	ldrb	r4, [r2, #1]
    1a26:	3c01      	subs	r4, #1
    1a28:	2c01      	cmp	r4, #1
    1a2a:	d801      	bhi.n	1a30 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a2c:	4c12      	ldr	r4, [pc, #72]	; (1a78 <_system_pinmux_config+0x80>)
    1a2e:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a30:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a32:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a34:	05e4      	lsls	r4, r4, #23
    1a36:	432c      	orrs	r4, r5
    1a38:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a3a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a3c:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a3e:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a40:	0624      	lsls	r4, r4, #24
    1a42:	432c      	orrs	r4, r5
    1a44:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a46:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a48:	78d4      	ldrb	r4, [r2, #3]
    1a4a:	2c00      	cmp	r4, #0
    1a4c:	d10a      	bne.n	1a64 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a4e:	035b      	lsls	r3, r3, #13
    1a50:	d503      	bpl.n	1a5a <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a52:	7893      	ldrb	r3, [r2, #2]
    1a54:	2b01      	cmp	r3, #1
    1a56:	d10c      	bne.n	1a72 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1a58:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a5a:	7853      	ldrb	r3, [r2, #1]
    1a5c:	3b01      	subs	r3, #1
    1a5e:	2b01      	cmp	r3, #1
    1a60:	d800      	bhi.n	1a64 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1a62:	6081      	str	r1, [r0, #8]
		}
	}
}
    1a64:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a66:	24c0      	movs	r4, #192	; 0xc0
    1a68:	02e4      	lsls	r4, r4, #11
    1a6a:	e7d9      	b.n	1a20 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1a6c:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1a6e:	2300      	movs	r3, #0
    1a70:	e7de      	b.n	1a30 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1a72:	6141      	str	r1, [r0, #20]
    1a74:	e7f1      	b.n	1a5a <_system_pinmux_config+0x62>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	fffbffff 	.word	0xfffbffff

00001a7c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a7c:	b510      	push	{r4, lr}
    1a7e:	0003      	movs	r3, r0
    1a80:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    1a82:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    1a84:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1a86:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1a88:	4281      	cmp	r1, r0
    1a8a:	d102      	bne.n	1a92 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a8c:	4904      	ldr	r1, [pc, #16]	; (1aa0 <system_pinmux_pin_set_config+0x24>)
    1a8e:	01e0      	lsls	r0, r4, #7
    1a90:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a92:	211f      	movs	r1, #31
    1a94:	400b      	ands	r3, r1
    1a96:	391e      	subs	r1, #30
    1a98:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <system_pinmux_pin_set_config+0x28>)
    1a9c:	4798      	blx	r3
}
    1a9e:	bd10      	pop	{r4, pc}
    1aa0:	41004400 	.word	0x41004400
    1aa4:	000019f9 	.word	0x000019f9

00001aa8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1aa8:	4770      	bx	lr
	...

00001aac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1aac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <system_init+0x18>)
    1ab0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ab2:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <system_init+0x1c>)
    1ab4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ab6:	4b05      	ldr	r3, [pc, #20]	; (1acc <system_init+0x20>)
    1ab8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <system_init+0x24>)
    1abc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <system_init+0x28>)
    1ac0:	4798      	blx	r3
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	000016f9 	.word	0x000016f9
    1ac8:	00001529 	.word	0x00001529
    1acc:	00001aa9 	.word	0x00001aa9
    1ad0:	00001aa9 	.word	0x00001aa9
    1ad4:	00001aa9 	.word	0x00001aa9

00001ad8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ad8:	e7fe      	b.n	1ad8 <Dummy_Handler>
	...

00001adc <Reset_Handler>:
        if (pSrc != pDest) {
    1adc:	4821      	ldr	r0, [pc, #132]	; (1b64 <Reset_Handler+0x88>)
    1ade:	4922      	ldr	r1, [pc, #136]	; (1b68 <Reset_Handler+0x8c>)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1ae2:	4288      	cmp	r0, r1
    1ae4:	d004      	beq.n	1af0 <Reset_Handler+0x14>
    1ae6:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1ae8:	4c20      	ldr	r4, [pc, #128]	; (1b6c <Reset_Handler+0x90>)
    1aea:	18ca      	adds	r2, r1, r3
    1aec:	42a2      	cmp	r2, r4
    1aee:	d332      	bcc.n	1b56 <Reset_Handler+0x7a>
                *pDest++ = 0;
    1af0:	2100      	movs	r1, #0
    1af2:	4b1f      	ldr	r3, [pc, #124]	; (1b70 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1af4:	4a1f      	ldr	r2, [pc, #124]	; (1b74 <Reset_Handler+0x98>)
    1af6:	4293      	cmp	r3, r2
    1af8:	d331      	bcc.n	1b5e <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1afa:	21ff      	movs	r1, #255	; 0xff
    1afc:	4b1e      	ldr	r3, [pc, #120]	; (1b78 <Reset_Handler+0x9c>)
    1afe:	4a1f      	ldr	r2, [pc, #124]	; (1b7c <Reset_Handler+0xa0>)
    1b00:	438b      	bics	r3, r1
    1b02:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b04:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1b06:	250c      	movs	r5, #12
    1b08:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1b0a:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b0c:	4b1c      	ldr	r3, [pc, #112]	; (1b80 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1b0e:	481d      	ldr	r0, [pc, #116]	; (1b84 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1b10:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1b12:	78c3      	ldrb	r3, [r0, #3]
    1b14:	39fc      	subs	r1, #252	; 0xfc
    1b16:	438b      	bics	r3, r1
    1b18:	4313      	orrs	r3, r2
    1b1a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1b1c:	78c3      	ldrb	r3, [r0, #3]
    1b1e:	43ab      	bics	r3, r5
    1b20:	4323      	orrs	r3, r4
    1b22:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1b24:	4b18      	ldr	r3, [pc, #96]	; (1b88 <Reset_Handler+0xac>)
    1b26:	7b98      	ldrb	r0, [r3, #14]
    1b28:	43b0      	bics	r0, r6
    1b2a:	0006      	movs	r6, r0
    1b2c:	2020      	movs	r0, #32
    1b2e:	4330      	orrs	r0, r6
    1b30:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1b32:	7b98      	ldrb	r0, [r3, #14]
    1b34:	43a8      	bics	r0, r5
    1b36:	4304      	orrs	r4, r0
    1b38:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1b3a:	7b98      	ldrb	r0, [r3, #14]
    1b3c:	4388      	bics	r0, r1
    1b3e:	4302      	orrs	r2, r0
    1b40:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1b42:	2380      	movs	r3, #128	; 0x80
    1b44:	4a11      	ldr	r2, [pc, #68]	; (1b8c <Reset_Handler+0xb0>)
    1b46:	6851      	ldr	r1, [r2, #4]
    1b48:	430b      	orrs	r3, r1
    1b4a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1b4c:	4b10      	ldr	r3, [pc, #64]	; (1b90 <Reset_Handler+0xb4>)
    1b4e:	4798      	blx	r3
        main();
    1b50:	4b10      	ldr	r3, [pc, #64]	; (1b94 <Reset_Handler+0xb8>)
    1b52:	4798      	blx	r3
    1b54:	e7fe      	b.n	1b54 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1b56:	58c5      	ldr	r5, [r0, r3]
    1b58:	3304      	adds	r3, #4
    1b5a:	6015      	str	r5, [r2, #0]
    1b5c:	e7c5      	b.n	1aea <Reset_Handler+0xe>
                *pDest++ = 0;
    1b5e:	c302      	stmia	r3!, {r1}
    1b60:	e7c9      	b.n	1af6 <Reset_Handler+0x1a>
    1b62:	46c0      	nop			; (mov r8, r8)
    1b64:	00001ee0 	.word	0x00001ee0
    1b68:	20000000 	.word	0x20000000
    1b6c:	2000000c 	.word	0x2000000c
    1b70:	2000000c 	.word	0x2000000c
    1b74:	200000c4 	.word	0x200000c4
    1b78:	00000000 	.word	0x00000000
    1b7c:	e000ed00 	.word	0xe000ed00
    1b80:	410070fc 	.word	0x410070fc
    1b84:	41005000 	.word	0x41005000
    1b88:	41004800 	.word	0x41004800
    1b8c:	41004000 	.word	0x41004000
    1b90:	00001e39 	.word	0x00001e39
    1b94:	00001cc5 	.word	0x00001cc5

00001b98 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    1b98:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b9c:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    1b9e:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    1ba0:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    1ba2:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1ba4:	4d20      	ldr	r5, [pc, #128]	; (1c28 <conf_port_pin+0x90>)
    1ba6:	0021      	movs	r1, r4
    1ba8:	200b      	movs	r0, #11
    1baa:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1bac:	7067      	strb	r7, [r4, #1]
    1bae:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    1bb0:	0021      	movs	r1, r4
    1bb2:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1bb4:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1bb6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1bb8:	2380      	movs	r3, #128	; 0x80
    1bba:	4e1c      	ldr	r6, [pc, #112]	; (1c2c <conf_port_pin+0x94>)
    1bbc:	00db      	lsls	r3, r3, #3
    1bbe:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    1bc0:	0021      	movs	r1, r4
    1bc2:	2005      	movs	r0, #5
    1bc4:	47a8      	blx	r5
    1bc6:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1bc8:	0021      	movs	r1, r4
    1bca:	61b3      	str	r3, [r6, #24]
    1bcc:	2006      	movs	r0, #6
    1bce:	47a8      	blx	r5
    1bd0:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    1bd2:	0021      	movs	r1, r4
    1bd4:	61b3      	str	r3, [r6, #24]
    1bd6:	2007      	movs	r0, #7
    1bd8:	47a8      	blx	r5
    1bda:	2380      	movs	r3, #128	; 0x80
    1bdc:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1bde:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    1be0:	0021      	movs	r1, r4
    1be2:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1be4:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1be6:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1be8:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    1bea:	0021      	movs	r1, r4
    1bec:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1bee:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    1bf0:	47a8      	blx	r5
    1bf2:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    1bf4:	0021      	movs	r1, r4
    1bf6:	61b3      	str	r3, [r6, #24]
    1bf8:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1bfa:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1bfc:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1bfe:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    1c00:	47a8      	blx	r5
    1c02:	0033      	movs	r3, r6
    1c04:	2280      	movs	r2, #128	; 0x80
    1c06:	3398      	adds	r3, #152	; 0x98
    1c08:	0212      	lsls	r2, r2, #8
    1c0a:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    1c0c:	0021      	movs	r1, r4
    1c0e:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1c10:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1c12:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    1c14:	47a8      	blx	r5
    1c16:	2380      	movs	r3, #128	; 0x80
    1c18:	029b      	lsls	r3, r3, #10
    1c1a:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1c1c:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    1c1e:	0021      	movs	r1, r4
    1c20:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1c22:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    1c24:	47a8      	blx	r5
} // end conf_port_pin(void)
    1c26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1c28:	00000851 	.word	0x00000851
    1c2c:	41004400 	.word	0x41004400

00001c30 <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1c30:	2300      	movs	r3, #0
{
    1c32:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    1c34:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    1c36:	a801      	add	r0, sp, #4
    1c38:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    1c3a:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    1c3c:	4b01      	ldr	r3, [pc, #4]	; (1c44 <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    1c3e:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    1c40:	4798      	blx	r3
}
    1c42:	bd07      	pop	{r0, r1, r2, pc}
    1c44:	0000162d 	.word	0x0000162d

00001c48 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    1c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    1c4a:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    1c4c:	4b09      	ldr	r3, [pc, #36]	; (1c74 <clk_gclk0_init+0x2c>)
    1c4e:	4798      	blx	r3
    1c50:	4b09      	ldr	r3, [pc, #36]	; (1c78 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    1c52:	a901      	add	r1, sp, #4
    1c54:	721c      	strb	r4, [r3, #8]
    1c56:	2306      	movs	r3, #6
    1c58:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    1c5a:	3b05      	subs	r3, #5
    1c5c:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1c5e:	0020      	movs	r0, r4
    1c60:	4b06      	ldr	r3, [pc, #24]	; (1c7c <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    1c62:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    1c64:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    1c66:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1c68:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1c6a:	0020      	movs	r0, r4
    1c6c:	4b04      	ldr	r3, [pc, #16]	; (1c80 <clk_gclk0_init+0x38>)
    1c6e:	4798      	blx	r3
}
    1c70:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00001795 	.word	0x00001795
    1c78:	40000400 	.word	0x40000400
    1c7c:	000017b5 	.word	0x000017b5
    1c80:	00001859 	.word	0x00001859

00001c84 <sys_clk_init>:
{
    1c84:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1c86:	4b03      	ldr	r3, [pc, #12]	; (1c94 <sys_clk_init+0x10>)
    1c88:	4798      	blx	r3
	clk_gclk0_init();
    1c8a:	4b03      	ldr	r3, [pc, #12]	; (1c98 <sys_clk_init+0x14>)
    1c8c:	4798      	blx	r3
    delay_init();
    1c8e:	4b03      	ldr	r3, [pc, #12]	; (1c9c <sys_clk_init+0x18>)
    1c90:	4798      	blx	r3
}
    1c92:	bd10      	pop	{r4, pc}
    1c94:	00001c31 	.word	0x00001c31
    1c98:	00001c49 	.word	0x00001c49
    1c9c:	000007e5 	.word	0x000007e5

00001ca0 <simSysInit>:
{
    1ca0:	b510      	push	{r4, lr}
	system_init();
    1ca2:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <simSysInit+0x14>)
    1ca4:	4798      	blx	r3
	sys_clk_init();
    1ca6:	4b04      	ldr	r3, [pc, #16]	; (1cb8 <simSysInit+0x18>)
    1ca8:	4798      	blx	r3
	conf_port_pin();
    1caa:	4b04      	ldr	r3, [pc, #16]	; (1cbc <simSysInit+0x1c>)
    1cac:	4798      	blx	r3
    spi169_init();
    1cae:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <simSysInit+0x20>)
    1cb0:	4798      	blx	r3
}
    1cb2:	bd10      	pop	{r4, pc}
    1cb4:	00001aad 	.word	0x00001aad
    1cb8:	00001c85 	.word	0x00001c85
    1cbc:	00001b99 	.word	0x00001b99
    1cc0:	00000115 	.word	0x00000115

00001cc4 <main>:
{
    1cc4:	b507      	push	{r0, r1, r2, lr}
    uint8_t tx_preamble[4] = {FIFO_REPEATDATA, 0x38, 8, 0xaa};
    1cc6:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <main+0x2c>)
    1cc8:	2204      	movs	r2, #4
    1cca:	490a      	ldr	r1, [pc, #40]	; (1cf4 <main+0x30>)
    1ccc:	a801      	add	r0, sp, #4
    1cce:	4798      	blx	r3
    simSysInit();
    1cd0:	4b09      	ldr	r3, [pc, #36]	; (1cf8 <main+0x34>)
    1cd2:	4798      	blx	r3
    spi169_tx_init();
    1cd4:	4b09      	ldr	r3, [pc, #36]	; (1cfc <main+0x38>)
    1cd6:	4798      	blx	r3
     spi169_start_xfer(AX5043_FIFODATA, WRT);
    1cd8:	2101      	movs	r1, #1
    1cda:	4b09      	ldr	r3, [pc, #36]	; (1d00 <main+0x3c>)
    1cdc:	2029      	movs	r0, #41	; 0x29
    1cde:	4798      	blx	r3
      spi169_write(tx_preamble, 4);
    1ce0:	2104      	movs	r1, #4
    1ce2:	a801      	add	r0, sp, #4
    1ce4:	4b07      	ldr	r3, [pc, #28]	; (1d04 <main+0x40>)
    1ce6:	4798      	blx	r3
	  spi169_stop_xfer();
    1ce8:	4b07      	ldr	r3, [pc, #28]	; (1d08 <main+0x44>)
    1cea:	4798      	blx	r3
    1cec:	e7f4      	b.n	1cd8 <main+0x14>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	00001e81 	.word	0x00001e81
    1cf4:	00001ebc 	.word	0x00001ebc
    1cf8:	00001ca1 	.word	0x00001ca1
    1cfc:	00000321 	.word	0x00000321
    1d00:	00000201 	.word	0x00000201
    1d04:	000002bd 	.word	0x000002bd
    1d08:	0000025d 	.word	0x0000025d

00001d0c <__gnu_thumb1_case_uqi>:
    1d0c:	b402      	push	{r1}
    1d0e:	4671      	mov	r1, lr
    1d10:	0849      	lsrs	r1, r1, #1
    1d12:	0049      	lsls	r1, r1, #1
    1d14:	5c09      	ldrb	r1, [r1, r0]
    1d16:	0049      	lsls	r1, r1, #1
    1d18:	448e      	add	lr, r1
    1d1a:	bc02      	pop	{r1}
    1d1c:	4770      	bx	lr
    1d1e:	46c0      	nop			; (mov r8, r8)

00001d20 <__udivsi3>:
    1d20:	2200      	movs	r2, #0
    1d22:	0843      	lsrs	r3, r0, #1
    1d24:	428b      	cmp	r3, r1
    1d26:	d374      	bcc.n	1e12 <__udivsi3+0xf2>
    1d28:	0903      	lsrs	r3, r0, #4
    1d2a:	428b      	cmp	r3, r1
    1d2c:	d35f      	bcc.n	1dee <__udivsi3+0xce>
    1d2e:	0a03      	lsrs	r3, r0, #8
    1d30:	428b      	cmp	r3, r1
    1d32:	d344      	bcc.n	1dbe <__udivsi3+0x9e>
    1d34:	0b03      	lsrs	r3, r0, #12
    1d36:	428b      	cmp	r3, r1
    1d38:	d328      	bcc.n	1d8c <__udivsi3+0x6c>
    1d3a:	0c03      	lsrs	r3, r0, #16
    1d3c:	428b      	cmp	r3, r1
    1d3e:	d30d      	bcc.n	1d5c <__udivsi3+0x3c>
    1d40:	22ff      	movs	r2, #255	; 0xff
    1d42:	0209      	lsls	r1, r1, #8
    1d44:	ba12      	rev	r2, r2
    1d46:	0c03      	lsrs	r3, r0, #16
    1d48:	428b      	cmp	r3, r1
    1d4a:	d302      	bcc.n	1d52 <__udivsi3+0x32>
    1d4c:	1212      	asrs	r2, r2, #8
    1d4e:	0209      	lsls	r1, r1, #8
    1d50:	d065      	beq.n	1e1e <__udivsi3+0xfe>
    1d52:	0b03      	lsrs	r3, r0, #12
    1d54:	428b      	cmp	r3, r1
    1d56:	d319      	bcc.n	1d8c <__udivsi3+0x6c>
    1d58:	e000      	b.n	1d5c <__udivsi3+0x3c>
    1d5a:	0a09      	lsrs	r1, r1, #8
    1d5c:	0bc3      	lsrs	r3, r0, #15
    1d5e:	428b      	cmp	r3, r1
    1d60:	d301      	bcc.n	1d66 <__udivsi3+0x46>
    1d62:	03cb      	lsls	r3, r1, #15
    1d64:	1ac0      	subs	r0, r0, r3
    1d66:	4152      	adcs	r2, r2
    1d68:	0b83      	lsrs	r3, r0, #14
    1d6a:	428b      	cmp	r3, r1
    1d6c:	d301      	bcc.n	1d72 <__udivsi3+0x52>
    1d6e:	038b      	lsls	r3, r1, #14
    1d70:	1ac0      	subs	r0, r0, r3
    1d72:	4152      	adcs	r2, r2
    1d74:	0b43      	lsrs	r3, r0, #13
    1d76:	428b      	cmp	r3, r1
    1d78:	d301      	bcc.n	1d7e <__udivsi3+0x5e>
    1d7a:	034b      	lsls	r3, r1, #13
    1d7c:	1ac0      	subs	r0, r0, r3
    1d7e:	4152      	adcs	r2, r2
    1d80:	0b03      	lsrs	r3, r0, #12
    1d82:	428b      	cmp	r3, r1
    1d84:	d301      	bcc.n	1d8a <__udivsi3+0x6a>
    1d86:	030b      	lsls	r3, r1, #12
    1d88:	1ac0      	subs	r0, r0, r3
    1d8a:	4152      	adcs	r2, r2
    1d8c:	0ac3      	lsrs	r3, r0, #11
    1d8e:	428b      	cmp	r3, r1
    1d90:	d301      	bcc.n	1d96 <__udivsi3+0x76>
    1d92:	02cb      	lsls	r3, r1, #11
    1d94:	1ac0      	subs	r0, r0, r3
    1d96:	4152      	adcs	r2, r2
    1d98:	0a83      	lsrs	r3, r0, #10
    1d9a:	428b      	cmp	r3, r1
    1d9c:	d301      	bcc.n	1da2 <__udivsi3+0x82>
    1d9e:	028b      	lsls	r3, r1, #10
    1da0:	1ac0      	subs	r0, r0, r3
    1da2:	4152      	adcs	r2, r2
    1da4:	0a43      	lsrs	r3, r0, #9
    1da6:	428b      	cmp	r3, r1
    1da8:	d301      	bcc.n	1dae <__udivsi3+0x8e>
    1daa:	024b      	lsls	r3, r1, #9
    1dac:	1ac0      	subs	r0, r0, r3
    1dae:	4152      	adcs	r2, r2
    1db0:	0a03      	lsrs	r3, r0, #8
    1db2:	428b      	cmp	r3, r1
    1db4:	d301      	bcc.n	1dba <__udivsi3+0x9a>
    1db6:	020b      	lsls	r3, r1, #8
    1db8:	1ac0      	subs	r0, r0, r3
    1dba:	4152      	adcs	r2, r2
    1dbc:	d2cd      	bcs.n	1d5a <__udivsi3+0x3a>
    1dbe:	09c3      	lsrs	r3, r0, #7
    1dc0:	428b      	cmp	r3, r1
    1dc2:	d301      	bcc.n	1dc8 <__udivsi3+0xa8>
    1dc4:	01cb      	lsls	r3, r1, #7
    1dc6:	1ac0      	subs	r0, r0, r3
    1dc8:	4152      	adcs	r2, r2
    1dca:	0983      	lsrs	r3, r0, #6
    1dcc:	428b      	cmp	r3, r1
    1dce:	d301      	bcc.n	1dd4 <__udivsi3+0xb4>
    1dd0:	018b      	lsls	r3, r1, #6
    1dd2:	1ac0      	subs	r0, r0, r3
    1dd4:	4152      	adcs	r2, r2
    1dd6:	0943      	lsrs	r3, r0, #5
    1dd8:	428b      	cmp	r3, r1
    1dda:	d301      	bcc.n	1de0 <__udivsi3+0xc0>
    1ddc:	014b      	lsls	r3, r1, #5
    1dde:	1ac0      	subs	r0, r0, r3
    1de0:	4152      	adcs	r2, r2
    1de2:	0903      	lsrs	r3, r0, #4
    1de4:	428b      	cmp	r3, r1
    1de6:	d301      	bcc.n	1dec <__udivsi3+0xcc>
    1de8:	010b      	lsls	r3, r1, #4
    1dea:	1ac0      	subs	r0, r0, r3
    1dec:	4152      	adcs	r2, r2
    1dee:	08c3      	lsrs	r3, r0, #3
    1df0:	428b      	cmp	r3, r1
    1df2:	d301      	bcc.n	1df8 <__udivsi3+0xd8>
    1df4:	00cb      	lsls	r3, r1, #3
    1df6:	1ac0      	subs	r0, r0, r3
    1df8:	4152      	adcs	r2, r2
    1dfa:	0883      	lsrs	r3, r0, #2
    1dfc:	428b      	cmp	r3, r1
    1dfe:	d301      	bcc.n	1e04 <__udivsi3+0xe4>
    1e00:	008b      	lsls	r3, r1, #2
    1e02:	1ac0      	subs	r0, r0, r3
    1e04:	4152      	adcs	r2, r2
    1e06:	0843      	lsrs	r3, r0, #1
    1e08:	428b      	cmp	r3, r1
    1e0a:	d301      	bcc.n	1e10 <__udivsi3+0xf0>
    1e0c:	004b      	lsls	r3, r1, #1
    1e0e:	1ac0      	subs	r0, r0, r3
    1e10:	4152      	adcs	r2, r2
    1e12:	1a41      	subs	r1, r0, r1
    1e14:	d200      	bcs.n	1e18 <__udivsi3+0xf8>
    1e16:	4601      	mov	r1, r0
    1e18:	4152      	adcs	r2, r2
    1e1a:	4610      	mov	r0, r2
    1e1c:	4770      	bx	lr
    1e1e:	e7ff      	b.n	1e20 <__udivsi3+0x100>
    1e20:	b501      	push	{r0, lr}
    1e22:	2000      	movs	r0, #0
    1e24:	f000 f806 	bl	1e34 <__aeabi_idiv0>
    1e28:	bd02      	pop	{r1, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)

00001e2c <__aeabi_uidivmod>:
    1e2c:	2900      	cmp	r1, #0
    1e2e:	d0f7      	beq.n	1e20 <__udivsi3+0x100>
    1e30:	e776      	b.n	1d20 <__udivsi3>
    1e32:	4770      	bx	lr

00001e34 <__aeabi_idiv0>:
    1e34:	4770      	bx	lr
    1e36:	46c0      	nop			; (mov r8, r8)

00001e38 <__libc_init_array>:
    1e38:	b570      	push	{r4, r5, r6, lr}
    1e3a:	2600      	movs	r6, #0
    1e3c:	4d0c      	ldr	r5, [pc, #48]	; (1e70 <__libc_init_array+0x38>)
    1e3e:	4c0d      	ldr	r4, [pc, #52]	; (1e74 <__libc_init_array+0x3c>)
    1e40:	1b64      	subs	r4, r4, r5
    1e42:	10a4      	asrs	r4, r4, #2
    1e44:	42a6      	cmp	r6, r4
    1e46:	d109      	bne.n	1e5c <__libc_init_array+0x24>
    1e48:	2600      	movs	r6, #0
    1e4a:	f000 f839 	bl	1ec0 <_init>
    1e4e:	4d0a      	ldr	r5, [pc, #40]	; (1e78 <__libc_init_array+0x40>)
    1e50:	4c0a      	ldr	r4, [pc, #40]	; (1e7c <__libc_init_array+0x44>)
    1e52:	1b64      	subs	r4, r4, r5
    1e54:	10a4      	asrs	r4, r4, #2
    1e56:	42a6      	cmp	r6, r4
    1e58:	d105      	bne.n	1e66 <__libc_init_array+0x2e>
    1e5a:	bd70      	pop	{r4, r5, r6, pc}
    1e5c:	00b3      	lsls	r3, r6, #2
    1e5e:	58eb      	ldr	r3, [r5, r3]
    1e60:	4798      	blx	r3
    1e62:	3601      	adds	r6, #1
    1e64:	e7ee      	b.n	1e44 <__libc_init_array+0xc>
    1e66:	00b3      	lsls	r3, r6, #2
    1e68:	58eb      	ldr	r3, [r5, r3]
    1e6a:	4798      	blx	r3
    1e6c:	3601      	adds	r6, #1
    1e6e:	e7f2      	b.n	1e56 <__libc_init_array+0x1e>
    1e70:	00001ecc 	.word	0x00001ecc
    1e74:	00001ecc 	.word	0x00001ecc
    1e78:	00001ecc 	.word	0x00001ecc
    1e7c:	00001ed0 	.word	0x00001ed0

00001e80 <memcpy>:
    1e80:	2300      	movs	r3, #0
    1e82:	b510      	push	{r4, lr}
    1e84:	429a      	cmp	r2, r3
    1e86:	d100      	bne.n	1e8a <memcpy+0xa>
    1e88:	bd10      	pop	{r4, pc}
    1e8a:	5ccc      	ldrb	r4, [r1, r3]
    1e8c:	54c4      	strb	r4, [r0, r3]
    1e8e:	3301      	adds	r3, #1
    1e90:	e7f8      	b.n	1e84 <memcpy+0x4>

00001e92 <memset>:
    1e92:	0003      	movs	r3, r0
    1e94:	1882      	adds	r2, r0, r2
    1e96:	4293      	cmp	r3, r2
    1e98:	d100      	bne.n	1e9c <memset+0xa>
    1e9a:	4770      	bx	lr
    1e9c:	7019      	strb	r1, [r3, #0]
    1e9e:	3301      	adds	r3, #1
    1ea0:	e7f9      	b.n	1e96 <memset+0x4>
    1ea2:	0000      	movs	r0, r0
    1ea4:	42000800 	.word	0x42000800
    1ea8:	42000c00 	.word	0x42000c00
    1eac:	42001000 	.word	0x42001000
    1eb0:	42001400 	.word	0x42001400
    1eb4:	42001800 	.word	0x42001800
    1eb8:	42001c00 	.word	0x42001c00
    1ebc:	aa083862 	.word	0xaa083862

00001ec0 <_init>:
    1ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ec6:	bc08      	pop	{r3}
    1ec8:	469e      	mov	lr, r3
    1eca:	4770      	bx	lr

00001ecc <__init_array_start>:
    1ecc:	000000dd 	.word	0x000000dd

00001ed0 <_fini>:
    1ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ed6:	bc08      	pop	{r3}
    1ed8:	469e      	mov	lr, r3
    1eda:	4770      	bx	lr

00001edc <__fini_array_start>:
    1edc:	000000b5 	.word	0x000000b5
