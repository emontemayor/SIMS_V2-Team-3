
txboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001828  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b4  2000000c  00001834  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000c0  000018e8  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023073  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fd9  00000000  00000000  00043100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004443  00000000  00000000  000460d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000458  00000000  00000000  0004a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e0  00000000  00000000  0004a974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004c0a  00000000  00000000  0004b254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005b6f  00000000  00000000  0004fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b14  00000000  00000000  000559d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 20 00 20 79 14 00 00 75 14 00 00 75 14 00 00     . . y...u...u...
	...
      2c:	75 14 00 00 00 00 00 00 00 00 00 00 75 14 00 00     u...........u...
      3c:	75 14 00 00 75 14 00 00 75 14 00 00 75 14 00 00     u...u...u...u...
      4c:	75 14 00 00 75 14 00 00 75 14 00 00 75 14 00 00     u...u...u...u...
      5c:	75 14 00 00 75 14 00 00 65 0e 00 00 75 0e 00 00     u...u...e...u...
      6c:	85 0e 00 00 95 0e 00 00 a5 0e 00 00 b5 0e 00 00     ................
      7c:	75 14 00 00 75 14 00 00 75 14 00 00 75 14 00 00     u...u...u...u...
      8c:	75 14 00 00 75 14 00 00 75 14 00 00 75 14 00 00     u...u...u...u...
      9c:	75 14 00 00 75 14 00 00 75 14 00 00 75 14 00 00     u...u...u...u...
      ac:	75 14 00 00 00 00 00 00                             u.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001828 	.word	0x00001828

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001828 	.word	0x00001828
     10c:	00001828 	.word	0x00001828
     110:	00000000 	.word	0x00000000

00000114 <spi27_read_byte_from_reg>:
		
		//Set the transmission mode to streaming (pg. 30)
		spi27_write_byte_to_reg(0xBA,0x00);
}

uint8_t spi27_read_byte_from_reg (uint8_t reg){
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b085      	sub	sp, #20
     118:	466b      	mov	r3, sp
	uint8_t arr = 0;
     11a:	240f      	movs	r4, #15
uint8_t spi27_read_byte_from_reg (uint8_t reg){
     11c:	1dd9      	adds	r1, r3, #7
	uint8_t arr = 0;
     11e:	2300      	movs	r3, #0
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     120:	2680      	movs	r6, #128	; 0x80
     122:	446c      	add	r4, sp
     124:	7023      	strb	r3, [r4, #0]
     126:	4d07      	ldr	r5, [pc, #28]	; (144 <spi27_read_byte_from_reg+0x30>)
	int value;
	
	status_code_genare_t read_status;
	int8_t *val;
	//Add 1 leading 0s to put module in READ mode
	reg = reg | 0b01000000;
     128:	3340      	adds	r3, #64	; 0x40
     12a:	4318      	orrs	r0, r3
     12c:	0436      	lsls	r6, r6, #16
     12e:	7008      	strb	r0, [r1, #0]
	
	//read byte from address
	port_pin_set_output_level(SS27, true);
	//Note: added a line to ASF module to assign recieved value to buffer. 
	//ASF implementation was not working.
	read_status = spi_transceive_buffer_wait(&spi27Master, val, read_byte, 2);
     130:	3b3e      	subs	r3, #62	; 0x3e
     132:	61ae      	str	r6, [r5, #24]
     134:	0022      	movs	r2, r4
     136:	4f04      	ldr	r7, [pc, #16]	; (148 <spi27_read_byte_from_reg+0x34>)
     138:	4804      	ldr	r0, [pc, #16]	; (14c <spi27_read_byte_from_reg+0x38>)
     13a:	47b8      	blx	r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
     13c:	616e      	str	r6, [r5, #20]
	port_pin_set_output_level(SS27, false);
	return arr;
     13e:	7820      	ldrb	r0, [r4, #0]
	//set sen = 0;
	//set sen = 1; 
}
     140:	b005      	add	sp, #20
     142:	bdf0      	pop	{r4, r5, r6, r7, pc}
     144:	41004400 	.word	0x41004400
     148:	00000a01 	.word	0x00000a01
     14c:	20000064 	.word	0x20000064

00000150 <spi27_write_cmd>:

void spi27_write_cmd (char cmd){
     150:	b537      	push	{r0, r1, r2, r4, r5, lr}
     152:	466b      	mov	r3, sp
     154:	1dd9      	adds	r1, r3, #7
	status_code_genare_t write_status;
	int8_t *val;
	//Add 1s to put module in COMMAND mode
	cmd = cmd | 0b11000000;
     156:	2340      	movs	r3, #64	; 0x40
		port_base->OUTSET.reg = pin_mask;
     158:	2580      	movs	r5, #128	; 0x80
     15a:	4c06      	ldr	r4, [pc, #24]	; (174 <spi27_write_cmd+0x24>)
     15c:	425b      	negs	r3, r3
     15e:	042d      	lsls	r5, r5, #16
     160:	4318      	orrs	r0, r3
     162:	7008      	strb	r0, [r1, #0]
	val = &cmd;
	//read byte from address
	port_pin_set_output_level(SS27, true);	
	write_status = spi_write_buffer_wait(&spi27Master,val,1);
     164:	2201      	movs	r2, #1
     166:	61a5      	str	r5, [r4, #24]
     168:	4b03      	ldr	r3, [pc, #12]	; (178 <spi27_write_cmd+0x28>)
     16a:	4804      	ldr	r0, [pc, #16]	; (17c <spi27_write_cmd+0x2c>)
     16c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     16e:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
	//set sen = 0;
	//set sen = 1;
}
     170:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	41004400 	.word	0x41004400
     178:	00000841 	.word	0x00000841
     17c:	20000064 	.word	0x20000064

00000180 <spi27_write_byte_to_reg>:
	rssi = spi27_read_byte_from_reg(0x23);
	rssi = rssi & 0x0F;
	return rssi;
}

void spi27_write_byte_to_reg (char byte, uint8_t reg){
     180:	b573      	push	{r0, r1, r4, r5, r6, lr}
	 uint16_t val; 
	 val = 0;
	
	//Add 2 leading 0s to put module in WRITE mode
	reg &= 0x3F;
	val = (byte<<8) | reg;
     182:	466b      	mov	r3, sp
     184:	1d9e      	adds	r6, r3, #6
     186:	0203      	lsls	r3, r0, #8
     188:	203f      	movs	r0, #63	; 0x3f
		port_base->OUTSET.reg = pin_mask;
     18a:	2580      	movs	r5, #128	; 0x80
     18c:	4c06      	ldr	r4, [pc, #24]	; (1a8 <spi27_write_byte_to_reg+0x28>)
     18e:	4008      	ands	r0, r1
     190:	042d      	lsls	r5, r5, #16
     192:	4318      	orrs	r0, r3
     194:	8030      	strh	r0, [r6, #0]
	//val = 0x5ABF;
	//prepare buffer with address and data
	buf = &val;
	//write byte to address
	port_pin_set_output_level(SS27, true);	
		spi_write_buffer_wait(&spi27Master, buf, 2);
     196:	0031      	movs	r1, r6
     198:	61a5      	str	r5, [r4, #24]
     19a:	2202      	movs	r2, #2
     19c:	4b03      	ldr	r3, [pc, #12]	; (1ac <spi27_write_byte_to_reg+0x2c>)
     19e:	4804      	ldr	r0, [pc, #16]	; (1b0 <spi27_write_byte_to_reg+0x30>)
     1a0:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     1a2:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(SS27, false);	
		//set sen = 0;
		//set sen = 1;
	
}
     1a4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	41004400 	.word	0x41004400
     1ac:	00000841 	.word	0x00000841
     1b0:	20000064 	.word	0x20000064

000001b4 <spi27_connect>:
void spi27_connect(){
     1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	spi27_write_cmd(CHIP_RESET); //Reset the chip
     1b6:	2000      	movs	r0, #0
     1b8:	4e1d      	ldr	r6, [pc, #116]	; (230 <spi27_connect+0x7c>)
     1ba:	47b0      	blx	r6
	spi27_write_byte_to_reg(0x00, 0x00); //set transmitter unit as client
     1bc:	2100      	movs	r1, #0
     1be:	4c1d      	ldr	r4, [pc, #116]	; (234 <spi27_connect+0x80>)
     1c0:	0008      	movs	r0, r1
     1c2:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x10, 0x04); //set wakecyc bits (wake cycle every 1 second) (pg. 25)
     1c4:	2104      	movs	r1, #4
     1c6:	2010      	movs	r0, #16
     1c8:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x81, 0x0C); //set cyctim0 bits ( cycle every 1 second) (pg. 25) and mdpt0 random pointer 
     1ca:	210c      	movs	r1, #12
     1cc:	2081      	movs	r0, #129	; 0x81
     1ce:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x00, 0x01); //DISABLE all timers
     1d0:	2101      	movs	r1, #1
     1d2:	2000      	movs	r0, #0
     1d4:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x06); //set bitrate to 53 kbit per sec
     1d6:	2106      	movs	r1, #6
     1d8:	2002      	movs	r0, #2
     1da:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x08);
     1dc:	2108      	movs	r1, #8
     1de:	2000      	movs	r0, #0
     1e0:	47a0      	blx	r4
	spi27_write_byte_to_reg(0, 0x09);
     1e2:	2109      	movs	r1, #9
     1e4:	2000      	movs	r0, #0
     1e6:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x02, 0x0A);
     1e8:	210a      	movs	r1, #10
     1ea:	2002      	movs	r0, #2
     1ec:	47a0      	blx	r4
	test = spi27_read_byte_from_reg(0x04);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <spi27_connect+0x84>)
     1f0:	2004      	movs	r0, #4
     1f2:	47a8      	blx	r5
	test = spi27_read_byte_from_reg(0x06);
     1f4:	2006      	movs	r0, #6
     1f6:	47a8      	blx	r5
	spi27_write_cmd(WAKE_RX_ON); //begin wakeup call
     1f8:	2015      	movs	r0, #21
     1fa:	47b0      	blx	r6
	delay_s(1); //delay for 1 sec, listen for client
     1fc:	20fa      	movs	r0, #250	; 0xfa
     1fe:	4b0f      	ldr	r3, [pc, #60]	; (23c <spi27_connect+0x88>)
     200:	0080      	lsls	r0, r0, #2
     202:	4798      	blx	r3
			if (x & 0b01000000){
     204:	2740      	movs	r7, #64	; 0x40
		uint8_t x = spi27_read_byte_from_reg(0x2A);
     206:	202a      	movs	r0, #42	; 0x2a
     208:	47a8      	blx	r5
			if (x & 0b01000000){
     20a:	4238      	tst	r0, r7
     20c:	d0fb      	beq.n	206 <spi27_connect+0x52>
	spi27_write_byte_to_reg (0xFF,0x38); 	
     20e:	2138      	movs	r1, #56	; 0x38
     210:	20ff      	movs	r0, #255	; 0xff
     212:	47a0      	blx	r4
	spi27_write_byte_to_reg(0x01,0x37); //set datalen to 1 in dlen
     214:	2137      	movs	r1, #55	; 0x37
     216:	2001      	movs	r0, #1
     218:	47a0      	blx	r4
	spi27_write_cmd(TRANSMIT);
     21a:	2005      	movs	r0, #5
     21c:	47b0      	blx	r6
		if (y & 0b00000001){
     21e:	2601      	movs	r6, #1
		uint8_t y = spi27_read_byte_from_reg(0x2B);
     220:	202b      	movs	r0, #43	; 0x2b
     222:	47a8      	blx	r5
		if (y & 0b00000001){
     224:	4230      	tst	r0, r6
     226:	d0fb      	beq.n	220 <spi27_connect+0x6c>
		spi27_write_byte_to_reg(0xBA,0x00);
     228:	2100      	movs	r1, #0
     22a:	20ba      	movs	r0, #186	; 0xba
     22c:	47a0      	blx	r4
}
     22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     230:	00000151 	.word	0x00000151
     234:	00000181 	.word	0x00000181
     238:	00000115 	.word	0x00000115
     23c:	00000379 	.word	0x00000379

00000240 <spi27_init>:
{
     240:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (spi27InitComp == true)
     242:	4e2e      	ldr	r6, [pc, #184]	; (2fc <spi27_init+0xbc>)
{
     244:	b091      	sub	sp, #68	; 0x44
	if (spi27InitComp == true)
     246:	7831      	ldrb	r1, [r6, #0]
     248:	2900      	cmp	r1, #0
     24a:	d153      	bne.n	2f4 <spi27_init+0xb4>
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     24c:	230d      	movs	r3, #13
	config->mode             = SPI_MODE_MASTER;
     24e:	2501      	movs	r5, #1
	config->generator_source = GCLK_GENERATOR_0;
     250:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
     252:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
     254:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     256:	220c      	movs	r2, #12
     258:	4b29      	ldr	r3, [pc, #164]	; (300 <spi27_init+0xc0>)
     25a:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
     25c:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     25e:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
     260:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
     262:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     264:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     266:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
     268:	9103      	str	r1, [sp, #12]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     26a:	4798      	blx	r3
    spi27MasterConf.mux_setting = SPI27_PINXMUX;
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	025b      	lsls	r3, r3, #9
     270:	60e3      	str	r3, [r4, #12]
    spi27MasterConf.pinmux_pad0 = MOSI27;
     272:	4b24      	ldr	r3, [pc, #144]	; (304 <spi27_init+0xc4>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     274:	4f24      	ldr	r7, [pc, #144]	; (308 <spi27_init+0xc8>)
    spi27MasterConf.pinmux_pad0 = MOSI27;
     276:	62a3      	str	r3, [r4, #40]	; 0x28
    spi27MasterConf.pinmux_pad1 = SCK27;
     278:	4b24      	ldr	r3, [pc, #144]	; (30c <spi27_init+0xcc>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     27a:	0022      	movs	r2, r4
    spi27MasterConf.pinmux_pad1 = SCK27;
     27c:	62e3      	str	r3, [r4, #44]	; 0x2c
    spi27MasterConf.pinmux_pad2 = PINMUX_UNUSED;
     27e:	2301      	movs	r3, #1
     280:	425b      	negs	r3, r3
     282:	6323      	str	r3, [r4, #48]	; 0x30
    spi27MasterConf.pinmux_pad3 = MISO27;
     284:	4b22      	ldr	r3, [pc, #136]	; (310 <spi27_init+0xd0>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     286:	4923      	ldr	r1, [pc, #140]	; (314 <spi27_init+0xd4>)
    spi27MasterConf.pinmux_pad3 = MISO27;
     288:	6363      	str	r3, [r4, #52]	; 0x34
	spi27MasterConf.transfer_mode = SPI_TRANSFER_MODE_1;
     28a:	2380      	movs	r3, #128	; 0x80
     28c:	055b      	lsls	r3, r3, #21
     28e:	60a3      	str	r3, [r4, #8]
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     290:	4b21      	ldr	r3, [pc, #132]	; (318 <spi27_init+0xd8>)
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     292:	0038      	movs	r0, r7
	spi27MasterConf.mode_specific.master.baudrate = SPI27MAXCLK;
     294:	61a3      	str	r3, [r4, #24]
	spi_init(&spi27Master, SPI27, &spi27MasterConf);
     296:	4b21      	ldr	r3, [pc, #132]	; (31c <spi27_init+0xdc>)
     298:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     29a:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     29c:	4b20      	ldr	r3, [pc, #128]	; (320 <spi27_init+0xe0>)
     29e:	0020      	movs	r0, r4
     2a0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2a2:	231f      	movs	r3, #31
     2a4:	4018      	ands	r0, r3
     2a6:	4085      	lsls	r5, r0
     2a8:	4b1e      	ldr	r3, [pc, #120]	; (324 <spi27_init+0xe4>)
     2aa:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     2ac:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     2ae:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
     2b0:	2d00      	cmp	r5, #0
     2b2:	d1fc      	bne.n	2ae <spi27_init+0x6e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2b4:	2302      	movs	r3, #2
     2b6:	6822      	ldr	r2, [r4, #0]
	slave->ss_pin          = config->ss_pin;
     2b8:	2017      	movs	r0, #23
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2ba:	4313      	orrs	r3, r2
     2bc:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2be:	2401      	movs	r4, #1
	slave->ss_pin          = config->ss_pin;
     2c0:	4f19      	ldr	r7, [pc, #100]	; (328 <spi27_init+0xe8>)
     2c2:	a901      	add	r1, sp, #4
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2c4:	4b19      	ldr	r3, [pc, #100]	; (32c <spi27_init+0xec>)
     2c6:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
     2c8:	708d      	strb	r5, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2ca:	700c      	strb	r4, [r1, #0]
	slave->ss_pin          = config->ss_pin;
     2cc:	7038      	strb	r0, [r7, #0]
	slave->address_enabled = config->address_enabled;
     2ce:	707d      	strb	r5, [r7, #1]
	slave->address         = config->address;
     2d0:	70bd      	strb	r5, [r7, #2]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2d4:	783a      	ldrb	r2, [r7, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     2d6:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2d8:	09d1      	lsrs	r1, r2, #7
     2da:	d10d      	bne.n	2f8 <spi27_init+0xb8>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2dc:	311f      	adds	r1, #31
     2de:	400a      	ands	r2, r1
     2e0:	0021      	movs	r1, r4
     2e2:	4091      	lsls	r1, r2
     2e4:	000a      	movs	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2e6:	4912      	ldr	r1, [pc, #72]	; (330 <spi27_init+0xf0>)
     2e8:	01db      	lsls	r3, r3, #7
     2ea:	185b      	adds	r3, r3, r1
     2ec:	619a      	str	r2, [r3, #24]
	spi27_connect();
     2ee:	4b11      	ldr	r3, [pc, #68]	; (334 <spi27_init+0xf4>)
    spi27InitComp = true;
     2f0:	7034      	strb	r4, [r6, #0]
	spi27_connect();
     2f2:	4798      	blx	r3
}
     2f4:	b011      	add	sp, #68	; 0x44
     2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f8:	61ad      	str	r5, [r5, #24]
     2fa:	deff      	udf	#255	; 0xff
     2fc:	20000028 	.word	0x20000028
     300:	000017e1 	.word	0x000017e1
     304:	00180002 	.word	0x00180002
     308:	20000064 	.word	0x20000064
     30c:	00190002 	.word	0x00190002
     310:	00160002 	.word	0x00160002
     314:	42001400 	.word	0x42001400
     318:	000f4240 	.word	0x000f4240
     31c:	00000639 	.word	0x00000639
     320:	00000e39 	.word	0x00000e39
     324:	e000e100 	.word	0xe000e100
     328:	200000a0 	.word	0x200000a0
     32c:	000003a5 	.word	0x000003a5
     330:	41004400 	.word	0x41004400
     334:	000001b5 	.word	0x000001b5

00000338 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     338:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     33a:	4b09      	ldr	r3, [pc, #36]	; (360 <delay_init+0x28>)
     33c:	2000      	movs	r0, #0
     33e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     340:	21fa      	movs	r1, #250	; 0xfa
     342:	4c08      	ldr	r4, [pc, #32]	; (364 <delay_init+0x2c>)
     344:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
     346:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     348:	47a0      	blx	r4
     34a:	4b07      	ldr	r3, [pc, #28]	; (368 <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
     34c:	4907      	ldr	r1, [pc, #28]	; (36c <delay_init+0x34>)
	cycles_per_ms /= 1000;
     34e:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     350:	0028      	movs	r0, r5
     352:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     354:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
     356:	4b06      	ldr	r3, [pc, #24]	; (370 <delay_init+0x38>)
     358:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     35a:	4b06      	ldr	r3, [pc, #24]	; (374 <delay_init+0x3c>)
     35c:	601a      	str	r2, [r3, #0]
}
     35e:	bd70      	pop	{r4, r5, r6, pc}
     360:	00001235 	.word	0x00001235
     364:	00001681 	.word	0x00001681
     368:	20000000 	.word	0x20000000
     36c:	000f4240 	.word	0x000f4240
     370:	20000004 	.word	0x20000004
     374:	e000e010 	.word	0xe000e010

00000378 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     378:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     37a:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
     37c:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     37e:	4b07      	ldr	r3, [pc, #28]	; (39c <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     380:	0264      	lsls	r4, r4, #9
     382:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
     384:	4b06      	ldr	r3, [pc, #24]	; (3a0 <delay_cycles_ms+0x28>)
	while (n--) {
     386:	3801      	subs	r0, #1
     388:	d200      	bcs.n	38c <delay_cycles_ms+0x14>
	}
}
     38a:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
     38c:	2a00      	cmp	r2, #0
     38e:	d0fa      	beq.n	386 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     390:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     392:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     394:	681d      	ldr	r5, [r3, #0]
     396:	4225      	tst	r5, r4
     398:	d0fc      	beq.n	394 <delay_cycles_ms+0x1c>
     39a:	e7f4      	b.n	386 <delay_cycles_ms+0xe>
     39c:	20000000 	.word	0x20000000
     3a0:	e000e010 	.word	0xe000e010

000003a4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3a4:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3a6:	2280      	movs	r2, #128	; 0x80
     3a8:	ab01      	add	r3, sp, #4
     3aa:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3ac:	780a      	ldrb	r2, [r1, #0]
     3ae:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3b0:	784a      	ldrb	r2, [r1, #1]
     3b2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3b4:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3b6:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     3b8:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3ba:	4b01      	ldr	r3, [pc, #4]	; (3c0 <port_pin_set_config+0x1c>)
     3bc:	4798      	blx	r3
}
     3be:	bd07      	pop	{r0, r1, r2, pc}
     3c0:	00001419 	.word	0x00001419

000003c4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3c4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3c6:	0849      	lsrs	r1, r1, #1
{
     3c8:	0004      	movs	r4, r0
     3ca:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3cc:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     3ce:	42a1      	cmp	r1, r4
     3d0:	d201      	bcs.n	3d6 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     3d2:	bd10      	pop	{r4, pc}
		baud_calculated++;
     3d4:	0003      	movs	r3, r0
     3d6:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     3d8:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     3da:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     3dc:	428c      	cmp	r4, r1
     3de:	d9f9      	bls.n	3d4 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3e0:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     3e2:	2bff      	cmp	r3, #255	; 0xff
     3e4:	d8f5      	bhi.n	3d2 <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     3e6:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     3e8:	2000      	movs	r0, #0
     3ea:	e7f2      	b.n	3d2 <_sercom_get_sync_baud_val+0xe>

000003ec <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3ee:	4c0d      	ldr	r4, [pc, #52]	; (424 <sercom_set_gclk_generator+0x38>)
{
     3f0:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     3f2:	7823      	ldrb	r3, [r4, #0]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d001      	beq.n	3fc <sercom_set_gclk_generator+0x10>
     3f8:	2900      	cmp	r1, #0
     3fa:	d00c      	beq.n	416 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     3fc:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3fe:	2013      	movs	r0, #19
     400:	4b09      	ldr	r3, [pc, #36]	; (428 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     402:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     404:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     406:	2013      	movs	r0, #19
     408:	4b08      	ldr	r3, [pc, #32]	; (42c <sercom_set_gclk_generator+0x40>)
     40a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     40c:	2301      	movs	r3, #1

		return STATUS_OK;
     40e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     410:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     412:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     414:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     416:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     418:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     41a:	42ab      	cmp	r3, r5
     41c:	d0fa      	beq.n	414 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     41e:	201d      	movs	r0, #29
     420:	e7f8      	b.n	414 <sercom_set_gclk_generator+0x28>
     422:	46c0      	nop			; (mov r8, r8)
     424:	20000029 	.word	0x20000029
     428:	00001345 	.word	0x00001345
     42c:	000012bd 	.word	0x000012bd

00000430 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     430:	4a39      	ldr	r2, [pc, #228]	; (518 <_sercom_get_default_pad+0xe8>)
{
     432:	0003      	movs	r3, r0
     434:	b500      	push	{lr}
     436:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     438:	4293      	cmp	r3, r2
     43a:	d033      	beq.n	4a4 <_sercom_get_default_pad+0x74>
     43c:	d807      	bhi.n	44e <_sercom_get_default_pad+0x1e>
     43e:	4a37      	ldr	r2, [pc, #220]	; (51c <_sercom_get_default_pad+0xec>)
     440:	4293      	cmp	r3, r2
     442:	d014      	beq.n	46e <_sercom_get_default_pad+0x3e>
     444:	4a36      	ldr	r2, [pc, #216]	; (520 <_sercom_get_default_pad+0xf0>)
     446:	4293      	cmp	r3, r2
     448:	d01f      	beq.n	48a <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     44a:	2300      	movs	r3, #0
     44c:	e017      	b.n	47e <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     44e:	4a35      	ldr	r2, [pc, #212]	; (524 <_sercom_get_default_pad+0xf4>)
     450:	4293      	cmp	r3, r2
     452:	d03a      	beq.n	4ca <_sercom_get_default_pad+0x9a>
     454:	4a34      	ldr	r2, [pc, #208]	; (528 <_sercom_get_default_pad+0xf8>)
     456:	4293      	cmp	r3, r2
     458:	d044      	beq.n	4e4 <_sercom_get_default_pad+0xb4>
     45a:	4a34      	ldr	r2, [pc, #208]	; (52c <_sercom_get_default_pad+0xfc>)
     45c:	4293      	cmp	r3, r2
     45e:	d1f4      	bne.n	44a <_sercom_get_default_pad+0x1a>
	return 0;
     460:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	2903      	cmp	r1, #3
     464:	d80b      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     466:	f001 f901 	bl	166c <__gnu_thumb1_case_uqi>
     46a:	2a50      	.short	0x2a50
     46c:	2e2c      	.short	0x2e2c
	return 0;
     46e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     470:	2903      	cmp	r1, #3
     472:	d804      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     474:	f001 f8fa 	bl	166c <__gnu_thumb1_case_uqi>
     478:	07050243 	.word	0x07050243
     47c:	4b2c      	ldr	r3, [pc, #176]	; (530 <_sercom_get_default_pad+0x100>)
}
     47e:	0018      	movs	r0, r3
     480:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     482:	4b2c      	ldr	r3, [pc, #176]	; (534 <_sercom_get_default_pad+0x104>)
     484:	e7fb      	b.n	47e <_sercom_get_default_pad+0x4e>
     486:	4b2c      	ldr	r3, [pc, #176]	; (538 <_sercom_get_default_pad+0x108>)
     488:	e7f9      	b.n	47e <_sercom_get_default_pad+0x4e>
	return 0;
     48a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48c:	2903      	cmp	r1, #3
     48e:	d8f6      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     490:	f001 f8ec 	bl	166c <__gnu_thumb1_case_uqi>
     494:	06040237 	.word	0x06040237
     498:	4b28      	ldr	r3, [pc, #160]	; (53c <_sercom_get_default_pad+0x10c>)
     49a:	e7f0      	b.n	47e <_sercom_get_default_pad+0x4e>
     49c:	4b28      	ldr	r3, [pc, #160]	; (540 <_sercom_get_default_pad+0x110>)
     49e:	e7ee      	b.n	47e <_sercom_get_default_pad+0x4e>
     4a0:	4b28      	ldr	r3, [pc, #160]	; (544 <_sercom_get_default_pad+0x114>)
     4a2:	e7ec      	b.n	47e <_sercom_get_default_pad+0x4e>
	return 0;
     4a4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	2903      	cmp	r1, #3
     4a8:	d8e9      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     4aa:	f001 f8df 	bl	166c <__gnu_thumb1_case_uqi>
     4ae:	022c      	.short	0x022c
     4b0:	0604      	.short	0x0604
     4b2:	4b25      	ldr	r3, [pc, #148]	; (548 <_sercom_get_default_pad+0x118>)
     4b4:	e7e3      	b.n	47e <_sercom_get_default_pad+0x4e>
     4b6:	4b25      	ldr	r3, [pc, #148]	; (54c <_sercom_get_default_pad+0x11c>)
     4b8:	e7e1      	b.n	47e <_sercom_get_default_pad+0x4e>
     4ba:	4b25      	ldr	r3, [pc, #148]	; (550 <_sercom_get_default_pad+0x120>)
     4bc:	e7df      	b.n	47e <_sercom_get_default_pad+0x4e>
     4be:	4b25      	ldr	r3, [pc, #148]	; (554 <_sercom_get_default_pad+0x124>)
     4c0:	e7dd      	b.n	47e <_sercom_get_default_pad+0x4e>
     4c2:	4b25      	ldr	r3, [pc, #148]	; (558 <_sercom_get_default_pad+0x128>)
     4c4:	e7db      	b.n	47e <_sercom_get_default_pad+0x4e>
     4c6:	4b25      	ldr	r3, [pc, #148]	; (55c <_sercom_get_default_pad+0x12c>)
     4c8:	e7d9      	b.n	47e <_sercom_get_default_pad+0x4e>
	return 0;
     4ca:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4cc:	2903      	cmp	r1, #3
     4ce:	d8d6      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     4d0:	f001 f8cc 	bl	166c <__gnu_thumb1_case_uqi>
     4d4:	0604021d 	.word	0x0604021d
     4d8:	4b21      	ldr	r3, [pc, #132]	; (560 <_sercom_get_default_pad+0x130>)
     4da:	e7d0      	b.n	47e <_sercom_get_default_pad+0x4e>
     4dc:	4b21      	ldr	r3, [pc, #132]	; (564 <_sercom_get_default_pad+0x134>)
     4de:	e7ce      	b.n	47e <_sercom_get_default_pad+0x4e>
     4e0:	4b21      	ldr	r3, [pc, #132]	; (568 <_sercom_get_default_pad+0x138>)
     4e2:	e7cc      	b.n	47e <_sercom_get_default_pad+0x4e>
	return 0;
     4e4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e6:	2903      	cmp	r1, #3
     4e8:	d8c9      	bhi.n	47e <_sercom_get_default_pad+0x4e>
     4ea:	f001 f8bf 	bl	166c <__gnu_thumb1_case_uqi>
     4ee:	0212      	.short	0x0212
     4f0:	0604      	.short	0x0604
     4f2:	4b1e      	ldr	r3, [pc, #120]	; (56c <_sercom_get_default_pad+0x13c>)
     4f4:	e7c3      	b.n	47e <_sercom_get_default_pad+0x4e>
     4f6:	4b1e      	ldr	r3, [pc, #120]	; (570 <_sercom_get_default_pad+0x140>)
     4f8:	e7c1      	b.n	47e <_sercom_get_default_pad+0x4e>
     4fa:	4b1e      	ldr	r3, [pc, #120]	; (574 <_sercom_get_default_pad+0x144>)
     4fc:	e7bf      	b.n	47e <_sercom_get_default_pad+0x4e>
     4fe:	4b1e      	ldr	r3, [pc, #120]	; (578 <_sercom_get_default_pad+0x148>)
     500:	e7bd      	b.n	47e <_sercom_get_default_pad+0x4e>
     502:	2303      	movs	r3, #3
     504:	e7bb      	b.n	47e <_sercom_get_default_pad+0x4e>
     506:	4b1d      	ldr	r3, [pc, #116]	; (57c <_sercom_get_default_pad+0x14c>)
     508:	e7b9      	b.n	47e <_sercom_get_default_pad+0x4e>
     50a:	4b1d      	ldr	r3, [pc, #116]	; (580 <_sercom_get_default_pad+0x150>)
     50c:	e7b7      	b.n	47e <_sercom_get_default_pad+0x4e>
     50e:	4b1d      	ldr	r3, [pc, #116]	; (584 <_sercom_get_default_pad+0x154>)
     510:	e7b5      	b.n	47e <_sercom_get_default_pad+0x4e>
     512:	4b1d      	ldr	r3, [pc, #116]	; (588 <_sercom_get_default_pad+0x158>)
     514:	e7b3      	b.n	47e <_sercom_get_default_pad+0x4e>
     516:	46c0      	nop			; (mov r8, r8)
     518:	42001000 	.word	0x42001000
     51c:	42000800 	.word	0x42000800
     520:	42000c00 	.word	0x42000c00
     524:	42001800 	.word	0x42001800
     528:	42001c00 	.word	0x42001c00
     52c:	42001400 	.word	0x42001400
     530:	00050003 	.word	0x00050003
     534:	00060003 	.word	0x00060003
     538:	00070003 	.word	0x00070003
     53c:	00010003 	.word	0x00010003
     540:	001e0003 	.word	0x001e0003
     544:	001f0003 	.word	0x001f0003
     548:	00090003 	.word	0x00090003
     54c:	000a0003 	.word	0x000a0003
     550:	000b0003 	.word	0x000b0003
     554:	00110003 	.word	0x00110003
     558:	00120003 	.word	0x00120003
     55c:	00130003 	.word	0x00130003
     560:	000d0003 	.word	0x000d0003
     564:	000e0003 	.word	0x000e0003
     568:	000f0003 	.word	0x000f0003
     56c:	00170003 	.word	0x00170003
     570:	00180003 	.word	0x00180003
     574:	00190003 	.word	0x00190003
     578:	00040003 	.word	0x00040003
     57c:	00080003 	.word	0x00080003
     580:	00100003 	.word	0x00100003
     584:	000c0003 	.word	0x000c0003
     588:	00160003 	.word	0x00160003

0000058c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     58c:	b570      	push	{r4, r5, r6, lr}
     58e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     590:	4669      	mov	r1, sp
     592:	4b09      	ldr	r3, [pc, #36]	; (5b8 <_sercom_get_sercom_inst_index+0x2c>)
     594:	466a      	mov	r2, sp
     596:	cb70      	ldmia	r3!, {r4, r5, r6}
     598:	c170      	stmia	r1!, {r4, r5, r6}
     59a:	cb70      	ldmia	r3!, {r4, r5, r6}
     59c:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     59e:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5a0:	0099      	lsls	r1, r3, #2
     5a2:	5851      	ldr	r1, [r2, r1]
     5a4:	4281      	cmp	r1, r0
     5a6:	d102      	bne.n	5ae <_sercom_get_sercom_inst_index+0x22>
			return i;
     5a8:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     5aa:	b006      	add	sp, #24
     5ac:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5ae:	3301      	adds	r3, #1
     5b0:	2b06      	cmp	r3, #6
     5b2:	d1f5      	bne.n	5a0 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     5b4:	2000      	movs	r0, #0
     5b6:	e7f8      	b.n	5aa <_sercom_get_sercom_inst_index+0x1e>
     5b8:	000017f0 	.word	0x000017f0

000005bc <spi_is_write_complete>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     5bc:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     5be:	7e18      	ldrb	r0, [r3, #24]
     5c0:	0780      	lsls	r0, r0, #30
     5c2:	0fc0      	lsrs	r0, r0, #31
}
     5c4:	4770      	bx	lr

000005c6 <spi_is_ready_to_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     5c6:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     5c8:	7e18      	ldrb	r0, [r3, #24]
     5ca:	2301      	movs	r3, #1
     5cc:	4018      	ands	r0, r3
}
     5ce:	4770      	bx	lr

000005d0 <spi_is_ready_to_read>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     5d0:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5d2:	7e18      	ldrb	r0, [r3, #24]
     5d4:	0740      	lsls	r0, r0, #29
     5d6:	0fc0      	lsrs	r0, r0, #31
}
     5d8:	4770      	bx	lr
	...

000005dc <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     5dc:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     5de:	4b06      	ldr	r3, [pc, #24]	; (5f8 <spi_write+0x1c>)
{
     5e0:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     5e2:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
     5e4:	4798      	blx	r3
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     5e6:	2305      	movs	r3, #5
	if (!spi_is_ready_to_write(module)) {
     5e8:	2800      	cmp	r0, #0
     5ea:	d003      	beq.n	5f4 <spi_write+0x18>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
     5ec:	2300      	movs	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     5ee:	05e4      	lsls	r4, r4, #23
     5f0:	0de4      	lsrs	r4, r4, #23
     5f2:	62ac      	str	r4, [r5, #40]	; 0x28
}
     5f4:	0018      	movs	r0, r3
     5f6:	bd70      	pop	{r4, r5, r6, pc}
     5f8:	000005c7 	.word	0x000005c7

000005fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     5fe:	4b0d      	ldr	r3, [pc, #52]	; (634 <spi_read+0x38>)
{
     600:	0006      	movs	r6, r0
     602:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
     604:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_read(module)) {
     606:	4798      	blx	r3
		/* No data has been received, return */
		return STATUS_ERR_IO;
     608:	2210      	movs	r2, #16
	if (!spi_is_ready_to_read(module)) {
     60a:	2800      	cmp	r0, #0
     60c:	d00d      	beq.n	62a <spi_read+0x2e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     60e:	2304      	movs	r3, #4
     610:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
     612:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     614:	4219      	tst	r1, r3
     616:	d001      	beq.n	61c <spi_read+0x20>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     618:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
     61a:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     61c:	79b3      	ldrb	r3, [r6, #6]
     61e:	2b01      	cmp	r3, #1
     620:	d105      	bne.n	62e <spi_read+0x32>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     622:	6aab      	ldr	r3, [r5, #40]	; 0x28
     624:	05db      	lsls	r3, r3, #23
     626:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     628:	8023      	strh	r3, [r4, #0]
	}

	return retval;
}
     62a:	0010      	movs	r0, r2
     62c:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
     62e:	6aab      	ldr	r3, [r5, #40]	; 0x28
     630:	b2db      	uxtb	r3, r3
     632:	e7f9      	b.n	628 <spi_read+0x2c>
     634:	000005d1 	.word	0x000005d1

00000638 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     63c:	6029      	str	r1, [r5, #0]
{
     63e:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     640:	680a      	ldr	r2, [r1, #0]
{
     642:	b089      	sub	sp, #36	; 0x24
     644:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     646:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     648:	0792      	lsls	r2, r2, #30
     64a:	d500      	bpl.n	64e <spi_init+0x16>
     64c:	e0d4      	b.n	7f8 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     64e:	2701      	movs	r7, #1
     650:	680b      	ldr	r3, [r1, #0]
     652:	403b      	ands	r3, r7
     654:	9301      	str	r3, [sp, #4]
     656:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
     658:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     65a:	2a00      	cmp	r2, #0
     65c:	d000      	beq.n	660 <spi_init+0x28>
     65e:	e0cb      	b.n	7f8 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     660:	0008      	movs	r0, r1
     662:	4b6a      	ldr	r3, [pc, #424]	; (80c <spi_init+0x1d4>)
     664:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     666:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     668:	408f      	lsls	r7, r1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     66a:	4b69      	ldr	r3, [pc, #420]	; (810 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     66c:	3014      	adds	r0, #20
     66e:	6a1a      	ldr	r2, [r3, #32]
     670:	4317      	orrs	r7, r2
     672:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     674:	1d63      	adds	r3, r4, #5
     676:	7fdb      	ldrb	r3, [r3, #31]
     678:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     67a:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
     67c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     67e:	0011      	movs	r1, r2
     680:	0038      	movs	r0, r7
     682:	4b64      	ldr	r3, [pc, #400]	; (814 <spi_init+0x1dc>)
     684:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     686:	0038      	movs	r0, r7
     688:	4b63      	ldr	r3, [pc, #396]	; (818 <spi_init+0x1e0>)
     68a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     68c:	1d63      	adds	r3, r4, #5
     68e:	7fd8      	ldrb	r0, [r3, #31]
     690:	9901      	ldr	r1, [sp, #4]
     692:	4b62      	ldr	r3, [pc, #392]	; (81c <spi_init+0x1e4>)
     694:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     696:	7823      	ldrb	r3, [r4, #0]
     698:	2b01      	cmp	r3, #1
     69a:	d103      	bne.n	6a4 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     69c:	6832      	ldr	r2, [r6, #0]
     69e:	330b      	adds	r3, #11
     6a0:	4313      	orrs	r3, r2
     6a2:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     6a4:	7823      	ldrb	r3, [r4, #0]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d103      	bne.n	6b2 <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     6aa:	6832      	ldr	r2, [r6, #0]
     6ac:	3308      	adds	r3, #8
     6ae:	4313      	orrs	r3, r2
     6b0:	6033      	str	r3, [r6, #0]
     6b2:	002b      	movs	r3, r5
     6b4:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     6b6:	2600      	movs	r6, #0
     6b8:	330c      	adds	r3, #12
     6ba:	3228      	adds	r2, #40	; 0x28
     6bc:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     6be:	429a      	cmp	r2, r3
     6c0:	d1fc      	bne.n	6bc <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
     6c2:	002b      	movs	r3, r5
     6c4:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
     6c6:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
     6c8:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
     6ca:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
     6cc:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
     6ce:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
     6d0:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
     6d2:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
     6d4:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     6d6:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
     6d8:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     6da:	4b4c      	ldr	r3, [pc, #304]	; (80c <spi_init+0x1d4>)
	module->locked                     = false;
     6dc:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     6de:	4798      	blx	r3
     6e0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     6e2:	4b4f      	ldr	r3, [pc, #316]	; (820 <spi_init+0x1e8>)
     6e4:	494f      	ldr	r1, [pc, #316]	; (824 <spi_init+0x1ec>)
     6e6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     6e8:	4b4f      	ldr	r3, [pc, #316]	; (828 <spi_init+0x1f0>)
     6ea:	00bf      	lsls	r7, r7, #2
     6ec:	50fd      	str	r5, [r7, r3]
     6ee:	2380      	movs	r3, #128	; 0x80
     6f0:	aa02      	add	r2, sp, #8
     6f2:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6f4:	2301      	movs	r3, #1
     6f6:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
     6f8:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6fa:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6fc:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
     6fe:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
     700:	2b00      	cmp	r3, #0
     702:	d100      	bne.n	706 <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     704:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
     706:	2600      	movs	r6, #0
     708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     70a:	9304      	str	r3, [sp, #16]
     70c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     70e:	9305      	str	r3, [sp, #20]
     710:	6b23      	ldr	r3, [r4, #48]	; 0x30
     712:	9306      	str	r3, [sp, #24]
     714:	6b63      	ldr	r3, [r4, #52]	; 0x34
     716:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
     718:	00b3      	lsls	r3, r6, #2
     71a:	aa04      	add	r2, sp, #16
     71c:	5898      	ldr	r0, [r3, r2]
     71e:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
     720:	2800      	cmp	r0, #0
     722:	d102      	bne.n	72a <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     724:	0038      	movs	r0, r7
     726:	4b41      	ldr	r3, [pc, #260]	; (82c <spi_init+0x1f4>)
     728:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
     72a:	1c43      	adds	r3, r0, #1
     72c:	d006      	beq.n	73c <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     72e:	ab02      	add	r3, sp, #8
     730:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     732:	0c00      	lsrs	r0, r0, #16
     734:	b2c0      	uxtb	r0, r0
     736:	a903      	add	r1, sp, #12
     738:	4b3d      	ldr	r3, [pc, #244]	; (830 <spi_init+0x1f8>)
     73a:	4798      	blx	r3
     73c:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     73e:	2e04      	cmp	r6, #4
     740:	d1ea      	bne.n	718 <spi_init+0xe0>
	module->mode             = config->mode;
     742:	7823      	ldrb	r3, [r4, #0]
     744:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     746:	7c23      	ldrb	r3, [r4, #16]
     748:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     74a:	7ca3      	ldrb	r3, [r4, #18]
     74c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     74e:	7d23      	ldrb	r3, [r4, #20]
     750:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     752:	ab02      	add	r3, sp, #8
     754:	1c9e      	adds	r6, r3, #2
     756:	2300      	movs	r3, #0
     758:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
     75a:	7823      	ldrb	r3, [r4, #0]
     75c:	2b01      	cmp	r3, #1
     75e:	d110      	bne.n	782 <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     760:	4b2a      	ldr	r3, [pc, #168]	; (80c <spi_init+0x1d4>)
     762:	6828      	ldr	r0, [r5, #0]
     764:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     766:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     768:	4b32      	ldr	r3, [pc, #200]	; (834 <spi_init+0x1fc>)
     76a:	b2c0      	uxtb	r0, r0
     76c:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
     76e:	4b32      	ldr	r3, [pc, #200]	; (838 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     770:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     772:	0032      	movs	r2, r6
     774:	69a0      	ldr	r0, [r4, #24]
     776:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
     778:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
     77a:	2800      	cmp	r0, #0
     77c:	d13c      	bne.n	7f8 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
     77e:	7833      	ldrb	r3, [r6, #0]
     780:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
     782:	7823      	ldrb	r3, [r4, #0]
     784:	2b00      	cmp	r3, #0
     786:	d13d      	bne.n	804 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     788:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     78a:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
     78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     78e:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     790:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     792:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
     794:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     796:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     798:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
     79a:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     79c:	7fdb      	ldrb	r3, [r3, #31]
     79e:	2b00      	cmp	r3, #0
     7a0:	d12d      	bne.n	7fe <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
     7a2:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
     7a4:	68a1      	ldr	r1, [r4, #8]
     7a6:	6862      	ldr	r2, [r4, #4]
     7a8:	430a      	orrs	r2, r1
     7aa:	68e1      	ldr	r1, [r4, #12]
     7ac:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
     7ae:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
     7b0:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
     7b2:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     7b4:	7c61      	ldrb	r1, [r4, #17]
     7b6:	2900      	cmp	r1, #0
     7b8:	d103      	bne.n	7c2 <spi_init+0x18a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7ba:	4920      	ldr	r1, [pc, #128]	; (83c <spi_init+0x204>)
     7bc:	7889      	ldrb	r1, [r1, #2]
     7be:	0789      	lsls	r1, r1, #30
     7c0:	d501      	bpl.n	7c6 <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     7c2:	2180      	movs	r1, #128	; 0x80
     7c4:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
     7c6:	7ca1      	ldrb	r1, [r4, #18]
     7c8:	2900      	cmp	r1, #0
     7ca:	d002      	beq.n	7d2 <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     7cc:	2180      	movs	r1, #128	; 0x80
     7ce:	0289      	lsls	r1, r1, #10
     7d0:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
     7d2:	7ce1      	ldrb	r1, [r4, #19]
     7d4:	2900      	cmp	r1, #0
     7d6:	d002      	beq.n	7de <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     7d8:	2180      	movs	r1, #128	; 0x80
     7da:	0089      	lsls	r1, r1, #2
     7dc:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
     7de:	7d21      	ldrb	r1, [r4, #20]
     7e0:	2900      	cmp	r1, #0
     7e2:	d002      	beq.n	7ea <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     7e4:	2180      	movs	r1, #128	; 0x80
     7e6:	0189      	lsls	r1, r1, #6
     7e8:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
     7ea:	6839      	ldr	r1, [r7, #0]
     7ec:	430a      	orrs	r2, r1
     7ee:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     7f0:	687a      	ldr	r2, [r7, #4]
     7f2:	4313      	orrs	r3, r2
     7f4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
     7f6:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     7f8:	0018      	movs	r0, r3
     7fa:	b009      	add	sp, #36	; 0x24
     7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     7fe:	2340      	movs	r3, #64	; 0x40
     800:	4313      	orrs	r3, r2
     802:	e7cf      	b.n	7a4 <spi_init+0x16c>
	uint32_t ctrlb = 0;
     804:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
     806:	0018      	movs	r0, r3
     808:	e7cc      	b.n	7a4 <spi_init+0x16c>
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	0000058d 	.word	0x0000058d
     810:	40000400 	.word	0x40000400
     814:	00001345 	.word	0x00001345
     818:	000012bd 	.word	0x000012bd
     81c:	000003ed 	.word	0x000003ed
     820:	00000e01 	.word	0x00000e01
     824:	00000c01 	.word	0x00000c01
     828:	200000a8 	.word	0x200000a8
     82c:	00000431 	.word	0x00000431
     830:	00001419 	.word	0x00001419
     834:	00001361 	.word	0x00001361
     838:	000003c5 	.word	0x000003c5
     83c:	41002000 	.word	0x41002000

00000840 <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     840:	0003      	movs	r3, r0
{
     842:	b5f0      	push	{r4, r5, r6, r7, lr}
     844:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     846:	2005      	movs	r0, #5
{
     848:	b087      	sub	sp, #28
     84a:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
     84c:	3338      	adds	r3, #56	; 0x38
     84e:	781b      	ldrb	r3, [r3, #0]
{
     850:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
     852:	4283      	cmp	r3, r0
     854:	d032      	beq.n	8bc <spi_write_buffer_wait+0x7c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     856:	3012      	adds	r0, #18
	if (length == 0) {
     858:	2a00      	cmp	r2, #0
     85a:	d02f      	beq.n	8bc <spi_write_buffer_wait+0x7c>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     85c:	7963      	ldrb	r3, [r4, #5]
     85e:	2b00      	cmp	r3, #0
     860:	d107      	bne.n	872 <spi_write_buffer_wait+0x32>
     862:	0020      	movs	r0, r4
     864:	4b5f      	ldr	r3, [pc, #380]	; (9e4 <spi_write_buffer_wait+0x1a4>)
     866:	4798      	blx	r3
     868:	2800      	cmp	r0, #0
     86a:	d002      	beq.n	872 <spi_write_buffer_wait+0x32>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     86c:	2302      	movs	r3, #2
     86e:	6822      	ldr	r2, [r4, #0]
     870:	7613      	strb	r3, [r2, #24]
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     872:	2600      	movs	r6, #0
     874:	9501      	str	r5, [sp, #4]
     876:	3d01      	subs	r5, #1
     878:	b2ad      	uxth	r5, r5
	while (length--) {
     87a:	4a5b      	ldr	r2, [pc, #364]	; (9e8 <spi_write_buffer_wait+0x1a8>)
     87c:	7963      	ldrb	r3, [r4, #5]
     87e:	4295      	cmp	r5, r2
     880:	d108      	bne.n	894 <spi_write_buffer_wait+0x54>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     882:	2b01      	cmp	r3, #1
     884:	d100      	bne.n	888 <spi_write_buffer_wait+0x48>
     886:	e087      	b.n	998 <spi_write_buffer_wait+0x158>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     888:	7963      	ldrb	r3, [r4, #5]
     88a:	2b00      	cmp	r3, #0
     88c:	d100      	bne.n	890 <spi_write_buffer_wait+0x50>
     88e:	e089      	b.n	9a4 <spi_write_buffer_wait+0x164>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     890:	2000      	movs	r0, #0
     892:	e013      	b.n	8bc <spi_write_buffer_wait+0x7c>
		if (module->mode == SPI_MODE_SLAVE) {
     894:	2b00      	cmp	r3, #0
     896:	d11a      	bne.n	8ce <spi_write_buffer_wait+0x8e>
     898:	4f54      	ldr	r7, [pc, #336]	; (9ec <spi_write_buffer_wait+0x1ac>)
				if (spi_is_ready_to_write(module)) {
     89a:	0020      	movs	r0, r4
     89c:	4b54      	ldr	r3, [pc, #336]	; (9f0 <spi_write_buffer_wait+0x1b0>)
     89e:	4798      	blx	r3
     8a0:	2800      	cmp	r0, #0
     8a2:	d102      	bne.n	8aa <spi_write_buffer_wait+0x6a>
     8a4:	3f01      	subs	r7, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     8a6:	2f00      	cmp	r7, #0
     8a8:	d1f7      	bne.n	89a <spi_write_buffer_wait+0x5a>
			if (spi_is_write_complete(module)) {
     8aa:	0020      	movs	r0, r4
     8ac:	4b4d      	ldr	r3, [pc, #308]	; (9e4 <spi_write_buffer_wait+0x1a4>)
     8ae:	4798      	blx	r3
     8b0:	2800      	cmp	r0, #0
     8b2:	d005      	beq.n	8c0 <spi_write_buffer_wait+0x80>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     8b4:	2202      	movs	r2, #2
					return STATUS_ABORTED;
     8b6:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
     8b8:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     8ba:	761a      	strb	r2, [r3, #24]
}
     8bc:	b007      	add	sp, #28
     8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
     8c0:	0020      	movs	r0, r4
     8c2:	4b4b      	ldr	r3, [pc, #300]	; (9f0 <spi_write_buffer_wait+0x1b0>)
     8c4:	4798      	blx	r3
     8c6:	2800      	cmp	r0, #0
     8c8:	d101      	bne.n	8ce <spi_write_buffer_wait+0x8e>
					return STATUS_ERR_TIMEOUT;
     8ca:	3012      	adds	r0, #18
     8cc:	e7f6      	b.n	8bc <spi_write_buffer_wait+0x7c>
		while (!spi_is_ready_to_write(module)) {
     8ce:	0020      	movs	r0, r4
     8d0:	4b47      	ldr	r3, [pc, #284]	; (9f0 <spi_write_buffer_wait+0x1b0>)
     8d2:	4798      	blx	r3
     8d4:	2800      	cmp	r0, #0
     8d6:	d0fa      	beq.n	8ce <spi_write_buffer_wait+0x8e>
		uint16_t data_to_send = tx_data[tx_pos++];
     8d8:	9a02      	ldr	r2, [sp, #8]
     8da:	1c73      	adds	r3, r6, #1
     8dc:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8de:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
     8e0:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8e2:	2a01      	cmp	r2, #1
     8e4:	d040      	beq.n	968 <spi_write_buffer_wait+0x128>
		uint16_t data_to_send = tx_data[tx_pos++];
     8e6:	001e      	movs	r6, r3
     8e8:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
     8ea:	4b42      	ldr	r3, [pc, #264]	; (9f4 <spi_write_buffer_wait+0x1b4>)
     8ec:	0020      	movs	r0, r4
     8ee:	4798      	blx	r3
		if (module->receiver_enabled) {
     8f0:	79e2      	ldrb	r2, [r4, #7]
     8f2:	1e6b      	subs	r3, r5, #1
     8f4:	b29b      	uxth	r3, r3
     8f6:	2a00      	cmp	r2, #0
     8f8:	d04c      	beq.n	994 <spi_write_buffer_wait+0x154>
			if (module->mode == SPI_MODE_SLAVE) {
     8fa:	7963      	ldrb	r3, [r4, #5]
     8fc:	2b00      	cmp	r3, #0
     8fe:	d124      	bne.n	94a <spi_write_buffer_wait+0x10a>
     900:	4b3a      	ldr	r3, [pc, #232]	; (9ec <spi_write_buffer_wait+0x1ac>)
     902:	9303      	str	r3, [sp, #12]
					if (length && spi_is_ready_to_write(module)) {
     904:	2d00      	cmp	r5, #0
     906:	d012      	beq.n	92e <spi_write_buffer_wait+0xee>
     908:	0020      	movs	r0, r4
     90a:	4b39      	ldr	r3, [pc, #228]	; (9f0 <spi_write_buffer_wait+0x1b0>)
     90c:	4798      	blx	r3
     90e:	2800      	cmp	r0, #0
     910:	d00d      	beq.n	92e <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
     912:	9b02      	ldr	r3, [sp, #8]
     914:	1c77      	adds	r7, r6, #1
     916:	5d99      	ldrb	r1, [r3, r6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     918:	79a3      	ldrb	r3, [r4, #6]
						data_to_send = tx_data[tx_pos++];
     91a:	b2bf      	uxth	r7, r7
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     91c:	2b01      	cmp	r3, #1
     91e:	d02a      	beq.n	976 <spi_write_buffer_wait+0x136>
						data_to_send = tx_data[tx_pos++];
     920:	b289      	uxth	r1, r1
						spi_write(module, data_to_send);
     922:	0020      	movs	r0, r4
     924:	4b33      	ldr	r3, [pc, #204]	; (9f4 <spi_write_buffer_wait+0x1b4>)
     926:	4798      	blx	r3
						length--;
     928:	003e      	movs	r6, r7
     92a:	3d01      	subs	r5, #1
     92c:	b2ad      	uxth	r5, r5
					if (spi_is_ready_to_read(module)) {
     92e:	0020      	movs	r0, r4
     930:	4f31      	ldr	r7, [pc, #196]	; (9f8 <spi_write_buffer_wait+0x1b8>)
     932:	47b8      	blx	r7
     934:	2800      	cmp	r0, #0
     936:	d025      	beq.n	984 <spi_write_buffer_wait+0x144>
				if (spi_is_write_complete(module)) {
     938:	0020      	movs	r0, r4
     93a:	4b2a      	ldr	r3, [pc, #168]	; (9e4 <spi_write_buffer_wait+0x1a4>)
     93c:	4798      	blx	r3
     93e:	2800      	cmp	r0, #0
     940:	d1b8      	bne.n	8b4 <spi_write_buffer_wait+0x74>
				if (!spi_is_ready_to_read(module)) {
     942:	0020      	movs	r0, r4
     944:	47b8      	blx	r7
     946:	2800      	cmp	r0, #0
     948:	d022      	beq.n	990 <spi_write_buffer_wait+0x150>
			while (!spi_is_ready_to_read(module)) {
     94a:	0020      	movs	r0, r4
     94c:	4b2a      	ldr	r3, [pc, #168]	; (9f8 <spi_write_buffer_wait+0x1b8>)
     94e:	4798      	blx	r3
     950:	2800      	cmp	r0, #0
     952:	d0fa      	beq.n	94a <spi_write_buffer_wait+0x10a>
			spi_read(module, &flush);
     954:	ab04      	add	r3, sp, #16
     956:	1d99      	adds	r1, r3, #6
     958:	0020      	movs	r0, r4
     95a:	4b28      	ldr	r3, [pc, #160]	; (9fc <spi_write_buffer_wait+0x1bc>)
     95c:	4798      	blx	r3
			flush_length--;
     95e:	9b01      	ldr	r3, [sp, #4]
     960:	3b01      	subs	r3, #1
     962:	b29b      	uxth	r3, r3
     964:	9301      	str	r3, [sp, #4]
     966:	e786      	b.n	876 <spi_write_buffer_wait+0x36>
			data_to_send |= (tx_data[tx_pos++] << 8);
     968:	9a02      	ldr	r2, [sp, #8]
     96a:	3602      	adds	r6, #2
     96c:	5cd3      	ldrb	r3, [r2, r3]
     96e:	b2b6      	uxth	r6, r6
     970:	021b      	lsls	r3, r3, #8
     972:	4319      	orrs	r1, r3
     974:	e7b9      	b.n	8ea <spi_write_buffer_wait+0xaa>
							data_to_send |= (tx_data[tx_pos++] << 8);
     976:	9b02      	ldr	r3, [sp, #8]
     978:	3602      	adds	r6, #2
     97a:	5ddb      	ldrb	r3, [r3, r7]
     97c:	b2b7      	uxth	r7, r6
     97e:	021b      	lsls	r3, r3, #8
     980:	4319      	orrs	r1, r3
     982:	e7ce      	b.n	922 <spi_write_buffer_wait+0xe2>
     984:	9b03      	ldr	r3, [sp, #12]
     986:	3b01      	subs	r3, #1
     988:	9303      	str	r3, [sp, #12]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     98a:	2b00      	cmp	r3, #0
     98c:	d1ba      	bne.n	904 <spi_write_buffer_wait+0xc4>
     98e:	e7d3      	b.n	938 <spi_write_buffer_wait+0xf8>
					return STATUS_ERR_TIMEOUT;
     990:	2012      	movs	r0, #18
     992:	e793      	b.n	8bc <spi_write_buffer_wait+0x7c>
		if (module->receiver_enabled) {
     994:	001d      	movs	r5, r3
     996:	e770      	b.n	87a <spi_write_buffer_wait+0x3a>
		while (!spi_is_write_complete(module)) {
     998:	0020      	movs	r0, r4
     99a:	4b12      	ldr	r3, [pc, #72]	; (9e4 <spi_write_buffer_wait+0x1a4>)
     99c:	4798      	blx	r3
     99e:	2800      	cmp	r0, #0
     9a0:	d0fa      	beq.n	998 <spi_write_buffer_wait+0x158>
     9a2:	e771      	b.n	888 <spi_write_buffer_wait+0x48>
		if (module->receiver_enabled) {
     9a4:	79e3      	ldrb	r3, [r4, #7]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d100      	bne.n	9ac <spi_write_buffer_wait+0x16c>
     9aa:	e771      	b.n	890 <spi_write_buffer_wait+0x50>
			while (flush_length) {
     9ac:	9b01      	ldr	r3, [sp, #4]
     9ae:	2b00      	cmp	r3, #0
     9b0:	d100      	bne.n	9b4 <spi_write_buffer_wait+0x174>
     9b2:	e76d      	b.n	890 <spi_write_buffer_wait+0x50>
     9b4:	4d0d      	ldr	r5, [pc, #52]	; (9ec <spi_write_buffer_wait+0x1ac>)
					if (spi_is_ready_to_read(module)) {
     9b6:	0020      	movs	r0, r4
     9b8:	4e0f      	ldr	r6, [pc, #60]	; (9f8 <spi_write_buffer_wait+0x1b8>)
     9ba:	47b0      	blx	r6
     9bc:	2800      	cmp	r0, #0
     9be:	d102      	bne.n	9c6 <spi_write_buffer_wait+0x186>
     9c0:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     9c2:	2d00      	cmp	r5, #0
     9c4:	d1f7      	bne.n	9b6 <spi_write_buffer_wait+0x176>
				if (!spi_is_ready_to_read(module)) {
     9c6:	0020      	movs	r0, r4
     9c8:	47b0      	blx	r6
     9ca:	2800      	cmp	r0, #0
     9cc:	d100      	bne.n	9d0 <spi_write_buffer_wait+0x190>
     9ce:	e77c      	b.n	8ca <spi_write_buffer_wait+0x8a>
				spi_read(module, &flush);
     9d0:	ab04      	add	r3, sp, #16
     9d2:	1d99      	adds	r1, r3, #6
     9d4:	0020      	movs	r0, r4
     9d6:	4b09      	ldr	r3, [pc, #36]	; (9fc <spi_write_buffer_wait+0x1bc>)
     9d8:	4798      	blx	r3
				flush_length--;
     9da:	9b01      	ldr	r3, [sp, #4]
     9dc:	3b01      	subs	r3, #1
     9de:	b29b      	uxth	r3, r3
     9e0:	9301      	str	r3, [sp, #4]
     9e2:	e7e3      	b.n	9ac <spi_write_buffer_wait+0x16c>
     9e4:	000005bd 	.word	0x000005bd
     9e8:	0000ffff 	.word	0x0000ffff
     9ec:	00002711 	.word	0x00002711
     9f0:	000005c7 	.word	0x000005c7
     9f4:	000005dd 	.word	0x000005dd
     9f8:	000005d1 	.word	0x000005d1
     9fc:	000005fd 	.word	0x000005fd

00000a00 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     a04:	0003      	movs	r3, r0
{
     a06:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     a08:	2005      	movs	r0, #5
{
     a0a:	b089      	sub	sp, #36	; 0x24
     a0c:	9102      	str	r1, [sp, #8]
     a0e:	9203      	str	r2, [sp, #12]
	if (module->status == STATUS_BUSY) {
     a10:	3338      	adds	r3, #56	; 0x38
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	4283      	cmp	r3, r0
     a16:	d037      	beq.n	a88 <spi_transceive_buffer_wait+0x88>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     a18:	3012      	adds	r0, #18
	if (length == 0) {
     a1a:	2e00      	cmp	r6, #0
     a1c:	d034      	beq.n	a88 <spi_transceive_buffer_wait+0x88>
	}

	if (!(module->receiver_enabled)) {
     a1e:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
     a20:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
     a22:	2b00      	cmp	r3, #0
     a24:	d030      	beq.n	a88 <spi_transceive_buffer_wait+0x88>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     a26:	7963      	ldrb	r3, [r4, #5]
     a28:	2b00      	cmp	r3, #0
     a2a:	d107      	bne.n	a3c <spi_transceive_buffer_wait+0x3c>
     a2c:	0020      	movs	r0, r4
     a2e:	4b6e      	ldr	r3, [pc, #440]	; (be8 <spi_transceive_buffer_wait+0x1e8>)
     a30:	4798      	blx	r3
     a32:	2800      	cmp	r0, #0
     a34:	d002      	beq.n	a3c <spi_transceive_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a36:	2302      	movs	r3, #2
     a38:	6822      	ldr	r2, [r4, #0]
     a3a:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     a3c:	2500      	movs	r5, #0
     a3e:	002f      	movs	r7, r5
     a40:	9601      	str	r6, [sp, #4]
	while (length--) {
     a42:	1e73      	subs	r3, r6, #1
     a44:	b29b      	uxth	r3, r3
     a46:	9304      	str	r3, [sp, #16]
     a48:	7963      	ldrb	r3, [r4, #5]
     a4a:	2e00      	cmp	r6, #0
     a4c:	d108      	bne.n	a60 <spi_transceive_buffer_wait+0x60>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     a4e:	2b01      	cmp	r3, #1
     a50:	d100      	bne.n	a54 <spi_transceive_buffer_wait+0x54>
     a52:	e092      	b.n	b7a <spi_transceive_buffer_wait+0x17a>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     a54:	7963      	ldrb	r3, [r4, #5]
     a56:	2b00      	cmp	r3, #0
     a58:	d100      	bne.n	a5c <spi_transceive_buffer_wait+0x5c>
     a5a:	e0be      	b.n	bda <spi_transceive_buffer_wait+0x1da>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
     a5c:	2000      	movs	r0, #0
     a5e:	e013      	b.n	a88 <spi_transceive_buffer_wait+0x88>
		if (module->mode == SPI_MODE_SLAVE) {
     a60:	2b00      	cmp	r3, #0
     a62:	d119      	bne.n	a98 <spi_transceive_buffer_wait+0x98>
     a64:	4e61      	ldr	r6, [pc, #388]	; (bec <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_write(module)) {
     a66:	0020      	movs	r0, r4
     a68:	4b61      	ldr	r3, [pc, #388]	; (bf0 <spi_transceive_buffer_wait+0x1f0>)
     a6a:	4798      	blx	r3
     a6c:	2800      	cmp	r0, #0
     a6e:	d102      	bne.n	a76 <spi_transceive_buffer_wait+0x76>
     a70:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     a72:	2e00      	cmp	r6, #0
     a74:	d1f7      	bne.n	a66 <spi_transceive_buffer_wait+0x66>
			if (spi_is_write_complete(module)) {
     a76:	0020      	movs	r0, r4
     a78:	4b5b      	ldr	r3, [pc, #364]	; (be8 <spi_transceive_buffer_wait+0x1e8>)
     a7a:	4798      	blx	r3
     a7c:	2800      	cmp	r0, #0
     a7e:	d005      	beq.n	a8c <spi_transceive_buffer_wait+0x8c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a80:	2202      	movs	r2, #2
				return STATUS_ABORTED;
     a82:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
     a84:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a86:	761a      	strb	r2, [r3, #24]
}
     a88:	b009      	add	sp, #36	; 0x24
     a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
     a8c:	0020      	movs	r0, r4
     a8e:	4b58      	ldr	r3, [pc, #352]	; (bf0 <spi_transceive_buffer_wait+0x1f0>)
     a90:	4798      	blx	r3
     a92:	2800      	cmp	r0, #0
     a94:	d100      	bne.n	a98 <spi_transceive_buffer_wait+0x98>
     a96:	e0a4      	b.n	be2 <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_write(module)) {
     a98:	0020      	movs	r0, r4
     a9a:	4b55      	ldr	r3, [pc, #340]	; (bf0 <spi_transceive_buffer_wait+0x1f0>)
     a9c:	4798      	blx	r3
     a9e:	2800      	cmp	r0, #0
     aa0:	d0fa      	beq.n	a98 <spi_transceive_buffer_wait+0x98>
		uint16_t data_to_send = tx_data[tx_pos++];
     aa2:	9b02      	ldr	r3, [sp, #8]
     aa4:	1c7e      	adds	r6, r7, #1
     aa6:	5dd9      	ldrb	r1, [r3, r7]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     aa8:	79a3      	ldrb	r3, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
     aaa:	b2b6      	uxth	r6, r6
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     aac:	2b01      	cmp	r3, #1
     aae:	d050      	beq.n	b52 <spi_transceive_buffer_wait+0x152>
		uint16_t data_to_send = tx_data[tx_pos++];
     ab0:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
     ab2:	4b50      	ldr	r3, [pc, #320]	; (bf4 <spi_transceive_buffer_wait+0x1f4>)
     ab4:	0020      	movs	r0, r4
     ab6:	4798      	blx	r3
		if (module->mode == SPI_MODE_SLAVE) {
     ab8:	7963      	ldrb	r3, [r4, #5]
     aba:	2b00      	cmp	r3, #0
     abc:	d125      	bne.n	b0a <spi_transceive_buffer_wait+0x10a>
     abe:	4b4b      	ldr	r3, [pc, #300]	; (bec <spi_transceive_buffer_wait+0x1ec>)
     ac0:	9305      	str	r3, [sp, #20]
				if (spi_is_ready_to_write(module)) {
     ac2:	0020      	movs	r0, r4
     ac4:	4b4a      	ldr	r3, [pc, #296]	; (bf0 <spi_transceive_buffer_wait+0x1f0>)
     ac6:	4798      	blx	r3
     ac8:	2800      	cmp	r0, #0
     aca:	d00f      	beq.n	aec <spi_transceive_buffer_wait+0xec>
					data_to_send = tx_data[tx_pos++];
     acc:	9b02      	ldr	r3, [sp, #8]
     ace:	1c77      	adds	r7, r6, #1
     ad0:	5d99      	ldrb	r1, [r3, r6]
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ad2:	79a3      	ldrb	r3, [r4, #6]
					data_to_send = tx_data[tx_pos++];
     ad4:	b2bf      	uxth	r7, r7
					if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ad6:	2b01      	cmp	r3, #1
     ad8:	d042      	beq.n	b60 <spi_transceive_buffer_wait+0x160>
					data_to_send = tx_data[tx_pos++];
     ada:	b289      	uxth	r1, r1
					length--;
     adc:	003e      	movs	r6, r7
					spi_write(module, data_to_send);
     ade:	4b45      	ldr	r3, [pc, #276]	; (bf4 <spi_transceive_buffer_wait+0x1f4>)
     ae0:	0020      	movs	r0, r4
     ae2:	4798      	blx	r3
					length--;
     ae4:	9b04      	ldr	r3, [sp, #16]
     ae6:	3b01      	subs	r3, #1
     ae8:	b29b      	uxth	r3, r3
     aea:	9304      	str	r3, [sp, #16]
				if (spi_is_ready_to_read(module)) {
     aec:	0020      	movs	r0, r4
     aee:	4b42      	ldr	r3, [pc, #264]	; (bf8 <spi_transceive_buffer_wait+0x1f8>)
     af0:	4798      	blx	r3
     af2:	2800      	cmp	r0, #0
     af4:	d03b      	beq.n	b6e <spi_transceive_buffer_wait+0x16e>
			if (spi_is_write_complete(module)) {
     af6:	0020      	movs	r0, r4
     af8:	4b3b      	ldr	r3, [pc, #236]	; (be8 <spi_transceive_buffer_wait+0x1e8>)
     afa:	4798      	blx	r3
     afc:	2800      	cmp	r0, #0
     afe:	d1bf      	bne.n	a80 <spi_transceive_buffer_wait+0x80>
			if (!spi_is_ready_to_read(module)) {
     b00:	0020      	movs	r0, r4
     b02:	4b3d      	ldr	r3, [pc, #244]	; (bf8 <spi_transceive_buffer_wait+0x1f8>)
     b04:	4798      	blx	r3
     b06:	2800      	cmp	r0, #0
     b08:	d06b      	beq.n	be2 <spi_transceive_buffer_wait+0x1e2>
		while (!spi_is_ready_to_read(module)) {
     b0a:	0020      	movs	r0, r4
     b0c:	4b3a      	ldr	r3, [pc, #232]	; (bf8 <spi_transceive_buffer_wait+0x1f8>)
     b0e:	4798      	blx	r3
     b10:	2800      	cmp	r0, #0
     b12:	d0fa      	beq.n	b0a <spi_transceive_buffer_wait+0x10a>
		uint16_t received_data = 0;
     b14:	ab06      	add	r3, sp, #24
     b16:	1d9f      	adds	r7, r3, #6
     b18:	2300      	movs	r3, #0
     b1a:	803b      	strh	r3, [r7, #0]
		rx_length--;
     b1c:	9b01      	ldr	r3, [sp, #4]
		retval = spi_read(module, &received_data);
     b1e:	0039      	movs	r1, r7
		rx_length--;
     b20:	3b01      	subs	r3, #1
     b22:	b29b      	uxth	r3, r3
     b24:	9301      	str	r3, [sp, #4]
		retval = spi_read(module, &received_data);
     b26:	0020      	movs	r0, r4
     b28:	4b34      	ldr	r3, [pc, #208]	; (bfc <spi_transceive_buffer_wait+0x1fc>)
     b2a:	4798      	blx	r3
		if (retval != STATUS_OK) {
     b2c:	2800      	cmp	r0, #0
     b2e:	d1ab      	bne.n	a88 <spi_transceive_buffer_wait+0x88>
		rx_data[rx_pos++] = received_data;
     b30:	9903      	ldr	r1, [sp, #12]
     b32:	883a      	ldrh	r2, [r7, #0]
     b34:	1c6b      	adds	r3, r5, #1
     b36:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b38:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
     b3a:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b3c:	2901      	cmp	r1, #1
     b3e:	d104      	bne.n	b4a <spi_transceive_buffer_wait+0x14a>
			rx_data[rx_pos++] = (received_data >> 8);
     b40:	9903      	ldr	r1, [sp, #12]
     b42:	3502      	adds	r5, #2
     b44:	0a12      	lsrs	r2, r2, #8
     b46:	54ca      	strb	r2, [r1, r3]
     b48:	b2ab      	uxth	r3, r5
     b4a:	0037      	movs	r7, r6
     b4c:	001d      	movs	r5, r3
     b4e:	9e04      	ldr	r6, [sp, #16]
     b50:	e777      	b.n	a42 <spi_transceive_buffer_wait+0x42>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b52:	9b02      	ldr	r3, [sp, #8]
     b54:	3702      	adds	r7, #2
     b56:	5d9b      	ldrb	r3, [r3, r6]
     b58:	b2be      	uxth	r6, r7
     b5a:	021b      	lsls	r3, r3, #8
     b5c:	4319      	orrs	r1, r3
     b5e:	e7a8      	b.n	ab2 <spi_transceive_buffer_wait+0xb2>
						data_to_send |= (tx_data[tx_pos++] << 8);
     b60:	9b02      	ldr	r3, [sp, #8]
     b62:	3602      	adds	r6, #2
     b64:	5ddb      	ldrb	r3, [r3, r7]
     b66:	b2b7      	uxth	r7, r6
     b68:	021b      	lsls	r3, r3, #8
     b6a:	4319      	orrs	r1, r3
     b6c:	e7b6      	b.n	adc <spi_transceive_buffer_wait+0xdc>
     b6e:	9b05      	ldr	r3, [sp, #20]
     b70:	3b01      	subs	r3, #1
     b72:	9305      	str	r3, [sp, #20]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     b74:	2b00      	cmp	r3, #0
     b76:	d1a4      	bne.n	ac2 <spi_transceive_buffer_wait+0xc2>
     b78:	e7bd      	b.n	af6 <spi_transceive_buffer_wait+0xf6>
		while (!spi_is_write_complete(module)) {
     b7a:	0020      	movs	r0, r4
     b7c:	4b1a      	ldr	r3, [pc, #104]	; (be8 <spi_transceive_buffer_wait+0x1e8>)
     b7e:	4798      	blx	r3
     b80:	2800      	cmp	r0, #0
     b82:	d0fa      	beq.n	b7a <spi_transceive_buffer_wait+0x17a>
     b84:	e766      	b.n	a54 <spi_transceive_buffer_wait+0x54>
     b86:	4e19      	ldr	r6, [pc, #100]	; (bec <spi_transceive_buffer_wait+0x1ec>)
				if (spi_is_ready_to_read(module)) {
     b88:	0020      	movs	r0, r4
     b8a:	4f1b      	ldr	r7, [pc, #108]	; (bf8 <spi_transceive_buffer_wait+0x1f8>)
     b8c:	47b8      	blx	r7
     b8e:	2800      	cmp	r0, #0
     b90:	d102      	bne.n	b98 <spi_transceive_buffer_wait+0x198>
     b92:	3e01      	subs	r6, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     b94:	2e00      	cmp	r6, #0
     b96:	d1f7      	bne.n	b88 <spi_transceive_buffer_wait+0x188>
			if (!spi_is_ready_to_read(module)) {
     b98:	0020      	movs	r0, r4
     b9a:	47b8      	blx	r7
     b9c:	2800      	cmp	r0, #0
     b9e:	d020      	beq.n	be2 <spi_transceive_buffer_wait+0x1e2>
			uint16_t received_data = 0;
     ba0:	ab06      	add	r3, sp, #24
     ba2:	1d9e      	adds	r6, r3, #6
     ba4:	2300      	movs	r3, #0
     ba6:	8033      	strh	r3, [r6, #0]
			rx_length--;
     ba8:	9b01      	ldr	r3, [sp, #4]
			retval = spi_read(module, &received_data);
     baa:	0031      	movs	r1, r6
			rx_length--;
     bac:	3b01      	subs	r3, #1
     bae:	b29b      	uxth	r3, r3
     bb0:	9301      	str	r3, [sp, #4]
			retval = spi_read(module, &received_data);
     bb2:	0020      	movs	r0, r4
     bb4:	4b11      	ldr	r3, [pc, #68]	; (bfc <spi_transceive_buffer_wait+0x1fc>)
     bb6:	4798      	blx	r3
			if (retval != STATUS_OK) {
     bb8:	2800      	cmp	r0, #0
     bba:	d000      	beq.n	bbe <spi_transceive_buffer_wait+0x1be>
     bbc:	e764      	b.n	a88 <spi_transceive_buffer_wait+0x88>
			rx_data[rx_pos++] = received_data;
     bbe:	9903      	ldr	r1, [sp, #12]
     bc0:	8832      	ldrh	r2, [r6, #0]
     bc2:	1c6b      	adds	r3, r5, #1
     bc4:	554a      	strb	r2, [r1, r5]
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bc6:	79a1      	ldrb	r1, [r4, #6]
			rx_data[rx_pos++] = received_data;
     bc8:	b29b      	uxth	r3, r3
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bca:	2901      	cmp	r1, #1
     bcc:	d104      	bne.n	bd8 <spi_transceive_buffer_wait+0x1d8>
				rx_data[rx_pos++] = (received_data >> 8);
     bce:	9903      	ldr	r1, [sp, #12]
     bd0:	3502      	adds	r5, #2
     bd2:	0a12      	lsrs	r2, r2, #8
     bd4:	54ca      	strb	r2, [r1, r3]
     bd6:	b2ab      	uxth	r3, r5
     bd8:	001d      	movs	r5, r3
		while (rx_length) {
     bda:	9b01      	ldr	r3, [sp, #4]
     bdc:	2b00      	cmp	r3, #0
     bde:	d1d2      	bne.n	b86 <spi_transceive_buffer_wait+0x186>
     be0:	e73c      	b.n	a5c <spi_transceive_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
     be2:	2012      	movs	r0, #18
     be4:	e750      	b.n	a88 <spi_transceive_buffer_wait+0x88>
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	000005bd 	.word	0x000005bd
     bec:	00002711 	.word	0x00002711
     bf0:	000005c7 	.word	0x000005c7
     bf4:	000005dd 	.word	0x000005dd
     bf8:	000005d1 	.word	0x000005d1
     bfc:	000005fd 	.word	0x000005fd

00000c00 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     c02:	4b7c      	ldr	r3, [pc, #496]	; (df4 <_spi_interrupt_handler+0x1f4>)
     c04:	0080      	lsls	r0, r0, #2
     c06:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     c08:	0023      	movs	r3, r4
     c0a:	0022      	movs	r2, r4
     c0c:	3337      	adds	r3, #55	; 0x37
     c0e:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
     c10:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
     c12:	781b      	ldrb	r3, [r3, #0]
     c14:	7816      	ldrb	r6, [r2, #0]
     c16:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     c18:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     c1a:	7daf      	ldrb	r7, [r5, #22]
     c1c:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     c1e:	07fb      	lsls	r3, r7, #31
     c20:	d539      	bpl.n	c96 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     c22:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     c24:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
     c26:	2a01      	cmp	r2, #1
     c28:	d133      	bne.n	c92 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
     c2a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     c2c:	2b00      	cmp	r3, #0
     c2e:	d10d      	bne.n	c4c <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
     c30:	4b71      	ldr	r3, [pc, #452]	; (df8 <_spi_interrupt_handler+0x1f8>)
     c32:	881b      	ldrh	r3, [r3, #0]
     c34:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     c36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c38:	3b01      	subs	r3, #1
     c3a:	b29b      	uxth	r3, r3
     c3c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     c3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c40:	2b00      	cmp	r3, #0
     c42:	d100      	bne.n	c46 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     c44:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     c46:	7963      	ldrb	r3, [r4, #5]
		if (0
     c48:	2b01      	cmp	r3, #1
     c4a:	d122      	bne.n	c92 <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
     c4c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     c4e:	2b00      	cmp	r3, #0
     c50:	d021      	beq.n	c96 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
     c54:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
     c56:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c58:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
     c5a:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c5c:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c5e:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     c60:	2801      	cmp	r0, #1
     c62:	d100      	bne.n	c66 <_spi_interrupt_handler+0x66>
     c64:	e074      	b.n	d50 <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     c66:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     c68:	05db      	lsls	r3, r3, #23
     c6a:	0ddb      	lsrs	r3, r3, #23
     c6c:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     c6e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     c70:	3b01      	subs	r3, #1
     c72:	b29b      	uxth	r3, r3
     c74:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     c76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     c78:	2b00      	cmp	r3, #0
     c7a:	d10c      	bne.n	c96 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     c7c:	3301      	adds	r3, #1
     c7e:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     c80:	7a63      	ldrb	r3, [r4, #9]
     c82:	2b01      	cmp	r3, #1
     c84:	d107      	bne.n	c96 <_spi_interrupt_handler+0x96>
     c86:	79e3      	ldrb	r3, [r4, #7]
     c88:	2b00      	cmp	r3, #0
     c8a:	d104      	bne.n	c96 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c8c:	3302      	adds	r3, #2
     c8e:	75ab      	strb	r3, [r5, #22]
     c90:	e001      	b.n	c96 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
     c92:	2b00      	cmp	r3, #0
     c94:	d0da      	beq.n	c4c <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     c96:	2104      	movs	r1, #4
     c98:	420f      	tst	r7, r1
     c9a:	d015      	beq.n	cc8 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     c9c:	8b6b      	ldrh	r3, [r5, #26]
     c9e:	420b      	tst	r3, r1
     ca0:	d05c      	beq.n	d5c <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
     ca2:	7a63      	ldrb	r3, [r4, #9]
     ca4:	2b01      	cmp	r3, #1
     ca6:	d00c      	beq.n	cc2 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     ca8:	0023      	movs	r3, r4
     caa:	221e      	movs	r2, #30
     cac:	3338      	adds	r3, #56	; 0x38
     cae:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     cb0:	2303      	movs	r3, #3
     cb2:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     cb4:	3302      	adds	r3, #2
     cb6:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     cb8:	0733      	lsls	r3, r6, #28
     cba:	d502      	bpl.n	cc2 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     cbc:	0020      	movs	r0, r4
     cbe:	69a3      	ldr	r3, [r4, #24]
     cc0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     cc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cc4:	2304      	movs	r3, #4
     cc6:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     cc8:	2202      	movs	r2, #2
     cca:	4217      	tst	r7, r2
     ccc:	d027      	beq.n	d1e <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     cce:	7963      	ldrb	r3, [r4, #5]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d10e      	bne.n	cf2 <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     cd4:	2107      	movs	r1, #7
     cd6:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     cd8:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     cda:	3201      	adds	r2, #1
     cdc:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
     cde:	0022      	movs	r2, r4
     ce0:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
     ce2:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     ce4:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     ce6:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
     ce8:	06f3      	lsls	r3, r6, #27
     cea:	d502      	bpl.n	cf2 <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     cec:	0020      	movs	r0, r4
     cee:	69e3      	ldr	r3, [r4, #28]
     cf0:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     cf2:	7963      	ldrb	r3, [r4, #5]
     cf4:	2b01      	cmp	r3, #1
     cf6:	d112      	bne.n	d1e <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     cf8:	7a63      	ldrb	r3, [r4, #9]
     cfa:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
     cfc:	2b01      	cmp	r3, #1
     cfe:	d10e      	bne.n	d1e <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     d00:	79e2      	ldrb	r2, [r4, #7]
     d02:	2a00      	cmp	r2, #0
     d04:	d10b      	bne.n	d1e <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     d06:	2102      	movs	r1, #2
     d08:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
     d0a:	3101      	adds	r1, #1
     d0c:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
     d0e:	0021      	movs	r1, r4
     d10:	3138      	adds	r1, #56	; 0x38
     d12:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     d14:	421e      	tst	r6, r3
     d16:	d002      	beq.n	d1e <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     d18:	0020      	movs	r0, r4
     d1a:	68e3      	ldr	r3, [r4, #12]
     d1c:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     d1e:	2308      	movs	r3, #8
     d20:	421f      	tst	r7, r3
     d22:	d009      	beq.n	d38 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
     d24:	7962      	ldrb	r2, [r4, #5]
     d26:	2a00      	cmp	r2, #0
     d28:	d106      	bne.n	d38 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     d2a:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     d2c:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     d2e:	06b3      	lsls	r3, r6, #26
     d30:	d502      	bpl.n	d38 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     d32:	0020      	movs	r0, r4
     d34:	6a23      	ldr	r3, [r4, #32]
     d36:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     d38:	b27f      	sxtb	r7, r7
     d3a:	2f00      	cmp	r7, #0
     d3c:	da07      	bge.n	d4e <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d3e:	2380      	movs	r3, #128	; 0x80
     d40:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     d42:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     d44:	0673      	lsls	r3, r6, #25
     d46:	d502      	bpl.n	d4e <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d4a:	0020      	movs	r0, r4
     d4c:	4798      	blx	r3
		}
	}
#  endif
}
     d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     d50:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
     d52:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     d54:	0200      	lsls	r0, r0, #8
     d56:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     d58:	62e1      	str	r1, [r4, #44]	; 0x2c
     d5a:	e785      	b.n	c68 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
     d5c:	7a62      	ldrb	r2, [r4, #9]
     d5e:	6823      	ldr	r3, [r4, #0]
     d60:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
     d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
     d64:	2a01      	cmp	r2, #1
     d66:	d113      	bne.n	d90 <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
     d68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     d6a:	3b01      	subs	r3, #1
     d6c:	b29b      	uxth	r3, r3
     d6e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     d70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     d72:	b29b      	uxth	r3, r3
     d74:	2b00      	cmp	r3, #0
     d76:	d1a7      	bne.n	cc8 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     d78:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
     d7a:	0021      	movs	r1, r4
     d7c:	3138      	adds	r1, #56	; 0x38
     d7e:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
     d80:	3303      	adds	r3, #3
     d82:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     d84:	4216      	tst	r6, r2
     d86:	d09f      	beq.n	cc8 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     d88:	0020      	movs	r0, r4
     d8a:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     d8c:	4798      	blx	r3
     d8e:	e79b      	b.n	cc8 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     d90:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     d92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     d94:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     d96:	b2da      	uxtb	r2, r3
     d98:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     d9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     d9c:	1c51      	adds	r1, r2, #1
     d9e:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     da0:	79a1      	ldrb	r1, [r4, #6]
     da2:	2901      	cmp	r1, #1
     da4:	d104      	bne.n	db0 <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     da6:	0a1b      	lsrs	r3, r3, #8
     da8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     dac:	3301      	adds	r3, #1
     dae:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
     db0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     db2:	3b01      	subs	r3, #1
     db4:	b29b      	uxth	r3, r3
     db6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     db8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     dba:	b29b      	uxth	r3, r3
     dbc:	2b00      	cmp	r3, #0
     dbe:	d000      	beq.n	dc2 <_spi_interrupt_handler+0x1c2>
     dc0:	e782      	b.n	cc8 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
     dc2:	0022      	movs	r2, r4
     dc4:	3238      	adds	r2, #56	; 0x38
     dc6:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     dc8:	3304      	adds	r3, #4
     dca:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     dcc:	7a62      	ldrb	r2, [r4, #9]
     dce:	2a02      	cmp	r2, #2
     dd0:	d105      	bne.n	dde <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     dd2:	421e      	tst	r6, r3
     dd4:	d100      	bne.n	dd8 <_spi_interrupt_handler+0x1d8>
     dd6:	e777      	b.n	cc8 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     dd8:	0020      	movs	r0, r4
     dda:	6963      	ldr	r3, [r4, #20]
     ddc:	e7d6      	b.n	d8c <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
     dde:	7a63      	ldrb	r3, [r4, #9]
     de0:	2b00      	cmp	r3, #0
     de2:	d000      	beq.n	de6 <_spi_interrupt_handler+0x1e6>
     de4:	e770      	b.n	cc8 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     de6:	07b3      	lsls	r3, r6, #30
     de8:	d400      	bmi.n	dec <_spi_interrupt_handler+0x1ec>
     dea:	e76d      	b.n	cc8 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     dec:	0020      	movs	r0, r4
     dee:	6923      	ldr	r3, [r4, #16]
     df0:	e7cc      	b.n	d8c <_spi_interrupt_handler+0x18c>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	200000a8 	.word	0x200000a8
     df8:	200000a4 	.word	0x200000a4

00000dfc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     dfc:	4770      	bx	lr
	...

00000e00 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e02:	4c09      	ldr	r4, [pc, #36]	; (e28 <_sercom_set_handler+0x28>)
     e04:	4a09      	ldr	r2, [pc, #36]	; (e2c <_sercom_set_handler+0x2c>)
     e06:	7823      	ldrb	r3, [r4, #0]
     e08:	2b00      	cmp	r3, #0
     e0a:	d109      	bne.n	e20 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
     e0c:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e0e:	4f08      	ldr	r7, [pc, #32]	; (e30 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
     e10:	4d08      	ldr	r5, [pc, #32]	; (e34 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e12:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
     e14:	50ee      	str	r6, [r5, r3]
     e16:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e18:	2b18      	cmp	r3, #24
     e1a:	d1fa      	bne.n	e12 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     e1c:	3b17      	subs	r3, #23
     e1e:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e20:	0080      	lsls	r0, r0, #2
     e22:	5011      	str	r1, [r2, r0]
}
     e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	2000002b 	.word	0x2000002b
     e2c:	2000002c 	.word	0x2000002c
     e30:	00000dfd 	.word	0x00000dfd
     e34:	200000a8 	.word	0x200000a8

00000e38 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e38:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e3a:	2309      	movs	r3, #9
     e3c:	466a      	mov	r2, sp
     e3e:	7013      	strb	r3, [r2, #0]
     e40:	3301      	adds	r3, #1
     e42:	7053      	strb	r3, [r2, #1]
     e44:	3301      	adds	r3, #1
     e46:	7093      	strb	r3, [r2, #2]
     e48:	3301      	adds	r3, #1
     e4a:	70d3      	strb	r3, [r2, #3]
     e4c:	3301      	adds	r3, #1
     e4e:	7113      	strb	r3, [r2, #4]
     e50:	3301      	adds	r3, #1
     e52:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e54:	4b02      	ldr	r3, [pc, #8]	; (e60 <_sercom_get_interrupt_vector+0x28>)
     e56:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e58:	466b      	mov	r3, sp
     e5a:	5618      	ldrsb	r0, [r3, r0]
}
     e5c:	bd0e      	pop	{r1, r2, r3, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	0000058d 	.word	0x0000058d

00000e64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e64:	b510      	push	{r4, lr}
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <SERCOM0_Handler+0xc>)
     e68:	2000      	movs	r0, #0
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	4798      	blx	r3
     e6e:	bd10      	pop	{r4, pc}
     e70:	2000002c 	.word	0x2000002c

00000e74 <SERCOM1_Handler>:
     e74:	b510      	push	{r4, lr}
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM1_Handler+0xc>)
     e78:	2001      	movs	r0, #1
     e7a:	685b      	ldr	r3, [r3, #4]
     e7c:	4798      	blx	r3
     e7e:	bd10      	pop	{r4, pc}
     e80:	2000002c 	.word	0x2000002c

00000e84 <SERCOM2_Handler>:
     e84:	b510      	push	{r4, lr}
     e86:	4b02      	ldr	r3, [pc, #8]	; (e90 <SERCOM2_Handler+0xc>)
     e88:	2002      	movs	r0, #2
     e8a:	689b      	ldr	r3, [r3, #8]
     e8c:	4798      	blx	r3
     e8e:	bd10      	pop	{r4, pc}
     e90:	2000002c 	.word	0x2000002c

00000e94 <SERCOM3_Handler>:
     e94:	b510      	push	{r4, lr}
     e96:	4b02      	ldr	r3, [pc, #8]	; (ea0 <SERCOM3_Handler+0xc>)
     e98:	2003      	movs	r0, #3
     e9a:	68db      	ldr	r3, [r3, #12]
     e9c:	4798      	blx	r3
     e9e:	bd10      	pop	{r4, pc}
     ea0:	2000002c 	.word	0x2000002c

00000ea4 <SERCOM4_Handler>:
     ea4:	b510      	push	{r4, lr}
     ea6:	4b02      	ldr	r3, [pc, #8]	; (eb0 <SERCOM4_Handler+0xc>)
     ea8:	2004      	movs	r0, #4
     eaa:	691b      	ldr	r3, [r3, #16]
     eac:	4798      	blx	r3
     eae:	bd10      	pop	{r4, pc}
     eb0:	2000002c 	.word	0x2000002c

00000eb4 <SERCOM5_Handler>:
     eb4:	b510      	push	{r4, lr}
     eb6:	4b02      	ldr	r3, [pc, #8]	; (ec0 <SERCOM5_Handler+0xc>)
     eb8:	2005      	movs	r0, #5
     eba:	695b      	ldr	r3, [r3, #20]
     ebc:	4798      	blx	r3
     ebe:	bd10      	pop	{r4, pc}
     ec0:	2000002c 	.word	0x2000002c

00000ec4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     ec4:	4770      	bx	lr
	...

00000ec8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ec8:	4b09      	ldr	r3, [pc, #36]	; (ef0 <cpu_irq_enter_critical+0x28>)
     eca:	6819      	ldr	r1, [r3, #0]
     ecc:	2900      	cmp	r1, #0
     ece:	d10b      	bne.n	ee8 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ed0:	f3ef 8010 	mrs	r0, PRIMASK
     ed4:	4a07      	ldr	r2, [pc, #28]	; (ef4 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     ed6:	2800      	cmp	r0, #0
     ed8:	d105      	bne.n	ee6 <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     eda:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     edc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ee0:	4905      	ldr	r1, [pc, #20]	; (ef8 <cpu_irq_enter_critical+0x30>)
     ee2:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     ee4:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ee6:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ee8:	681a      	ldr	r2, [r3, #0]
     eea:	3201      	adds	r2, #1
     eec:	601a      	str	r2, [r3, #0]
}
     eee:	4770      	bx	lr
     ef0:	20000044 	.word	0x20000044
     ef4:	20000048 	.word	0x20000048
     ef8:	20000008 	.word	0x20000008

00000efc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     efc:	4b08      	ldr	r3, [pc, #32]	; (f20 <cpu_irq_leave_critical+0x24>)
     efe:	681a      	ldr	r2, [r3, #0]
     f00:	3a01      	subs	r2, #1
     f02:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	2b00      	cmp	r3, #0
     f08:	d109      	bne.n	f1e <cpu_irq_leave_critical+0x22>
     f0a:	4b06      	ldr	r3, [pc, #24]	; (f24 <cpu_irq_leave_critical+0x28>)
     f0c:	781b      	ldrb	r3, [r3, #0]
     f0e:	2b00      	cmp	r3, #0
     f10:	d005      	beq.n	f1e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f12:	2201      	movs	r2, #1
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <cpu_irq_leave_critical+0x2c>)
     f16:	701a      	strb	r2, [r3, #0]
     f18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f1c:	b662      	cpsie	i
	}
}
     f1e:	4770      	bx	lr
     f20:	20000044 	.word	0x20000044
     f24:	20000048 	.word	0x20000048
     f28:	20000008 	.word	0x20000008

00000f2c <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f2c:	2310      	movs	r3, #16
     f2e:	4902      	ldr	r1, [pc, #8]	; (f38 <_system_dfll_wait_for_sync+0xc>)
     f30:	68ca      	ldr	r2, [r1, #12]
     f32:	421a      	tst	r2, r3
     f34:	d0fc      	beq.n	f30 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
     f36:	4770      	bx	lr
     f38:	40000800 	.word	0x40000800

00000f3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f3c:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
     f3e:	2808      	cmp	r0, #8
     f40:	d806      	bhi.n	f50 <system_clock_source_get_hz+0x14>
     f42:	f000 fb93 	bl	166c <__gnu_thumb1_case_uqi>
     f46:	0508      	.short	0x0508
     f48:	122e2e05 	.word	0x122e2e05
     f4c:	150b      	.short	0x150b
     f4e:	26          	.byte	0x26
     f4f:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f50:	2400      	movs	r4, #0
	}
}
     f52:	0020      	movs	r0, r4
     f54:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
     f56:	4b15      	ldr	r3, [pc, #84]	; (fac <system_clock_source_get_hz+0x70>)
     f58:	691c      	ldr	r4, [r3, #16]
     f5a:	e7fa      	b.n	f52 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f5c:	4b14      	ldr	r3, [pc, #80]	; (fb0 <system_clock_source_get_hz+0x74>)
     f5e:	4c15      	ldr	r4, [pc, #84]	; (fb4 <system_clock_source_get_hz+0x78>)
     f60:	6a1b      	ldr	r3, [r3, #32]
     f62:	059b      	lsls	r3, r3, #22
     f64:	0f9b      	lsrs	r3, r3, #30
     f66:	40dc      	lsrs	r4, r3
     f68:	e7f3      	b.n	f52 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
     f6a:	4b10      	ldr	r3, [pc, #64]	; (fac <system_clock_source_get_hz+0x70>)
     f6c:	695c      	ldr	r4, [r3, #20]
     f6e:	e7f0      	b.n	f52 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f70:	4d0e      	ldr	r5, [pc, #56]	; (fac <system_clock_source_get_hz+0x70>)
			return 0;
     f72:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f74:	682b      	ldr	r3, [r5, #0]
     f76:	079b      	lsls	r3, r3, #30
     f78:	d5eb      	bpl.n	f52 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
     f7a:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <system_clock_source_get_hz+0x7c>)
     f7c:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     f7e:	682b      	ldr	r3, [r5, #0]
     f80:	075b      	lsls	r3, r3, #29
     f82:	d511      	bpl.n	fa8 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f84:	0020      	movs	r0, r4
     f86:	4b0d      	ldr	r3, [pc, #52]	; (fbc <system_clock_source_get_hz+0x80>)
     f88:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f8a:	68ac      	ldr	r4, [r5, #8]
     f8c:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f8e:	4344      	muls	r4, r0
     f90:	e7df      	b.n	f52 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f92:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <system_clock_source_get_hz+0x84>)
			return 0;
     f94:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f96:	781b      	ldrb	r3, [r3, #0]
     f98:	075b      	lsls	r3, r3, #29
     f9a:	d5da      	bpl.n	f52 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
     f9c:	4b03      	ldr	r3, [pc, #12]	; (fac <system_clock_source_get_hz+0x70>)
     f9e:	68dc      	ldr	r4, [r3, #12]
     fa0:	e7d7      	b.n	f52 <system_clock_source_get_hz+0x16>
		return 32768UL;
     fa2:	2480      	movs	r4, #128	; 0x80
     fa4:	0224      	lsls	r4, r4, #8
     fa6:	e7d4      	b.n	f52 <system_clock_source_get_hz+0x16>
		return 48000000UL;
     fa8:	4c06      	ldr	r4, [pc, #24]	; (fc4 <system_clock_source_get_hz+0x88>)
     faa:	e7d2      	b.n	f52 <system_clock_source_get_hz+0x16>
     fac:	2000004c 	.word	0x2000004c
     fb0:	40000800 	.word	0x40000800
     fb4:	007a1200 	.word	0x007a1200
     fb8:	00000f2d 	.word	0x00000f2d
     fbc:	00001361 	.word	0x00001361
     fc0:	40000850 	.word	0x40000850
     fc4:	02dc6c00 	.word	0x02dc6c00

00000fc8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fc8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
     fca:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
     fcc:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fce:	7845      	ldrb	r5, [r0, #1]
     fd0:	2001      	movs	r0, #1
     fd2:	2640      	movs	r6, #64	; 0x40
     fd4:	4005      	ands	r5, r0
     fd6:	4020      	ands	r0, r4
     fd8:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fda:	4908      	ldr	r1, [pc, #32]	; (ffc <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
     fdc:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fde:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
     fe0:	01c0      	lsls	r0, r0, #7
     fe2:	43b3      	bics	r3, r6
     fe4:	432b      	orrs	r3, r5
     fe6:	43a3      	bics	r3, r4
     fe8:	4303      	orrs	r3, r0
     fea:	2003      	movs	r0, #3
     fec:	4002      	ands	r2, r0
     fee:	4804      	ldr	r0, [pc, #16]	; (1000 <system_clock_source_osc8m_set_config+0x38>)
     ff0:	0212      	lsls	r2, r2, #8
     ff2:	4003      	ands	r3, r0
     ff4:	4313      	orrs	r3, r2
     ff6:	620b      	str	r3, [r1, #32]
}
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	40000800 	.word	0x40000800
    1000:	fffffcff 	.word	0xfffffcff

00001004 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
    1006:	2808      	cmp	r0, #8
    1008:	d806      	bhi.n	1018 <system_clock_source_enable+0x14>
    100a:	f000 fb2f 	bl	166c <__gnu_thumb1_case_uqi>
    100e:	0514      	.short	0x0514
    1010:	1a0e0c05 	.word	0x1a0e0c05
    1014:	2007      	.short	0x2007
    1016:	34          	.byte	0x34
    1017:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1018:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    101c:	2302      	movs	r3, #2
    101e:	4a19      	ldr	r2, [pc, #100]	; (1084 <system_clock_source_enable+0x80>)
    1020:	6a11      	ldr	r1, [r2, #32]
    1022:	430b      	orrs	r3, r1
    1024:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1026:	2000      	movs	r0, #0
    1028:	e7f7      	b.n	101a <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    102a:	2302      	movs	r3, #2
    102c:	4a15      	ldr	r2, [pc, #84]	; (1084 <system_clock_source_enable+0x80>)
    102e:	6991      	ldr	r1, [r2, #24]
    1030:	430b      	orrs	r3, r1
    1032:	6193      	str	r3, [r2, #24]
    1034:	e7f7      	b.n	1026 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1036:	2302      	movs	r3, #2
    1038:	4a12      	ldr	r2, [pc, #72]	; (1084 <system_clock_source_enable+0x80>)
    103a:	8a11      	ldrh	r1, [r2, #16]
    103c:	430b      	orrs	r3, r1
    103e:	8213      	strh	r3, [r2, #16]
    1040:	e7f1      	b.n	1026 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1042:	2302      	movs	r3, #2
    1044:	4a0f      	ldr	r2, [pc, #60]	; (1084 <system_clock_source_enable+0x80>)
    1046:	8a91      	ldrh	r1, [r2, #20]
    1048:	430b      	orrs	r3, r1
    104a:	8293      	strh	r3, [r2, #20]
    104c:	e7eb      	b.n	1026 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    104e:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    1050:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1052:	4e0d      	ldr	r6, [pc, #52]	; (1088 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1054:	4d0b      	ldr	r5, [pc, #44]	; (1084 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1056:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
    1058:	4f0c      	ldr	r7, [pc, #48]	; (108c <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    105a:	4313      	orrs	r3, r2
    105c:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    105e:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1060:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1062:	68b3      	ldr	r3, [r6, #8]
    1064:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1066:	6873      	ldr	r3, [r6, #4]
    1068:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    106a:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    106c:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    106e:	6833      	ldr	r3, [r6, #0]
    1070:	b29b      	uxth	r3, r3
    1072:	84ab      	strh	r3, [r5, #36]	; 0x24
    1074:	e7d7      	b.n	1026 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1076:	2302      	movs	r3, #2
    1078:	4a05      	ldr	r2, [pc, #20]	; (1090 <system_clock_source_enable+0x8c>)
    107a:	7811      	ldrb	r1, [r2, #0]
    107c:	430b      	orrs	r3, r1
    107e:	7013      	strb	r3, [r2, #0]
    1080:	e7d1      	b.n	1026 <system_clock_source_enable+0x22>
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	40000800 	.word	0x40000800
    1088:	2000004c 	.word	0x2000004c
    108c:	00000f2d 	.word	0x00000f2d
    1090:	40000844 	.word	0x40000844

00001094 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1094:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1096:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1098:	211e      	movs	r1, #30
    109a:	4b19      	ldr	r3, [pc, #100]	; (1100 <system_clock_init+0x6c>)
    109c:	00d2      	lsls	r2, r2, #3
    109e:	609a      	str	r2, [r3, #8]
    10a0:	4a18      	ldr	r2, [pc, #96]	; (1104 <system_clock_init+0x70>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10a2:	2400      	movs	r4, #0
    10a4:	6853      	ldr	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    10a6:	ad01      	add	r5, sp, #4
    10a8:	438b      	bics	r3, r1
    10aa:	6053      	str	r3, [r2, #4]
    10ac:	2301      	movs	r3, #1
    10ae:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10b0:	b2e0      	uxtb	r0, r4
    10b2:	0029      	movs	r1, r5
    10b4:	4b14      	ldr	r3, [pc, #80]	; (1108 <system_clock_init+0x74>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10b6:	3401      	adds	r4, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10b8:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10ba:	2c25      	cmp	r4, #37	; 0x25
    10bc:	d1f8      	bne.n	10b0 <system_clock_init+0x1c>
	config->run_in_standby  = false;
    10be:	2400      	movs	r4, #0
    10c0:	466b      	mov	r3, sp
	config->on_demand       = true;
    10c2:	2601      	movs	r6, #1
	config->run_in_standby  = false;
    10c4:	705c      	strb	r4, [r3, #1]
	config->on_demand       = true;
    10c6:	709e      	strb	r6, [r3, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10c8:	701c      	strb	r4, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10ca:	4668      	mov	r0, sp
    10cc:	4b0f      	ldr	r3, [pc, #60]	; (110c <system_clock_init+0x78>)
    10ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10d0:	4b0f      	ldr	r3, [pc, #60]	; (1110 <system_clock_init+0x7c>)
    10d2:	2006      	movs	r0, #6
    10d4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10d6:	4b0f      	ldr	r3, [pc, #60]	; (1114 <system_clock_init+0x80>)
    10d8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    10da:	4b0f      	ldr	r3, [pc, #60]	; (1118 <system_clock_init+0x84>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    10dc:	0029      	movs	r1, r5
    10de:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    10e0:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    10e2:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    10e4:	72dc      	strb	r4, [r3, #11]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10e6:	2306      	movs	r3, #6
    10e8:	0020      	movs	r0, r4
    10ea:	702b      	strb	r3, [r5, #0]
    10ec:	4b0b      	ldr	r3, [pc, #44]	; (111c <system_clock_init+0x88>)
	config->division_factor    = 1;
    10ee:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    10f0:	706c      	strb	r4, [r5, #1]
#endif
	config->run_in_standby     = false;
    10f2:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    10f4:	726c      	strb	r4, [r5, #9]
    10f6:	4798      	blx	r3
    10f8:	0020      	movs	r0, r4
    10fa:	4b09      	ldr	r3, [pc, #36]	; (1120 <system_clock_init+0x8c>)
    10fc:	4798      	blx	r3
#endif
}
    10fe:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1100:	40000800 	.word	0x40000800
    1104:	41004000 	.word	0x41004000
    1108:	00001345 	.word	0x00001345
    110c:	00000fc9 	.word	0x00000fc9
    1110:	00001005 	.word	0x00001005
    1114:	00001131 	.word	0x00001131
    1118:	40000400 	.word	0x40000400
    111c:	00001151 	.word	0x00001151
    1120:	000011f5 	.word	0x000011f5

00001124 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1124:	4b01      	ldr	r3, [pc, #4]	; (112c <system_gclk_is_syncing+0x8>)
    1126:	7858      	ldrb	r0, [r3, #1]
    1128:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    112a:	4770      	bx	lr
    112c:	40000c00 	.word	0x40000c00

00001130 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1130:	2308      	movs	r3, #8
    1132:	4a05      	ldr	r2, [pc, #20]	; (1148 <system_gclk_init+0x18>)
    1134:	6991      	ldr	r1, [r2, #24]
    1136:	430b      	orrs	r3, r1
    1138:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    113a:	2301      	movs	r3, #1
    113c:	4a03      	ldr	r2, [pc, #12]	; (114c <system_gclk_init+0x1c>)
    113e:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1140:	7811      	ldrb	r1, [r2, #0]
    1142:	4219      	tst	r1, r3
    1144:	d1fc      	bne.n	1140 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1146:	4770      	bx	lr
    1148:	40000400 	.word	0x40000400
    114c:	40000c00 	.word	0x40000c00

00001150 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1152:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1154:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1156:	0224      	lsls	r4, r4, #8
{
    1158:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    115a:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    115c:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    115e:	2b00      	cmp	r3, #0
    1160:	d002      	beq.n	1168 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1162:	2380      	movs	r3, #128	; 0x80
    1164:	02db      	lsls	r3, r3, #11
    1166:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1168:	7a4b      	ldrb	r3, [r1, #9]
    116a:	2b00      	cmp	r3, #0
    116c:	d002      	beq.n	1174 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    116e:	2380      	movs	r3, #128	; 0x80
    1170:	031b      	lsls	r3, r3, #12
    1172:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1174:	684b      	ldr	r3, [r1, #4]
    1176:	2b01      	cmp	r3, #1
    1178:	d912      	bls.n	11a0 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    117a:	1e5d      	subs	r5, r3, #1
    117c:	401d      	ands	r5, r3
    117e:	2202      	movs	r2, #2
    1180:	2d00      	cmp	r5, #0
    1182:	d006      	beq.n	1192 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1184:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1186:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    1188:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    118a:	029b      	lsls	r3, r3, #10
    118c:	e007      	b.n	119e <system_gclk_gen_set_config+0x4e>
				div2_count++;
    118e:	3501      	adds	r5, #1
						mask <<= 1) {
    1190:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1192:	429a      	cmp	r2, r3
    1194:	d3fb      	bcc.n	118e <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1196:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1198:	022d      	lsls	r5, r5, #8
    119a:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    119c:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    119e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11a0:	7a0b      	ldrb	r3, [r1, #8]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d002      	beq.n	11ac <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11a6:	2380      	movs	r3, #128	; 0x80
    11a8:	039b      	lsls	r3, r3, #14
    11aa:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    11ac:	4f0c      	ldr	r7, [pc, #48]	; (11e0 <system_gclk_gen_set_config+0x90>)
    11ae:	47b8      	blx	r7
    11b0:	2800      	cmp	r0, #0
    11b2:	d1fb      	bne.n	11ac <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    11b4:	4b0b      	ldr	r3, [pc, #44]	; (11e4 <system_gclk_gen_set_config+0x94>)
    11b6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11b8:	4b0b      	ldr	r3, [pc, #44]	; (11e8 <system_gclk_gen_set_config+0x98>)
    11ba:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11bc:	47b8      	blx	r7
    11be:	2800      	cmp	r0, #0
    11c0:	d1fc      	bne.n	11bc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11c2:	4b0a      	ldr	r3, [pc, #40]	; (11ec <system_gclk_gen_set_config+0x9c>)
    11c4:	609d      	str	r5, [r3, #8]
    11c6:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    11c8:	47b8      	blx	r7
    11ca:	2800      	cmp	r0, #0
    11cc:	d1fc      	bne.n	11c8 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	686b      	ldr	r3, [r5, #4]
    11d2:	0252      	lsls	r2, r2, #9
    11d4:	4013      	ands	r3, r2
    11d6:	431c      	orrs	r4, r3
    11d8:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    11da:	4b05      	ldr	r3, [pc, #20]	; (11f0 <system_gclk_gen_set_config+0xa0>)
    11dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11e0:	00001125 	.word	0x00001125
    11e4:	00000ec9 	.word	0x00000ec9
    11e8:	40000c08 	.word	0x40000c08
    11ec:	40000c00 	.word	0x40000c00
    11f0:	00000efd 	.word	0x00000efd

000011f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
    11f6:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    11f8:	4c09      	ldr	r4, [pc, #36]	; (1220 <system_gclk_gen_enable+0x2c>)
    11fa:	47a0      	blx	r4
    11fc:	2800      	cmp	r0, #0
    11fe:	d1fb      	bne.n	11f8 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1200:	4b08      	ldr	r3, [pc, #32]	; (1224 <system_gclk_gen_enable+0x30>)
    1202:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1204:	4b08      	ldr	r3, [pc, #32]	; (1228 <system_gclk_gen_enable+0x34>)
    1206:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    1208:	47a0      	blx	r4
    120a:	2800      	cmp	r0, #0
    120c:	d1fc      	bne.n	1208 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    120e:	2380      	movs	r3, #128	; 0x80
    1210:	4a06      	ldr	r2, [pc, #24]	; (122c <system_gclk_gen_enable+0x38>)
    1212:	025b      	lsls	r3, r3, #9
    1214:	6851      	ldr	r1, [r2, #4]
    1216:	430b      	orrs	r3, r1
    1218:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <system_gclk_gen_enable+0x3c>)
    121c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    121e:	bd70      	pop	{r4, r5, r6, pc}
    1220:	00001125 	.word	0x00001125
    1224:	00000ec9 	.word	0x00000ec9
    1228:	40000c04 	.word	0x40000c04
    122c:	40000c00 	.word	0x40000c00
    1230:	00000efd 	.word	0x00000efd

00001234 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1236:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1238:	4e18      	ldr	r6, [pc, #96]	; (129c <system_gclk_gen_get_hz+0x68>)
    123a:	47b0      	blx	r6
    123c:	2800      	cmp	r0, #0
    123e:	d1fb      	bne.n	1238 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1240:	4b17      	ldr	r3, [pc, #92]	; (12a0 <system_gclk_gen_get_hz+0x6c>)
    1242:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1244:	4b17      	ldr	r3, [pc, #92]	; (12a4 <system_gclk_gen_get_hz+0x70>)
    1246:	701f      	strb	r7, [r3, #0]
    1248:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    124a:	47b0      	blx	r6
    124c:	2800      	cmp	r0, #0
    124e:	d1fc      	bne.n	124a <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1250:	4d15      	ldr	r5, [pc, #84]	; (12a8 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1252:	4b16      	ldr	r3, [pc, #88]	; (12ac <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1254:	6868      	ldr	r0, [r5, #4]
    1256:	04c0      	lsls	r0, r0, #19
    1258:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    125a:	4798      	blx	r3
    125c:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    125e:	9b01      	ldr	r3, [sp, #4]
    1260:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1262:	686b      	ldr	r3, [r5, #4]
    1264:	02db      	lsls	r3, r3, #11
    1266:	0fdb      	lsrs	r3, r3, #31
    1268:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    126a:	4b11      	ldr	r3, [pc, #68]	; (12b0 <system_gclk_gen_get_hz+0x7c>)
    126c:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    126e:	47b0      	blx	r6
    1270:	2800      	cmp	r0, #0
    1272:	d1fc      	bne.n	126e <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1274:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    1276:	4b0f      	ldr	r3, [pc, #60]	; (12b4 <system_gclk_gen_get_hz+0x80>)
    1278:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    127a:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    127c:	022d      	lsls	r5, r5, #8
    127e:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    1280:	2b00      	cmp	r3, #0
    1282:	d108      	bne.n	1296 <system_gclk_gen_get_hz+0x62>
    1284:	2d01      	cmp	r5, #1
    1286:	d904      	bls.n	1292 <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    1288:	0020      	movs	r0, r4
    128a:	0029      	movs	r1, r5
    128c:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <system_gclk_gen_get_hz+0x84>)
    128e:	4798      	blx	r3
    1290:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    1292:	0020      	movs	r0, r4
    1294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1296:	3501      	adds	r5, #1
    1298:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    129a:	e7fa      	b.n	1292 <system_gclk_gen_get_hz+0x5e>
    129c:	00001125 	.word	0x00001125
    12a0:	00000ec9 	.word	0x00000ec9
    12a4:	40000c04 	.word	0x40000c04
    12a8:	40000c00 	.word	0x40000c00
    12ac:	00000f3d 	.word	0x00000f3d
    12b0:	40000c08 	.word	0x40000c08
    12b4:	00000efd 	.word	0x00000efd
    12b8:	00001681 	.word	0x00001681

000012bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    12bc:	b510      	push	{r4, lr}
    12be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <system_gclk_chan_enable+0x20>)
    12c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12c4:	4b06      	ldr	r3, [pc, #24]	; (12e0 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12c6:	4a07      	ldr	r2, [pc, #28]	; (12e4 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12c8:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12ca:	2380      	movs	r3, #128	; 0x80
    12cc:	8851      	ldrh	r1, [r2, #2]
    12ce:	01db      	lsls	r3, r3, #7
    12d0:	430b      	orrs	r3, r1
    12d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    12d4:	4b04      	ldr	r3, [pc, #16]	; (12e8 <system_gclk_chan_enable+0x2c>)
    12d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12d8:	bd10      	pop	{r4, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00000ec9 	.word	0x00000ec9
    12e0:	40000c02 	.word	0x40000c02
    12e4:	40000c00 	.word	0x40000c00
    12e8:	00000efd 	.word	0x00000efd

000012ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    12ec:	b510      	push	{r4, lr}
    12ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12f0:	4b0e      	ldr	r3, [pc, #56]	; (132c <system_gclk_chan_disable+0x40>)
    12f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12f4:	4b0e      	ldr	r3, [pc, #56]	; (1330 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    12f6:	4a0f      	ldr	r2, [pc, #60]	; (1334 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12f8:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12fa:	4b0f      	ldr	r3, [pc, #60]	; (1338 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12fc:	4c0f      	ldr	r4, [pc, #60]	; (133c <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12fe:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1300:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1302:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1304:	4011      	ands	r1, r2
    1306:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1308:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    130a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    130c:	4021      	ands	r1, r4
    130e:	8059      	strh	r1, [r3, #2]
    1310:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	01d2      	lsls	r2, r2, #7
    1316:	885c      	ldrh	r4, [r3, #2]
    1318:	4214      	tst	r4, r2
    131a:	d1fc      	bne.n	1316 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    131c:	885a      	ldrh	r2, [r3, #2]
    131e:	0200      	lsls	r0, r0, #8
    1320:	400a      	ands	r2, r1
    1322:	4302      	orrs	r2, r0
    1324:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1326:	4b06      	ldr	r3, [pc, #24]	; (1340 <system_gclk_chan_disable+0x54>)
    1328:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    132a:	bd10      	pop	{r4, pc}
    132c:	00000ec9 	.word	0x00000ec9
    1330:	40000c02 	.word	0x40000c02
    1334:	fffff0ff 	.word	0xfffff0ff
    1338:	40000c00 	.word	0x40000c00
    133c:	ffffbfff 	.word	0xffffbfff
    1340:	00000efd 	.word	0x00000efd

00001344 <system_gclk_chan_set_config>:
{
    1344:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1346:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    1348:	4b03      	ldr	r3, [pc, #12]	; (1358 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    134a:	0224      	lsls	r4, r4, #8
    134c:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    134e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1350:	4b02      	ldr	r3, [pc, #8]	; (135c <system_gclk_chan_set_config+0x18>)
    1352:	b2a4      	uxth	r4, r4
    1354:	805c      	strh	r4, [r3, #2]
}
    1356:	bd10      	pop	{r4, pc}
    1358:	000012ed 	.word	0x000012ed
    135c:	40000c00 	.word	0x40000c00

00001360 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1360:	b510      	push	{r4, lr}
    1362:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1364:	4b06      	ldr	r3, [pc, #24]	; (1380 <system_gclk_chan_get_hz+0x20>)
    1366:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <system_gclk_chan_get_hz+0x24>)
    136a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <system_gclk_chan_get_hz+0x28>)
    136e:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1370:	4b06      	ldr	r3, [pc, #24]	; (138c <system_gclk_chan_get_hz+0x2c>)
    1372:	0524      	lsls	r4, r4, #20
    1374:	0f24      	lsrs	r4, r4, #28
    1376:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1378:	0020      	movs	r0, r4
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <system_gclk_chan_get_hz+0x30>)
    137c:	4798      	blx	r3
}
    137e:	bd10      	pop	{r4, pc}
    1380:	00000ec9 	.word	0x00000ec9
    1384:	40000c02 	.word	0x40000c02
    1388:	40000c00 	.word	0x40000c00
    138c:	00000efd 	.word	0x00000efd
    1390:	00001235 	.word	0x00001235

00001394 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1394:	78d3      	ldrb	r3, [r2, #3]
{
    1396:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1398:	2b00      	cmp	r3, #0
    139a:	d135      	bne.n	1408 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    139c:	7814      	ldrb	r4, [r2, #0]
    139e:	2c80      	cmp	r4, #128	; 0x80
    13a0:	d003      	beq.n	13aa <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13a2:	2380      	movs	r3, #128	; 0x80
    13a4:	0624      	lsls	r4, r4, #24
    13a6:	025b      	lsls	r3, r3, #9
    13a8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13aa:	2502      	movs	r5, #2
    13ac:	7854      	ldrb	r4, [r2, #1]
    13ae:	43ac      	bics	r4, r5
    13b0:	d106      	bne.n	13c0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    13b2:	7894      	ldrb	r4, [r2, #2]
    13b4:	2c00      	cmp	r4, #0
    13b6:	d124      	bne.n	1402 <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    13b8:	2480      	movs	r4, #128	; 0x80
    13ba:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13bc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    13be:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13c0:	7854      	ldrb	r4, [r2, #1]
    13c2:	3c01      	subs	r4, #1
    13c4:	2c01      	cmp	r4, #1
    13c6:	d801      	bhi.n	13cc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13c8:	4c12      	ldr	r4, [pc, #72]	; (1414 <_system_pinmux_config+0x80>)
    13ca:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13cc:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13ce:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13d0:	05e4      	lsls	r4, r4, #23
    13d2:	432c      	orrs	r4, r5
    13d4:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13d6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13d8:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13da:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13dc:	0624      	lsls	r4, r4, #24
    13de:	432c      	orrs	r4, r5
    13e0:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13e2:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    13e4:	78d4      	ldrb	r4, [r2, #3]
    13e6:	2c00      	cmp	r4, #0
    13e8:	d10a      	bne.n	1400 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    13ea:	035b      	lsls	r3, r3, #13
    13ec:	d503      	bpl.n	13f6 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    13ee:	7893      	ldrb	r3, [r2, #2]
    13f0:	2b01      	cmp	r3, #1
    13f2:	d10c      	bne.n	140e <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    13f4:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13f6:	7853      	ldrb	r3, [r2, #1]
    13f8:	3b01      	subs	r3, #1
    13fa:	2b01      	cmp	r3, #1
    13fc:	d800      	bhi.n	1400 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    13fe:	6081      	str	r1, [r0, #8]
		}
	}
}
    1400:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1402:	24c0      	movs	r4, #192	; 0xc0
    1404:	02e4      	lsls	r4, r4, #11
    1406:	e7d9      	b.n	13bc <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1408:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    140a:	2300      	movs	r3, #0
    140c:	e7de      	b.n	13cc <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    140e:	6141      	str	r1, [r0, #20]
    1410:	e7f1      	b.n	13f6 <_system_pinmux_config+0x62>
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	fffbffff 	.word	0xfffbffff

00001418 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1418:	b510      	push	{r4, lr}
    141a:	0003      	movs	r3, r0
    141c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    141e:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    1420:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1422:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1424:	4281      	cmp	r1, r0
    1426:	d102      	bne.n	142e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1428:	4904      	ldr	r1, [pc, #16]	; (143c <system_pinmux_pin_set_config+0x24>)
    142a:	01e0      	lsls	r0, r4, #7
    142c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    142e:	211f      	movs	r1, #31
    1430:	400b      	ands	r3, r1
    1432:	391e      	subs	r1, #30
    1434:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1436:	4b02      	ldr	r3, [pc, #8]	; (1440 <system_pinmux_pin_set_config+0x28>)
    1438:	4798      	blx	r3
}
    143a:	bd10      	pop	{r4, pc}
    143c:	41004400 	.word	0x41004400
    1440:	00001395 	.word	0x00001395

00001444 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1444:	4770      	bx	lr
	...

00001448 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1448:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_init+0x18>)
    144c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <system_init+0x1c>)
    1450:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <system_init+0x20>)
    1454:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1456:	4b05      	ldr	r3, [pc, #20]	; (146c <system_init+0x24>)
    1458:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    145a:	4b05      	ldr	r3, [pc, #20]	; (1470 <system_init+0x28>)
    145c:	4798      	blx	r3
}
    145e:	bd10      	pop	{r4, pc}
    1460:	00001095 	.word	0x00001095
    1464:	00000ec5 	.word	0x00000ec5
    1468:	00001445 	.word	0x00001445
    146c:	00001445 	.word	0x00001445
    1470:	00001445 	.word	0x00001445

00001474 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1474:	e7fe      	b.n	1474 <Dummy_Handler>
	...

00001478 <Reset_Handler>:
        if (pSrc != pDest) {
    1478:	4821      	ldr	r0, [pc, #132]	; (1500 <Reset_Handler+0x88>)
    147a:	4922      	ldr	r1, [pc, #136]	; (1504 <Reset_Handler+0x8c>)
{
    147c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    147e:	4288      	cmp	r0, r1
    1480:	d004      	beq.n	148c <Reset_Handler+0x14>
    1482:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1484:	4c20      	ldr	r4, [pc, #128]	; (1508 <Reset_Handler+0x90>)
    1486:	18ca      	adds	r2, r1, r3
    1488:	42a2      	cmp	r2, r4
    148a:	d332      	bcc.n	14f2 <Reset_Handler+0x7a>
                *pDest++ = 0;
    148c:	2100      	movs	r1, #0
    148e:	4b1f      	ldr	r3, [pc, #124]	; (150c <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1490:	4a1f      	ldr	r2, [pc, #124]	; (1510 <Reset_Handler+0x98>)
    1492:	4293      	cmp	r3, r2
    1494:	d331      	bcc.n	14fa <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1496:	21ff      	movs	r1, #255	; 0xff
    1498:	4b1e      	ldr	r3, [pc, #120]	; (1514 <Reset_Handler+0x9c>)
    149a:	4a1f      	ldr	r2, [pc, #124]	; (1518 <Reset_Handler+0xa0>)
    149c:	438b      	bics	r3, r1
    149e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14a0:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14a2:	250c      	movs	r5, #12
    14a4:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    14a6:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14a8:	4b1c      	ldr	r3, [pc, #112]	; (151c <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14aa:	481d      	ldr	r0, [pc, #116]	; (1520 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14ac:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14ae:	78c3      	ldrb	r3, [r0, #3]
    14b0:	39fc      	subs	r1, #252	; 0xfc
    14b2:	438b      	bics	r3, r1
    14b4:	4313      	orrs	r3, r2
    14b6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14b8:	78c3      	ldrb	r3, [r0, #3]
    14ba:	43ab      	bics	r3, r5
    14bc:	4323      	orrs	r3, r4
    14be:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14c0:	4b18      	ldr	r3, [pc, #96]	; (1524 <Reset_Handler+0xac>)
    14c2:	7b98      	ldrb	r0, [r3, #14]
    14c4:	43b0      	bics	r0, r6
    14c6:	0006      	movs	r6, r0
    14c8:	2020      	movs	r0, #32
    14ca:	4330      	orrs	r0, r6
    14cc:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14ce:	7b98      	ldrb	r0, [r3, #14]
    14d0:	43a8      	bics	r0, r5
    14d2:	4304      	orrs	r4, r0
    14d4:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14d6:	7b98      	ldrb	r0, [r3, #14]
    14d8:	4388      	bics	r0, r1
    14da:	4302      	orrs	r2, r0
    14dc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	4a11      	ldr	r2, [pc, #68]	; (1528 <Reset_Handler+0xb0>)
    14e2:	6851      	ldr	r1, [r2, #4]
    14e4:	430b      	orrs	r3, r1
    14e6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    14e8:	4b10      	ldr	r3, [pc, #64]	; (152c <Reset_Handler+0xb4>)
    14ea:	4798      	blx	r3
        main();
    14ec:	4b10      	ldr	r3, [pc, #64]	; (1530 <Reset_Handler+0xb8>)
    14ee:	4798      	blx	r3
    14f0:	e7fe      	b.n	14f0 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    14f2:	58c5      	ldr	r5, [r0, r3]
    14f4:	3304      	adds	r3, #4
    14f6:	6015      	str	r5, [r2, #0]
    14f8:	e7c5      	b.n	1486 <Reset_Handler+0xe>
                *pDest++ = 0;
    14fa:	c302      	stmia	r3!, {r1}
    14fc:	e7c9      	b.n	1492 <Reset_Handler+0x1a>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	00001828 	.word	0x00001828
    1504:	20000000 	.word	0x20000000
    1508:	2000000c 	.word	0x2000000c
    150c:	2000000c 	.word	0x2000000c
    1510:	200000c0 	.word	0x200000c0
    1514:	00000000 	.word	0x00000000
    1518:	e000ed00 	.word	0xe000ed00
    151c:	410070fc 	.word	0x410070fc
    1520:	41005000 	.word	0x41005000
    1524:	41004800 	.word	0x41004800
    1528:	41004000 	.word	0x41004000
    152c:	00001799 	.word	0x00001799
    1530:	00001661 	.word	0x00001661

00001534 <conf_port_pin>:
	config->direction  = PORT_PIN_DIR_INPUT;
    1534:	2300      	movs	r3, #0
 * Parameters       : void
 * Return Values(s) : void
 * Description      : Configures the GPIO pins.
 */
void conf_port_pin(void)
{
    1536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1538:	ac01      	add	r4, sp, #4
	config->input_pull = PORT_PIN_PULL_UP;
    153a:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    153c:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    153e:	2300      	movs	r3, #0
	
	/**************config pin for 245*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS245, &config_port_pin);
    1540:	4d20      	ldr	r5, [pc, #128]	; (15c4 <conf_port_pin+0x90>)
    1542:	0021      	movs	r1, r4
    1544:	200b      	movs	r0, #11
    1546:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1548:	7067      	strb	r7, [r4, #1]
    154a:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS245, &config_port_pin);
    154c:	0021      	movs	r1, r4
    154e:	200a      	movs	r0, #10
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1550:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS245, &config_port_pin);
    1552:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    1554:	2380      	movs	r3, #128	; 0x80
    1556:	4e1c      	ldr	r6, [pc, #112]	; (15c8 <conf_port_pin+0x94>)
    1558:	00db      	lsls	r3, r3, #3
    155a:	61b3      	str	r3, [r6, #24]
	port_pin_set_output_level(RTS245, true);
    
    // paen
	port_pin_set_config(PAEN245, &config_port_pin);
    155c:	0021      	movs	r1, r4
    155e:	2005      	movs	r0, #5
    1560:	47a8      	blx	r5
    1562:	2320      	movs	r3, #32
    port_pin_set_output_level(PAEN245, true);
    
	// config
	port_pin_set_config(CONFIG245, &config_port_pin);
    1564:	0021      	movs	r1, r4
    1566:	61b3      	str	r3, [r6, #24]
    1568:	2006      	movs	r0, #6
    156a:	47a8      	blx	r5
    156c:	2340      	movs	r3, #64	; 0x40
    port_pin_set_output_level(CONFIG245, true);
    
	// reset
	port_pin_set_config(RESET245, &config_port_pin);
    156e:	0021      	movs	r1, r4
    1570:	61b3      	str	r3, [r6, #24]
    1572:	2007      	movs	r0, #7
    1574:	47a8      	blx	r5
    1576:	2380      	movs	r3, #128	; 0x80
    1578:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(RESET245, true);
	
    
	/**************config pin for 915*************/
	// cts
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    157a:	2300      	movs	r3, #0
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(CTS915, &config_port_pin);
    157c:	0021      	movs	r1, r4
    157e:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1580:	7023      	strb	r3, [r4, #0]
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1582:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CTS915, &config_port_pin);
    1584:	47a8      	blx	r5
    
	// rts
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(RTS915, &config_port_pin);
    1586:	0021      	movs	r1, r4
    1588:	2002      	movs	r0, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    158a:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(RTS915, &config_port_pin);
    158c:	47a8      	blx	r5
    158e:	2304      	movs	r3, #4
    
	// wake
	// Wake up from low power modes on rising edge
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
	port_pin_set_config(WAKE915, &config_port_pin);
    1590:	0021      	movs	r1, r4
    1592:	61b3      	str	r3, [r6, #24]
    1594:	202f      	movs	r0, #47	; 0x2f
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1596:	3b02      	subs	r3, #2
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1598:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    159a:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(WAKE915, &config_port_pin);
    159c:	47a8      	blx	r5
    159e:	0033      	movs	r3, r6
    15a0:	2280      	movs	r2, #128	; 0x80
    15a2:	3398      	adds	r3, #152	; 0x98
    15a4:	0212      	lsls	r2, r2, #8
    15a6:	601a      	str	r2, [r3, #0]
    
	/**************config pin for 169*************/
	// ss (cs)
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SS169, &config_port_pin);
    15a8:	0021      	movs	r1, r4
    15aa:	2011      	movs	r0, #17
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    15ac:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
    15ae:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(SS169, &config_port_pin);
    15b0:	47a8      	blx	r5
    15b2:	2380      	movs	r3, #128	; 0x80
    15b4:	029b      	lsls	r3, r3, #10
    15b6:	61b3      	str	r3, [r6, #24]
    port_pin_set_output_level(SS169, true);
    
	// irq
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    15b8:	2300      	movs	r3, #0
	port_pin_set_config(IRQ169, &config_port_pin);
    15ba:	0021      	movs	r1, r4
    15bc:	2030      	movs	r0, #48	; 0x30
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    15be:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(IRQ169, &config_port_pin);
    15c0:	47a8      	blx	r5
} // end conf_port_pin(void)
    15c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15c4:	000003a5 	.word	0x000003a5
    15c8:	41004400 	.word	0x41004400

000015cc <clk_osc8m_init>:

	/*config the 8 MHz oscillator
	divide by 1 = 8 MHz clock
	run on demand
	don't run in standby*/
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    15cc:	2300      	movs	r3, #0
{
    15ce:	b507      	push	{r0, r1, r2, lr}
	osc8_config.on_demand = true;
    15d0:	2201      	movs	r2, #1
	osc8_config.prescaler = SYSTEM_OSC8M_DIV_1;
    15d2:	a801      	add	r0, sp, #4
    15d4:	7003      	strb	r3, [r0, #0]
	osc8_config.run_in_standby = false;
    15d6:	7043      	strb	r3, [r0, #1]
	
	//set the 8MHz internal oscillator config
	system_clock_source_osc8m_set_config(&osc8_config);
    15d8:	4b01      	ldr	r3, [pc, #4]	; (15e0 <clk_osc8m_init+0x14>)
	osc8_config.on_demand = true;
    15da:	7082      	strb	r2, [r0, #2]
	system_clock_source_osc8m_set_config(&osc8_config);
    15dc:	4798      	blx	r3
}
    15de:	bd07      	pop	{r0, r1, r2, pc}
    15e0:	00000fc9 	.word	0x00000fc9

000015e4 <clk_gclk0_init>:
 * Return Values(s) : void
 * Description      : Initializes Generic Clock0, which is used to supply
 *  internal MCU peripherals with a regulated clock.
 */
void clk_gclk0_init(void)
{
    15e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PM->CPUSEL.reg = (uint32_t)divider;
    15e6:	2400      	movs	r4, #0
	struct system_gclk_gen_config gclk0_config;
    
    // init MCLK
	system_gclk_init();
    15e8:	4b09      	ldr	r3, [pc, #36]	; (1610 <clk_gclk0_init+0x2c>)
    15ea:	4798      	blx	r3
    15ec:	4b09      	ldr	r3, [pc, #36]	; (1614 <clk_gclk0_init+0x30>)
	
	// set CPU clock division factor to 1 = 8 MHz CPU
	system_cpu_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_1);
	
	// use the 8 MHz source
	gclk0_config.source_clock = SYSTEM_CLOCK_SOURCE_OSC8M;
    15ee:	a901      	add	r1, sp, #4
    15f0:	721c      	strb	r4, [r3, #8]
    15f2:	2306      	movs	r3, #6
    15f4:	700b      	strb	r3, [r1, #0]
    // don't output it to a pin (requires additional config)
	gclk0_config.output_enable = false;
    // we're not outputting it to a pin, so don't need to set it high when disabled
	gclk0_config.high_when_disabled = false;
    // division factor of 1, we're already at 8 MHz
	gclk0_config.division_factor = 1;
    15f6:	3b05      	subs	r3, #5
    15f8:	604b      	str	r3, [r1, #4]
    // don't run in standby
	gclk0_config.run_in_standby = false;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    15fa:	0020      	movs	r0, r4
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <clk_gclk0_init+0x34>)
	gclk0_config.output_enable = false;
    15fe:	724c      	strb	r4, [r1, #9]
	gclk0_config.high_when_disabled = false;
    1600:	704c      	strb	r4, [r1, #1]
	gclk0_config.run_in_standby = false;
    1602:	720c      	strb	r4, [r1, #8]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk0_config);
    1604:	4798      	blx	r3
	
	//enable GCLK0
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    1606:	0020      	movs	r0, r4
    1608:	4b04      	ldr	r3, [pc, #16]	; (161c <clk_gclk0_init+0x38>)
    160a:	4798      	blx	r3
}
    160c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	00001131 	.word	0x00001131
    1614:	40000400 	.word	0x40000400
    1618:	00001151 	.word	0x00001151
    161c:	000011f5 	.word	0x000011f5

00001620 <sys_clk_init>:
{
    1620:	b510      	push	{r4, lr}
	clk_osc8m_init();
    1622:	4b03      	ldr	r3, [pc, #12]	; (1630 <sys_clk_init+0x10>)
    1624:	4798      	blx	r3
	clk_gclk0_init();
    1626:	4b03      	ldr	r3, [pc, #12]	; (1634 <sys_clk_init+0x14>)
    1628:	4798      	blx	r3
    delay_init();
    162a:	4b03      	ldr	r3, [pc, #12]	; (1638 <sys_clk_init+0x18>)
    162c:	4798      	blx	r3
}
    162e:	bd10      	pop	{r4, pc}
    1630:	000015cd 	.word	0x000015cd
    1634:	000015e5 	.word	0x000015e5
    1638:	00000339 	.word	0x00000339

0000163c <simSysInit>:
{
    163c:	b510      	push	{r4, lr}
	system_init();
    163e:	4b04      	ldr	r3, [pc, #16]	; (1650 <simSysInit+0x14>)
    1640:	4798      	blx	r3
	sys_clk_init();
    1642:	4b04      	ldr	r3, [pc, #16]	; (1654 <simSysInit+0x18>)
    1644:	4798      	blx	r3
	conf_port_pin();
    1646:	4b04      	ldr	r3, [pc, #16]	; (1658 <simSysInit+0x1c>)
    1648:	4798      	blx	r3
	spi27_init();
    164a:	4b04      	ldr	r3, [pc, #16]	; (165c <simSysInit+0x20>)
    164c:	4798      	blx	r3
}
    164e:	bd10      	pop	{r4, pc}
    1650:	00001449 	.word	0x00001449
    1654:	00001621 	.word	0x00001621
    1658:	00001535 	.word	0x00001535
    165c:	00000241 	.word	0x00000241

00001660 <main>:
{
    1660:	b510      	push	{r4, lr}
    simSysInit();
    1662:	4b01      	ldr	r3, [pc, #4]	; (1668 <main+0x8>)
    1664:	4798      	blx	r3
    1666:	e7fe      	b.n	1666 <main+0x6>
    1668:	0000163d 	.word	0x0000163d

0000166c <__gnu_thumb1_case_uqi>:
    166c:	b402      	push	{r1}
    166e:	4671      	mov	r1, lr
    1670:	0849      	lsrs	r1, r1, #1
    1672:	0049      	lsls	r1, r1, #1
    1674:	5c09      	ldrb	r1, [r1, r0]
    1676:	0049      	lsls	r1, r1, #1
    1678:	448e      	add	lr, r1
    167a:	bc02      	pop	{r1}
    167c:	4770      	bx	lr
    167e:	46c0      	nop			; (mov r8, r8)

00001680 <__udivsi3>:
    1680:	2200      	movs	r2, #0
    1682:	0843      	lsrs	r3, r0, #1
    1684:	428b      	cmp	r3, r1
    1686:	d374      	bcc.n	1772 <__udivsi3+0xf2>
    1688:	0903      	lsrs	r3, r0, #4
    168a:	428b      	cmp	r3, r1
    168c:	d35f      	bcc.n	174e <__udivsi3+0xce>
    168e:	0a03      	lsrs	r3, r0, #8
    1690:	428b      	cmp	r3, r1
    1692:	d344      	bcc.n	171e <__udivsi3+0x9e>
    1694:	0b03      	lsrs	r3, r0, #12
    1696:	428b      	cmp	r3, r1
    1698:	d328      	bcc.n	16ec <__udivsi3+0x6c>
    169a:	0c03      	lsrs	r3, r0, #16
    169c:	428b      	cmp	r3, r1
    169e:	d30d      	bcc.n	16bc <__udivsi3+0x3c>
    16a0:	22ff      	movs	r2, #255	; 0xff
    16a2:	0209      	lsls	r1, r1, #8
    16a4:	ba12      	rev	r2, r2
    16a6:	0c03      	lsrs	r3, r0, #16
    16a8:	428b      	cmp	r3, r1
    16aa:	d302      	bcc.n	16b2 <__udivsi3+0x32>
    16ac:	1212      	asrs	r2, r2, #8
    16ae:	0209      	lsls	r1, r1, #8
    16b0:	d065      	beq.n	177e <__udivsi3+0xfe>
    16b2:	0b03      	lsrs	r3, r0, #12
    16b4:	428b      	cmp	r3, r1
    16b6:	d319      	bcc.n	16ec <__udivsi3+0x6c>
    16b8:	e000      	b.n	16bc <__udivsi3+0x3c>
    16ba:	0a09      	lsrs	r1, r1, #8
    16bc:	0bc3      	lsrs	r3, r0, #15
    16be:	428b      	cmp	r3, r1
    16c0:	d301      	bcc.n	16c6 <__udivsi3+0x46>
    16c2:	03cb      	lsls	r3, r1, #15
    16c4:	1ac0      	subs	r0, r0, r3
    16c6:	4152      	adcs	r2, r2
    16c8:	0b83      	lsrs	r3, r0, #14
    16ca:	428b      	cmp	r3, r1
    16cc:	d301      	bcc.n	16d2 <__udivsi3+0x52>
    16ce:	038b      	lsls	r3, r1, #14
    16d0:	1ac0      	subs	r0, r0, r3
    16d2:	4152      	adcs	r2, r2
    16d4:	0b43      	lsrs	r3, r0, #13
    16d6:	428b      	cmp	r3, r1
    16d8:	d301      	bcc.n	16de <__udivsi3+0x5e>
    16da:	034b      	lsls	r3, r1, #13
    16dc:	1ac0      	subs	r0, r0, r3
    16de:	4152      	adcs	r2, r2
    16e0:	0b03      	lsrs	r3, r0, #12
    16e2:	428b      	cmp	r3, r1
    16e4:	d301      	bcc.n	16ea <__udivsi3+0x6a>
    16e6:	030b      	lsls	r3, r1, #12
    16e8:	1ac0      	subs	r0, r0, r3
    16ea:	4152      	adcs	r2, r2
    16ec:	0ac3      	lsrs	r3, r0, #11
    16ee:	428b      	cmp	r3, r1
    16f0:	d301      	bcc.n	16f6 <__udivsi3+0x76>
    16f2:	02cb      	lsls	r3, r1, #11
    16f4:	1ac0      	subs	r0, r0, r3
    16f6:	4152      	adcs	r2, r2
    16f8:	0a83      	lsrs	r3, r0, #10
    16fa:	428b      	cmp	r3, r1
    16fc:	d301      	bcc.n	1702 <__udivsi3+0x82>
    16fe:	028b      	lsls	r3, r1, #10
    1700:	1ac0      	subs	r0, r0, r3
    1702:	4152      	adcs	r2, r2
    1704:	0a43      	lsrs	r3, r0, #9
    1706:	428b      	cmp	r3, r1
    1708:	d301      	bcc.n	170e <__udivsi3+0x8e>
    170a:	024b      	lsls	r3, r1, #9
    170c:	1ac0      	subs	r0, r0, r3
    170e:	4152      	adcs	r2, r2
    1710:	0a03      	lsrs	r3, r0, #8
    1712:	428b      	cmp	r3, r1
    1714:	d301      	bcc.n	171a <__udivsi3+0x9a>
    1716:	020b      	lsls	r3, r1, #8
    1718:	1ac0      	subs	r0, r0, r3
    171a:	4152      	adcs	r2, r2
    171c:	d2cd      	bcs.n	16ba <__udivsi3+0x3a>
    171e:	09c3      	lsrs	r3, r0, #7
    1720:	428b      	cmp	r3, r1
    1722:	d301      	bcc.n	1728 <__udivsi3+0xa8>
    1724:	01cb      	lsls	r3, r1, #7
    1726:	1ac0      	subs	r0, r0, r3
    1728:	4152      	adcs	r2, r2
    172a:	0983      	lsrs	r3, r0, #6
    172c:	428b      	cmp	r3, r1
    172e:	d301      	bcc.n	1734 <__udivsi3+0xb4>
    1730:	018b      	lsls	r3, r1, #6
    1732:	1ac0      	subs	r0, r0, r3
    1734:	4152      	adcs	r2, r2
    1736:	0943      	lsrs	r3, r0, #5
    1738:	428b      	cmp	r3, r1
    173a:	d301      	bcc.n	1740 <__udivsi3+0xc0>
    173c:	014b      	lsls	r3, r1, #5
    173e:	1ac0      	subs	r0, r0, r3
    1740:	4152      	adcs	r2, r2
    1742:	0903      	lsrs	r3, r0, #4
    1744:	428b      	cmp	r3, r1
    1746:	d301      	bcc.n	174c <__udivsi3+0xcc>
    1748:	010b      	lsls	r3, r1, #4
    174a:	1ac0      	subs	r0, r0, r3
    174c:	4152      	adcs	r2, r2
    174e:	08c3      	lsrs	r3, r0, #3
    1750:	428b      	cmp	r3, r1
    1752:	d301      	bcc.n	1758 <__udivsi3+0xd8>
    1754:	00cb      	lsls	r3, r1, #3
    1756:	1ac0      	subs	r0, r0, r3
    1758:	4152      	adcs	r2, r2
    175a:	0883      	lsrs	r3, r0, #2
    175c:	428b      	cmp	r3, r1
    175e:	d301      	bcc.n	1764 <__udivsi3+0xe4>
    1760:	008b      	lsls	r3, r1, #2
    1762:	1ac0      	subs	r0, r0, r3
    1764:	4152      	adcs	r2, r2
    1766:	0843      	lsrs	r3, r0, #1
    1768:	428b      	cmp	r3, r1
    176a:	d301      	bcc.n	1770 <__udivsi3+0xf0>
    176c:	004b      	lsls	r3, r1, #1
    176e:	1ac0      	subs	r0, r0, r3
    1770:	4152      	adcs	r2, r2
    1772:	1a41      	subs	r1, r0, r1
    1774:	d200      	bcs.n	1778 <__udivsi3+0xf8>
    1776:	4601      	mov	r1, r0
    1778:	4152      	adcs	r2, r2
    177a:	4610      	mov	r0, r2
    177c:	4770      	bx	lr
    177e:	e7ff      	b.n	1780 <__udivsi3+0x100>
    1780:	b501      	push	{r0, lr}
    1782:	2000      	movs	r0, #0
    1784:	f000 f806 	bl	1794 <__aeabi_idiv0>
    1788:	bd02      	pop	{r1, pc}
    178a:	46c0      	nop			; (mov r8, r8)

0000178c <__aeabi_uidivmod>:
    178c:	2900      	cmp	r1, #0
    178e:	d0f7      	beq.n	1780 <__udivsi3+0x100>
    1790:	e776      	b.n	1680 <__udivsi3>
    1792:	4770      	bx	lr

00001794 <__aeabi_idiv0>:
    1794:	4770      	bx	lr
    1796:	46c0      	nop			; (mov r8, r8)

00001798 <__libc_init_array>:
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	2600      	movs	r6, #0
    179c:	4d0c      	ldr	r5, [pc, #48]	; (17d0 <__libc_init_array+0x38>)
    179e:	4c0d      	ldr	r4, [pc, #52]	; (17d4 <__libc_init_array+0x3c>)
    17a0:	1b64      	subs	r4, r4, r5
    17a2:	10a4      	asrs	r4, r4, #2
    17a4:	42a6      	cmp	r6, r4
    17a6:	d109      	bne.n	17bc <__libc_init_array+0x24>
    17a8:	2600      	movs	r6, #0
    17aa:	f000 f82d 	bl	1808 <_init>
    17ae:	4d0a      	ldr	r5, [pc, #40]	; (17d8 <__libc_init_array+0x40>)
    17b0:	4c0a      	ldr	r4, [pc, #40]	; (17dc <__libc_init_array+0x44>)
    17b2:	1b64      	subs	r4, r4, r5
    17b4:	10a4      	asrs	r4, r4, #2
    17b6:	42a6      	cmp	r6, r4
    17b8:	d105      	bne.n	17c6 <__libc_init_array+0x2e>
    17ba:	bd70      	pop	{r4, r5, r6, pc}
    17bc:	00b3      	lsls	r3, r6, #2
    17be:	58eb      	ldr	r3, [r5, r3]
    17c0:	4798      	blx	r3
    17c2:	3601      	adds	r6, #1
    17c4:	e7ee      	b.n	17a4 <__libc_init_array+0xc>
    17c6:	00b3      	lsls	r3, r6, #2
    17c8:	58eb      	ldr	r3, [r5, r3]
    17ca:	4798      	blx	r3
    17cc:	3601      	adds	r6, #1
    17ce:	e7f2      	b.n	17b6 <__libc_init_array+0x1e>
    17d0:	00001814 	.word	0x00001814
    17d4:	00001814 	.word	0x00001814
    17d8:	00001814 	.word	0x00001814
    17dc:	00001818 	.word	0x00001818

000017e0 <memset>:
    17e0:	0003      	movs	r3, r0
    17e2:	1882      	adds	r2, r0, r2
    17e4:	4293      	cmp	r3, r2
    17e6:	d100      	bne.n	17ea <memset+0xa>
    17e8:	4770      	bx	lr
    17ea:	7019      	strb	r1, [r3, #0]
    17ec:	3301      	adds	r3, #1
    17ee:	e7f9      	b.n	17e4 <memset+0x4>
    17f0:	42000800 	.word	0x42000800
    17f4:	42000c00 	.word	0x42000c00
    17f8:	42001000 	.word	0x42001000
    17fc:	42001400 	.word	0x42001400
    1800:	42001800 	.word	0x42001800
    1804:	42001c00 	.word	0x42001c00

00001808 <_init>:
    1808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    180e:	bc08      	pop	{r3}
    1810:	469e      	mov	lr, r3
    1812:	4770      	bx	lr

00001814 <__init_array_start>:
    1814:	000000dd 	.word	0x000000dd

00001818 <_fini>:
    1818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    181e:	bc08      	pop	{r3}
    1820:	469e      	mov	lr, r3
    1822:	4770      	bx	lr

00001824 <__fini_array_start>:
    1824:	000000b5 	.word	0x000000b5
